// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/@tensorflow/tfjs-core/dist/environment.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueryParams = getQueryParams;
exports.env = env;
exports.setEnvironmentGlobal = setEnvironmentGlobal;
exports.ENV = exports.Environment = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.
const TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';
/**
 * The environment contains evaluated flags as well as the registered platform.
 * This is always used as a global singleton and can be retrieved with
 * `tf.env()`.
 *
 * @doc {heading: 'Environment'}
 */

class Environment {
  // tslint:disable-next-line: no-any
  constructor(global) {
    this.global = global;
    this.flags = {};
    this.flagRegistry = {};
    this.urlFlags = {};
    this.populateURLFlags();
  }

  setPlatform(platformName, platform) {
    if (this.platform != null) {
      console.warn(`Platform ${this.platformName} has already been set. ` + `Overwriting the platform with ${platform}.`);
    }

    this.platformName = platformName;
    this.platform = platform;
  }

  registerFlag(flagName, evaluationFn, setHook) {
    this.flagRegistry[flagName] = {
      evaluationFn,
      setHook
    }; // Override the flag value from the URL. This has to happen here because the
    // environment is initialized before flags get registered.

    if (this.urlFlags[flagName] != null) {
      const flagValue = this.urlFlags[flagName];
      console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);
      this.set(flagName, flagValue);
    }
  }

  async getAsync(flagName) {
    if (flagName in this.flags) {
      return this.flags[flagName];
    }

    this.flags[flagName] = await this.evaluateFlag(flagName);
    return this.flags[flagName];
  }

  get(flagName) {
    if (flagName in this.flags) {
      return this.flags[flagName];
    }

    const flagValue = this.evaluateFlag(flagName);

    if (flagValue instanceof Promise) {
      throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` + `Please use getAsync() instead.`);
    }

    this.flags[flagName] = flagValue;
    return this.flags[flagName];
  }

  getNumber(flagName) {
    return this.get(flagName);
  }

  getBool(flagName) {
    return this.get(flagName);
  }

  getFlags() {
    return this.flags;
  } // For backwards compatibility.


  get features() {
    return this.flags;
  }

  set(flagName, value) {
    if (this.flagRegistry[flagName] == null) {
      throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);
    }

    this.flags[flagName] = value;

    if (this.flagRegistry[flagName].setHook != null) {
      this.flagRegistry[flagName].setHook(value);
    }
  }

  evaluateFlag(flagName) {
    if (this.flagRegistry[flagName] == null) {
      throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);
    }

    return this.flagRegistry[flagName].evaluationFn();
  }

  setFlags(flags) {
    this.flags = Object.assign({}, flags);
  }

  reset() {
    this.flags = {};
    this.urlFlags = {};
    this.populateURLFlags();
  }

  populateURLFlags() {
    if (typeof this.global === 'undefined' || typeof this.global.location === 'undefined' || typeof this.global.location.search === 'undefined') {
      return;
    }

    const urlParams = getQueryParams(this.global.location.search);

    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {
      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');
      keyValues.forEach(keyValue => {
        const [key, value] = keyValue.split(':');
        this.urlFlags[key] = parseValue(key, value);
      });
    }
  }

}

exports.Environment = Environment;

function getQueryParams(queryString) {
  const params = {};
  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {
    decodeParam(params, t[0], t[1]);
    return t.join('=');
  });
  return params;
}

function decodeParam(params, name, value) {
  params[decodeURIComponent(name)] = decodeURIComponent(value || '');
}

function parseValue(flagName, value) {
  value = value.toLowerCase();

  if (value === 'true' || value === 'false') {
    return value === 'true';
  } else if (`${+value}` === value) {
    return +value;
  }

  throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);
}
/**
 * Returns the current environment (a global singleton).
 *
 * The environment object contains the evaluated feature values as well as the
 * active platform.
 *
 * @doc {heading: 'Environment'}
 */


function env() {
  return ENV;
}

let ENV = null;
exports.ENV = ENV;

function setEnvironmentGlobal(environment) {
  exports.ENV = ENV = environment;
}
},{}],"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"node_modules/@tensorflow/tfjs-core/dist/global_util.js":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGlobalNamespace = getGlobalNamespace;
exports.getGlobal = getGlobal;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Note that the identifier globalNameSpace is scoped to this module, but will
// always resolve to the same global object regardless of how the module is
// resolved.
// tslint:disable-next-line:no-any
let globalNameSpace; // tslint:disable-next-line:no-any

function getGlobalNamespace() {
  if (globalNameSpace == null) {
    // tslint:disable-next-line:no-any
    let ns;

    if (typeof window !== 'undefined') {
      ns = window;
    } else if (typeof global !== 'undefined') {
      ns = global;
    } else if (typeof process !== 'undefined') {
      ns = process;
    } else if (typeof self !== 'undefined') {
      ns = self;
    } else {
      throw new Error('Could not find a global object');
    }

    globalNameSpace = ns;
  }

  return globalNameSpace;
} // tslint:disable-next-line:no-any


function getGlobalMap() {
  const ns = getGlobalNamespace();

  if (ns._tfGlobals == null) {
    ns._tfGlobals = new Map();
  }

  return ns._tfGlobals;
}
/**
 * Returns a globally accessible 'singleton' object.
 *
 * @param key the name of the object
 * @param init a function to initialize to initialize this object
 *             the first time it is fetched.
 */


function getGlobal(key, init) {
  const globalMap = getGlobalMap();

  if (globalMap.has(key)) {
    return globalMap.get(key);
  } else {
    const singleton = init();
    globalMap.set(key, singleton);
    return globalMap.get(key);
  }
}
},{"process":"node_modules/process/browser.js"}],"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pow = exports.Pool = exports.PadV2 = exports.OneHot = exports.OnesLike = exports.NonMaxSuppressionV5 = exports.NonMaxSuppressionV4 = exports.NonMaxSuppressionV3 = exports.NotEqual = exports.Negate = exports.Multiply = exports.Mod = exports.Minimum = exports.Min = exports.Mean = exports.MaxPoolWithArgmax = exports.MaxPool3DBackprop = exports.MaxPool3D = exports.MaxPoolBackprop = exports.MaxPool = exports.Maximum = exports.Max = exports.LRNBackprop = exports.LRN = exports.LogSoftmax = exports.LogicalOr = exports.LogicalNot = exports.LogicalAnd = exports.Log1p = exports.Log = exports.LinSpace = exports.LessEqual = exports.Less = exports.IsNan = exports.IsInf = exports.IsFinite = exports.Imag = exports.IFFT = exports.Identity = exports.GreaterEqual = exports.Greater = exports.GatherNd = exports.GatherV2 = exports.FusedBatchNorm = exports.FloorDiv = exports.Floor = exports.FlipLeftRight = exports.Fill = exports.FFT = exports.Expm1 = exports.Exp = exports.Equal = exports.Erf = exports.EluGrad = exports.Elu = exports.Div = exports.Dilation2DBackpropFilter = exports.Dilation2DBackpropInput = exports.Dilation2D = exports.Diag = exports.DepthwiseConv2dNativeBackpropInput = exports.DepthwiseConv2dNativeBackpropFilter = exports.DepthwiseConv2dNative = exports.DepthToSpace = exports.CropAndResize = exports.Cumsum = exports.Cosh = exports.Cos = exports.Conv3DBackpropInputV2 = exports.Conv3DBackpropFilterV2 = exports.Conv3D = exports.Conv2DBackpropInput = exports.Conv2DBackpropFilter = exports.Conv2D = exports.Concat = exports.Complex = exports.ClipByValue = exports.Ceil = exports.Cast = exports.BroadcastTo = exports.BatchToSpaceND = exports.BatchMatMul = exports.AvgPool3DBackprop = exports.AvgPool3D = exports.AvgPoolBackprop = exports.AvgPool = exports.Atan2 = exports.Atanh = exports.Atan = exports.Asinh = exports.Asin = exports.ArgMin = exports.ArgMax = exports.Any = exports.All = exports.AddN = exports.Add = exports.Acosh = exports.Acos = exports.Abs = void 0;
exports.FusedDepthwiseConv2D = exports.FusedConv2D = exports._FusedMatMul = exports.RotateWithOffset = exports.FromPixels = exports.Step = exports.ZerosLike = exports.UnsortedSegmentSum = exports.Unpack = exports.Transpose = exports.TopK = exports.Tile = exports.Tanh = exports.Tan = exports.StridedSlice = exports.SparseToDense = exports.Sub = exports.Square = exports.SquaredDifference = exports.Softmax = exports.SplitV = exports.SpaceToBatchND = exports.Sum = exports.Sqrt = exports.Softplus = exports.Sigmoid = exports.Sign = exports.Sinh = exports.Sin = exports.Slice = exports.Selu = exports.SelectV2 = exports.ScatterNd = exports.Rsqrt = exports.Round = exports.Reverse = exports.Relu6 = exports.ResizeBilinearGrad = exports.ResizeBilinear = exports.ResizeNearestNeighborGrad = exports.ResizeNearestNeighbor = exports.Reshape = exports.Relu = exports.Reciprocal = exports.Real = exports.Range = exports.Prod = exports.Prelu = void 0;
const Abs = 'Abs';
exports.Abs = Abs;
const Acos = 'Acos';
exports.Acos = Acos;
const Acosh = 'Acosh';
exports.Acosh = Acosh;
const Add = 'Add';
exports.Add = Add;
const AddN = 'AddN';
exports.AddN = AddN;
const All = 'All';
exports.All = All;
const Any = 'Any';
exports.Any = Any;
const ArgMax = 'ArgMax';
exports.ArgMax = ArgMax;
const ArgMin = 'ArgMin';
exports.ArgMin = ArgMin;
const Asin = 'Asin';
exports.Asin = Asin;
const Asinh = 'Asinh';
exports.Asinh = Asinh;
const Atan = 'Atan';
exports.Atan = Atan;
const Atanh = 'Atanh';
exports.Atanh = Atanh;
const Atan2 = 'Atan2';
exports.Atan2 = Atan2;
const AvgPool = 'AvgPool';
exports.AvgPool = AvgPool;
const AvgPoolBackprop = 'AvgPoolBackprop';
exports.AvgPoolBackprop = AvgPoolBackprop;
const AvgPool3D = 'AvgPool3D';
exports.AvgPool3D = AvgPool3D;
const AvgPool3DBackprop = 'AvgPool3DBackprop';
exports.AvgPool3DBackprop = AvgPool3DBackprop;
const BatchMatMul = 'BatchMatMul';
exports.BatchMatMul = BatchMatMul;
const BatchToSpaceND = 'BatchToSpaceND';
exports.BatchToSpaceND = BatchToSpaceND;
const BroadcastTo = 'BroadcastTo';
exports.BroadcastTo = BroadcastTo;
const Cast = 'Cast';
exports.Cast = Cast;
const Ceil = 'Ceil';
exports.Ceil = Ceil;
const ClipByValue = 'ClipByValue';
exports.ClipByValue = ClipByValue;
const Complex = 'Complex';
exports.Complex = Complex;
const Concat = 'Concat';
exports.Concat = Concat;
const Conv2D = 'Conv2D';
exports.Conv2D = Conv2D;
const Conv2DBackpropFilter = 'Conv2DBackpropFilter';
exports.Conv2DBackpropFilter = Conv2DBackpropFilter;
const Conv2DBackpropInput = 'Conv2DBackpropInput';
exports.Conv2DBackpropInput = Conv2DBackpropInput;
const Conv3D = 'Conv3D';
exports.Conv3D = Conv3D;
const Conv3DBackpropFilterV2 = 'Conv3DBackpropFilterV2';
exports.Conv3DBackpropFilterV2 = Conv3DBackpropFilterV2;
const Conv3DBackpropInputV2 = 'Conv3DBackpropInputV2';
exports.Conv3DBackpropInputV2 = Conv3DBackpropInputV2;
const Cos = 'Cos';
exports.Cos = Cos;
const Cosh = 'Cosh';
exports.Cosh = Cosh;
const Cumsum = 'Cumsum';
exports.Cumsum = Cumsum;
const CropAndResize = 'CropAndResize';
exports.CropAndResize = CropAndResize;
const DepthToSpace = 'DepthToSpace';
exports.DepthToSpace = DepthToSpace;
const DepthwiseConv2dNative = 'DepthwiseConv2dNative';
exports.DepthwiseConv2dNative = DepthwiseConv2dNative;
const DepthwiseConv2dNativeBackpropFilter = 'DepthwiseConv2dNativeBackpropFilter';
exports.DepthwiseConv2dNativeBackpropFilter = DepthwiseConv2dNativeBackpropFilter;
const DepthwiseConv2dNativeBackpropInput = 'DepthwiseConv2dNativeBackpropInput';
exports.DepthwiseConv2dNativeBackpropInput = DepthwiseConv2dNativeBackpropInput;
const Diag = 'Diag';
exports.Diag = Diag;
const Dilation2D = 'Dilation2D';
exports.Dilation2D = Dilation2D;
const Dilation2DBackpropInput = 'Dilation2DBackpropInput';
exports.Dilation2DBackpropInput = Dilation2DBackpropInput;
const Dilation2DBackpropFilter = 'Dilation2DBackpropFilter';
exports.Dilation2DBackpropFilter = Dilation2DBackpropFilter;
const Div = 'Div';
exports.Div = Div;
const Elu = 'Elu';
exports.Elu = Elu;
const EluGrad = 'EluGrad';
exports.EluGrad = EluGrad;
const Erf = 'Erf';
exports.Erf = Erf;
const Equal = 'Equal';
exports.Equal = Equal;
const Exp = 'Exp';
exports.Exp = Exp;
const Expm1 = 'Expm1';
exports.Expm1 = Expm1;
const FFT = 'FFT';
exports.FFT = FFT;
const Fill = 'Fill';
exports.Fill = Fill;
const FlipLeftRight = 'FlipLeftRight';
exports.FlipLeftRight = FlipLeftRight;
const Floor = 'Floor';
exports.Floor = Floor;
const FloorDiv = 'FloorDiv';
exports.FloorDiv = FloorDiv;
const FusedBatchNorm = 'FusedBatchNorm';
exports.FusedBatchNorm = FusedBatchNorm;
const GatherV2 = 'GatherV2';
exports.GatherV2 = GatherV2;
const GatherNd = 'GatherNd';
exports.GatherNd = GatherNd;
const Greater = 'Greater';
exports.Greater = Greater;
const GreaterEqual = 'GreaterEqual';
exports.GreaterEqual = GreaterEqual;
const Identity = 'Identity';
exports.Identity = Identity;
const IFFT = 'IFFT';
exports.IFFT = IFFT;
const Imag = 'Imag';
exports.Imag = Imag;
const IsFinite = 'IsFinite';
exports.IsFinite = IsFinite;
const IsInf = 'IsInf';
exports.IsInf = IsInf;
const IsNan = 'IsNan';
exports.IsNan = IsNan;
const Less = 'Less';
exports.Less = Less;
const LessEqual = 'LessEqual';
exports.LessEqual = LessEqual;
const LinSpace = 'LinSpace';
exports.LinSpace = LinSpace;
const Log = 'Log';
exports.Log = Log;
const Log1p = 'Log1p';
exports.Log1p = Log1p;
const LogicalAnd = 'LogicalAnd';
exports.LogicalAnd = LogicalAnd;
const LogicalNot = 'LogicalNot';
exports.LogicalNot = LogicalNot;
const LogicalOr = 'LogicalOr';
exports.LogicalOr = LogicalOr;
const LogSoftmax = 'LogSoftmax';
exports.LogSoftmax = LogSoftmax;
const LRN = 'LRN';
exports.LRN = LRN;
const LRNBackprop = 'LRNBackprop';
exports.LRNBackprop = LRNBackprop;
const Max = 'Max';
exports.Max = Max;
const Maximum = 'Maximum';
exports.Maximum = Maximum;
const MaxPool = 'MaxPool';
exports.MaxPool = MaxPool;
const MaxPoolBackprop = 'MaxPoolBackprop';
exports.MaxPoolBackprop = MaxPoolBackprop;
const MaxPool3D = 'MaxPool3D';
exports.MaxPool3D = MaxPool3D;
const MaxPool3DBackprop = 'MaxPool3DBackprop';
exports.MaxPool3DBackprop = MaxPool3DBackprop;
const MaxPoolWithArgmax = 'MaxPoolWithArgmax';
exports.MaxPoolWithArgmax = MaxPoolWithArgmax;
const Mean = 'Mean';
exports.Mean = Mean;
const Min = 'Min';
exports.Min = Min;
const Minimum = 'Minimum';
exports.Minimum = Minimum;
const Mod = 'Mod';
exports.Mod = Mod;
const Multiply = 'Multiply';
exports.Multiply = Multiply;
const Negate = 'Negate';
exports.Negate = Negate;
const NotEqual = 'NotEqual';
exports.NotEqual = NotEqual;
const NonMaxSuppressionV3 = 'NonMaxSuppressionV3';
exports.NonMaxSuppressionV3 = NonMaxSuppressionV3;
const NonMaxSuppressionV4 = 'NonMaxSuppressionV4';
exports.NonMaxSuppressionV4 = NonMaxSuppressionV4;
const NonMaxSuppressionV5 = 'NonMaxSuppressionV5';
exports.NonMaxSuppressionV5 = NonMaxSuppressionV5;
const OnesLike = 'OnesLike';
exports.OnesLike = OnesLike;
const OneHot = 'OneHot';
exports.OneHot = OneHot;
const PadV2 = 'PadV2';
exports.PadV2 = PadV2;
const Pool = 'Pool';
exports.Pool = Pool;
const Pow = 'Pow';
exports.Pow = Pow;
const Prelu = 'Prelu';
exports.Prelu = Prelu;
const Prod = 'Prod';
exports.Prod = Prod;
const Range = 'Range';
exports.Range = Range;
const Real = 'Real';
exports.Real = Real;
const Reciprocal = 'Reciprocal';
exports.Reciprocal = Reciprocal;
const Relu = 'Relu';
exports.Relu = Relu;
const Reshape = 'Reshape';
exports.Reshape = Reshape;
const ResizeNearestNeighbor = 'ResizeNearestNeighbor';
exports.ResizeNearestNeighbor = ResizeNearestNeighbor;
const ResizeNearestNeighborGrad = 'ResizeNearestNeighborGrad';
exports.ResizeNearestNeighborGrad = ResizeNearestNeighborGrad;
const ResizeBilinear = 'ResizeBilinear';
exports.ResizeBilinear = ResizeBilinear;
const ResizeBilinearGrad = 'ResizeBilinearGrad';
exports.ResizeBilinearGrad = ResizeBilinearGrad;
const Relu6 = 'Relu6';
exports.Relu6 = Relu6;
const Reverse = 'Reverse';
exports.Reverse = Reverse;
const Round = 'Round';
exports.Round = Round;
const Rsqrt = 'Rsqrt';
exports.Rsqrt = Rsqrt;
const ScatterNd = 'ScatterNd';
exports.ScatterNd = ScatterNd;
const SelectV2 = 'SelectV2';
exports.SelectV2 = SelectV2;
const Selu = 'Selu';
exports.Selu = Selu;
const Slice = 'Slice';
exports.Slice = Slice;
const Sin = 'Sin';
exports.Sin = Sin;
const Sinh = 'Sinh';
exports.Sinh = Sinh;
const Sign = 'Sign';
exports.Sign = Sign;
const Sigmoid = 'Sigmoid';
exports.Sigmoid = Sigmoid;
const Softplus = 'Softplus';
exports.Softplus = Softplus;
const Sqrt = 'Sqrt';
exports.Sqrt = Sqrt;
const Sum = 'Sum';
exports.Sum = Sum;
const SpaceToBatchND = 'SpaceToBatchND';
exports.SpaceToBatchND = SpaceToBatchND;
const SplitV = 'SplitV';
exports.SplitV = SplitV;
const Softmax = 'Softmax';
exports.Softmax = Softmax;
const SquaredDifference = 'SquaredDifference';
exports.SquaredDifference = SquaredDifference;
const Square = 'Square';
exports.Square = Square;
const Sub = 'Sub';
exports.Sub = Sub;
const SparseToDense = 'SparseToDense';
exports.SparseToDense = SparseToDense;
const StridedSlice = 'StridedSlice';
exports.StridedSlice = StridedSlice;
const Tan = 'Tan';
exports.Tan = Tan;
const Tanh = 'Tanh';
exports.Tanh = Tanh;
const Tile = 'Tile';
exports.Tile = Tile;
const TopK = 'TopK';
exports.TopK = TopK;
const Transpose = 'Transpose';
exports.Transpose = Transpose;
const Unpack = 'Unpack';
exports.Unpack = Unpack;
const UnsortedSegmentSum = 'UnsortedSegmentSum';
exports.UnsortedSegmentSum = UnsortedSegmentSum;
const ZerosLike = 'ZerosLike';
/**
 * TensorFlow.js-only kernels
 */

exports.ZerosLike = ZerosLike;
const Step = 'Step';
exports.Step = Step;
const FromPixels = 'FromPixels';
exports.FromPixels = FromPixels;
const RotateWithOffset = 'RotateWithOffset';
exports.RotateWithOffset = RotateWithOffset;
const _FusedMatMul = '_FusedMatMul';
exports._FusedMatMul = _FusedMatMul;
const FusedConv2D = 'FusedConv2D';
exports.FusedConv2D = FusedConv2D;
const FusedDepthwiseConv2D = 'FusedDepthwiseConv2D';
exports.FusedDepthwiseConv2D = FusedDepthwiseConv2D;
},{}],"node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKernel = getKernel;
exports.getGradient = getGradient;
exports.getKernelsForBackend = getKernelsForBackend;
exports.registerKernel = registerKernel;
exports.registerGradient = registerGradient;
exports.unregisterKernel = unregisterKernel;
exports.unregisterGradient = unregisterGradient;

var _environment = require("./environment");

var _global_util = require("./global_util");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kernelRegistry = (0, _global_util.getGlobal)('kernelRegistry', () => new Map());
const gradRegistry = (0, _global_util.getGlobal)('gradRegistry', () => new Map());
/**
 * Returns the kernel function (code) associated with the provided names.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 */

function getKernel(kernelName, backendName) {
  const key = makeKey(kernelName, backendName);
  return kernelRegistry.get(key);
}
/**
 * Returns the registered gradient info associated with the provided kernel.
 * @param kernelName The official TF kernel name.
 */


function getGradient(kernelName) {
  return gradRegistry.get(kernelName);
}

function getKernelsForBackend(backendName) {
  const it = kernelRegistry.entries();
  const result = [];

  while (true) {
    const {
      done,
      value
    } = it.next();

    if (done) {
      break;
    }

    const [key, config] = value;
    const [backend] = key.split('_');

    if (backend === backendName) {
      result.push(config);
    }
  }

  return result;
}
/**
 * Registers the function (forward pass) for the kernel in a global registry.
 *
 * @param config A config object with the following properties:
 * - `kernelName` The official name of the kernel.
 * - `backendName` The official name of the backend.
 * - `kernelFunc` The function to run during the forward pass of the kernel.
 * - `setupFunc` Optional. Gets called once, after the backend initializes.
 * - `disposeFunc` Optional. Gets called once, right before the backend is
 * disposed.
 */


function registerKernel(config) {
  const {
    kernelName,
    backendName
  } = config;
  const key = makeKey(kernelName, backendName);

  if (kernelRegistry.has(key)) {
    console.warn(`The kernel '${kernelName}' for backend ` + `'${backendName}' is already registered`);
  }

  kernelRegistry.set(key, config);
}
/**
 * Registers a gradient function for a given kernel in the global registry,
 * to be used during the back-propagation of that kernel.
 *
 * @param config An object with the following properties:
 * - `kernelName` The name of the kernel that the gradient function is for.
 * - `gradFunc` The function to run during back-propagation.
 */


function registerGradient(config) {
  const {
    kernelName
  } = config;

  if (gradRegistry.has(kernelName)) {
    // TODO (yassogba) after 3.0 assess whether we need to keep this gated
    // to debug mode.
    if ((0, _environment.env)().getBool('DEBUG')) {
      console.warn(`Overriding the gradient for '${kernelName}'`);
    }
  }

  gradRegistry.set(kernelName, config);
}
/**
 * Removes the kernel function from the registry.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 *
 */


function unregisterKernel(kernelName, backendName) {
  const key = makeKey(kernelName, backendName);

  if (!kernelRegistry.has(key)) {
    throw new Error(`The kernel '${kernelName}' for backend ` + `'${backendName}' is not registered`);
  }

  kernelRegistry.delete(key);
}
/** Removes the registered gradient from the global registry. */


function unregisterGradient(kernelName) {
  if (!gradRegistry.has(kernelName)) {
    throw new Error(`The gradient '${kernelName}' for backend is not registered`);
  }

  gradRegistry.delete(kernelName);
}

function makeKey(kernelName, backendName) {
  return `${backendName}_${kernelName}`;
}
},{"./environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","./global_util":"node_modules/@tensorflow/tfjs-core/dist/global_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffle = shuffle;
exports.clamp = clamp;
exports.nearestLargerEven = nearestLargerEven;
exports.sum = sum;
exports.randUniform = randUniform;
exports.distSquared = distSquared;
exports.assert = assert;
exports.assertShapesMatch = assertShapesMatch;
exports.assertNonNull = assertNonNull;
exports.flatten = flatten;
exports.sizeFromShape = sizeFromShape;
exports.isScalarShape = isScalarShape;
exports.arraysEqual = arraysEqual;
exports.isInt = isInt;
exports.tanh = tanh;
exports.sizeToSquarishShape = sizeToSquarishShape;
exports.createShuffledIndices = createShuffledIndices;
exports.rightPad = rightPad;
exports.repeatedTry = repeatedTry;
exports.inferFromImplicitShape = inferFromImplicitShape;
exports.parseAxisParam = parseAxisParam;
exports.squeezeShape = squeezeShape;
exports.getTypedArrayFromDType = getTypedArrayFromDType;
exports.getArrayFromDType = getArrayFromDType;
exports.checkConversionForErrors = checkConversionForErrors;
exports.isValidDtype = isValidDtype;
exports.hasEncodingLoss = hasEncodingLoss;
exports.isTypedArray = isTypedArray;
exports.bytesPerElement = bytesPerElement;
exports.bytesFromStringArray = bytesFromStringArray;
exports.isString = isString;
exports.isBoolean = isBoolean;
exports.isNumber = isNumber;
exports.inferDtype = inferDtype;
exports.isFunction = isFunction;
exports.nearestDivisor = nearestDivisor;
exports.computeStrides = computeStrides;
exports.toTypedArray = toTypedArray;
exports.toNestedArray = toNestedArray;
exports.makeOnesTypedArray = makeOnesTypedArray;
exports.makeZerosTypedArray = makeZerosTypedArray;
exports.makeZerosNestedTypedArray = makeZerosNestedTypedArray;
exports.now = now;
exports.assertNonNegativeIntegerDimensions = assertNonNegativeIntegerDimensions;
exports.fetch = fetch;
exports.encodeString = encodeString;
exports.decodeString = decodeString;
exports.locToIndex = locToIndex;
exports.indexToLoc = indexToLoc;

var _environment = require("./environment");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Shuffles the array in-place using Fisher-Yates algorithm.
 *
 * ```js
 * const a = [1, 2, 3, 4, 5];
 * tf.util.shuffle(a);
 * console.log(a);
 * ```
 *
 * @param array The array to shuffle in-place.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
// tslint:disable-next-line:no-any
function shuffle(array) {
  let counter = array.length;
  let temp = 0;
  let index = 0; // While there are elements in the array

  while (counter > 0) {
    // Pick a random index
    index = Math.random() * counter | 0; // Decrease counter by 1

    counter--; // And swap the last element with it

    temp = array[counter];
    array[counter] = array[index];
    array[index] = temp;
  }
}
/** Clamps a value to a specified range. */


function clamp(min, x, max) {
  return Math.max(min, Math.min(x, max));
}

function nearestLargerEven(val) {
  return val % 2 === 0 ? val : val + 1;
}

function sum(arr) {
  let sum = 0;

  for (let i = 0; i < arr.length; i++) {
    sum += arr[i];
  }

  return sum;
}
/**
 * Returns a sample from a uniform [a, b) distribution.
 *
 * @param a The minimum support (inclusive).
 * @param b The maximum support (exclusive).
 * @return A pseudorandom number on the half-open interval [a,b).
 */


function randUniform(a, b) {
  const r = Math.random();
  return b * r + (1 - r) * a;
}
/** Returns the squared Euclidean distance between two vectors. */


function distSquared(a, b) {
  let result = 0;

  for (let i = 0; i < a.length; i++) {
    const diff = Number(a[i]) - Number(b[i]);
    result += diff * diff;
  }

  return result;
}
/**
 * Asserts that the expression is true. Otherwise throws an error with the
 * provided message.
 *
 * ```js
 * const x = 2;
 * tf.util.assert(x === 2, 'x is not 2');
 * ```
 *
 * @param expr The expression to assert (as a boolean).
 * @param msg A function that returns the message to report when throwing an
 *     error. We use a function for performance reasons.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */


function assert(expr, msg) {
  if (!expr) {
    throw new Error(typeof msg === 'string' ? msg : msg());
  }
}

function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {
  assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
}

function assertNonNull(a) {
  assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);
} // NOTE: We explicitly type out what T extends instead of any so that
// util.flatten on a nested array of number doesn't try to infer T as a
// number[][], causing us to explicitly type util.flatten<number>().

/**
 *  Flattens an arbitrarily nested array.
 *
 * ```js
 * const a = [[1, 2], [3, 4], [5, [6, [7]]]];
 * const flat = tf.util.flatten(a);
 * console.log(flat);
 * ```
 *
 *  @param arr The nested array to flatten.
 *  @param result The destination array which holds the elements.
 *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults
 *      to false.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */


function flatten(arr, result = [], skipTypedArray = false) {
  if (result == null) {
    result = [];
  }

  if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {
    for (let i = 0; i < arr.length; ++i) {
      flatten(arr[i], result, skipTypedArray);
    }
  } else {
    result.push(arr);
  }

  return result;
}
/**
 * Returns the size (number of elements) of the tensor given its shape.
 *
 * ```js
 * const shape = [3, 4, 2];
 * const size = tf.util.sizeFromShape(shape);
 * console.log(size);
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */


function sizeFromShape(shape) {
  if (shape.length === 0) {
    // Scalar.
    return 1;
  }

  let size = shape[0];

  for (let i = 1; i < shape.length; i++) {
    size *= shape[i];
  }

  return size;
}

function isScalarShape(shape) {
  return shape.length === 0;
}

function arraysEqual(n1, n2) {
  if (n1 === n2) {
    return true;
  }

  if (n1 == null || n2 == null) {
    return false;
  }

  if (n1.length !== n2.length) {
    return false;
  }

  for (let i = 0; i < n1.length; i++) {
    if (n1[i] !== n2[i]) {
      return false;
    }
  }

  return true;
}

function isInt(a) {
  return a % 1 === 0;
}

function tanh(x) {
  // tslint:disable-next-line:no-any
  if (Math.tanh != null) {
    // tslint:disable-next-line:no-any
    return Math.tanh(x);
  }

  if (x === Infinity) {
    return 1;
  } else if (x === -Infinity) {
    return -1;
  } else {
    const e2x = Math.exp(2 * x);
    return (e2x - 1) / (e2x + 1);
  }
}

function sizeToSquarishShape(size) {
  const width = Math.ceil(Math.sqrt(size));
  return [width, Math.ceil(size / width)];
}
/**
 * Creates a new array with randomized indicies to a given quantity.
 *
 * ```js
 * const randomTen = tf.util.createShuffledIndices(10);
 * console.log(randomTen);
 * ```
 *
 * @param number Quantity of how many shuffled indicies to create.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */


function createShuffledIndices(n) {
  const shuffledIndices = new Uint32Array(n);

  for (let i = 0; i < n; ++i) {
    shuffledIndices[i] = i;
  }

  shuffle(shuffledIndices);
  return shuffledIndices;
}

function rightPad(a, size) {
  if (size <= a.length) {
    return a;
  }

  return a + ' '.repeat(size - a.length);
}

function repeatedTry(checkFn, delayFn = counter => 0, maxCounter) {
  return new Promise((resolve, reject) => {
    let tryCount = 0;

    const tryFn = () => {
      if (checkFn()) {
        resolve();
        return;
      }

      tryCount++;
      const nextBackoff = delayFn(tryCount);

      if (maxCounter != null && tryCount >= maxCounter) {
        reject();
        return;
      }

      setTimeout(tryFn, nextBackoff);
    };

    tryFn();
  });
}
/**
 * Given the full size of the array and a shape that may contain -1 as the
 * implicit dimension, returns the inferred shape where -1 is replaced.
 * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].
 *
 * @param shape The shape, which may contain -1 in some dimension.
 * @param size The full size (number of elements) of the array.
 * @return The inferred shape where -1 is replaced with the inferred size.
 */


function inferFromImplicitShape(shape, size) {
  let shapeProd = 1;
  let implicitIdx = -1;

  for (let i = 0; i < shape.length; ++i) {
    if (shape[i] >= 0) {
      shapeProd *= shape[i];
    } else if (shape[i] === -1) {
      if (implicitIdx !== -1) {
        throw Error(`Shapes can only have 1 implicit size. ` + `Found -1 at dim ${implicitIdx} and dim ${i}`);
      }

      implicitIdx = i;
    } else if (shape[i] < 0) {
      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);
    }
  }

  if (implicitIdx === -1) {
    if (size > 0 && size !== shapeProd) {
      throw Error(`Size(${size}) must match the product of shape ${shape}`);
    }

    return shape;
  }

  if (shapeProd === 0) {
    throw Error(`Cannot infer the missing size in [${shape}] when ` + `there are 0 elements`);
  }

  if (size % shapeProd !== 0) {
    throw Error(`The implicit shape can't be a fractional number. ` + `Got ${size} / ${shapeProd}`);
  }

  const newShape = shape.slice();
  newShape[implicitIdx] = size / shapeProd;
  return newShape;
}

function parseAxisParam(axis, shape) {
  const rank = shape.length; // Normalize input

  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis); // Check for valid range

  assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` + `got axis ${axis}`); // Check for only integers

  assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` + `got axis ${axis}`); // Handle negative axis.

  return axis.map(a => a < 0 ? rank + a : a);
}
/** Reduces the shape by removing all dimensions of shape 1. */


function squeezeShape(shape, axis) {
  const newShape = [];
  const keptDims = [];
  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;
  const axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();
  let j = 0;

  for (let i = 0; i < shape.length; ++i) {
    if (axes != null) {
      if (axes[j] === i && shape[i] !== 1) {
        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);
      }

      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {
        newShape.push(shape[i]);
        keptDims.push(i);
      }

      if (axes[j] <= i) {
        j++;
      }
    }

    if (shape[i] !== 1) {
      newShape.push(shape[i]);
      keptDims.push(i);
    }
  }

  return {
    newShape,
    keptDims
  };
}

function getTypedArrayFromDType(dtype, size) {
  let values = null;

  if (dtype == null || dtype === 'float32') {
    values = new Float32Array(size);
  } else if (dtype === 'int32') {
    values = new Int32Array(size);
  } else if (dtype === 'bool') {
    values = new Uint8Array(size);
  } else {
    throw new Error(`Unknown data type ${dtype}`);
  }

  return values;
}

function getArrayFromDType(dtype, size) {
  let values = null;

  if (dtype == null || dtype === 'float32') {
    values = new Float32Array(size);
  } else if (dtype === 'int32') {
    values = new Int32Array(size);
  } else if (dtype === 'bool') {
    values = new Uint8Array(size);
  } else if (dtype === 'string') {
    values = new Array(size);
  } else {
    throw new Error(`Unknown data type ${dtype}`);
  }

  return values;
}

function checkConversionForErrors(vals, dtype) {
  for (let i = 0; i < vals.length; i++) {
    const num = vals[i];

    if (isNaN(num) || !isFinite(num)) {
      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);
    }
  }
}
/** Returns true if the dtype is valid. */


function isValidDtype(dtype) {
  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' || dtype === 'int32' || dtype === 'string';
}
/**
 * Returns true if the new type can't encode the old type without loss of
 * precision.
 */


function hasEncodingLoss(oldType, newType) {
  if (newType === 'complex64') {
    return false;
  }

  if (newType === 'float32' && oldType !== 'complex64') {
    return false;
  }

  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {
    return false;
  }

  if (newType === 'bool' && oldType === 'bool') {
    return false;
  }

  return true;
}

function isTypedArray(a) {
  return a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array;
}

function bytesPerElement(dtype) {
  if (dtype === 'float32' || dtype === 'int32') {
    return 4;
  } else if (dtype === 'complex64') {
    return 8;
  } else if (dtype === 'bool') {
    return 1;
  } else {
    throw new Error(`Unknown dtype ${dtype}`);
  }
}
/**
 * Returns the approximate number of bytes allocated in the string array - 2
 * bytes per character. Computing the exact bytes for a native string in JS is
 * not possible since it depends on the encoding of the html page that serves
 * the website.
 */


function bytesFromStringArray(arr) {
  if (arr == null) {
    return 0;
  }

  let bytes = 0;
  arr.forEach(x => bytes += x.length);
  return bytes;
}
/** Returns true if the value is a string. */


function isString(value) {
  return typeof value === 'string' || value instanceof String;
}

function isBoolean(value) {
  return typeof value === 'boolean';
}

function isNumber(value) {
  return typeof value === 'number';
}

function inferDtype(values) {
  if (Array.isArray(values)) {
    return inferDtype(values[0]);
  }

  if (values instanceof Float32Array) {
    return 'float32';
  } else if (values instanceof Int32Array || values instanceof Uint8Array) {
    return 'int32';
  } else if (isNumber(values)) {
    return 'float32';
  } else if (isString(values)) {
    return 'string';
  } else if (isBoolean(values)) {
    return 'bool';
  }

  return 'float32';
}

function isFunction(f) {
  return !!(f && f.constructor && f.call && f.apply);
}

function nearestDivisor(size, start) {
  for (let i = start; i < size; ++i) {
    if (size % i === 0) {
      return i;
    }
  }

  return size;
}

function computeStrides(shape) {
  const rank = shape.length;

  if (rank < 2) {
    return [];
  } // Last dimension has implicit stride of 1, thus having D-1 (instead of D)
  // strides.


  const strides = new Array(rank - 1);
  strides[rank - 2] = shape[rank - 1];

  for (let i = rank - 3; i >= 0; --i) {
    strides[i] = strides[i + 1] * shape[i + 1];
  }

  return strides;
}

function toTypedArray(a, dtype) {
  if (dtype === 'string') {
    throw new Error('Cannot convert a string[] to a TypedArray');
  }

  if (Array.isArray(a)) {
    a = flatten(a);
  }

  if ((0, _environment.env)().getBool('DEBUG')) {
    checkConversionForErrors(a, dtype);
  }

  if (noConversionNeeded(a, dtype)) {
    return a;
  }

  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
    return new Float32Array(a);
  } else if (dtype === 'int32') {
    return new Int32Array(a);
  } else if (dtype === 'bool') {
    const bool = new Uint8Array(a.length);

    for (let i = 0; i < bool.length; ++i) {
      if (Math.round(a[i]) !== 0) {
        bool[i] = 1;
      }
    }

    return bool;
  } else {
    throw new Error(`Unknown data type ${dtype}`);
  }
}

function createNestedArray(offset, shape, a) {
  const ret = new Array();

  if (shape.length === 1) {
    const d = shape[0];

    for (let i = 0; i < d; i++) {
      ret[i] = a[offset + i];
    }
  } else {
    const d = shape[0];
    const rest = shape.slice(1);
    const len = rest.reduce((acc, c) => acc * c);

    for (let i = 0; i < d; i++) {
      ret[i] = createNestedArray(offset + i * len, rest, a);
    }
  }

  return ret;
} // Provide a nested array of TypedArray in given shape.


function toNestedArray(shape, a) {
  if (shape.length === 0) {
    // Scalar type should return a single number.
    return a[0];
  }

  const size = shape.reduce((acc, c) => acc * c);

  if (size === 0) {
    // A tensor with shape zero should be turned into empty list.
    return [];
  }

  if (size !== a.length) {
    throw new Error(`[${shape}] does not match the input size ${a.length}.`);
  }

  return createNestedArray(0, shape, a);
}

function noConversionNeeded(a, dtype) {
  return a instanceof Float32Array && dtype === 'float32' || a instanceof Int32Array && dtype === 'int32' || a instanceof Uint8Array && dtype === 'bool';
}

function makeOnesTypedArray(size, dtype) {
  const array = makeZerosTypedArray(size, dtype);

  for (let i = 0; i < array.length; i++) {
    array[i] = 1;
  }

  return array;
}

function makeZerosTypedArray(size, dtype) {
  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
    return new Float32Array(size);
  } else if (dtype === 'int32') {
    return new Int32Array(size);
  } else if (dtype === 'bool') {
    return new Uint8Array(size);
  } else {
    throw new Error(`Unknown data type ${dtype}`);
  }
}
/**
 * Make nested `TypedArray` filled with zeros.
 * @param shape The shape information for the nested array.
 * @param dtype dtype of the array element.
 */


function makeZerosNestedTypedArray(shape, dtype) {
  const size = shape.reduce((prev, curr) => prev * curr, 1);

  if (dtype == null || dtype === 'float32') {
    return toNestedArray(shape, new Float32Array(size));
  } else if (dtype === 'int32') {
    return toNestedArray(shape, new Int32Array(size));
  } else if (dtype === 'bool') {
    return toNestedArray(shape, new Uint8Array(size));
  } else {
    throw new Error(`Unknown data type ${dtype}`);
  }
}
/**
 * Returns the current high-resolution time in milliseconds relative to an
 * arbitrary time in the past. It works across different platforms (node.js,
 * browsers).
 *
 * ```js
 * console.log(tf.util.now());
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */


function now() {
  return (0, _environment.env)().platform.now();
}

function assertNonNegativeIntegerDimensions(shape) {
  shape.forEach(dimSize => {
    assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` + `shape [${shape}].`);
  });
}
/**
 * Returns a platform-specific implementation of
 * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 *
 * If `fetch` is defined on the global object (`window`, `process`, etc.),
 * `tf.util.fetch` returns that function.
 *
 * If not, `tf.util.fetch` returns a platform-specific solution.
 *
 * ```js
 * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');
 * // handle response
 * ```
 *
 * @doc {heading: 'Util'}
 */


function fetch(path, requestInits) {
  return (0, _environment.env)().platform.fetch(path, requestInits);
}
/**
 * Encodes the provided string into bytes using the provided encoding scheme.
 *
 * @param s The string to encode.
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */


function encodeString(s, encoding = 'utf-8') {
  encoding = encoding || 'utf-8';
  return (0, _environment.env)().platform.encode(s, encoding);
}
/**
 * Decodes the provided bytes into a string using the provided encoding scheme.
 * @param bytes The bytes to decode.
 *
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */


function decodeString(bytes, encoding = 'utf-8') {
  encoding = encoding || 'utf-8';
  return (0, _environment.env)().platform.decode(bytes, encoding);
}
/**
 * Computes flat index for a given location (multidimentionsal index) in a
 * Tensor/multidimensional array.
 *
 * @param locs Location in the tensor.
 * @param rank Rank of the tensor.
 * @param strides Tensor strides.
 */


function locToIndex(locs, rank, strides) {
  if (rank === 0) {
    return 0;
  } else if (rank === 1) {
    return locs[0];
  }

  let index = locs[locs.length - 1];

  for (let i = 0; i < locs.length - 1; ++i) {
    index += strides[i] * locs[i];
  }

  return index;
}
/**
 * Computes the location (multidimensional index) in a tensor/multidimentional
 * array for a given flat index.
 *
 * @param index Index in flat array.
 * @param rank Rank of tensor.
 * @param strides Strides of tensor.
 */


function indexToLoc(index, rank, strides) {
  if (rank === 0) {
    return [];
  } else if (rank === 1) {
    return [index];
  }

  const locs = new Array(rank);

  for (let i = 0; i < locs.length - 1; ++i) {
    locs[i] = Math.floor(index / strides[i]);
    index -= locs[i] * strides[i];
  }

  locs[locs.length - 1] = index;
  return locs;
}
},{"./environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js"}],"node_modules/@tensorflow/tfjs-core/dist/profiler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkComputationForErrors = checkComputationForErrors;
exports.Logger = exports.Profiler = void 0;

var util = _interopRequireWildcard(require("./util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Profiler {
  constructor(backendTimer, logger) {
    this.backendTimer = backendTimer;
    this.logger = logger;

    if (logger == null) {
      this.logger = new Logger();
    }
  }

  profileKernel(kernelName, inputs, f) {
    let outputs;

    const holdResultWrapperFn = () => {
      outputs = f();
    };

    const timer = this.backendTimer.time(holdResultWrapperFn);

    for (let i = 0; i < outputs.length; i++) {
      const output = outputs[i]; // Dangling promise here because we don't want to propagate up
      // asynchronicity.

      output.data().then(tensorVals => {
        checkComputationForErrors(tensorVals, output.dtype, kernelName);
      });
    }

    const kernelProfile = {
      kernelName,
      outputs,
      inputs,
      timeMs: timer.then(timing => timing.kernelMs),
      extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '')
    };
    return kernelProfile;
  }

  logKernelProfile(kernelProfile) {
    const {
      kernelName,
      outputs,
      timeMs,
      inputs,
      extraInfo
    } = kernelProfile;
    outputs.forEach(result => {
      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {
        this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);
      });
    });
  }

}

exports.Profiler = Profiler;

function checkComputationForErrors(vals, dtype, kernelName) {
  if (dtype !== 'float32') {
    // Only floating point computations will generate NaN values
    return false;
  }

  for (let i = 0; i < vals.length; i++) {
    const num = vals[i];

    if (isNaN(num) || !isFinite(num)) {
      // Throwing custom exception so behavior is testable.
      console.warn(`Found ${num} in the result of '${kernelName}'`);
      return true;
    }
  }

  return false;
}

class Logger {
  logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {
    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) : timeMs['error'];
    const paddedName = util.rightPad(name, 25);
    const rank = result.rank;
    const size = result.size;
    const shape = util.rightPad(result.shape.toString(), 14);
    let inputShapesDescription = '';

    for (const name in inputs) {
      const input = inputs[name];

      if (input != null) {
        // The input might be a non-tensor (e.g HTMLImageElement), in which case
        // we claim the output shape as input shape.
        const inputShape = input.shape || result.shape;
        const inputRank = inputShape.length;
        inputShapesDescription += `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;
      }
    }

    console.log(`%c${paddedName}\t%c${time}\t%c${rank}D ${shape}\t%c${size}\t%c${inputShapesDescription}\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');
  }

}

exports.Logger = Logger;
},{"./util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/tape.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFilteredNodesXToY = getFilteredNodesXToY;
exports.backpropagateGradients = backpropagateGradients;

var util = _interopRequireWildcard(require("./util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes a list of TapeNodes that connect x to y, filtering everything else
 * out and preserving the order of the original tape elements.
 *
 * @param tape The tape elements to filter.
 * @param xs The input Tensors.
 * @param y The output Tensor.
 */
function getFilteredNodesXToY(tape, xs, y) {
  // Forward pass to compute all the nodes and Tensors that are transitively a
  // function of x.
  const tensorsFromX = {};
  const nodesFromX = {};

  for (let i = 0; i < xs.length; i++) {
    tensorsFromX[xs[i].id] = true;
  }

  for (let i = 0; i < tape.length; i++) {
    const node = tape[i];
    const nodeInputs = node.inputs;

    for (const inputName in nodeInputs) {
      const input = nodeInputs[inputName];
      let anyInputFromX = false;

      for (let j = 0; j < xs.length; j++) {
        if (tensorsFromX[input.id]) {
          node.outputs.forEach(output => tensorsFromX[output.id] = true);
          anyInputFromX = true;
          nodesFromX[node.id] = true;
          break;
        }
      }

      if (anyInputFromX) {
        break;
      }
    }
  } // Backward pass to find all of the nodes and Tensors that lead to y.


  const tensorsLeadToY = {};
  tensorsLeadToY[y.id] = true;
  const nodesToY = {};

  for (let i = tape.length - 1; i >= 0; i--) {
    const node = tape[i];
    const nodeInputs = node.inputs; // If any of the outputs lead to y, mark all of the inputs as leading to y.

    for (let j = 0; j < node.outputs.length; j++) {
      if (tensorsLeadToY[node.outputs[j].id]) {
        for (const inputName in nodeInputs) {
          tensorsLeadToY[nodeInputs[inputName].id] = true;
          nodesToY[node.id] = true;
        }

        break;
      }
    }
  } // Return the paths that come from x and lead to y.


  const filteredTape = [];

  for (let i = 0; i < tape.length; i++) {
    const node = tape[i];

    if (nodesFromX[node.id] && nodesToY[node.id]) {
      // Prune the inputs from the node that aren't a function of x.
      const prunedInputs = {};

      for (const inputName in node.inputs) {
        const nodeInput = node.inputs[inputName];

        if (tensorsFromX[nodeInput.id]) {
          prunedInputs[inputName] = nodeInput;
        }
      } // Copy the node and overwrite inputsAndArgs to the pruned version.


      const prunedNode = Object.assign({}, node);
      prunedNode.inputs = prunedInputs;
      prunedNode.outputs = node.outputs;
      filteredTape.push(prunedNode);
    }
  }

  return filteredTape;
}
/**
 * Backpropagate gradients through the filtered TapeNodes.
 *
 * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map
 * is mutated by this method.
 * @param filteredTape The filtered TapeNodes to backprop through.
 */


function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {
  // Walk the tape backward and keep a map of Tensor to its gradient.
  for (let i = filteredTape.length - 1; i >= 0; i--) {
    const node = filteredTape[i];
    const dys = [];
    node.outputs.forEach(o => {
      const gradTensor = tensorAccumulatedGradientMap[o.id];

      if (gradTensor != null) {
        dys.push(gradTensor);
      } else {
        // This particular output is not in the back-propagation subgraph, so it
        // does not affect the final output, thus we put null for its dy.
        dys.push(null);
      }
    });

    if (node.gradient == null) {
      throw new Error(`Cannot compute gradient: gradient function not found ` + `for ${node.kernelName}.`);
    } // Backprop dy through this node and accumulate gradients over the inputs.


    const inputGradients = node.gradient(dys);

    for (const inputName in node.inputs) {
      if (!(inputName in inputGradients)) {
        throw new Error(`Cannot backprop through input ${inputName}. ` + `Available gradients found: ${Object.keys(inputGradients)}.`);
      } // Call the gradient function.


      const dx = tidy(() => inputGradients[inputName]());

      if (dx.dtype !== 'float32') {
        throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);
      }

      const x = node.inputs[inputName];

      if (!util.arraysEqual(dx.shape, x.shape)) {
        throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `'${inputName}' has shape '${dx.shape}', which does not match ` + `the shape of the input '${x.shape}'`);
      }

      if (tensorAccumulatedGradientMap[x.id] == null) {
        tensorAccumulatedGradientMap[x.id] = dx;
      } else {
        const curGradient = tensorAccumulatedGradientMap[x.id];
        tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);
        curGradient.dispose();
      }
    }
  }
}
},{"./util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/tensor_format.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensorToString = tensorToString;

var _util = require("./util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Maximum number of values before we decide to show ellipsis.
const FORMAT_LIMIT_NUM_VALS = 20; // Number of first and last values to show when displaying a, b,...,y, z.

const FORMAT_NUM_FIRST_LAST_VALS = 3; // Number of significant digits to show.

const FORMAT_NUM_SIG_DIGITS = 7;

function tensorToString(vals, shape, dtype, verbose) {
  const strides = (0, _util.computeStrides)(shape);
  const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);
  const rank = shape.length;
  const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);
  const lines = ['Tensor'];

  if (verbose) {
    lines.push(`  dtype: ${dtype}`);
    lines.push(`  rank: ${rank}`);
    lines.push(`  shape: [${shape}]`);
    lines.push(`  values:`);
  }

  lines.push(valsLines.map(l => '    ' + l).join('\n'));
  return lines.join('\n');
}

function computeMaxSizePerColumn(vals, shape, dtype, strides) {
  const n = (0, _util.sizeFromShape)(shape);
  const numCols = strides[strides.length - 1];
  const padPerCol = new Array(numCols).fill(0);
  const rank = shape.length;
  const valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;

  if (rank > 1) {
    for (let row = 0; row < n / numCols; row++) {
      const offset = row * numCols;

      for (let j = 0; j < numCols; j++) {
        padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);
      }
    }
  }

  return padPerCol;
}

function valToString(val, pad, dtype) {
  let valStr;

  if (Array.isArray(val)) {
    valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` + `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;
  } else if ((0, _util.isString)(val)) {
    valStr = `'${val}'`;
  } else if (dtype === 'bool') {
    valStr = boolNumToString(val);
  } else {
    valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();
  }

  return (0, _util.rightPad)(valStr, pad);
}

function boolNumToString(v) {
  return v === 0 ? 'false' : 'true';
}

function subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {
  const storagePerElement = dtype === 'complex64' ? 2 : 1;
  const size = shape[0];
  const rank = shape.length;

  if (rank === 0) {
    if (dtype === 'complex64') {
      const complexTuple = createComplexTuples(vals);
      return [valToString(complexTuple[0], 0, dtype)];
    }

    if (dtype === 'bool') {
      return [boolNumToString(vals[0])];
    }

    return [vals[0].toString()];
  }

  if (rank === 1) {
    if (size > FORMAT_LIMIT_NUM_VALS) {
      const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;
      let firstVals = Array.from(vals.slice(0, firstValsSize));
      let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));

      if (dtype === 'complex64') {
        firstVals = createComplexTuples(firstVals);
        lastVals = createComplexTuples(lastVals);
      }

      return ['[' + firstVals.map((x, i) => valToString(x, padPerCol[i], dtype)).join(', ') + ', ..., ' + lastVals.map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype)).join(', ') + ']'];
    }

    const displayVals = dtype === 'complex64' ? createComplexTuples(vals) : Array.from(vals);
    return ['[' + displayVals.map((x, i) => valToString(x, padPerCol[i], dtype)).join(', ') + ']'];
  } // The array is rank 2 or more.


  const subshape = shape.slice(1);
  const substrides = strides.slice(1);
  const stride = strides[0] * storagePerElement;
  const lines = [];

  if (size > FORMAT_LIMIT_NUM_VALS) {
    for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {
      const start = i * stride;
      const end = start + stride;
      lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false
      /* isLast */
      ));
    }

    lines.push('...');

    for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {
      const start = i * stride;
      const end = start + stride;
      lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1
      /* isLast */
      ));
    }
  } else {
    for (let i = 0; i < size; i++) {
      const start = i * stride;
      const end = start + stride;
      lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1
      /* isLast */
      ));
    }
  }

  const sep = rank === 2 ? ',' : '';
  lines[0] = '[' + lines[0] + sep;

  for (let i = 1; i < lines.length - 1; i++) {
    lines[i] = ' ' + lines[i] + sep;
  }

  let newLineSep = ',\n';

  for (let i = 2; i < rank; i++) {
    newLineSep += '\n';
  }

  lines[lines.length - 1] = ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);
  return lines;
}

function createComplexTuples(vals) {
  const complexTuples = [];

  for (let i = 0; i < vals.length; i += 2) {
    complexTuples.push([vals[i], vals[i + 1]]);
  }

  return complexTuples;
}
},{"./util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/tensor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setTensorTracker = setTensorTracker;
exports.setOpHandler = setOpHandler;
exports.setDeprecationWarningFn = setDeprecationWarningFn;
exports.Variable = exports.Tensor = exports.TensorBuffer = void 0;

var _tensor_format = require("./tensor_format");

var util = _interopRequireWildcard(require("./util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * A mutable object, similar to `tf.Tensor`, that allows users to set values
 * at locations before converting to an immutable `tf.Tensor`.
 *
 * See `tf.buffer` for creating a tensor buffer.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
class TensorBuffer {
  constructor(shape, dtype, values) {
    this.dtype = dtype;
    this.shape = shape.slice();
    this.size = util.sizeFromShape(shape);

    if (values != null) {
      const n = values.length;
      util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` + `inferred by the shape '${this.size}'.`);
    }

    if (dtype === 'complex64') {
      throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` + `a TensorBuffer for the real and imaginary parts separately and ` + `call tf.complex(real, imag).`);
    }

    this.values = values || util.getArrayFromDType(dtype, this.size);
    this.strides = (0, util.computeStrides)(shape);
  }
  /**
   * Sets a value in the buffer at a given location.
   *
   * @param value The value to set.
   * @param locs  The location indices.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */


  set(value, ...locs) {
    if (locs.length === 0) {
      locs = [0];
    }

    util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` + `match the rank (${this.rank})`);
    const index = this.locToIndex(locs);
    this.values[index] = value;
  }
  /**
   * Returns the value in the buffer at the provided location.
   *
   * @param locs The location indices.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */


  get(...locs) {
    if (locs.length === 0) {
      locs = [0];
    }

    let i = 0;

    for (const loc of locs) {
      if (loc < 0 || loc >= this.shape[i]) {
        const msg = `Requested out of range element at ${locs}. ` + `  Buffer shape=${this.shape}`;
        throw new Error(msg);
      }

      i++;
    }

    let index = locs[locs.length - 1];

    for (let i = 0; i < locs.length - 1; ++i) {
      index += this.strides[i] * locs[i];
    }

    return this.values[index];
  }

  locToIndex(locs) {
    if (this.rank === 0) {
      return 0;
    } else if (this.rank === 1) {
      return locs[0];
    }

    let index = locs[locs.length - 1];

    for (let i = 0; i < locs.length - 1; ++i) {
      index += this.strides[i] * locs[i];
    }

    return index;
  }

  indexToLoc(index) {
    if (this.rank === 0) {
      return [];
    } else if (this.rank === 1) {
      return [index];
    }

    const locs = new Array(this.shape.length);

    for (let i = 0; i < locs.length - 1; ++i) {
      locs[i] = Math.floor(index / this.strides[i]);
      index -= locs[i] * this.strides[i];
    }

    locs[locs.length - 1] = index;
    return locs;
  }

  get rank() {
    return this.shape.length;
  }
  /**
   * Creates an immutable `tf.Tensor` object from the buffer.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */


  toTensor() {
    return trackerFn().makeTensor(this.values, this.shape, this.dtype);
  }

} // For tracking tensor creation and disposal.


exports.TensorBuffer = TensorBuffer;
let trackerFn = null; // Used by chaining methods to call into ops.

let opHandler = null; // Used to warn about deprecated methods.

let deprecationWarningFn = null; // This here so that we can use this method on dev branches and keep the
// functionality at master.
// tslint:disable-next-line:no-unused-expression

[deprecationWarningFn];
/**
 * An external consumer can register itself as the tensor tracker. This way
 * the Tensor class can notify the tracker for every tensor created and
 * disposed.
 */

function setTensorTracker(fn) {
  trackerFn = fn;
}
/**
 * An external consumer can register itself as the op handler. This way the
 * Tensor class can have chaining methods that call into ops via the op
 * handler.
 */


function setOpHandler(handler) {
  opHandler = handler;
}
/**
 * Sets the deprecation warning function to be used by this file. This way the
 * Tensor class can be a leaf but still use the environment.
 */


function setDeprecationWarningFn(fn) {
  deprecationWarningFn = fn;
}
/**
 * A `tf.Tensor` object represents an immutable, multidimensional array of
 * numbers that has a shape and a data type.
 *
 * See `tf.tensor` for details on how to create a `tf.Tensor`.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */


class Tensor {
  constructor(shape, dtype, dataId, id) {
    /** Whether this tensor has been globally kept. */
    this.kept = false;
    this.isDisposedInternal = false;
    this.shape = shape.slice();
    this.dtype = dtype || 'float32';
    this.size = util.sizeFromShape(shape);
    this.strides = (0, util.computeStrides)(shape);
    this.dataId = dataId;
    this.id = id;
    this.rankType = this.rank < 5 ? this.rank.toString() : 'higher';
  }

  get rank() {
    return this.shape.length;
  }
  /**
   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  async buffer() {
    const vals = await this.data();
    return opHandler.buffer(this.shape, this.dtype, vals);
  }
  /**
   * Returns a `tf.TensorBuffer` that holds the underlying data.
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  bufferSync() {
    return opHandler.buffer(this.shape, this.dtype, this.dataSync());
  }
  /**
   * Returns the tensor data as a nested array. The transfer of data is done
   * asynchronously.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  async array() {
    const vals = await this.data();
    return (0, util.toNestedArray)(this.shape, vals);
  }
  /**
   * Returns the tensor data as a nested array. The transfer of data is done
   * synchronously.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  arraySync() {
    return (0, util.toNestedArray)(this.shape, this.dataSync());
  }
  /**
   * Asynchronously downloads the values from the `tf.Tensor`. Returns a
   * promise of `TypedArray` that resolves when the computation has finished.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  async data() {
    this.throwIfDisposed();
    const data = trackerFn().read(this.dataId);

    if (this.dtype === 'string') {
      const bytes = await data;

      try {
        return bytes.map(b => util.decodeString(b));
      } catch (_a) {
        throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');
      }
    }

    return data;
  }
  /**
   * Synchronously downloads the values from the `tf.Tensor`. This blocks the
   * UI thread until the values are ready, which can cause performance issues.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  dataSync() {
    this.throwIfDisposed();
    const data = trackerFn().readSync(this.dataId);

    if (this.dtype === 'string') {
      try {
        return data.map(b => util.decodeString(b));
      } catch (_a) {
        throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');
      }
    }

    return data;
  }
  /** Returns the underlying bytes of the tensor's data. */


  async bytes() {
    this.throwIfDisposed();
    const data = await trackerFn().read(this.dataId);

    if (this.dtype === 'string') {
      return data;
    } else {
      return new Uint8Array(data.buffer);
    }
  }
  /**
   * Disposes `tf.Tensor` from memory.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  dispose() {
    if (this.isDisposed) {
      return;
    }

    trackerFn().disposeTensor(this);
    this.isDisposedInternal = true;
  }

  get isDisposed() {
    return this.isDisposedInternal;
  }

  throwIfDisposed() {
    if (this.isDisposed) {
      throw new Error(`Tensor is disposed.`);
    }
  }
  /**
   * Prints the `tf.Tensor`. See `tf.print` for details.
   *
   * @param verbose Whether to print verbose information about the tensor,
   *    including dtype and size.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  print(verbose = false) {
    return opHandler.print(this, verbose);
  }
  /**
   * Returns a copy of the tensor. See `tf.clone` for details.
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  clone() {
    this.throwIfDisposed();
    return opHandler.clone(this);
  }
  /**
   * Returns a human-readable description of the tensor. Useful for logging.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  toString(verbose = false) {
    const vals = this.dataSync();
    return (0, _tensor_format.tensorToString)(vals, this.shape, this.dtype, verbose);
  }

  cast(dtype) {
    this.throwIfDisposed();
    return opHandler.cast(this, dtype);
  }

  variable(trainable = true, name, dtype) {
    this.throwIfDisposed();
    return trackerFn().makeVariable(this, trainable, name, dtype);
  }

}

exports.Tensor = Tensor;
Object.defineProperty(Tensor, Symbol.hasInstance, {
  value: instance => {
    // Implementation note: we should use properties of the object that will be
    // defined before the constructor body has finished executing (methods).
    // This is because when this code is transpiled by babel, babel will call
    // classCallCheck before the constructor body is run.
    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.
    return !!instance && instance.data != null && instance.dataSync != null && instance.throwIfDisposed != null;
  }
});
/**
 * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */

class Variable extends Tensor {
  constructor(initialValue, trainable, name, tensorId) {
    super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);
    this.trainable = trainable;
    this.name = name;
  }
  /**
   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
   * the same shape and dtype as the old `tf.Tensor`.
   *
   * @param newValue New tensor to be assigned to this variable.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  assign(newValue) {
    if (newValue.dtype !== this.dtype) {
      throw new Error(`dtype of the new value (${newValue.dtype}) and ` + `previous value (${this.dtype}) must match`);
    }

    if (!util.arraysEqual(newValue.shape, this.shape)) {
      throw new Error(`shape of the new value (${newValue.shape}) and ` + `previous value (${this.shape}) must match`);
    }

    trackerFn().disposeTensor(this);
    this.dataId = newValue.dataId;
    trackerFn().incRef(this, null
    /* backend */
    );
  }

  dispose() {
    trackerFn().disposeVariable(this);
    this.isDisposedInternal = true;
  }

}

exports.Variable = Variable;
Object.defineProperty(Variable, Symbol.hasInstance, {
  value: instance => {
    return instance instanceof Tensor && instance.assign != null && instance.assign instanceof Function;
  }
});
},{"./tensor_format":"node_modules/@tensorflow/tfjs-core/dist/tensor_format.js","./util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.upcastType = upcastType;
exports.sumOutType = sumOutType;
exports.Rank = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Rank;
exports.Rank = Rank;

(function (Rank) {
  Rank["R0"] = "R0";
  Rank["R1"] = "R1";
  Rank["R2"] = "R2";
  Rank["R3"] = "R3";
  Rank["R4"] = "R4";
  Rank["R5"] = "R5";
  Rank["R6"] = "R6";
})(Rank || (exports.Rank = Rank = {})); // Looks for upcasting types. Used, for example, in operations with mixed dtype
// inputs.


var UpcastInt32AndMap;

(function (UpcastInt32AndMap) {
  UpcastInt32AndMap["float32"] = "float32";
  UpcastInt32AndMap["int32"] = "int32";
  UpcastInt32AndMap["bool"] = "int32";
  UpcastInt32AndMap["complex64"] = "complex64";
})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));

var UpcastBoolAndMap;

(function (UpcastBoolAndMap) {
  UpcastBoolAndMap["float32"] = "float32";
  UpcastBoolAndMap["int32"] = "int32";
  UpcastBoolAndMap["bool"] = "bool";
  UpcastBoolAndMap["complex64"] = "complex64";
})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));

var UpcastFloat32AndMap;

(function (UpcastFloat32AndMap) {
  UpcastFloat32AndMap["float32"] = "float32";
  UpcastFloat32AndMap["int32"] = "float32";
  UpcastFloat32AndMap["bool"] = "float32";
  UpcastFloat32AndMap["complex64"] = "complex64";
})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));

var UpcastComplex64AndMap;

(function (UpcastComplex64AndMap) {
  UpcastComplex64AndMap["float32"] = "complex64";
  UpcastComplex64AndMap["int32"] = "complex64";
  UpcastComplex64AndMap["bool"] = "complex64";
  UpcastComplex64AndMap["complex64"] = "complex64";
})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));

const upcastTypeMap = {
  'float32': UpcastFloat32AndMap,
  'int32': UpcastInt32AndMap,
  'bool': UpcastBoolAndMap,
  'complex64': UpcastComplex64AndMap
};

function upcastType(typeA, typeB) {
  if (typeA === 'string' || typeB === 'string') {
    if (typeA === 'string' && typeB === 'string') {
      return 'string';
    }

    throw new Error(`Can not upcast ${typeA} with ${typeB}`);
  }

  return upcastTypeMap[typeA][typeB];
}
/** Returns the output type after summation. */


function sumOutType(type) {
  return upcastType(type, 'int32');
}
},{}],"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeTypesMatch = makeTypesMatch;
exports.assertTypesMatch = assertTypesMatch;
exports.isTensorInList = isTensorInList;
exports.getTensorsInContainer = getTensorsInContainer;

var _tensor = require("./tensor");

var _types = require("./types");

var _util = require("./util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function makeTypesMatch(a, b) {
  if (a.dtype === b.dtype) {
    return [a, b];
  }

  const dtype = (0, _types.upcastType)(a.dtype, b.dtype);
  return [a.cast(dtype), b.cast(dtype)];
}

function assertTypesMatch(a, b) {
  (0, _util.assert)(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` + ` second(${b.dtype}) input must match`);
}

function isTensorInList(tensor, tensorList) {
  return tensorList.some(x => x.id === tensor.id);
}
/**
 * Extracts any `Tensor`s found within the provided object.
 *
 * @param container an object that may be a `Tensor` or may directly contain
 *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it
 *   is safe to pass any object here, except that `Promise`s are not
 *   supported.
 * @returns An array of `Tensors` found within the passed object. If the
 *   argument is simply a `Tensor', a list containing that `Tensor` is
 *   returned. If the object is not a `Tensor` or does not
 *   contain `Tensors`, an empty list is returned.
 */


function getTensorsInContainer(result) {
  const list = [];
  const seen = new Set();
  walkTensorContainer(result, list, seen);
  return list;
}

function walkTensorContainer(container, list, seen) {
  if (container == null) {
    return;
  }

  if (container instanceof _tensor.Tensor) {
    list.push(container);
    return;
  }

  if (!isIterable(container)) {
    return;
  } // Iteration over keys works also for arrays.


  const iterable = container;

  for (const k in iterable) {
    const val = iterable[k];

    if (!seen.has(val)) {
      seen.add(val);
      walkTensorContainer(val, list, seen);
    }
  }
} // tslint:disable-next-line:no-any


function isIterable(obj) {
  return Array.isArray(obj) || typeof obj === 'object';
}
},{"./tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js","./types":"node_modules/@tensorflow/tfjs-core/dist/types.js","./util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/engine.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOrMakeEngine = getOrMakeEngine;
exports.add = add;
exports.ENGINE = exports.Engine = void 0;

var _environment = require("./environment");

var _global_util = require("./global_util");

var _kernel_names = require("./kernel_names");

var _kernel_registry = require("./kernel_registry");

var _profiler = require("./profiler");

var _tape = require("./tape");

var _tensor = require("./tensor");

var _tensor_util = require("./tensor_util");

var util = _interopRequireWildcard(require("./util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EngineState {
  constructor() {
    // Public since optimizers will use it.
    this.registeredVariables = {};
    this.nextTapeNodeId = 0;
    this.numBytes = 0;
    this.numTensors = 0;
    this.numStringTensors = 0;
    this.numDataBuffers = 0; // Number of nested tf.grad() statements when computing higher-order
    // gradients. E.g. `1` for first-order gradients and `2` for second-order
    // gradients. Used to track if the tape should be removed after a backprop.

    this.gradientDepth = 0; // Number of nested kernel calls. When kernel depth is greater than 1, we turn
    // off the tape.

    this.kernelDepth = 0;
    this.scopeStack = [];
    /**
     * Keeps track of the number of data moves during a kernel execution. We
     * maintain a stack since kernels can call other kernels, recursively.
     */

    this.numDataMovesStack = [];
    this.nextScopeId = 0;
    this.tensorInfo = new WeakMap();
    this.profiling = false;
    this.activeProfile = {
      newBytes: 0,
      newTensors: 0,
      peakBytes: 0,
      kernels: [],
      result: null
    };
  }

  dispose() {
    for (const variableName in this.registeredVariables) {
      this.registeredVariables[variableName].dispose();
    }
  }

}

class Engine {
  constructor(ENV) {
    this.ENV = ENV;
    this.registry = {};
    this.registryFactory = {};
    this.pendingBackendInitId = 0;
    this.state = new EngineState();
  }

  async ready() {
    if (this.pendingBackendInit != null) {
      return this.pendingBackendInit.then(() => {});
    }

    if (this.backendInstance != null) {
      return;
    }

    const sortedBackends = this.getSortedBackends();

    for (let i = 0; i < sortedBackends.length; i++) {
      const backendName = sortedBackends[i];
      const success = await this.initializeBackend(backendName).success;

      if (success) {
        await this.setBackend(backendName);
        return;
      }
    }

    throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);
  }

  get backend() {
    if (this.pendingBackendInit != null) {
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` + `sure to await tf.ready() or await tf.setBackend() before calling ` + `other methods`);
    }

    if (this.backendInstance == null) {
      const {
        name,
        asyncInit
      } = this.initializeBackendsAndReturnBest();

      if (asyncInit) {
        throw new Error(`The highest priority backend '${name}' has not yet been ` + `initialized. Make sure to await tf.ready() or ` + `await tf.setBackend() before calling other methods`);
      }

      this.setBackend(name);
    }

    return this.backendInstance;
  }

  backendNames() {
    return Object.keys(this.registryFactory);
  }

  findBackend(backendName) {
    if (!(backendName in this.registry)) {
      // If the backend hasn't been initialized but we have a registry entry for
      // it, initialize it and return it.
      if (backendName in this.registryFactory) {
        const {
          asyncInit
        } = this.initializeBackend(backendName);

        if (asyncInit) {
          // Backend is not ready yet.
          return null;
        }
      } else {
        return null;
      }
    }

    return this.registry[backendName];
  }

  findBackendFactory(backendName) {
    if (!(backendName in this.registryFactory)) {
      return null;
    }

    return this.registryFactory[backendName].factory;
  }

  registerBackend(backendName, factory, priority = 1) {
    if (backendName in this.registryFactory) {
      console.warn(`${backendName} backend was already registered. ` + `Reusing existing backend factory.`);
      return false;
    }

    this.registryFactory[backendName] = {
      factory,
      priority
    };
    return true;
  }

  async setBackend(backendName) {
    if (this.registryFactory[backendName] == null) {
      throw new Error(`Backend name '${backendName}' not found in registry`);
    }

    this.backendName = backendName;

    if (this.registry[backendName] == null) {
      this.backendInstance = null;
      const {
        success,
        asyncInit
      } = this.initializeBackend(backendName);
      const result = asyncInit ? await success : success;

      if (!result) {
        return false;
      }
    }

    this.backendInstance = this.registry[backendName];
    this.setupRegisteredKernels(); // Reset the profiler.

    this.profiler = new _profiler.Profiler(this.backendInstance);
    return true;
  }

  setupRegisteredKernels() {
    const kernels = (0, _kernel_registry.getKernelsForBackend)(this.backendName);
    kernels.forEach(kernel => {
      if (kernel.setupFunc != null) {
        kernel.setupFunc(this.backendInstance);
      }
    });
  }

  disposeRegisteredKernels(backendName) {
    const kernels = (0, _kernel_registry.getKernelsForBackend)(backendName);
    kernels.forEach(kernel => {
      if (kernel.disposeFunc != null) {
        kernel.disposeFunc(this.registry[backendName]);
      }
    });
  }
  /**
   * Initializes a backend by looking up the backend name in the factory
   * registry and calling the factory method. Returns a boolean representing
   * whether the initialization of the backend suceeded. Throws an error if
   * there is no backend in the factory registry.
   */


  initializeBackend(backendName) {
    const registryFactoryEntry = this.registryFactory[backendName];

    if (registryFactoryEntry == null) {
      throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);
    }

    try {
      const backend = registryFactoryEntry.factory(); // Test if the factory returns a promise.

      if (Promise.resolve(backend) === backend) {
        const promiseId = ++this.pendingBackendInitId;
        const success = backend.then(backendInstance => {
          // Outdated promise. Another backend was set in the meantime.
          if (promiseId < this.pendingBackendInitId) {
            return false;
          }

          this.registry[backendName] = backendInstance;
          this.pendingBackendInit = null;
          return true;
        }).catch(err => {
          // Outdated promise. Another backend was set in the meantime.
          if (promiseId < this.pendingBackendInitId) {
            return false;
          }

          this.pendingBackendInit = null;
          console.warn(`Initialization of backend ${backendName} failed`);
          console.warn(err.stack || err.message);
          return false;
        });
        this.pendingBackendInit = success;
        return {
          success,
          asyncInit: true
        };
      } else {
        this.registry[backendName] = backend;
        return {
          success: true,
          asyncInit: false
        };
      }
    } catch (err) {
      console.warn(`Initialization of backend ${backendName} failed`);
      console.warn(err.stack || err.message);
      return {
        success: false,
        asyncInit: false
      };
    }
  }

  removeBackend(backendName) {
    if (!(backendName in this.registryFactory)) {
      throw new Error(`${backendName} backend not found in registry`);
    }

    if (this.backendName === backendName && this.pendingBackendInit != null) {
      // There is a pending promise of the backend we want to remove. Make it
      // obsolete.
      this.pendingBackendInitId++;
    }

    if (backendName in this.registry) {
      this.disposeRegisteredKernels(backendName);
      this.registry[backendName].dispose();
      delete this.registry[backendName];
    }

    delete this.registryFactory[backendName]; // Unset the backend if it is active.

    if (this.backendName === backendName) {
      this.pendingBackendInit = null;
      this.backendName = null;
      this.backendInstance = null;
    }
  }

  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0) {
      throw new Error('No backend found in registry.');
    }

    return Object.keys(this.registryFactory).sort((a, b) => {
      // Highest priority comes first.
      return this.registryFactory[b].priority - this.registryFactory[a].priority;
    });
  }

  initializeBackendsAndReturnBest() {
    const sortedBackends = this.getSortedBackends();

    for (let i = 0; i < sortedBackends.length; i++) {
      const backendName = sortedBackends[i];
      const {
        success,
        asyncInit
      } = this.initializeBackend(backendName);

      if (asyncInit || success) {
        return {
          name: backendName,
          asyncInit
        };
      }
    }

    throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);
  }

  moveData(backend, dataId) {
    const info = this.state.tensorInfo.get(dataId);
    const srcBackend = info.backend;
    const values = this.readSync(dataId); // Delete the tensor from the old backend and move it to the new
    // backend.

    srcBackend.disposeData(dataId);
    info.backend = backend;
    backend.move(dataId, values, info.shape, info.dtype);

    if (this.shouldCheckForMemLeaks()) {
      // Track the number of moves during a kernel execution to correctly
      // detect memory leaks.
      this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
    }
  }

  tidy(nameOrFn, fn) {
    let name = null;

    if (fn == null) {
      // Called with only 1 argument.
      if (typeof nameOrFn !== 'function') {
        throw new Error('Please provide a function to tidy()');
      }

      fn = nameOrFn;
    } else {
      // Called with 2 arguments.
      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {
        throw new Error('When calling with two arguments, the first argument ' + 'to tidy() must be a string');
      }

      if (typeof fn !== 'function') {
        throw new Error('When calling with two arguments, the 2nd argument ' + 'to tidy() must be a function');
      }

      name = nameOrFn; // TODO(nsthorat,smilkov): Do operation logging and performance
      // profiling.
    }

    let result;
    return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {
      result = fn();

      if (result instanceof Promise) {
        console.error('Cannot return a Promise inside of tidy.');
      }

      return result;
    });
  }

  scopedRun(start, end, f) {
    start();

    try {
      const res = f();
      end();
      return res;
    } catch (ex) {
      end();
      throw ex;
    }
  }

  nextTensorId() {
    return Engine.nextTensorId++;
  }

  nextVariableId() {
    return Engine.nextVariableId++;
  }
  /**
   * This method is called instead of the public-facing tensor.clone() when
   * saving a tensor for backwards pass. It makes sure to add the clone
   * operation to the tape regardless of being called inside a kernel
   * execution.
   *
   * This method will go away once all kernels are modularized since we won't
   * need to turn off the tape inside runKernel().
   */


  clone(x) {
    const y = this.makeTensorFromDataId(x.dataId, x.shape, x.dtype);
    const inputs = {
      x
    };

    const grad = dy => ({
      x: () => {
        const dtype = 'float32';
        const gradInputs = {
          x: dy
        };
        const attrs = {
          dtype
        };
        return ENGINE.runKernelFunc(backend => backend.cast(dy, dtype), gradInputs, null
        /* grad */
        , _kernel_names.Cast, attrs);
      }
    });

    const saved = [];
    this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});
    return y;
  }
  /**
   * Execute a kernel with the given name and return the output tensor.
   *
   * @param kernelName The name of the kernel to execute.
   * @param inputs A map of input names to tensors.
   * @param attrs A map of attribute names to their values. An attribute is a
   *     primitive (non-tensor) input to the kernel.
   * @param inputsToSave A list of tensors, inputs to save for the backprop
   *     computation.
   * @param outputsToSave A list of booleans, specifying which output to save
   *     for the backprop computation. These are booleans since the output
   * tensors are not visible to the user.
   */


  runKernel(kernelName, inputs, attrs, inputsToSave, outputsToSave) {
    const forwardFunc = null;
    const backwardsFunc = null; // Call runKernel as a stop-gap until we modularize all kernels.
    // Once we modularize all kernels, we will remove the existing
    // `runKernelFunc`.

    return this.runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave);
  }

  shouldCheckForMemLeaks() {
    return this.ENV.getBool('IS_TEST');
  }

  checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {
    const numDataIdsAfter = this.backend.numDataIds(); // Count the number of data ids associated with the result of the kernel.

    let numOutputDataIds = 0;
    outInfos.forEach(info => {
      // Complex numbers allocate 3 data ids, one for 'real', one for
      // 'imaginary', and one for the container that holds the former two.
      numOutputDataIds += info.dtype === 'complex64' ? 3 : 1;
    }); // Account for the number of moves during kernel execution. A "data move"
    // can happen in the middle of a kernel execution, placing a new (key,value)
    // pair in the data storage. Since data moves have net zero effect (we
    // always remove the data from the old backend), we have to cancel them out
    // when detecting memory leaks.

    const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];
    const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;

    if (dataIdsLeaked > 0) {
      throw new Error(`Backend '${this.backendName}' has an internal memory leak ` + `(${dataIdsLeaked} data ids) after running '${kernelName}'`);
    }
  }
  /**
   * @deprecated Use `runKernel` for newly added kernels. Keep using this method
   *     only for kernels that are not yet fully modularized.
   */


  runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave) {
    let outputs;
    let saved = [];
    const isTapeOn = this.isTapeOn();

    if (kernelName == null) {
      kernelName = this.state.activeScope != null ? this.state.activeScope.name : '';
    }

    const startingBytecount = this.state.numBytes;
    const startingNumTensors = this.state.numTensors;

    if (this.shouldCheckForMemLeaks()) {
      this.state.numDataMovesStack.push(0);
    }

    let kernelFunc;
    const kernel = (0, _kernel_registry.getKernel)(kernelName, this.backendName);
    let out;

    if (kernel != null) {
      kernelFunc = () => {
        const numDataIdsBefore = this.backend.numDataIds();
        out = kernel.kernelFunc({
          inputs,
          attrs,
          backend: this.backend
        });
        const outInfos = Array.isArray(out) ? out : [out];

        if (this.shouldCheckForMemLeaks()) {
          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);
        }

        const outTensors = outInfos.map(({
          dataId,
          shape,
          dtype
        }) => this.makeTensorFromDataId(dataId, shape, dtype)); // Save the inputs and outputs.
        // Do not save unless we are recording to the tape. Otherwise it would
        // cause a mem leak since we would never run backprop, which disposes
        // the kept tensors.

        if (isTapeOn) {
          let tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);

          if (tensorsToSave == null) {
            // Fallback for ops that call runKernelFunc and pass in
            // inputsToSave and outputsToSave. Currently this is the set of ops
            // with kernel support in the WASM backend. Once those ops and
            // respective gradients are modularised we can remove this path.
            if (outputsToSave == null) {
              outputsToSave = [];
            }

            const outsToSave = outTensors.filter((_, i) => outputsToSave[i]);
            tensorsToSave = (inputsToSave || []).slice().concat(outsToSave);
          }

          saved = this.saveTensorsForBackwardMode(tensorsToSave);
        }

        return outTensors;
      };
    } else {
      const saveFunc = tensors => {
        // Do not save unless we are recording to the tape. Otherwise it would
        // cause a mem leak since we would never run backprop, which disposes
        // the kept tensors.
        if (!isTapeOn) {
          return;
        }

        saved = tensors.map(tensor => this.keep(this.clone(tensor)));
      };

      kernelFunc = () => {
        const numDataIdsBefore = this.backend.numDataIds();
        out = this.tidy(() => forwardFunc(this.backend, saveFunc));
        const outs = Array.isArray(out) ? out : [out];

        if (this.shouldCheckForMemLeaks()) {
          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outs);
        }

        return outs;
      };
    } // Stop recording to a tape when running a kernel.


    let kernelProfile;
    this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
      if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {
        outputs = kernelFunc();
      } else {
        kernelProfile = this.profiler.profileKernel(kernelName, inputs, () => kernelFunc());

        if (this.ENV.getBool('DEBUG')) {
          this.profiler.logKernelProfile(kernelProfile);
        }

        outputs = kernelProfile.outputs;
      }
    });

    if (isTapeOn) {
      this.addTapeNode(kernelName, inputs, outputs, backwardsFunc, saved, attrs);
    }

    if (this.state.profiling) {
      this.state.activeProfile.kernels.push({
        name: kernelName,
        bytesAdded: this.state.numBytes - startingBytecount,
        totalBytesSnapshot: this.state.numBytes,
        tensorsAdded: this.state.numTensors - startingNumTensors,
        totalTensorsSnapshot: this.state.numTensors,
        inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),
        outputShapes: outputs.map(item => item.shape),
        kernelTimeMs: kernelProfile.timeMs,
        extraInfo: kernelProfile.extraInfo
      });
    }

    return Array.isArray(out) ? outputs : outputs[0];
  }
  /**
   * Saves tensors used in forward mode for use in backward mode.
   *
   * @param tensors the list of tensors to save.
   */


  saveTensorsForBackwardMode(tensors) {
    const saved = tensors.map(tensor => this.keep(this.clone(tensor)));
    return saved;
  }
  /**
   * Returns a list of tensors to save for a given gradient calculation.
   *
   * Returns undefined if their is no registered gradient for this kernel in the
   * gradient registry.
   *
   * @param kernelName name of kernel to look up gradient for.
   * @param inputs a map of input tensors.
   * @param outputs an array of output tensors from forward mode of kernel.
   */


  getTensorsForGradient(kernelName, inputs, outputs) {
    const gradConfig = (0, _kernel_registry.getGradient)(kernelName);

    if (gradConfig != null) {
      const inputsToSave = gradConfig.inputsToSave || [];
      const outputsToSave = gradConfig.outputsToSave || []; // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs
      // specified in inputsToSave will be saved.

      let inputTensorsToSave;

      if (gradConfig.saveAllInputs) {
        util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');
        inputTensorsToSave = Object.keys(inputs).map(key => inputs[key]);
      } else {
        inputTensorsToSave = inputsToSave.map(inputName => inputs[inputName]);
      }

      const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);
      return inputTensorsToSave.concat(outputTensorsToSave);
    } // TODO(yassogba) throw exception here once all runkernelFunc calls with
    // inputsToSave/outputsToSave are removed


    return null;
  }
  /**
   * Internal method used by public APIs for tensor creation. Makes a new
   * tensor with the provided shape, dtype and values. It always
   * creates a new data id and writes the values to the underlying backend.
   */


  makeTensor(values, shape, dtype, backend) {
    if (values == null) {
      throw new Error('Values passed to engine.makeTensor() are null');
    }

    dtype = dtype || 'float32';
    backend = backend || this.backend;
    let backendVals = values;

    if (dtype === 'string' && util.isString(values[0])) {
      backendVals = values.map(d => util.encodeString(d));
    }

    const dataId = backend.write(backendVals, shape, dtype);
    const t = new _tensor.Tensor(shape, dtype, dataId, this.nextTensorId());
    this.incRef(t, backend); // Count bytes for string tensors.

    if (dtype === 'string') {
      const info = this.state.tensorInfo.get(dataId);
      const newBytes = (0, util.bytesFromStringArray)(backendVals);
      this.state.numBytes += newBytes - info.bytes;
      info.bytes = newBytes;
    }

    return t;
  }
  /**
   * Internal method used by backends. Makes a new tensor
   * that is a wrapper around an existing data id. It doesn't create
   * a new data id, only increments the ref count used in memory tracking.
   */


  makeTensorFromDataId(dataId, shape, dtype, backend) {
    dtype = dtype || 'float32';
    const t = new _tensor.Tensor(shape, dtype, dataId, this.nextTensorId());
    this.incRef(t, backend);
    return t;
  }

  makeVariable(initialValue, trainable = true, name, dtype) {
    name = name || this.nextVariableId().toString();

    if (dtype != null && dtype !== initialValue.dtype) {
      initialValue = initialValue.cast(dtype);
    }

    const v = new _tensor.Variable(initialValue, trainable, name, this.nextTensorId());

    if (this.state.registeredVariables[v.name] != null) {
      throw new Error(`Variable with name ${v.name} was already registered`);
    }

    this.state.registeredVariables[v.name] = v;
    this.incRef(v, this.backend);
    return v;
  }

  incRef(a, backend) {
    const refCount = this.state.tensorInfo.has(a.dataId) ? this.state.tensorInfo.get(a.dataId).refCount : 0;
    this.state.numTensors++;

    if (a.dtype === 'string') {
      this.state.numStringTensors++;
    }

    if (refCount === 0) {
      this.state.numDataBuffers++; // Bytes for complex numbers are counted by their components. Bytes for
      // string tensors are counted when writing values.

      let bytes = 0;

      if (a.dtype !== 'complex64' && a.dtype !== 'string') {
        bytes = a.size * util.bytesPerElement(a.dtype);
      }

      this.state.tensorInfo.set(a.dataId, {
        backend: backend || this.backend,
        dtype: a.dtype,
        shape: a.shape,
        bytes,
        refCount: 0
      });
      this.state.numBytes += bytes;
    }

    this.state.tensorInfo.get(a.dataId).refCount++;

    if (!(a instanceof _tensor.Variable)) {
      this.track(a);
    }
  }

  disposeTensor(a) {
    if (!this.state.tensorInfo.has(a.dataId)) {
      return;
    }

    this.state.numTensors--;

    if (a.dtype === 'string') {
      this.state.numStringTensors--;
    }

    const info = this.state.tensorInfo.get(a.dataId);
    const refCount = info.refCount;

    if (refCount <= 1) {
      // Don't count bytes for complex numbers as they are counted by their
      // components.
      if (a.dtype !== 'complex64') {
        this.state.numBytes -= info.bytes;
      }

      this.state.numDataBuffers--;
      info.backend.disposeData(a.dataId);
      this.state.tensorInfo.delete(a.dataId);
    } else {
      this.state.tensorInfo.get(a.dataId).refCount--;
    } // TODO(nsthorat): Construct an error and save the stack trace for
    // debugging when in debug mode. Creating a stack trace is too expensive
    // to do unconditionally.

  }

  disposeVariables() {
    for (const varName in this.state.registeredVariables) {
      const v = this.state.registeredVariables[varName];
      this.disposeVariable(v);
    }
  }

  disposeVariable(v) {
    this.disposeTensor(v);

    if (this.state.registeredVariables[v.name] != null) {
      delete this.state.registeredVariables[v.name];
    }
  }

  memory() {
    const info = this.backend.memory();
    info.numTensors = this.state.numTensors;
    info.numDataBuffers = this.state.numDataBuffers;
    info.numBytes = this.state.numBytes;

    if (this.state.numStringTensors > 0) {
      info.unreliable = true;

      if (info.reasons == null) {
        info.reasons = [];
      }

      info.reasons.push('Memory usage by string tensors is approximate ' + '(2 bytes per character)');
    }

    return info;
  }

  async profile(query) {
    this.state.profiling = true;
    const startBytes = this.state.numBytes;
    const startNumTensors = this.state.numTensors;
    this.state.activeProfile.kernels = [];
    this.state.activeProfile.result = await query();
    this.state.profiling = false;
    this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));
    this.state.activeProfile.newBytes = this.state.numBytes - startBytes;
    this.state.activeProfile.newTensors = this.state.numTensors - startNumTensors;

    for (const kernel of this.state.activeProfile.kernels) {
      kernel.kernelTimeMs = await kernel.kernelTimeMs;
      kernel.extraInfo = await kernel.extraInfo;
    }

    return this.state.activeProfile;
  }

  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }

  addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {
    const tapeNode = {
      id: this.state.nextTapeNodeId++,
      kernelName,
      inputs,
      outputs,
      saved
    };
    const gradConfig = (0, _kernel_registry.getGradient)(kernelName);

    if (gradConfig != null) {
      gradientsFunc = gradConfig.gradFunc;
    }

    if (gradientsFunc != null) {
      tapeNode.gradient = dys => {
        // TODO(smilkov): To optimize back-prop, pass dys that are not used in
        // the backprop graph to the user as null instead of zeros
        dys = dys.map((dy, i) => {
          if (dy == null) {
            const output = outputs[i];
            const vals = util.makeZerosTypedArray(output.size, output.dtype);
            return this.makeTensor(vals, output.shape, output.dtype);
          }

          return dy;
        }); // Grad functions of ops with single outputs expect a dy, while ops
        // with multiple outputs expect dys (array of dy).

        return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);
      };
    }

    this.state.activeTape.push(tapeNode);
  }

  keep(result) {
    result.kept = true;
    return result;
  }

  startTape() {
    if (this.state.gradientDepth === 0) {
      this.state.activeTape = [];
    }

    this.state.gradientDepth++;
  }

  endTape() {
    this.state.gradientDepth--;
  }
  /**
   * Start a scope. Use this with endScope() to achieve the same functionality
   * as scope() without the need for a function closure.
   */


  startScope(name) {
    const scopeInfo = {
      track: [],
      name: 'unnamed scope',
      id: this.state.nextScopeId++
    };

    if (name) {
      scopeInfo.name = name;
    }

    this.state.scopeStack.push(scopeInfo);
    this.state.activeScope = scopeInfo;
  }
  /**
   * End a scope. Use this with startScope() to achieve the same functionality
   * as scope() without the need for a function closure.
   */


  endScope(result) {
    const tensorsToTrackInParent = (0, _tensor_util.getTensorsInContainer)(result);
    const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id)); // Dispose the arrays tracked in this scope.

    for (let i = 0; i < this.state.activeScope.track.length; i++) {
      const tensor = this.state.activeScope.track[i];

      if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {
        tensor.dispose();
      }
    }

    const oldScope = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1]; // Track the current result in the parent scope.

    tensorsToTrackInParent.forEach(tensor => {
      // Only track the tensor if was allocated in the inner scope and is not
      // globally kept.
      if (!tensor.kept && tensor.scopeId === oldScope.id) {
        this.track(tensor);
      }
    });
  }
  /**
   * Returns gradients of `f` with respect to each of the `xs`. The gradients
   * returned are of the same length as `xs`, but some might be null if `f`
   * was not a function of that `x`. It also takes optional dy to multiply the
   * gradient, which defaults to `1`.
   */


  gradients(f, xs, dy, allowNoGradients = false) {
    util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');

    if (dy != null && dy.dtype !== 'float32') {
      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);
    }

    const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));
    util.assert(y instanceof _tensor.Tensor, () => 'The result y returned by f() must be a tensor.'); // Filter out the nodes that don't connect x => y.

    const filteredTape = (0, _tape.getFilteredNodesXToY)(this.state.activeTape, xs, y);

    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {
      throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' + 'that the f you passed encloses all operations that lead from x ' + 'to y.');
    }

    return this.tidy('backward', () => {
      const accumulatedGradientMap = {};
      accumulatedGradientMap[y.id] = dy == null ? ones(y.shape) : dy; // Backprop gradients through the filtered nodes.

      (0, _tape.backpropagateGradients)(accumulatedGradientMap, filteredTape, // Pass the tidy function to avoid circular dep with `tape.ts`.
      f => this.tidy(f), // Pass an add function to avoide a circular dep with `tape.ts`.
      add);
      const grads = xs.map(x => accumulatedGradientMap[x.id]);

      if (this.state.gradientDepth === 0) {
        // This means that we are not computing higher-order gradients
        // and can clean up the tape.
        this.state.activeTape.forEach(node => {
          for (const tensor of node.saved) {
            tensor.dispose();
          }
        });
        this.state.activeTape = null;
      }

      return {
        value: y,
        grads
      };
    });
  }

  customGrad(f) {
    util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');
    return (...inputs) => {
      util.assert(inputs.every(t => t instanceof _tensor.Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' + 'tensors');
      let res;
      const inputMap = {};
      inputs.forEach((input, i) => {
        inputMap[i] = input;
      });
      return this.runKernelFunc((_, save) => {
        res = f(...[...inputs, save]);
        util.assert(res.value instanceof _tensor.Tensor, () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.value` is a tensor');
        util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function.');
        return res.value;
      }, inputMap, (dy, saved) => {
        const gradRes = res.gradFunc(dy, saved);
        const grads = Array.isArray(gradRes) ? gradRes : [gradRes];
        util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'the same number of tensors as inputs passed to f(...).');
        util.assert(grads.every(t => t instanceof _tensor.Tensor), () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'a list of only tensors.');
        const gradMap = {};
        grads.forEach((grad, i) => {
          gradMap[i] = () => grad;
        });
        return gradMap;
      });
    };
  }

  readSync(dataId) {
    // Route the read to the correct backend.
    const info = this.state.tensorInfo.get(dataId);
    return info.backend.readSync(dataId);
  }

  read(dataId) {
    // Route the read to the correct backend.
    const info = this.state.tensorInfo.get(dataId);
    return info.backend.read(dataId);
  }

  async time(query) {
    const start = (0, util.now)();
    const timingInfo = await this.backend.time(query);
    timingInfo.wallMs = (0, util.now)() - start;
    return timingInfo;
  }
  /**
   * Tracks a Tensor in the current scope to be automatically cleaned up
   * when the current scope ends, and returns the value.
   *
   * @param result The Tensor to track in the current scope.
   */


  track(result) {
    if (this.state.activeScope != null) {
      result.scopeId = this.state.activeScope.id;
      this.state.activeScope.track.push(result);
    }

    return result;
  }

  get registeredVariables() {
    return this.state.registeredVariables;
  }
  /**
   * Resets the engine state. Removes all backends but does not remove
   * registered backend factories.
   */


  reset() {
    // Make any pending promise obsolete.
    this.pendingBackendInitId++;
    this.state.dispose();
    this.ENV.reset();
    this.state = new EngineState();

    for (const backendName in this.registry) {
      this.disposeRegisteredKernels(backendName);
      this.registry[backendName].dispose();
      delete this.registry[backendName];
    }

    this.backendName = null;
    this.backendInstance = null;
    this.pendingBackendInit = null;
  }

}

exports.Engine = Engine;
Engine.nextTensorId = 0;
Engine.nextVariableId = 0;

function ones(shape) {
  const values = (0, util.makeOnesTypedArray)((0, util.sizeFromShape)(shape), 'float32');
  return ENGINE.makeTensor(values, shape, 'float32');
}

function getOrMakeEngine() {
  const ns = (0, _global_util.getGlobalNamespace)();

  if (ns._tfengine == null) {
    const environment = new _environment.Environment(ns);
    ns._tfengine = new Engine(environment);
  }

  (0, _environment.setEnvironmentGlobal)(ns._tfengine.ENV); // Tell the current tensor interface that the global engine is responsible
  // for tracking.

  (0, _tensor.setTensorTracker)(() => ns._tfengine);
  return ns._tfengine;
}

const ENGINE = getOrMakeEngine();
/**
 * A implementation of the add op for use within engine and tape.
 *
 * This allows us to avoid a circular dependency between add.ts and engine.
 * It is exported to be available in tape tests.
 */

exports.ENGINE = ENGINE;

function add(a, b) {
  // We duplicate Add here to avoid a circular dependency with add.ts.
  const inputs = {
    a,
    b
  };
  return ENGINE.runKernelFunc((backend, save) => {
    const res = backend.add(a, b);
    save([a, b]);
    return res;
  }, inputs, null
  /* gradient */
  , _kernel_names.Add);
}
},{"./environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","./global_util":"node_modules/@tensorflow/tfjs-core/dist/global_util.js","./kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","./kernel_registry":"node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js","./profiler":"node_modules/@tensorflow/tfjs-core/dist/profiler.js","./tape":"node_modules/@tensorflow/tfjs-core/dist/tape.js","./tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js","./tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","./util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/device_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isMobile = isMobile;
exports.isBrowser = isBrowser;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line:no-any
function _isNavigatorDefined() {
  return typeof navigator !== 'undefined' && navigator != null;
}

function isMobile() {
  if (_isNavigatorDefined()) {
    // tslint:disable-next-line:no-any
    const a = navigator.userAgent || navigator.vendor || window.opera; // tslint:disable-next-line:max-line-length

    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || // tslint:disable-next-line:max-line-length
    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4));
  }

  return false;
}

function isBrowser() {
  return typeof window !== 'undefined' && window.document != null || //@ts-ignore
  typeof WorkerGlobalScope !== 'undefined';
}
},{}],"node_modules/@tensorflow/tfjs-core/dist/flags.js":[function(require,module,exports) {
var process = require("process");
"use strict";

require("./engine");

var device_util = _interopRequireWildcard(require("./device_util"));

var _environment = require("./environment");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ENV = (0, _environment.env)();
/**
 * This file contains environment-related flag registrations.
 */

/** Whether to enable debug mode. */

ENV.registerFlag('DEBUG', () => false, debugValue => {
  if (debugValue) {
    console.warn('Debugging mode is ON. The output of every math call will ' + 'be downloaded to CPU and checked for NaNs. ' + 'This significantly impacts performance.');
  }
});
/** Whether we are in a browser (as versus, say, node.js) environment. */

ENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());
/** Whether we are in a browser (as versus, say, node.js) environment. */

ENV.registerFlag('IS_NODE', () => typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.node !== 'undefined');
/** Whether this browser is Chrome. */

ENV.registerFlag('IS_CHROME', () => typeof navigator !== 'undefined' && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
/**
 * True when the environment is "production" where we disable safety checks
 * to gain performance.
 */

ENV.registerFlag('PROD', () => false);
/**
 * Whether to do sanity checks when inferring a shape from user-provided
 * values, used when creating a new tensor.
 */

ENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));
/** Whether deprecation warnings are enabled. */

ENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);
/** True if running unit tests. */

ENV.registerFlag('IS_TEST', () => false);
},{"./engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","./device_util":"node_modules/@tensorflow/tfjs-core/dist/device_util.js","./environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","process":"node_modules/process/browser.js"}],"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inferShape = inferShape;
exports.convertToTensor = convertToTensor;
exports.convertToTensorArray = convertToTensorArray;

var _engine = require("./engine");

var _environment = require("./environment");

var _tensor = require("./tensor");

var _util = require("./util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function inferShape(val, dtype) {
  let firstElem = val;

  if ((0, _util.isTypedArray)(val)) {
    return dtype === 'string' ? [] : [val.length];
  }

  if (!Array.isArray(val)) {
    return []; // Scalar.
  }

  const shape = [];

  while (Array.isArray(firstElem) || (0, _util.isTypedArray)(firstElem) && dtype !== 'string') {
    shape.push(firstElem.length);
    firstElem = firstElem[0];
  }

  if (Array.isArray(val) && (0, _environment.env)().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {
    deepAssertShapeConsistency(val, shape, []);
  }

  return shape;
}

function deepAssertShapeConsistency(val, shape, indices) {
  indices = indices || [];

  if (!Array.isArray(val) && !(0, _util.isTypedArray)(val)) {
    (0, _util.assert)(shape.length === 0, () => `Element arr[${indices.join('][')}] is a primitive, ` + `but should be an array/TypedArray of ${shape[0]} elements`);
    return;
  }

  (0, _util.assert)(shape.length > 0, () => `Element arr[${indices.join('][')}] should be a primitive, ` + `but is an array of ${val.length} elements`);
  (0, _util.assert)(val.length === shape[0], () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` + `elements, but has ${val.length} elements`);
  const subShape = shape.slice(1);

  for (let i = 0; i < val.length; ++i) {
    deepAssertShapeConsistency(val[i], subShape, indices.concat(i));
  }
}

function assertDtype(expectedDtype, actualDType, argName, functionName) {
  if (expectedDtype == null) {
    return;
  }

  if (expectedDtype !== 'numeric' && expectedDtype !== actualDType || expectedDtype === 'numeric' && actualDType === 'string') {
    throw new Error(`Argument '${argName}' passed to '${functionName}' must ` + `be ${expectedDtype} tensor, but got ${actualDType} tensor`);
  }
}

function convertToTensor(x, argName, functionName, parseAsDtype = 'numeric') {
  if (x instanceof _tensor.Tensor) {
    assertDtype(parseAsDtype, x.dtype, argName, functionName);
    return x;
  }

  let inferredDtype = (0, _util.inferDtype)(x); // If the user expects a bool/int/float, use that info to update the
  // inferredDtype when it is not a string.

  if (inferredDtype !== 'string' && ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {
    inferredDtype = parseAsDtype;
  }

  assertDtype(parseAsDtype, inferredDtype, argName, functionName);

  if (x == null || !(0, _util.isTypedArray)(x) && !Array.isArray(x) && typeof x !== 'number' && typeof x !== 'boolean' && typeof x !== 'string') {
    const type = x == null ? 'null' : x.constructor.name;
    throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` + `Tensor or TensorLike, but got '${type}'`);
  }

  const inferredShape = inferShape(x, inferredDtype);

  if (!(0, _util.isTypedArray)(x) && !Array.isArray(x)) {
    x = [x];
  }

  const skipTypedArray = true;
  const values = inferredDtype !== 'string' ? (0, _util.toTypedArray)(x, inferredDtype) : (0, _util.flatten)(x, [], skipTypedArray);
  return _engine.ENGINE.makeTensor(values, inferredShape, inferredDtype);
}

function convertToTensorArray(arg, argName, functionName, parseAsDtype = 'numeric') {
  if (!Array.isArray(arg)) {
    throw new Error(`Argument ${argName} passed to ${functionName} must be a ` + '`Tensor[]` or `TensorLike[]`');
  }

  const tensors = arg;
  return tensors.map((t, i) => convertToTensor(t, `${argName}[${i}]`, functionName), parseAsDtype);
}
},{"./engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","./environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","./tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js","./util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.op = op;
exports.OP_SCOPE_SUFFIX = void 0;

var _engine = require("../engine");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OP_SCOPE_SUFFIX = '__op';
/**
 * Used for wrapping functions that perform math operations on
 * Tensors. The function will be wrapped in a named scope that cleans all
 * memory usage after the function is done.
 */

exports.OP_SCOPE_SUFFIX = OP_SCOPE_SUFFIX;

function op(f) {
  const keys = Object.keys(f);

  if (keys.length !== 1) {
    throw new Error(`Please provide an object with a single key ` + `(operation name) mapping to a function. Got an object with ` + `${keys.length} keys.`);
  }

  let opName = keys[0];
  const fn = f[opName]; // Strip the underscore from the end of the function name.

  if (opName.endsWith('_')) {
    opName = opName.substring(0, opName.length - 1);
  } // add an __op suffix to distinguish ops from kernels in tf.profile


  opName = opName + OP_SCOPE_SUFFIX; // tslint:disable-next-line:no-any

  const f2 = (...args) => {
    _engine.ENGINE.startScope(opName);

    try {
      const result = fn(...args);

      if (result instanceof Promise) {
        console.error('Cannot return a Promise inside of tidy.');
      }

      _engine.ENGINE.endScope(result);

      return result;
    } catch (ex) {
      _engine.ENGINE.endScope(null);

      throw ex;
    }
  };

  Object.defineProperty(f2, 'name', {
    value: opName,
    configurable: true
  }); // tslint:disable-next-line:no-any

  return f2;
}
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/complex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.complex = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Converts two real numbers to a complex number.
 *
 * Given a tensor `real` representing the real part of a complex number, and a
 * tensor `imag` representing the imaginary part of a complex number, this
 * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],
 * where r represents the real part and i represents the imag part.
 *
 * The input tensors real and imag must have the same shape.
 *
 * ```js
 * const real = tf.tensor1d([2.25, 3.25]);
 * const imag = tf.tensor1d([4.75, 5.75]);
 * const complex = tf.complex(real, imag);
 *
 * complex.print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function complex_(real, imag) {
  const $real = (0, _tensor_util_env.convertToTensor)(real, 'real', 'complex');
  const $imag = (0, _tensor_util_env.convertToTensor)(imag, 'imag', 'complex');
  util.assertShapesMatch($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` + `must match in call to tf.complex().`);

  const forward = backend => {
    return backend.complex($real, $imag);
  };

  const inputs = {
    real: $real,
    imag: $imag
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Complex);
}

const complex = (0, _operation.op)({
  complex_
});
exports.complex = complex;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeTensor = makeTensor;

var _engine = require("../engine");

var _util = require("../util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** This is shared code across all tensor creation methods. */
function makeTensor(values, shape, inferredShape, dtype) {
  if (dtype == null) {
    dtype = (0, _util.inferDtype)(values);
  }

  if (dtype === 'complex64') {
    throw new Error(`Cannot construct a complex64 tensor directly. ` + `Please use tf.complex(real, imag).`);
  }

  if (!(0, _util.isTypedArray)(values) && !Array.isArray(values) && typeof values !== 'number' && typeof values !== 'boolean' && typeof values !== 'string') {
    throw new Error('values passed to tensor(values) must be a number/boolean/string or ' + 'an array of numbers/booleans/strings, or a TypedArray');
  }

  if (shape != null) {
    (0, _util.assertNonNegativeIntegerDimensions)(shape);
    const providedSize = (0, _util.sizeFromShape)(shape);
    const inferredSize = (0, _util.sizeFromShape)(inferredShape);
    (0, _util.assert)(providedSize === inferredSize, () => `Based on the provided shape, [${shape}], the tensor should have ` + `${providedSize} values but has ${inferredSize}`);

    for (let i = 0; i < inferredShape.length; ++i) {
      const inferred = inferredShape[i];
      const flatDimsDontMatch = i === inferredShape.length - 1 ? inferred !== (0, _util.sizeFromShape)(shape.slice(i)) : true;
      (0, _util.assert)(inferredShape[i] === shape[i] || !flatDimsDontMatch, () => `Error creating a new Tensor. Inferred shape ` + `(${inferredShape}) does not match the provided ` + `shape (${shape}). `);
    }
  }

  if (!(0, _util.isTypedArray)(values) && !Array.isArray(values)) {
    values = [values];
  }

  shape = shape || inferredShape;
  values = dtype !== 'string' ? (0, _util.toTypedArray)(values, dtype) : (0, _util.flatten)(values, [], true);
  return _engine.ENGINE.makeTensor(values, shape, dtype);
}
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor = tensor;

var _tensor_util_env = require("../tensor_util_env");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with the provided values, shape and dtype.
 *
 * ```js
 * // Pass an array of values to create a vector.
 * tf.tensor([1, 2, 3, 4]).print();
 * ```
 *
 * ```js
 * // Pass a nested array of values to make a matrix or a higher
 * // dimensional tensor.
 * tf.tensor([[1, 2], [3, 4]]).print();
 * ```
 *
 * ```js
 * // Pass a flat array and specify a shape yourself.
 * tf.tensor([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`. If the values are strings,
 *     they will be encoded as utf-8 and kept as `Uint8Array[]`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor(values, shape, dtype) {
  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);
  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./tensor_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/io/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DTYPE_VALUE_SIZE_MAP = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/* Type definitions for exporting and importing of models. */

/**
 * A map from Tensor dtype to number of bytes per element of the Tensor.
 */
const DTYPE_VALUE_SIZE_MAP = {
  'float32': 4,
  'float16': 2,
  'int32': 4,
  'uint16': 2,
  'uint8': 1,
  'bool': 1,
  'complex64': 8
};
exports.DTYPE_VALUE_SIZE_MAP = DTYPE_VALUE_SIZE_MAP;
},{}],"node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"node_modules/ieee754/index.js":[function(require,module,exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"node_modules/base64-js/index.js","ieee754":"node_modules/ieee754/index.js","isarray":"node_modules/isarray/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeWeights = encodeWeights;
exports.decodeWeights = decodeWeights;
exports.concatenateTypedArrays = concatenateTypedArrays;
exports.stringByteLength = stringByteLength;
exports.arrayBufferToBase64String = arrayBufferToBase64String;
exports.base64StringToArrayBuffer = base64StringToArrayBuffer;
exports.concatenateArrayBuffers = concatenateArrayBuffers;
exports.basename = basename;
exports.getModelArtifactsInfoForJSON = getModelArtifactsInfoForJSON;
exports.getFloat16Decoder = getFloat16Decoder;

var _complex = require("../ops/complex");

var _tensor = require("../ops/tensor");

var _util = require("../util");

var _types = require("./types");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** Number of bytes reserved for the length of the string. (32bit integer). */
const NUM_BYTES_STRING_LENGTH = 4;
/**
 * Encode a map from names to weight values as an ArrayBuffer, along with an
 * `Array` of `WeightsManifestEntry` as specification of the encoded weights.
 *
 * This function does not perform sharding.
 *
 * This function is the reverse of `decodeWeights`.
 *
 * @param tensors A map ("dict") from names to tensors.
 * @param group Group to which the weights belong (optional).
 * @returns A `Promise` of
 *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s
 *     concatenated.
 *   - An `Array` of `WeightManifestEntry`s, carrying information including
 *     tensor names, `dtype`s and shapes.
 * @throws Error: on unsupported tensor `dtype`.
 */

async function encodeWeights(tensors, group) {
  // TODO(adarob, cais): Support quantization.
  const specs = [];
  const dataPromises = [];
  const names = Array.isArray(tensors) ? tensors.map(tensor => tensor.name) : Object.keys(tensors);

  for (let i = 0; i < names.length; ++i) {
    const name = names[i];
    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];

    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' && t.dtype !== 'string' && t.dtype !== 'complex64') {
      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);
    }

    const spec = {
      name,
      shape: t.shape,
      dtype: t.dtype
    };

    if (t.dtype === 'string') {
      const utf8bytes = new Promise(async resolve => {
        const vals = await t.bytes();
        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) + NUM_BYTES_STRING_LENGTH * vals.length;
        const bytes = new Uint8Array(totalNumBytes);
        let offset = 0;

        for (let i = 0; i < vals.length; i++) {
          const val = vals[i];
          const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);
          bytes.set(bytesOfLength, offset);
          offset += NUM_BYTES_STRING_LENGTH;
          bytes.set(val, offset);
          offset += val.length;
        }

        resolve(bytes);
      });
      dataPromises.push(utf8bytes);
    } else {
      dataPromises.push(t.data());
    }

    if (group != null) {
      spec.group = group;
    }

    specs.push(spec);
  }

  const tensorValues = await Promise.all(dataPromises);
  return {
    data: concatenateTypedArrays(tensorValues),
    specs
  };
}
/**
 * Decode flat ArrayBuffer as weights.
 *
 * This function does not handle sharding.
 *
 * This function is the reverse of `encodeWeights`.
 *
 * @param buffer A flat ArrayBuffer carrying the binary values of the tensors
 *   concatenated in the order specified in `specs`.
 * @param specs Specifications of the names, dtypes and shapes of the tensors
 *   whose value are encoded by `buffer`.
 * @return A map from tensor name to tensor value, with the names corresponding
 *   to names in `specs`.
 * @throws Error, if any of the tensors has unsupported dtype.
 */


function decodeWeights(buffer, specs) {
  // TODO(adarob, cais): Support quantization.
  const out = {};
  let float16Decode;
  let offset = 0;

  for (const spec of specs) {
    const name = spec.name;
    const dtype = spec.dtype;
    const shape = spec.shape;
    const size = (0, _util.sizeFromShape)(shape);
    let values;

    if ('quantization' in spec) {
      const quantization = spec.quantization;

      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {
        if (!('min' in quantization && 'scale' in quantization)) {
          throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` + `doesn't have corresponding metadata min and scale.`);
        }
      } else if (quantization.dtype === 'float16') {
        if (dtype !== 'float32') {
          throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` + `which only supports weights of type float32 not ${dtype}.`);
        }
      } else {
        throw new Error(`Weight ${spec.name} has unknown ` + `quantization dtype ${quantization.dtype}. ` + `Supported quantization dtypes are: ` + `'uint8', 'uint16', and 'float16'.`);
      }

      const quantizationSizeFactor = _types.DTYPE_VALUE_SIZE_MAP[quantization.dtype];
      const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);
      const quantizedArray = quantization.dtype === 'uint8' ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);

      if (dtype === 'float32') {
        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {
          values = new Float32Array(quantizedArray.length);

          for (let i = 0; i < quantizedArray.length; i++) {
            const v = quantizedArray[i];
            values[i] = v * quantization.scale + quantization.min;
          }
        } else if (quantization.dtype === 'float16') {
          if (float16Decode === undefined) {
            float16Decode = getFloat16Decoder();
          }

          values = float16Decode(quantizedArray);
        } else {
          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type float32.`);
        }
      } else if (dtype === 'int32') {
        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {
          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type int32.`);
        }

        values = new Int32Array(quantizedArray.length);

        for (let i = 0; i < quantizedArray.length; i++) {
          const v = quantizedArray[i];
          values[i] = Math.round(v * quantization.scale + quantization.min);
        }
      } else {
        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
      }

      offset += size * quantizationSizeFactor;
    } else if (dtype === 'string') {
      const size = (0, _util.sizeFromShape)(spec.shape);
      values = [];

      for (let i = 0; i < size; i++) {
        const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];
        offset += NUM_BYTES_STRING_LENGTH;
        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));
        values.push(bytes);
        offset += byteLength;
      }
    } else {
      const dtypeFactor = _types.DTYPE_VALUE_SIZE_MAP[dtype];
      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);

      if (dtype === 'float32') {
        values = new Float32Array(byteBuffer);
      } else if (dtype === 'int32') {
        values = new Int32Array(byteBuffer);
      } else if (dtype === 'bool') {
        values = new Uint8Array(byteBuffer);
      } else if (dtype === 'complex64') {
        values = new Float32Array(byteBuffer);
        const real = new Float32Array(values.length / 2);
        const image = new Float32Array(values.length / 2);

        for (let i = 0; i < real.length; i++) {
          real[i] = values[i * 2];
          image[i] = values[i * 2 + 1];
        }

        const realTensor = (0, _tensor.tensor)(real, shape, 'float32');
        const imageTensor = (0, _tensor.tensor)(image, shape, 'float32');
        out[name] = (0, _complex.complex)(realTensor, imageTensor);
      } else {
        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
      }

      offset += size * dtypeFactor;
    }

    if (dtype !== 'complex64') {
      out[name] = (0, _tensor.tensor)(values, shape, dtype);
    }
  }

  return out;
}
/**
 * Concatenate TypedArrays into an ArrayBuffer.
 */


function concatenateTypedArrays(xs) {
  // TODO(adarob, cais): Support quantization.
  if (xs === null) {
    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);
  }

  let totalByteLength = 0; // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'
  // can have a different byte length from that of the `TypedArray` itself,
  // for example, when the `TypedArray` is created from an offset in an
  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match
  // the `TypedArray` in byte length. If an element of `xs` does not show
  // this property, a new `TypedArray` that satisfy this property will be
  // constructed and pushed into `normalizedXs`.

  const normalizedXs = [];
  xs.forEach(x => {
    totalByteLength += x.byteLength; // tslint:disable:no-any

    normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));

    if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) {
      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);
    } // tslint:enable:no-any

  });
  const y = new Uint8Array(totalByteLength);
  let offset = 0;
  normalizedXs.forEach(x => {
    y.set(new Uint8Array(x.buffer), offset);
    offset += x.byteLength;
  });
  return y.buffer;
} // Use Buffer on Node.js instead of Blob/atob/btoa


const useNodeBuffer = typeof Buffer !== 'undefined' && (typeof Blob === 'undefined' || typeof atob === 'undefined' || typeof btoa === 'undefined');
/**
 * Calculate the byte length of a JavaScript string.
 *
 * Note that a JavaScript string can contain wide characters, therefore the
 * length of the string is not necessarily equal to the byte length.
 *
 * @param str Input string.
 * @returns Byte length.
 */

function stringByteLength(str) {
  if (useNodeBuffer) {
    return Buffer.byteLength(str);
  }

  return new Blob([str]).size;
}
/**
 * Encode an ArrayBuffer as a base64 encoded string.
 *
 * @param buffer `ArrayBuffer` to be converted.
 * @returns A string that base64-encodes `buffer`.
 */


function arrayBufferToBase64String(buffer) {
  if (useNodeBuffer) {
    return Buffer.from(buffer).toString('base64');
  }

  const buf = new Uint8Array(buffer);
  let s = '';

  for (let i = 0, l = buf.length; i < l; i++) {
    s += String.fromCharCode(buf[i]);
  }

  return btoa(s);
}
/**
 * Decode a base64 string as an ArrayBuffer.
 *
 * @param str Base64 string.
 * @returns Decoded `ArrayBuffer`.
 */


function base64StringToArrayBuffer(str) {
  if (useNodeBuffer) {
    const buf = Buffer.from(str, 'base64');
    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
  }

  const s = atob(str);
  const buffer = new Uint8Array(s.length);

  for (let i = 0; i < s.length; ++i) {
    buffer.set([s.charCodeAt(i)], i);
  }

  return buffer.buffer;
}
/**
 * Concatenate a number of ArrayBuffers into one.
 *
 * @param buffers A number of array buffers to concatenate.
 * @returns Result of concatenating `buffers` in order.
 */


function concatenateArrayBuffers(buffers) {
  if (buffers.length === 1) {
    return buffers[0];
  }

  let totalByteLength = 0;
  buffers.forEach(buffer => {
    totalByteLength += buffer.byteLength;
  });
  const temp = new Uint8Array(totalByteLength);
  let offset = 0;
  buffers.forEach(buffer => {
    temp.set(new Uint8Array(buffer), offset);
    offset += buffer.byteLength;
  });
  return temp.buffer;
}
/**
 * Get the basename of a path.
 *
 * Behaves in a way analogous to Linux's basename command.
 *
 * @param path
 */


function basename(path) {
  const SEPARATOR = '/';
  path = path.trim();

  while (path.endsWith(SEPARATOR)) {
    path = path.slice(0, path.length - 1);
  }

  const items = path.split(SEPARATOR);
  return items[items.length - 1];
}
/**
 * Populate ModelArtifactsInfo fields for a model with JSON topology.
 * @param modelArtifacts
 * @returns A ModelArtifactsInfo object.
 */


function getModelArtifactsInfoForJSON(modelArtifacts) {
  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
    throw new Error('Expected JSON model topology, received ArrayBuffer.');
  }

  return {
    dateSaved: new Date(),
    modelTopologyType: 'JSON',
    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),
    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),
    weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength
  };
}
/**
 * Computes mantisa table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 2048 mantissa lookup values.
 */


function computeFloat16MantisaTable() {
  const convertMantissa = i => {
    let m = i << 13;
    let e = 0;

    while ((m & 0x00800000) === 0) {
      e -= 0x00800000;
      m <<= 1;
    }

    m &= ~0x00800000;
    e += 0x38800000;
    return m | e;
  };

  const mantisaTable = new Uint32Array(2048);
  mantisaTable[0] = 0;

  for (let i = 1; i < 1024; i++) {
    mantisaTable[i] = convertMantissa(i);
  }

  for (let i = 1024; i < 2048; i++) {
    mantisaTable[i] = 0x38000000 + (i - 1024 << 13);
  }

  return mantisaTable;
}
/**
 * Computes exponent table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 64 exponent lookup values.
 */


function computeFloat16ExponentTable() {
  const exponentTable = new Uint32Array(64);
  exponentTable[0] = 0;
  exponentTable[31] = 0x47800000;
  exponentTable[32] = 0x80000000;
  exponentTable[63] = 0xc7800000;

  for (let i = 1; i < 31; i++) {
    exponentTable[i] = i << 23;
  }

  for (let i = 33; i < 63; i++) {
    exponentTable[i] = 0x80000000 + (i - 32 << 23);
  }

  return exponentTable;
}
/**
 * Computes offset table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 6d offset values.
 */


function computeFloat16OffsetTable() {
  const offsetTable = new Uint32Array(64);

  for (let i = 0; i < 64; i++) {
    offsetTable[i] = 1024;
  }

  offsetTable[0] = offsetTable[32] = 0;
  return offsetTable;
}
/**
 * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values
 * to a Float32Array.
 *
 * @returns Function (buffer: Uint16Array) => Float32Array which decodes
 *          the Uint16Array of Float16 bytes to a Float32Array.
 */


function getFloat16Decoder() {
  // Algorithm is based off of
  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
  // Cache lookup tables
  const mantisaTable = computeFloat16MantisaTable();
  const exponentTable = computeFloat16ExponentTable();
  const offsetTable = computeFloat16OffsetTable();
  return quantizedArray => {
    const buffer = new ArrayBuffer(4 * quantizedArray.length);
    const bufferUint32View = new Uint32Array(buffer);

    for (let index = 0; index < quantizedArray.length; index++) {
      const float16Bits = quantizedArray[index];
      const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] + exponentTable[float16Bits >> 10];
      bufferUint32View[index] = float32Bits;
    }

    return new Float32Array(buffer);
  };
}
},{"../ops/complex":"node_modules/@tensorflow/tfjs-core/dist/ops/complex.js","../ops/tensor":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./types":"node_modules/@tensorflow/tfjs-core/dist/io/types.js","buffer":"node_modules/buffer/index.js"}],"node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLoadHandlers = exports.getSaveHandlers = exports.registerLoadRouter = exports.registerSaveRouter = exports.IORouterRegistry = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class IORouterRegistry {
  constructor() {
    this.saveRouters = [];
    this.loadRouters = [];
  }

  static getInstance() {
    if (IORouterRegistry.instance == null) {
      IORouterRegistry.instance = new IORouterRegistry();
    }

    return IORouterRegistry.instance;
  }
  /**
   * Register a save-handler router.
   *
   * @param saveRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `save` method defined or `null`.
   */


  static registerSaveRouter(saveRouter) {
    IORouterRegistry.getInstance().saveRouters.push(saveRouter);
  }
  /**
   * Register a load-handler router.
   *
   * @param loadRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `load` method defined or `null`.
   */


  static registerLoadRouter(loadRouter) {
    IORouterRegistry.getInstance().loadRouters.push(loadRouter);
  }
  /**
   * Look up IOHandler for saving, given a URL-like string.
   *
   * @param url
   * @returns If only one match is found, an instance of IOHandler with the
   * `save` method defined. If no match is found, `null`.
   * @throws Error, if more than one match is found.
   */


  static getSaveHandlers(url) {
    return IORouterRegistry.getHandlers(url, 'save');
  }
  /**
   * Look up IOHandler for loading, given a URL-like string.
   *
   * @param url
   * @param loadOptions Optional, custom load options.
   * @returns All valid handlers for `url`, given the currently registered
   *   handler routers.
   */


  static getLoadHandlers(url, loadOptions) {
    return IORouterRegistry.getHandlers(url, 'load', loadOptions);
  }

  static getHandlers(url, handlerType, loadOptions) {
    const validHandlers = [];
    const routers = handlerType === 'load' ? IORouterRegistry.getInstance().loadRouters : IORouterRegistry.getInstance().saveRouters;
    routers.forEach(router => {
      const handler = router(url, loadOptions);

      if (handler !== null) {
        validHandlers.push(handler);
      }
    });
    return validHandlers;
  }

}

exports.IORouterRegistry = IORouterRegistry;

const registerSaveRouter = loudRouter => IORouterRegistry.registerSaveRouter(loudRouter);

exports.registerSaveRouter = registerSaveRouter;

const registerLoadRouter = loudRouter => IORouterRegistry.registerLoadRouter(loudRouter);

exports.registerLoadRouter = registerLoadRouter;

const getSaveHandlers = url => IORouterRegistry.getSaveHandlers(url);

exports.getSaveHandlers = getSaveHandlers;

const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);

exports.getLoadHandlers = getLoadHandlers;
},{}],"node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteDatabase = deleteDatabase;
exports.browserIndexedDB = browserIndexedDB;
exports.BrowserIndexedDBManager = exports.indexedDBRouter = exports.BrowserIndexedDB = void 0;

require("../flags");

var _environment = require("../environment");

var _io_utils = require("./io_utils");

var _router_registry = require("./router_registry");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DATABASE_NAME = 'tensorflowjs';
const DATABASE_VERSION = 1; // Model data and ModelArtifactsInfo (metadata) are stored in two separate
// stores for efficient access of the list of stored models and their metadata.
// 1. The object store for model data: topology, weights and weight manifests.

const MODEL_STORE_NAME = 'models_store'; // 2. The object store for ModelArtifactsInfo, including meta-information such
//    as the type of topology (JSON vs binary), byte size of the topology, byte
//    size of the weights, etc.

const INFO_STORE_NAME = 'model_info_store';
/**
 * Delete the entire database for tensorflow.js, including the models store.
 */

async function deleteDatabase() {
  const idbFactory = getIndexedDBFactory();
  return new Promise((resolve, reject) => {
    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);

    deleteRequest.onsuccess = () => resolve();

    deleteRequest.onerror = error => reject(error);
  });
}

function getIndexedDBFactory() {
  if (!(0, _environment.env)().getBool('IS_BROWSER')) {
    // TODO(cais): Add more info about what IOHandler subtypes are available.
    //   Maybe point to a doc page on the web and/or automatically determine
    //   the available IOHandlers and print them in the error message.
    throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');
  } // tslint:disable-next-line:no-any


  const theWindow = typeof window === 'undefined' ? self : window;
  const factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;

  if (factory == null) {
    throw new Error('The current browser does not appear to support IndexedDB.');
  }

  return factory;
}

function setUpDatabase(openRequest) {
  const db = openRequest.result;
  db.createObjectStore(MODEL_STORE_NAME, {
    keyPath: 'modelPath'
  });
  db.createObjectStore(INFO_STORE_NAME, {
    keyPath: 'modelPath'
  });
}
/**
 * IOHandler subclass: Browser IndexedDB.
 *
 * See the doc string of `browserIndexedDB` for more details.
 */


class BrowserIndexedDB {
  constructor(modelPath) {
    this.indexedDB = getIndexedDBFactory();

    if (modelPath == null || !modelPath) {
      throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');
    }

    this.modelPath = modelPath;
  }

  async save(modelArtifacts) {
    // TODO(cais): Support saving GraphDef models.
    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');
    }

    return this.databaseAction(this.modelPath, modelArtifacts);
  }

  async load() {
    return this.databaseAction(this.modelPath);
  }
  /**
   * Perform database action to put model artifacts into or read model artifacts
   * from IndexedDB object store.
   *
   * Whether the action is put or get depends on whether `modelArtifacts` is
   * specified. If it is specified, the action will be put; otherwise the action
   * will be get.
   *
   * @param modelPath A unique string path for the model.
   * @param modelArtifacts If specified, it will be the model artifacts to be
   *   stored in IndexedDB.
   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
   *   of `ModelArtifacts`, if the action is get.
   */


  databaseAction(modelPath, modelArtifacts) {
    return new Promise((resolve, reject) => {
      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);

      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);

      openRequest.onsuccess = () => {
        const db = openRequest.result;

        if (modelArtifacts == null) {
          // Read model out from object store.
          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');
          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
          const getRequest = modelStore.get(this.modelPath);

          getRequest.onsuccess = () => {
            if (getRequest.result == null) {
              db.close();
              return reject(new Error(`Cannot find model with path '${this.modelPath}' ` + `in IndexedDB.`));
            } else {
              resolve(getRequest.result.modelArtifacts);
            }
          };

          getRequest.onerror = error => {
            db.close();
            return reject(getRequest.error);
          };

          modelTx.oncomplete = () => db.close();
        } else {
          // Put model into object store.
          const modelArtifactsInfo = (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts); // First, put ModelArtifactsInfo into info store.

          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');
          let infoStore = infoTx.objectStore(INFO_STORE_NAME);
          const putInfoRequest = infoStore.put({
            modelPath: this.modelPath,
            modelArtifactsInfo
          });
          let modelTx;

          putInfoRequest.onsuccess = () => {
            // Second, put model data into model store.
            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');
            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
            const putModelRequest = modelStore.put({
              modelPath: this.modelPath,
              modelArtifacts,
              modelArtifactsInfo
            });

            putModelRequest.onsuccess = () => resolve({
              modelArtifactsInfo
            });

            putModelRequest.onerror = error => {
              // If the put-model request fails, roll back the info entry as
              // well.
              infoStore = infoTx.objectStore(INFO_STORE_NAME);
              const deleteInfoRequest = infoStore.delete(this.modelPath);

              deleteInfoRequest.onsuccess = () => {
                db.close();
                return reject(putModelRequest.error);
              };

              deleteInfoRequest.onerror = error => {
                db.close();
                return reject(putModelRequest.error);
              };
            };
          };

          putInfoRequest.onerror = error => {
            db.close();
            return reject(putInfoRequest.error);
          };

          infoTx.oncomplete = () => {
            if (modelTx == null) {
              db.close();
            } else {
              modelTx.oncomplete = () => db.close();
            }
          };
        }
      };

      openRequest.onerror = error => reject(openRequest.error);
    });
  }

}

exports.BrowserIndexedDB = BrowserIndexedDB;
BrowserIndexedDB.URL_SCHEME = 'indexeddb://';

const indexedDBRouter = url => {
  if (!(0, _environment.env)().getBool('IS_BROWSER')) {
    return null;
  } else {
    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {
      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));
    } else {
      return null;
    }
  }
};

exports.indexedDBRouter = indexedDBRouter;

_router_registry.IORouterRegistry.registerSaveRouter(indexedDBRouter);

_router_registry.IORouterRegistry.registerLoadRouter(indexedDBRouter);
/**
 * Creates a browser IndexedDB IOHandler for saving and loading models.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save('indexeddb://MyModel'));
 * console.log(saveResult);
 * ```
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),
 *   which can be used with, e.g., `tf.Model.save`.
 */


function browserIndexedDB(modelPath) {
  return new BrowserIndexedDB(modelPath);
}

function maybeStripScheme(key) {
  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;
}

class BrowserIndexedDBManager {
  constructor() {
    this.indexedDB = getIndexedDBFactory();
  }

  async listModels() {
    return new Promise((resolve, reject) => {
      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);

      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);

      openRequest.onsuccess = () => {
        const db = openRequest.result;
        const tx = db.transaction(INFO_STORE_NAME, 'readonly');
        const store = tx.objectStore(INFO_STORE_NAME); // tslint:disable:max-line-length
        // Need to cast `store` as `any` here because TypeScript's DOM
        // library does not have the `getAll()` method even though the
        // method is supported in the latest version of most mainstream
        // browsers:
        // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll
        // tslint:enable:max-line-length
        // tslint:disable-next-line:no-any

        const getAllInfoRequest = store.getAll();

        getAllInfoRequest.onsuccess = () => {
          const out = {};

          for (const item of getAllInfoRequest.result) {
            out[item.modelPath] = item.modelArtifactsInfo;
          }

          resolve(out);
        };

        getAllInfoRequest.onerror = error => {
          db.close();
          return reject(getAllInfoRequest.error);
        };

        tx.oncomplete = () => db.close();
      };

      openRequest.onerror = error => reject(openRequest.error);
    });
  }

  async removeModel(path) {
    path = maybeStripScheme(path);
    return new Promise((resolve, reject) => {
      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);

      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);

      openRequest.onsuccess = () => {
        const db = openRequest.result;
        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');
        const infoStore = infoTx.objectStore(INFO_STORE_NAME);
        const getInfoRequest = infoStore.get(path);
        let modelTx;

        getInfoRequest.onsuccess = () => {
          if (getInfoRequest.result == null) {
            db.close();
            return reject(new Error(`Cannot find model with path '${path}' ` + `in IndexedDB.`));
          } else {
            // First, delete the entry in the info store.
            const deleteInfoRequest = infoStore.delete(path);

            const deleteModelData = () => {
              // Second, delete the entry in the model store.
              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');
              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
              const deleteModelRequest = modelStore.delete(path);

              deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);

              deleteModelRequest.onerror = error => reject(getInfoRequest.error);
            }; // Proceed with deleting model data regardless of whether deletion
            // of info data succeeds or not.


            deleteInfoRequest.onsuccess = deleteModelData;

            deleteInfoRequest.onerror = error => {
              deleteModelData();
              db.close();
              return reject(getInfoRequest.error);
            };
          }
        };

        getInfoRequest.onerror = error => {
          db.close();
          return reject(getInfoRequest.error);
        };

        infoTx.oncomplete = () => {
          if (modelTx == null) {
            db.close();
          } else {
            modelTx.oncomplete = () => db.close();
          }
        };
      };

      openRequest.onerror = error => reject(openRequest.error);
    });
  }

}

exports.BrowserIndexedDBManager = BrowserIndexedDBManager;
},{"../flags":"node_modules/@tensorflow/tfjs-core/dist/flags.js","../environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","./io_utils":"node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js","./router_registry":"node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js"}],"node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.purgeLocalStorageArtifacts = purgeLocalStorageArtifacts;
exports.browserLocalStorage = browserLocalStorage;
exports.BrowserLocalStorageManager = exports.localStorageRouter = exports.BrowserLocalStorage = void 0;

require("../flags");

var _environment = require("../environment");

var _util = require("../util");

var _io_utils = require("./io_utils");

var _router_registry = require("./router_registry");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PATH_SEPARATOR = '/';
const PATH_PREFIX = 'tensorflowjs_models';
const INFO_SUFFIX = 'info';
const MODEL_TOPOLOGY_SUFFIX = 'model_topology';
const WEIGHT_SPECS_SUFFIX = 'weight_specs';
const WEIGHT_DATA_SUFFIX = 'weight_data';
const MODEL_METADATA_SUFFIX = 'model_metadata';
/**
 * Purge all tensorflow.js-saved model artifacts from local storage.
 *
 * @returns Paths of the models purged.
 */

function purgeLocalStorageArtifacts() {
  if (!(0, _environment.env)().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {
    throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' + 'unavailable in the current environment.');
  }

  const LS = window.localStorage;
  const purgedModelPaths = [];

  for (let i = 0; i < LS.length; ++i) {
    const key = LS.key(i);
    const prefix = PATH_PREFIX + PATH_SEPARATOR;

    if (key.startsWith(prefix) && key.length > prefix.length) {
      LS.removeItem(key);
      const modelName = getModelPathFromKey(key);

      if (purgedModelPaths.indexOf(modelName) === -1) {
        purgedModelPaths.push(modelName);
      }
    }
  }

  return purgedModelPaths;
}

function getModelKeys(path) {
  return {
    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),
    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),
    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),
    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),
    modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)
  };
}
/**
 * Get model path from a local-storage key.
 *
 * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'
 *
 * @param key
 */


function getModelPathFromKey(key) {
  const items = key.split(PATH_SEPARATOR);

  if (items.length < 3) {
    throw new Error(`Invalid key format: ${key}`);
  }

  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);
}

function maybeStripScheme(key) {
  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;
}
/**
 * IOHandler subclass: Browser Local Storage.
 *
 * See the doc string to `browserLocalStorage` for more details.
 */


class BrowserLocalStorage {
  constructor(modelPath) {
    if (!(0, _environment.env)().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {
      // TODO(cais): Add more info about what IOHandler subtypes are
      // available.
      //   Maybe point to a doc page on the web and/or automatically determine
      //   the available IOHandlers and print them in the error message.
      throw new Error('The current environment does not support local storage.');
    }

    this.LS = window.localStorage;

    if (modelPath == null || !modelPath) {
      throw new Error('For local storage, modelPath must not be null, undefined or empty.');
    }

    this.modelPath = modelPath;
    this.keys = getModelKeys(this.modelPath);
  }
  /**
   * Save model artifacts to browser local storage.
   *
   * See the documentation to `browserLocalStorage` for details on the saved
   * artifacts.
   *
   * @param modelArtifacts The model artifacts to be stored.
   * @returns An instance of SaveResult.
   */


  async save(modelArtifacts) {
    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');
    } else {
      const topology = JSON.stringify(modelArtifacts.modelTopology);
      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);
      const modelArtifactsInfo = (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts);

      try {
        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));
        this.LS.setItem(this.keys.topology, topology);
        this.LS.setItem(this.keys.weightSpecs, weightSpecs);
        this.LS.setItem(this.keys.weightData, (0, _io_utils.arrayBufferToBase64String)(modelArtifacts.weightData));
        this.LS.setItem(this.keys.modelMetadata, JSON.stringify({
          format: modelArtifacts.format,
          generatedBy: modelArtifacts.generatedBy,
          convertedBy: modelArtifacts.convertedBy,
          userDefinedMetadata: modelArtifacts.userDefinedMetadata
        }));
        return {
          modelArtifactsInfo
        };
      } catch (err) {
        // If saving failed, clean up all items saved so far.
        this.LS.removeItem(this.keys.info);
        this.LS.removeItem(this.keys.topology);
        this.LS.removeItem(this.keys.weightSpecs);
        this.LS.removeItem(this.keys.weightData);
        this.LS.removeItem(this.keys.modelMetadata);
        throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` + `size quota being exceeded is a possible cause of this failure: ` + `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` + `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` + `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);
      }
    }
  }
  /**
   * Load a model from local storage.
   *
   * See the documentation to `browserLocalStorage` for details on the saved
   * artifacts.
   *
   * @returns The loaded model (if loading succeeds).
   */


  async load() {
    const info = JSON.parse(this.LS.getItem(this.keys.info));

    if (info == null) {
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    }

    if (info.modelTopologyType !== 'JSON') {
      throw new Error('BrowserLocalStorage does not support loading non-JSON model ' + 'topology yet.');
    }

    const out = {}; // Load topology.

    const topology = JSON.parse(this.LS.getItem(this.keys.topology));

    if (topology == null) {
      throw new Error(`In local storage, the topology of model '${this.modelPath}' ` + `is missing.`);
    }

    out.modelTopology = topology; // Load weight specs.

    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));

    if (weightSpecs == null) {
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` + `are missing.`);
    }

    out.weightSpecs = weightSpecs; // Load meta-data fields.

    const metadataString = this.LS.getItem(this.keys.modelMetadata);

    if (metadataString != null) {
      const metadata = JSON.parse(metadataString);
      out.format = metadata['format'];
      out.generatedBy = metadata['generatedBy'];
      out.convertedBy = metadata['convertedBy'];
      out.userDefinedMetadata = metadata['userDefinedMetadata'];
    } // Load weight data.


    const weightDataBase64 = this.LS.getItem(this.keys.weightData);

    if (weightDataBase64 == null) {
      throw new Error(`In local storage, the binary weight values of model ` + `'${this.modelPath}' are missing.`);
    }

    out.weightData = (0, _io_utils.base64StringToArrayBuffer)(weightDataBase64);
    return out;
  }

}

exports.BrowserLocalStorage = BrowserLocalStorage;
BrowserLocalStorage.URL_SCHEME = 'localstorage://';

const localStorageRouter = url => {
  if (!(0, _environment.env)().getBool('IS_BROWSER')) {
    return null;
  } else {
    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {
      return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));
    } else {
      return null;
    }
  }
};

exports.localStorageRouter = localStorageRouter;

_router_registry.IORouterRegistry.registerSaveRouter(localStorageRouter);

_router_registry.IORouterRegistry.registerLoadRouter(localStorageRouter);
/**
 * Factory function for local storage IOHandler.
 *
 * This `IOHandler` supports both `save` and `load`.
 *
 * For each model's saved artifacts, four items are saved to local storage.
 *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the
 *     model, such as date saved, type of the topology, size in bytes, etc.
 *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-
 *     style models, this is a stringized JSON.
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the
 *     model, can be used to decode the saved binary weight values (see
 *     item below).
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary
 *     weight values, stored as a base64-encoded string.
 *
 * Saving may throw an `Error` if the total size of the artifacts exceed the
 * browser-specific quota.
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `IOHandler`, which can be used with, e.g.,
 *   `tf.Model.save`.
 */


function browserLocalStorage(modelPath) {
  return new BrowserLocalStorage(modelPath);
}

class BrowserLocalStorageManager {
  constructor() {
    (0, _util.assert)((0, _environment.env)().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');
    (0, _util.assert)(typeof window === 'undefined' || typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');
    this.LS = window.localStorage;
  }

  async listModels() {
    const out = {};
    const prefix = PATH_PREFIX + PATH_SEPARATOR;
    const suffix = PATH_SEPARATOR + INFO_SUFFIX;

    for (let i = 0; i < this.LS.length; ++i) {
      const key = this.LS.key(i);

      if (key.startsWith(prefix) && key.endsWith(suffix)) {
        const modelPath = getModelPathFromKey(key);
        out[modelPath] = JSON.parse(this.LS.getItem(key));
      }
    }

    return out;
  }

  async removeModel(path) {
    path = maybeStripScheme(path);
    const keys = getModelKeys(path);

    if (this.LS.getItem(keys.info) == null) {
      throw new Error(`Cannot find model at path '${path}'`);
    }

    const info = JSON.parse(this.LS.getItem(keys.info));
    this.LS.removeItem(keys.info);
    this.LS.removeItem(keys.topology);
    this.LS.removeItem(keys.weightSpecs);
    this.LS.removeItem(keys.weightData);
    return info;
  }

}

exports.BrowserLocalStorageManager = BrowserLocalStorageManager;
},{"../flags":"node_modules/@tensorflow/tfjs-core/dist/flags.js","../environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./io_utils":"node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js","./router_registry":"node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js"}],"node_modules/@tensorflow/tfjs-core/dist/io/model_management.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.moveModel = moveModel;
exports.copyModel = copyModel;
exports.removeModel = removeModel;
exports.listModels = listModels;
exports.ModelStoreManagerRegistry = void 0;

var _util = require("../util");

var _router_registry = require("./router_registry");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Classes and functions for model management across multiple storage mediums.
 *
 * Supported client actions:
 * - Listing models on all registered storage mediums.
 * - Remove model by URL from any registered storage mediums, by using URL
 *   string.
 * - Moving or copying model from one path to another in the same medium or from
 *   one medium to another, by using URL strings.
 */
const URL_SCHEME_SUFFIX = '://';

class ModelStoreManagerRegistry {
  constructor() {
    this.managers = {};
  }

  static getInstance() {
    if (ModelStoreManagerRegistry.instance == null) {
      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();
    }

    return ModelStoreManagerRegistry.instance;
  }
  /**
   * Register a save-handler router.
   *
   * @param saveRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `save` method defined or `null`.
   */


  static registerManager(scheme, manager) {
    (0, _util.assert)(scheme != null, () => 'scheme must not be undefined or null.');

    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {
      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));
    }

    (0, _util.assert)(scheme.length > 0, () => 'scheme must not be an empty string.');
    const registry = ModelStoreManagerRegistry.getInstance();
    (0, _util.assert)(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);
    registry.managers[scheme] = manager;
  }

  static getManager(scheme) {
    const manager = this.getInstance().managers[scheme];

    if (manager == null) {
      throw new Error(`Cannot find model manager for scheme '${scheme}'`);
    }

    return manager;
  }

  static getSchemes() {
    return Object.keys(this.getInstance().managers);
  }

}
/**
 * Helper method for parsing a URL string into a scheme and a path.
 *
 * @param url E.g., 'localstorage://my-model'
 * @returns A dictionary with two fields: scheme and path.
 *   Scheme: e.g., 'localstorage' in the example above.
 *   Path: e.g., 'my-model' in the example above.
 */


exports.ModelStoreManagerRegistry = ModelStoreManagerRegistry;

function parseURL(url) {
  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {
    throw new Error(`The url string provided does not contain a scheme. ` + `Supported schemes are: ` + `${ModelStoreManagerRegistry.getSchemes().join(',')}`);
  }

  return {
    scheme: url.split(URL_SCHEME_SUFFIX)[0],
    path: url.split(URL_SCHEME_SUFFIX)[1]
  };
}

async function cloneModelInternal(sourceURL, destURL, deleteSource = false) {
  (0, _util.assert)(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);

  const loadHandlers = _router_registry.IORouterRegistry.getLoadHandlers(sourceURL);

  (0, _util.assert)(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);
  (0, _util.assert)(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` + `load handlers for source URL ${sourceURL}.`);
  const loadHandler = loadHandlers[0];

  const saveHandlers = _router_registry.IORouterRegistry.getSaveHandlers(destURL);

  (0, _util.assert)(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` + `URL ${destURL}.`);
  (0, _util.assert)(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` + `save handlers for destination URL ${destURL}.`);
  const saveHandler = saveHandlers[0];
  const sourceScheme = parseURL(sourceURL).scheme;
  const sourcePath = parseURL(sourceURL).path;
  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;
  const modelArtifacts = await loadHandler.load(); // If moving within the same storage medium, remove the old model as soon as
  // the loading is done. Without doing this, it is possible that the combined
  // size of the two models will cause the cloning to fail.

  if (deleteSource && sameMedium) {
    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);
  }

  const saveResult = await saveHandler.save(modelArtifacts); // If moving between mediums, the deletion is done after the save succeeds.
  // This guards against the case in which saving to the destination medium
  // fails.

  if (deleteSource && !sameMedium) {
    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);
  }

  return saveResult.modelArtifactsInfo;
}
/**
 * List all models stored in registered storage mediums.
 *
 * For a web browser environment, the registered mediums are Local Storage and
 * IndexedDB.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @returns A `Promise` of a dictionary mapping URLs of existing models to
 * their model artifacts info. URLs include medium-specific schemes, e.g.,
 *   'indexeddb://my/model/1'. Model artifacts info include type of the
 * model's topology, byte sizes of the topology, weights, etc.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


async function listModels() {
  const schemes = ModelStoreManagerRegistry.getSchemes();
  const out = {};

  for (const scheme of schemes) {
    const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();

    for (const path in schemeOut) {
      const url = scheme + URL_SCHEME_SUFFIX + path;
      out[url] = schemeOut[path];
    }
  }

  return out;
}
/**
 * Remove a model specified by URL from a reigstered storage medium.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @param url A URL to a stored model, with a scheme prefix, e.g.,
 *   'localstorage://my-model-1', 'indexeddb://my/model/2'.
 * @returns ModelArtifactsInfo of the deleted model (if and only if deletion
 *   is successful).
 * @throws Error if deletion fails, e.g., if no model exists at `path`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


async function removeModel(url) {
  const schemeAndPath = parseURL(url);
  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);
  return manager.removeModel(schemeAndPath.path);
}
/**
 * Copy a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Copying within a storage medium, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Copying between two storage mediums, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Copy the model, from Local Storage to IndexedDB.
 * await tf.io.copyModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove both models.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of copying.
 * @param destURL Destination URL of copying.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


async function copyModel(sourceURL, destURL) {
  const deleteSource = false;
  return cloneModelInternal(sourceURL, destURL, deleteSource);
}
/**
 * Move a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Moving within a storage medium, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Moving between two storage mediums, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Move the model, from Local Storage to IndexedDB.
 * await tf.io.moveModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove the moved model.
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of moving.
 * @param destURL Destination URL of moving.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


async function moveModel(sourceURL, destURL) {
  const deleteSource = true;
  return cloneModelInternal(sourceURL, destURL, deleteSource);
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./router_registry":"node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js"}],"node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlatformBrowser = void 0;

require("../flags");

var _environment = require("../environment");

var _indexed_db = require("../io/indexed_db");

var _local_storage = require("../io/local_storage");

var _model_management = require("../io/model_management");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PlatformBrowser {
  fetch(path, init) {
    return fetch(path, init);
  }

  now() {
    return performance.now();
  }

  encode(text, encoding) {
    if (encoding !== 'utf-8' && encoding !== 'utf8') {
      throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);
    }

    if (this.textEncoder == null) {
      this.textEncoder = new TextEncoder();
    }

    return this.textEncoder.encode(text);
  }

  decode(bytes, encoding) {
    return new TextDecoder(encoding).decode(bytes);
  }

}

exports.PlatformBrowser = PlatformBrowser;

if ((0, _environment.env)().get('IS_BROWSER')) {
  (0, _environment.env)().setPlatform('browser', new PlatformBrowser()); // Register LocalStorage IOHandler

  try {
    _model_management.ModelStoreManagerRegistry.registerManager(_local_storage.BrowserLocalStorage.URL_SCHEME, new _local_storage.BrowserLocalStorageManager());
  } catch (err) {} // Register IndexedDB IOHandler


  try {
    _model_management.ModelStoreManagerRegistry.registerManager(_indexed_db.BrowserIndexedDB.URL_SCHEME, new _indexed_db.BrowserIndexedDBManager());
  } catch (err) {}
}
},{"../flags":"node_modules/@tensorflow/tfjs-core/dist/flags.js","../environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","../io/indexed_db":"node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js","../io/local_storage":"node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js","../io/model_management":"node_modules/@tensorflow/tfjs-core/dist/io/model_management.js"}],"node_modules/parcel-bundler/src/builtins/_empty.js":[function(require,module,exports) {

},{}],"node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetSystemFetch = resetSystemFetch;
exports.setSystemFetch = setSystemFetch;
exports.getSystemFetch = getSystemFetch;
exports.PlatformNode = exports.getNodeFetch = void 0;

var _environment = require("../environment");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// We are wrapping this within an object so it can be stubbed by Jasmine.
const getNodeFetch = {
  // tslint:disable-next-line:no-require-imports
  importFetch: () => require('node-fetch')
};
exports.getNodeFetch = getNodeFetch;
let systemFetch; // These getters and setters are for testing so we don't export a mutable
// variable.

function resetSystemFetch() {
  systemFetch = null;
}

function setSystemFetch(fetchFn) {
  systemFetch = fetchFn;
}

function getSystemFetch() {
  return systemFetch;
}

class PlatformNode {
  constructor() {
    // tslint:disable-next-line:no-require-imports
    this.util = require('util'); // According to the spec, the built-in encoder can do only UTF-8 encoding.
    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder

    this.textEncoder = new this.util.TextEncoder();
  }

  fetch(path, requestInits) {
    if ((0, _environment.env)().global.fetch != null) {
      return (0, _environment.env)().global.fetch(path, requestInits);
    }

    if (systemFetch == null) {
      systemFetch = getNodeFetch.importFetch();
    }

    return systemFetch(path, requestInits);
  }

  now() {
    const time = process.hrtime();
    return time[0] * 1000 + time[1] / 1000000;
  }

  encode(text, encoding) {
    if (encoding !== 'utf-8' && encoding !== 'utf8') {
      throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);
    }

    return this.textEncoder.encode(text);
  }

  decode(bytes, encoding) {
    if (bytes.length === 0) {
      return '';
    }

    return new this.util.TextDecoder(encoding).decode(bytes);
  }

}

exports.PlatformNode = PlatformNode;

if ((0, _environment.env)().get('IS_NODE')) {
  (0, _environment.env)().setPlatform('node', new PlatformNode());
}
},{"../environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","node-fetch":"node_modules/parcel-bundler/src/builtins/_empty.js","util":"node_modules/parcel-bundler/src/builtins/_empty.js","process":"node_modules/process/browser.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buffer = buffer;

var _tensor = require("../tensor");

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.
 *
 * The values are stored in CPU as `TypedArray`. Fill the buffer using
 * `buffer.set()`, or by modifying directly `buffer.values`.
 *
 * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with
 * those values.
 *
 * ```js
 * // Create a buffer and set values at particular indices.
 * const buffer = tf.buffer([2, 2]);
 * buffer.set(3, 0, 0);
 * buffer.set(5, 1, 0);
 *
 * // Convert the buffer back to a tensor.
 * buffer.toTensor().print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The dtype of the buffer. Defaults to 'float32'.
 * @param values The values of the buffer as `TypedArray`. Defaults to
 * zeros.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function buffer(shape, dtype = 'float32', values) {
  dtype = dtype || 'float32';
  util.assertNonNegativeIntegerDimensions(shape);
  return new _tensor.TensorBuffer(shape, dtype, values);
}
},{"../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cast = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Casts a `tf.Tensor` to a new dtype.
 *
 * ```js
 * const x = tf.tensor1d([1.5, 2.5, 3]);
 * tf.cast(x, 'int32').print();
 * ```
 * @param x The input tensor to be casted.
 * @param dtype The dtype to cast the input tensor to.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function cast_(x, dtype) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'cast'); // Sanity checks.

  if (!util.isValidDtype(dtype)) {
    throw new Error(`Failed to cast to unknown dtype ${dtype}`);
  }

  if (dtype === 'string' && $x.dtype !== 'string' || dtype !== 'string' && $x.dtype === 'string') {
    throw new Error('Only strings can be casted to strings');
  }

  const inputs = {
    x: $x
  };
  const attrs = {
    dtype
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.cast($x, dtype), inputs, null
  /* grad */
  , _kernel_names.Cast, attrs);
}

const cast = (0, _operation.op)({
  cast_
});
exports.cast = cast;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/clone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clone = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a new tensor with the same values and shape as the specified
 * tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 *
 * x.clone().print();
 * ```
 *
 * @param x The tensor to clone.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function clone_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'clone', null);

  const forward = () => _engine.ENGINE.makeTensorFromDataId($x.dataId, $x.shape, $x.dtype);

  const inputs = {
    x: $x
  }; // Note this op is called tf.identity in python. Hence the kernel name used
  // here.

  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Identity);
}

const clone = (0, _operation.op)({
  clone_
});
exports.clone = clone;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/print.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.print = print;

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Prints information about the `tf.Tensor` including its data.
 *
 * ```js
 * const verbose = true;
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);
 * ```
 * @param x The tensor to be printed.
 * @param verbose Whether to print verbose information about the ` Tensor`,
 * including dtype and size.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function print(x, verbose = false) {
  console.log(x.toString(verbose));
}
},{}],"node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js":[function(require,module,exports) {
"use strict";

var _engine = require("./engine");

require("./flags");

require("./platforms/platform_browser");

require("./platforms/platform_node");

var _buffer = require("./ops/buffer");

var _cast = require("./ops/cast");

var _clone = require("./ops/clone");

var _print = require("./ops/print");

var _tensor = require("./tensor");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Required side effectful code for tfjs-core
// Set up Engine and ENV
(0, _engine.getOrMakeEngine)(); // Register backend-agnostic flags.

const opHandler = {
  buffer: _buffer.buffer,
  cast: _cast.cast,
  clone: _clone.clone,
  print: _print.print
};
(0, _tensor.setOpHandler)(opHandler);
},{"./engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","./flags":"node_modules/@tensorflow/tfjs-core/dist/flags.js","./platforms/platform_browser":"node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js","./platforms/platform_node":"node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js","./ops/buffer":"node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","./ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./ops/clone":"node_modules/@tensorflow/tfjs-core/dist/ops/clone.js","./ops/print":"node_modules/@tensorflow/tfjs-core/dist/ops/print.js","./tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.browserDownloads = browserDownloads;
exports.browserFiles = browserFiles;
exports.browserDownloadsRouter = exports.BrowserDownloads = void 0;

require("../flags");

var _environment = require("../environment");

var _io_utils = require("./io_utils");

var _router_registry = require("./router_registry");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * IOHandlers related to files, such as browser-triggered file downloads,
 * user-selected files in browser.
 */
const DEFAULT_FILE_NAME_PREFIX = 'model';
const DEFAULT_JSON_EXTENSION_NAME = '.json';
const DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';

function defer(f) {
  return new Promise(resolve => setTimeout(resolve)).then(f);
}

class BrowserDownloads {
  constructor(fileNamePrefix) {
    if (!(0, _environment.env)().getBool('IS_BROWSER')) {
      // TODO(cais): Provide info on what IOHandlers are available under the
      //   current environment.
      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');
    }

    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {
      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);
    }

    if (fileNamePrefix == null || fileNamePrefix.length === 0) {
      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;
    }

    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;
    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
  }

  async save(modelArtifacts) {
    if (typeof document === 'undefined') {
      throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');
    }

    const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {
      type: 'application/octet-stream'
    }));

    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
      throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');
    } else {
      const weightsManifest = [{
        paths: ['./' + this.weightDataFileName],
        weights: modelArtifacts.weightSpecs
      }];
      const modelTopologyAndWeightManifest = {
        modelTopology: modelArtifacts.modelTopology,
        format: modelArtifacts.format,
        generatedBy: modelArtifacts.generatedBy,
        convertedBy: modelArtifacts.convertedBy,
        weightsManifest
      };
      const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {
        type: 'application/json'
      })); // If anchor elements are not provided, create them without attaching them
      // to parents, so that the downloaded file names can be controlled.

      const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') : this.jsonAnchor;
      jsonAnchor.download = this.modelTopologyFileName;
      jsonAnchor.href = modelTopologyAndWeightManifestURL; // Trigger downloads by evoking a click event on the download anchors.
      // When multiple downloads are started synchronously, Firefox will only
      // save the last one.

      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));

      if (modelArtifacts.weightData != null) {
        const weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;
        weightDataAnchor.download = this.weightDataFileName;
        weightDataAnchor.href = weightsURL;
        await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));
      }

      return {
        modelArtifactsInfo: (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts)
      };
    }
  }

}

exports.BrowserDownloads = BrowserDownloads;
BrowserDownloads.URL_SCHEME = 'downloads://';

class BrowserFiles {
  constructor(files) {
    if (files == null || files.length < 1) {
      throw new Error(`When calling browserFiles, at least 1 file is required, ` + `but received ${files}`);
    }

    this.files = files;
  }

  async load() {
    const jsonFile = this.files[0];
    const weightFiles = this.files.slice(1);
    return new Promise((resolve, reject) => {
      const jsonReader = new FileReader();

      jsonReader.onload = event => {
        // tslint:disable-next-line:no-any
        const modelJSON = JSON.parse(event.target.result);
        const modelTopology = modelJSON.modelTopology;

        if (modelTopology == null) {
          reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));
          return;
        }

        if (weightFiles.length === 0) {
          resolve({
            modelTopology
          });
        }

        const weightsManifest = modelJSON.weightsManifest;

        if (weightsManifest == null) {
          reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));
          return;
        }

        let pathToFile;

        try {
          pathToFile = this.checkManifestAndWeightFiles(weightsManifest, weightFiles);
        } catch (err) {
          reject(err);
          return;
        }

        const weightSpecs = [];
        const paths = [];
        const perFileBuffers = [];
        weightsManifest.forEach(weightsGroup => {
          weightsGroup.paths.forEach(path => {
            paths.push(path);
            perFileBuffers.push(null);
          });
          weightSpecs.push(...weightsGroup.weights);
        });
        weightsManifest.forEach(weightsGroup => {
          weightsGroup.paths.forEach(path => {
            const weightFileReader = new FileReader();

            weightFileReader.onload = event => {
              // tslint:disable-next-line:no-any
              const weightData = event.target.result;
              const index = paths.indexOf(path);
              perFileBuffers[index] = weightData;

              if (perFileBuffers.indexOf(null) === -1) {
                resolve({
                  modelTopology,
                  weightSpecs,
                  weightData: (0, _io_utils.concatenateArrayBuffers)(perFileBuffers),
                  format: modelJSON.format,
                  generatedBy: modelJSON.generatedBy,
                  convertedBy: modelJSON.convertedBy,
                  userDefinedMetadata: modelJSON.userDefinedMetadata
                });
              }
            };

            weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);

            weightFileReader.readAsArrayBuffer(pathToFile[path]);
          });
        });
      };

      jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` + `from file '${jsonFile.name}'. BrowserFiles supports loading ` + `Keras-style tf.Model artifacts only.`);

      jsonReader.readAsText(jsonFile);
    });
  }
  /**
   * Check the compatibility between weights manifest and weight files.
   */


  checkManifestAndWeightFiles(manifest, files) {
    const basenames = [];
    const fileNames = files.map(file => (0, _io_utils.basename)(file.name));
    const pathToFile = {};

    for (const group of manifest) {
      group.paths.forEach(path => {
        const pathBasename = (0, _io_utils.basename)(path);

        if (basenames.indexOf(pathBasename) !== -1) {
          throw new Error(`Duplicate file basename found in weights manifest: ` + `'${pathBasename}'`);
        }

        basenames.push(pathBasename);

        if (fileNames.indexOf(pathBasename) === -1) {
          throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);
        } else {
          pathToFile[path] = files[fileNames.indexOf(pathBasename)];
        }
      });
    }

    if (basenames.length !== files.length) {
      throw new Error(`Mismatch in the number of files in weights manifest ` + `(${basenames.length}) and the number of weight files provided ` + `(${files.length}).`);
    }

    return pathToFile;
  }

}

const browserDownloadsRouter = url => {
  if (!(0, _environment.env)().getBool('IS_BROWSER')) {
    return null;
  } else {
    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {
      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));
    } else {
      return null;
    }
  }
};

exports.browserDownloadsRouter = browserDownloadsRouter;

_router_registry.IORouterRegistry.registerSaveRouter(browserDownloadsRouter);
/**
 * Creates an IOHandler that triggers file downloads from the browser.
 *
 * The returned `IOHandler` instance can be used as model exporting methods such
 * as `tf.Model.save` and supports only saving.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * const saveResult = await model.save('downloads://mymodel');
 * // This will trigger downloading of two files:
 * //   'mymodel.json' and 'mymodel.weights.bin'.
 * console.log(saveResult);
 * ```
 *
 * @param fileNamePrefix Prefix name of the files to be downloaded. For use with
 *   `tf.Model`, `fileNamePrefix` should follow either of the following two
 *   formats:
 *   1. `null` or `undefined`, in which case the default file
 *      names will be used:
 *      - 'model.json' for the JSON file containing the model topology and
 *        weights manifest.
 *      - 'model.weights.bin' for the binary file containing the binary weight
 *        values.
 *   2. A single string or an Array of a single string, as the file name prefix.
 *      For example, if `'foo'` is provided, the downloaded JSON
 *      file and binary weights file will be named 'foo.json' and
 *      'foo.weights.bin', respectively.
 * @param config Additional configuration for triggering downloads.
 * @returns An instance of `BrowserDownloads` `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


function browserDownloads(fileNamePrefix = 'model') {
  return new BrowserDownloads(fileNamePrefix);
}
/**
 * Creates an IOHandler that loads model artifacts from user-selected files.
 *
 * This method can be used for loading from files such as user-selected files
 * in the browser.
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * // Note: This code snippet won't run properly without the actual file input
 * //   elements in the HTML DOM.
 *
 * // Suppose there are two HTML file input (`<input type="file" ...>`)
 * // elements.
 * const uploadJSONInput = document.getElementById('upload-json');
 * const uploadWeightsInput = document.getElementById('upload-weights');
 * const model = await tf.loadLayersModel(tf.io.browserFiles(
 *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));
 * ```
 *
 * @param files `File`s to load from. Currently, this function supports only
 *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for
 *   which an `Array` of `File`s is expected (in that order):
 *   - A JSON file containing the model topology and weight manifest.
 *   - Optionally, One or more binary files containing the binary weights.
 *     These files must have names that match the paths in the `weightsManifest`
 *     contained by the aforementioned JSON file, or errors will be thrown
 *     during loading. These weights files have the same format as the ones
 *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`
 *     Python PIP package. If no weights files are provided, only the model
 *     topology will be loaded from the JSON file above.
 * @returns An instance of `Files` `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


function browserFiles(files) {
  return new BrowserFiles(files);
}
},{"../flags":"node_modules/@tensorflow/tfjs-core/dist/flags.js","../environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","./io_utils":"node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js","./router_registry":"node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js"}],"node_modules/@tensorflow/tfjs-core/dist/io/progress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.monitorPromisesProgress = monitorPromisesProgress;

var _util = require("../util");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Monitor Promise.all progress, fire onProgress callback function.
 *
 * @param promises Promise list going to be monitored
 * @param onProgress Callback function. Fired when a promise resolved.
 * @param startFraction Optional fraction start. Default to 0.
 * @param endFraction Optional fraction end. Default to 1.
 */
function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {
  checkPromises(promises);
  startFraction = startFraction == null ? 0 : startFraction;
  endFraction = endFraction == null ? 1 : endFraction;
  checkFraction(startFraction, endFraction);
  let resolvedPromise = 0;

  const registerMonitor = promise => {
    promise.then(value => {
      const fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction); // pass fraction as parameter to callback function.

      onProgress(fraction);
      return value;
    });
    return promise;
  };

  function checkPromises(promises) {
    (0, _util.assert)(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');
  }

  function checkFraction(startFraction, endFraction) {
    (0, _util.assert)(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got startFraction ${startFraction}`);
    (0, _util.assert)(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got endFraction ${endFraction}`);
    (0, _util.assert)(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` + `got startFraction ${startFraction} and endFraction ` + `${endFraction}`);
  }

  return Promise.all(promises.map(registerMonitor));
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadWeightsAsArrayBuffer = loadWeightsAsArrayBuffer;
exports.loadWeights = loadWeights;
exports.weightsLoaderFactory = weightsLoaderFactory;

var _environment = require("../environment");

var util = _interopRequireWildcard(require("../util"));

var _io_utils = require("./io_utils");

var _progress = require("./progress");

var _types = require("./types");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reads binary weights data from a number of URLs.
 *
 * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.
 * @param requestOptions RequestInit (options) for the HTTP requests.
 * @param fetchFunc Optional overriding value for the `window.fetch` function.
 * @param onProgress Optional, progress callback function, fired periodically
 *   before the load is completed.
 * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same
 *   length as `fetchURLs`.
 */
async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {
  if (loadOptions == null) {
    loadOptions = {};
  }

  const fetchFunc = loadOptions.fetchFunc == null ? (0, _environment.env)().platform.fetch : loadOptions.fetchFunc; // Create the requests for all of the weights in parallel.

  const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, {
    isBinary: true
  }));
  const fetchStartFraction = 0;
  const fetchEndFraction = 0.5;
  const responses = loadOptions.onProgress == null ? await Promise.all(requests) : await (0, _progress.monitorPromisesProgress)(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);
  const bufferPromises = responses.map(response => response.arrayBuffer());
  const bufferStartFraction = 0.5;
  const bufferEndFraction = 1;
  const buffers = loadOptions.onProgress == null ? await Promise.all(bufferPromises) : await (0, _progress.monitorPromisesProgress)(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);
  return buffers;
}
/**
 * Reads a weights manifest JSON configuration, fetches the weights and
 * returns them as `Tensor`s.
 *
 * @param manifest The weights manifest JSON.
 * @param filePathPrefix The path prefix for filenames given in the manifest.
 *     Defaults to the empty string.
 * @param weightNames The names of the weights to be fetched.
 */


async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {
  // TODO(nsthorat): Groups are currently fetched atomically. If you need a
  // single weight from a group, the whole group will be fetched. At a future
  // date, we should support fetching only the individual shards within a
  // group that are needed to reconstruct the requested weight.
  // TODO(cais): Use `decodeWeights` for implementation.
  const fetchWeights = fetchUrls => loadWeightsAsArrayBuffer(fetchUrls, {
    requestInit
  });

  const loadWeights = weightsLoaderFactory(fetchWeights);
  return loadWeights(manifest, filePathPrefix, weightNames);
}
/**
 * Creates a function, which reads a weights manifest JSON configuration,
 * fetches the weight files using the specified function and returns them as
 * `Tensor`s.
 *
 * ```js
 * // example for creating a nodejs weight loader, which reads the weight files
 * // from disk using fs.readFileSync
 *
 * import * as fs from 'fs'
 *
 * const fetchWeightsFromDisk = (filePaths: string[]) =>
 *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)
 *
 * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)
 *
 * const manifest = JSON.parse(
 *   fs.readFileSync('./my_model-weights_manifest').toString()
 * )
 * const weightMap = await loadWeights(manifest, './')
 * ```
 * @param fetchWeightsFunction The function used for fetching the weight files.
 * @returns Weight loading function.
 */


function weightsLoaderFactory(fetchWeightsFunction) {
  return async (manifest, filePathPrefix = '', weightNames) => {
    // Collect all the groups, weights, and their relative offsets to be
    // fetched.
    const groupIndicesToFetchMap = manifest.map(() => false);
    const groupWeightsToFetch = {};
    const weightsFound = weightNames != null ? weightNames.map(() => false) : [];
    const allManifestWeightNames = [];
    manifest.forEach((manifestGroupConfig, groupIndex) => {
      let groupOffset = 0;
      manifestGroupConfig.weights.forEach(weightsEntry => {
        const rawDtype = 'quantization' in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;
        const weightsBytes = _types.DTYPE_VALUE_SIZE_MAP[rawDtype] * util.sizeFromShape(weightsEntry.shape);

        const enqueueWeightsForFetchingFn = () => {
          groupIndicesToFetchMap[groupIndex] = true;

          if (groupWeightsToFetch[groupIndex] == null) {
            groupWeightsToFetch[groupIndex] = [];
          }

          groupWeightsToFetch[groupIndex].push({
            manifestEntry: weightsEntry,
            groupOffset,
            sizeBytes: weightsBytes
          });
        };

        if (weightNames != null) {
          weightNames.forEach((weightName, weightIndex) => {
            if (weightName === weightsEntry.name) {
              enqueueWeightsForFetchingFn();
              weightsFound[weightIndex] = true;
            }
          });
        } else {
          enqueueWeightsForFetchingFn();
        }

        allManifestWeightNames.push(weightsEntry.name);
        groupOffset += weightsBytes;
      });
    });

    if (!weightsFound.every(found => found)) {
      const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);
      throw new Error(`Could not find weights in manifest with names: ` + `${weightsNotFound.join(', ')}. \n` + `Manifest JSON has weights with names: ` + `${allManifestWeightNames.join(', ')}.`);
    } // Convert the one-hot boolean groupId => shouldFetch map to a list of group
    // IDs.


    const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {
      if (shouldFetch) {
        accumulator.push(i);
      }

      return accumulator;
    }, []);
    const fetchUrls = [];
    groupIndicesToFetch.forEach(i => {
      manifest[i].paths.forEach(filepath => {
        const fetchUrl = filePathPrefix + (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;
        fetchUrls.push(fetchUrl);
      });
    });
    const buffers = await fetchWeightsFunction(fetchUrls);
    const weightsTensorMap = {};
    let bufferIndexOffset = 0;
    groupIndicesToFetch.forEach(i => {
      const numBuffers = manifest[i].paths.length;
      let groupBytes = 0;

      for (let i = 0; i < numBuffers; i++) {
        groupBytes += buffers[bufferIndexOffset + i].byteLength;
      } // Create a buffer for the whole group.


      const groupBuffer = new ArrayBuffer(groupBytes);
      const groupByteBuffer = new Uint8Array(groupBuffer);
      let groupBufferOffset = 0;

      for (let i = 0; i < numBuffers; i++) {
        const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);
        groupByteBuffer.set(buffer, groupBufferOffset);
        groupBufferOffset += buffer.byteLength;
      }

      const weightsEntries = groupWeightsToFetch[i];
      weightsEntries.forEach(weightsEntry => {
        const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);
        const nameToTensorMap = (0, _io_utils.decodeWeights)(byteBuffer, [weightsEntry.manifestEntry]);

        for (const name in nameToTensorMap) {
          weightsTensorMap[name] = nameToTensorMap[name];
        }
      });
      bufferIndexOffset += numBuffers;
    });
    return weightsTensorMap;
  };
}
},{"../environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./io_utils":"node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js","./progress":"node_modules/@tensorflow/tfjs-core/dist/io/progress.js","./types":"node_modules/@tensorflow/tfjs-core/dist/io/types.js"}],"node_modules/@tensorflow/tfjs-core/dist/io/http.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseUrl = parseUrl;
exports.isHTTPScheme = isHTTPScheme;
exports.http = http;
exports.browserHTTPRequest = browserHTTPRequest;
exports.httpRouter = exports.HTTPRequest = void 0;

var _environment = require("../environment");

var _util = require("../util");

var _io_utils = require("./io_utils");

var _router_registry = require("./router_registry");

var _weights_loader = require("./weights_loader");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * IOHandler implementations based on HTTP requests in the web browser.
 *
 * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 */
const OCTET_STREAM_MIME_TYPE = 'application/octet-stream';
const JSON_TYPE = 'application/json';

class HTTPRequest {
  constructor(path, loadOptions) {
    this.DEFAULT_METHOD = 'POST';

    if (loadOptions == null) {
      loadOptions = {};
    }

    this.weightPathPrefix = loadOptions.weightPathPrefix;
    this.onProgress = loadOptions.onProgress;
    this.weightUrlConverter = loadOptions.weightUrlConverter;

    if (loadOptions.fetchFunc != null) {
      (0, _util.assert)(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' + '`fetch` (see ' + 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');
      this.fetch = loadOptions.fetchFunc;
    } else {
      this.fetch = (0, _environment.env)().platform.fetch;
    }

    (0, _util.assert)(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' + 'empty.');

    if (Array.isArray(path)) {
      (0, _util.assert)(path.length === 2, () => 'URL paths for http must have a length of 2, ' + `(actual length is ${path.length}).`);
    }

    this.path = path;

    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {
      throw new Error('requestInit is expected to have no pre-existing body, but has one.');
    }

    this.requestInit = loadOptions.requestInit || {};
  }

  async save(modelArtifacts) {
    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
      throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');
    }

    const init = Object.assign({
      method: this.DEFAULT_METHOD
    }, this.requestInit);
    init.body = new FormData();
    const weightsManifest = [{
      paths: ['./model.weights.bin'],
      weights: modelArtifacts.weightSpecs
    }];
    const modelTopologyAndWeightManifest = {
      modelTopology: modelArtifacts.modelTopology,
      format: modelArtifacts.format,
      generatedBy: modelArtifacts.generatedBy,
      convertedBy: modelArtifacts.convertedBy,
      userDefinedMetadata: modelArtifacts.userDefinedMetadata,
      weightsManifest
    };
    init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {
      type: JSON_TYPE
    }), 'model.json');

    if (modelArtifacts.weightData != null) {
      init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], {
        type: OCTET_STREAM_MIME_TYPE
      }), 'model.weights.bin');
    }

    const response = await this.fetch(this.path, init);

    if (response.ok) {
      return {
        modelArtifactsInfo: (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts),
        responses: [response]
      };
    } else {
      throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` + `${response.status}.`);
    }
  }
  /**
   * Load model artifacts via HTTP request(s).
   *
   * See the documentation to `tf.io.http` for details on the saved
   * artifacts.
   *
   * @returns The loaded model artifacts (if loading succeeds).
   */


  async load() {
    const modelConfigRequest = await this.fetch(this.path, this.requestInit);

    if (!modelConfigRequest.ok) {
      throw new Error(`Request to ${this.path} failed with status code ` + `${modelConfigRequest.status}. Please verify this URL points to ` + `the model JSON of the model to load.`);
    }

    let modelConfig;

    try {
      modelConfig = await modelConfigRequest.json();
    } catch (e) {
      let message = `Failed to parse model JSON of response from ${this.path}.`; // TODO(nsthorat): Remove this after some time when we're comfortable that
      // .pb files are mostly gone.

      if (this.path.endsWith('.pb')) {
        message += ' Your path contains a .pb file extension. ' + 'Support for .pb models have been removed in TensorFlow.js 1.0 ' + 'in favor of .json models. You can re-convert your Python ' + 'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' + 'or you can convert your.pb models with the \'pb2json\'' + 'NPM script in the tensorflow/tfjs-converter repository.';
      } else {
        message += ' Please make sure the server is serving valid ' + 'JSON for this request.';
      }

      throw new Error(message);
    }

    const modelTopology = modelConfig.modelTopology;
    const weightsManifest = modelConfig.weightsManifest;
    const generatedBy = modelConfig.generatedBy;
    const convertedBy = modelConfig.convertedBy;
    const format = modelConfig.format;
    const userDefinedMetadata = modelConfig.userDefinedMetadata; // We do not allow both modelTopology and weightsManifest to be missing.

    if (modelTopology == null && weightsManifest == null) {
      throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` + `topology or manifest for weights.`);
    }

    let weightSpecs;
    let weightData;

    if (weightsManifest != null) {
      const results = await this.loadWeights(weightsManifest);
      [weightSpecs, weightData] = results;
    }

    return {
      modelTopology,
      weightSpecs,
      weightData,
      userDefinedMetadata,
      generatedBy,
      convertedBy,
      format
    };
  }

  async loadWeights(weightsManifest) {
    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;
    const [prefix, suffix] = parseUrl(weightPath);
    const pathPrefix = this.weightPathPrefix || prefix;
    const weightSpecs = [];

    for (const entry of weightsManifest) {
      weightSpecs.push(...entry.weights);
    }

    const fetchURLs = [];
    const urlPromises = [];

    for (const weightsGroup of weightsManifest) {
      for (const path of weightsGroup.paths) {
        if (this.weightUrlConverter != null) {
          urlPromises.push(this.weightUrlConverter(path));
        } else {
          fetchURLs.push(pathPrefix + path + suffix);
        }
      }
    }

    if (this.weightUrlConverter) {
      fetchURLs.push(...(await Promise.all(urlPromises)));
    }

    const buffers = await (0, _weights_loader.loadWeightsAsArrayBuffer)(fetchURLs, {
      requestInit: this.requestInit,
      fetchFunc: this.fetch,
      onProgress: this.onProgress
    });
    return [weightSpecs, (0, _io_utils.concatenateArrayBuffers)(buffers)];
  }

}

exports.HTTPRequest = HTTPRequest;
HTTPRequest.URL_SCHEME_REGEX = /^https?:\/\//;
/**
 * Extract the prefix and suffix of the url, where the prefix is the path before
 * the last file, and suffix is the search params after the last file.
 * ```
 * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'
 * [prefix, suffix] = parseUrl(url)
 * // prefix = 'http://tfhub.dev/model/1/'
 * // suffix = '?tfjs-format=file'
 * ```
 * @param url the model url to be parsed.
 */

function parseUrl(url) {
  const lastSlash = url.lastIndexOf('/');
  const lastSearchParam = url.lastIndexOf('?');
  const prefix = url.substring(0, lastSlash);
  const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';
  return [prefix + '/', suffix];
}

function isHTTPScheme(url) {
  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;
}

const httpRouter = (url, loadOptions) => {
  if (typeof fetch === 'undefined' && (loadOptions == null || loadOptions.fetchFunc == null)) {
    // `http` uses `fetch` or `node-fetch`, if one wants to use it in
    // an environment that is not the browser or node they have to setup a
    // global fetch polyfill.
    return null;
  } else {
    let isHTTP = true;

    if (Array.isArray(url)) {
      isHTTP = url.every(urlItem => isHTTPScheme(urlItem));
    } else {
      isHTTP = isHTTPScheme(url);
    }

    if (isHTTP) {
      return http(url, loadOptions);
    }
  }

  return null;
};

exports.httpRouter = httpRouter;

_router_registry.IORouterRegistry.registerSaveRouter(httpRouter);

_router_registry.IORouterRegistry.registerLoadRouter(httpRouter);
/**
 * Creates an IOHandler subtype that sends model artifacts to HTTP server.
 *
 * An HTTP request of the `multipart/form-data` mime type will be sent to the
 * `path` URL. The form data includes artifacts that represent the topology
 * and/or weights of the model. In the case of Keras-style `tf.Model`, two
 * blobs (files) exist in form-data:
 *   - A JSON file consisting of `modelTopology` and `weightsManifest`.
 *   - A binary weights file consisting of the concatenated weight values.
 * These files are in the same format as the one generated by
 * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).
 *
 * The following code snippet exemplifies the client-side code that uses this
 * function:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save(tf.io.http(
 *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));
 * console.log(saveResult);
 * ```
 *
 * If the default `POST` method is to be used, without any custom parameters
 * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:
 *
 * ```js
 * const saveResult = await model.save('http://model-server:5000/upload');
 * ```
 *
 * The following GitHub Gist
 * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864
 * implements a server based on [flask](https://github.com/pallets/flask) that
 * can receive the request. Upon receiving the model artifacts via the requst,
 * this particular server reconsistutes instances of [Keras
 * Models](https://keras.io/models/model/) in memory.
 *
 *
 * @param path A URL path to the model.
 *   Can be an absolute HTTP path (e.g.,
 *   'http://localhost:8000/model-upload)') or a relative path (e.g.,
 *   './model-upload').
 * @param requestInit Request configurations to be used when sending
 *    HTTP request to server using `fetch`. It can contain fields such as
 *    `method`, `credentials`, `headers`, `mode`, etc. See
 *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
 *    for more information. `requestInit` must not have a body, because the
 * body will be set by TensorFlow.js. File blobs representing the model
 * topology (filename: 'model.json') and the weights of the model (filename:
 * 'model.weights.bin') will be appended to the body. If `requestInit` has a
 * `body`, an Error will be thrown.
 * @param loadOptions Optional configuration for the loading. It includes the
 *   following fields:
 *   - weightPathPrefix Optional, this specifies the path prefix for weight
 *     files, by default this is calculated from the path param.
 *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,
 *     the `fetch` from node-fetch can be used here.
 *   - onProgress Optional, progress callback function, fired periodically
 *     before the load is completed.
 * @returns An instance of `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


function http(path, loadOptions) {
  return new HTTPRequest(path, loadOptions);
}
/**
 * Deprecated. Use `tf.io.http`.
 * @param path
 * @param loadOptions
 */


function browserHTTPRequest(path, loadOptions) {
  return http(path, loadOptions);
}
},{"../environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./io_utils":"node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js","./router_registry":"node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js","./weights_loader":"node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js"}],"node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromMemory = fromMemory;
exports.withSaveHandler = withSaveHandler;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PassthroughLoader {
  constructor(modelArtifacts) {
    this.modelArtifacts = modelArtifacts;
  }

  async load() {
    return this.modelArtifacts;
  }

}

class PassthroughSaver {
  constructor(saveHandler) {
    this.saveHandler = saveHandler;
  }

  async save(modelArtifacts) {
    return this.saveHandler(modelArtifacts);
  }

}
/**
 * Creates an IOHandler that loads model artifacts from memory.
 *
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * const model = await tf.loadLayersModel(tf.io.fromMemory(
 *     modelTopology, weightSpecs, weightData));
 * ```
 *
 * @param modelArtifacts a object containing model topology (i.e., parsed from
 *   the JSON format).
 * @param weightSpecs An array of `WeightsManifestEntry` objects describing the
 *   names, shapes, types, and quantization of the weight data.
 * @param weightData A single `ArrayBuffer` containing the weight data,
 *   concatenated in the order described by the weightSpecs.
 * @param trainingConfig Model training configuration. Optional.
 *
 * @returns A passthrough `IOHandler` that simply loads the provided data.
 */


function fromMemory(modelArtifacts, weightSpecs, weightData, trainingConfig) {
  if (arguments.length === 1) {
    const isModelArtifacts = modelArtifacts.modelTopology != null || modelArtifacts.weightSpecs != null;

    if (isModelArtifacts) {
      return new PassthroughLoader(modelArtifacts);
    } else {
      // Legacy support: with only modelTopology.
      // TODO(cais): Remove this deprecated API.
      console.warn('Please call tf.io.fromMemory() with only one argument. ' + 'The argument should be of type ModelArtifacts. ' + 'The multi-argument signature of tf.io.fromMemory() has been ' + 'deprecated and will be removed in a future release.');
      return new PassthroughLoader({
        modelTopology: modelArtifacts
      });
    }
  } else {
    // Legacy support.
    // TODO(cais): Remove this deprecated API.
    console.warn('Please call tf.io.fromMemory() with only one argument. ' + 'The argument should be of type ModelArtifacts. ' + 'The multi-argument signature of tf.io.fromMemory() has been ' + 'deprecated and will be removed in a future release.');
    return new PassthroughLoader({
      modelTopology: modelArtifacts,
      weightSpecs,
      weightData,
      trainingConfig
    });
  }
}
/**
 * Creates an IOHandler that passes saved model artifacts to a callback.
 *
 * ```js
 * function handleSave(artifacts) {
 *   // ... do something with the artifacts ...
 *   return {modelArtifactsInfo: {...}, ...};
 * }
 *
 * const saveResult = model.save(tf.io.withSaveHandler(handleSave));
 * ```
 *
 * @param saveHandler A function that accepts a `ModelArtifacts` and returns a
 *     `SaveResult`.
 */


function withSaveHandler(saveHandler) {
  return new PassthroughSaver(saveHandler);
}
},{}],"node_modules/@tensorflow/tfjs-core/dist/io/io.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "browserFiles", {
  enumerable: true,
  get: function () {
    return _browser_files.browserFiles;
  }
});
Object.defineProperty(exports, "browserHTTPRequest", {
  enumerable: true,
  get: function () {
    return _http.browserHTTPRequest;
  }
});
Object.defineProperty(exports, "http", {
  enumerable: true,
  get: function () {
    return _http.http;
  }
});
Object.defineProperty(exports, "isHTTPScheme", {
  enumerable: true,
  get: function () {
    return _http.isHTTPScheme;
  }
});
Object.defineProperty(exports, "concatenateArrayBuffers", {
  enumerable: true,
  get: function () {
    return _io_utils.concatenateArrayBuffers;
  }
});
Object.defineProperty(exports, "decodeWeights", {
  enumerable: true,
  get: function () {
    return _io_utils.decodeWeights;
  }
});
Object.defineProperty(exports, "encodeWeights", {
  enumerable: true,
  get: function () {
    return _io_utils.encodeWeights;
  }
});
Object.defineProperty(exports, "getModelArtifactsInfoForJSON", {
  enumerable: true,
  get: function () {
    return _io_utils.getModelArtifactsInfoForJSON;
  }
});
Object.defineProperty(exports, "fromMemory", {
  enumerable: true,
  get: function () {
    return _passthrough.fromMemory;
  }
});
Object.defineProperty(exports, "withSaveHandler", {
  enumerable: true,
  get: function () {
    return _passthrough.withSaveHandler;
  }
});
Object.defineProperty(exports, "getLoadHandlers", {
  enumerable: true,
  get: function () {
    return _router_registry.getLoadHandlers;
  }
});
Object.defineProperty(exports, "getSaveHandlers", {
  enumerable: true,
  get: function () {
    return _router_registry.getSaveHandlers;
  }
});
Object.defineProperty(exports, "registerLoadRouter", {
  enumerable: true,
  get: function () {
    return _router_registry.registerLoadRouter;
  }
});
Object.defineProperty(exports, "registerSaveRouter", {
  enumerable: true,
  get: function () {
    return _router_registry.registerSaveRouter;
  }
});
Object.defineProperty(exports, "loadWeights", {
  enumerable: true,
  get: function () {
    return _weights_loader.loadWeights;
  }
});
Object.defineProperty(exports, "weightsLoaderFactory", {
  enumerable: true,
  get: function () {
    return _weights_loader.weightsLoaderFactory;
  }
});
Object.defineProperty(exports, "copyModel", {
  enumerable: true,
  get: function () {
    return _model_management.copyModel;
  }
});
Object.defineProperty(exports, "listModels", {
  enumerable: true,
  get: function () {
    return _model_management.listModels;
  }
});
Object.defineProperty(exports, "moveModel", {
  enumerable: true,
  get: function () {
    return _model_management.moveModel;
  }
});
Object.defineProperty(exports, "removeModel", {
  enumerable: true,
  get: function () {
    return _model_management.removeModel;
  }
});

require("./indexed_db");

require("./local_storage");

var _browser_files = require("./browser_files");

var _http = require("./http");

var _io_utils = require("./io_utils");

var _passthrough = require("./passthrough");

var _router_registry = require("./router_registry");

var _weights_loader = require("./weights_loader");

var _model_management = require("./model_management");
},{"./indexed_db":"node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js","./local_storage":"node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js","./browser_files":"node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js","./http":"node_modules/@tensorflow/tfjs-core/dist/io/http.js","./io_utils":"node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js","./passthrough":"node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js","./router_registry":"node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js","./weights_loader":"node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js","./model_management":"node_modules/@tensorflow/tfjs-core/dist/io/model_management.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reshape = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reshapes a `tf.Tensor` to a given shape.
 *
 * Given an input tensor, returns a new tensor with the same values as the
 * input tensor with shape `shape`.
 *
 * If one component of shape is the special value -1, the size of that
 * dimension is computed so that the total size remains constant. In
 * particular, a shape of [-1] flattens into 1-D. At most one component of
 * shape can be -1.
 *
 * If shape is 1-D or higher, then the operation returns a tensor with shape
 * shape filled with the values of tensor. In this case, the number of
 * elements implied by shape must be the same as the number of elements in
 * tensor.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.reshape([2, 2]).print();
 * ```
 *
 * @param x The input tensor to be reshaped.
 * @param shape An array of integers defining the output tensor shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function reshape_(x, shape) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reshape', null);
  shape = util.inferFromImplicitShape(shape, $x.size);
  util.assert($x.size === util.sizeFromShape(shape), () => 'new shape and old shape must have the same number of elements.');
  const inputs = {
    x: $x
  };
  const attrs = {
    shape
  };

  const forward = (backend, save) => {
    save([$x]);
    return backend.reshape($x, shape);
  };

  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Reshape, attrs);
}

const reshape = (0, _operation.op)({
  reshape_
});
exports.reshape = reshape;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matMul = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the dot product of two matrices, A * B. These must be matrices.
 *
 * ```js
 * const a = tf.tensor2d([1, 2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.matMul(b).print();  // or tf.matMul(a, b)
 * ```
 * @param a First matrix in dot product operation.
 * @param b Second matrix in dot product operation.
 * @param transposeA If true, `a` is transposed before multiplication.
 * @param transposeB If true, `b` is transposed before multiplication.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function matMul_(a, b, transposeA = false, transposeB = false) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'matMul');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'matMul');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  util.assert($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, () => `Error in matMul: inputs must have the same rank of at least 2, ` + `got ranks ${$a.rank} and ${$b.rank}.`);
  const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];
  const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];
  const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];
  const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];
  const outerDimsA = $a.shape.slice(0, -2);
  const outerDimsB = $b.shape.slice(0, -2);
  const batchDimA = util.sizeFromShape(outerDimsA);
  const batchDimB = util.sizeFromShape(outerDimsB);
  util.assert(util.arraysEqual(outerDimsA, outerDimsB), () => `Error in matMul: outer dimensions (${outerDimsA}) and (` + `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} must match.`);
  util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);
  const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);
  const a3D = transposeA ? (0, _reshape.reshape)($a, [batchDimA, innerShapeA, outerShapeA]) : (0, _reshape.reshape)($a, [batchDimA, outerShapeA, innerShapeA]);
  const b3D = transposeB ? (0, _reshape.reshape)($b, [batchDimB, outerShapeB, innerShapeB]) : (0, _reshape.reshape)($b, [batchDimB, innerShapeB, outerShapeB]);

  const forward = (backend, save) => {
    save([a3D, b3D]);
    return backend.batchMatMul(a3D, b3D, transposeA, transposeB);
  };

  const inputs = {
    a: a3D,
    b: b3D
  };
  const attrs = {
    transposeA,
    transposeB
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.BatchMatMul, attrs);

  return (0, _reshape.reshape)(res, outShape);
}

const matMul = (0, _operation.op)({
  matMul_
});
exports.matMul = matMul;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.oneHot = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take
 * value `onValue` (defaults to 1), while all other locations take value
 * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank
 * `R+1` with the last axis of size `depth`.
 *
 * ```js
 * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();
 * ```
 *
 * @param indices `tf.Tensor` of indices with dtype `int32`.
 * @param depth The depth of the one hot dimension.
 * @param onValue A number used to fill in the output when the index matches
 * the location.
 * @param offValue A number used to fill in the output when the index does
 *     not match the location.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function oneHot_(indices, depth, onValue = 1, offValue = 0) {
  if (depth < 2) {
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);
  }

  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'oneHot', 'int32');
  const outShape = [...$indices.shape, depth];

  const forward = (backend, save) => {
    save([$indices]);
    return (0, _reshape.reshape)(backend.oneHot((0, _reshape.reshape)($indices, [$indices.size]), depth, onValue, offValue), outShape);
  };

  const inputs = {
    indices: $indices
  };
  const attrs = {
    depth,
    onValue,
    offValue
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.OneHot, attrs);
}

const oneHot = (0, _operation.op)({
  oneHot_
});
exports.oneHot = oneHot;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transpose = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.
 *
 * The returned `tf.Tensor`'s dimension `i` will correspond to the input
 * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,
 * where `n` is the rank of the input `tf.Tensor`. Hence by default, this
 * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);
 *
 * a.transpose().print();  // or tf.transpose(a)
 * ```
 *
 * @param x The tensor to transpose.
 * @param perm The permutation of the dimensions of a.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function transpose_(x, perm) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'transpose');

  if (perm == null) {
    perm = $x.shape.map((s, i) => i).reverse();
  }

  util.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` + `must match length of perm ${perm}.`);
  perm.forEach(axis => {
    util.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` + ` but got ${perm}`);
  });

  if ($x.rank <= 1) {
    return $x.clone();
  }

  const inputs = {
    x: $x
  };
  const attrs = {
    perm
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.transpose($x, perm), inputs, null
  /* gradient */
  , _kernel_names.Transpose, attrs);
}

const transpose = (0, _operation.op)({
  transpose_
});
exports.transpose = transpose;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/confusion_matrix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.confusionMatrix_ = confusionMatrix_;
exports.confusionMatrix = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _cast = require("./cast");

var _mat_mul = require("./mat_mul");

var _one_hot = require("./one_hot");

var _operation = require("./operation");

var _transpose = require("./transpose");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the confusion matrix from true labels and predicted labels.
 *
 * ```js
 * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');
 * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');
 * const numClasses = 3;
 * const out = tf.math.confusionMatrix(labels, predictions, numClasses);
 * out.print();
 * // Expected output matrix:
 * // [[2, 0, 0],
 * //  [0, 1, 1],
 * //  [0, 0, 1]]
 * ```
 *
 * @param labels The target labels, assumed to be 0-based integers
 *   for the classes. The shape is `[numExamples]`, where
 *   `numExamples` is the number of examples included.
 * @param predictions The predicted classes, assumed to be
 *   0-based integers for the classes. Must have the same shape as `labels`.
 * @param numClasses Number of all classes, as an integer.
 *   Its value must be larger than the largest element in `labels` and
 *   `predictions`.
 * @returns The confusion matrix as a int32-type 2D tensor. The value at
 *   row `r` and column `c` is the number of times examples of actual class
 *   `r` were predicted as class `c`.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
function confusionMatrix_(labels, predictions, numClasses) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'confusionMatrix');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'confusionMatrix');
  util.assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), () => `If provided, numClasses must be a positive integer, ` + `but got ${numClasses}`);
  util.assert($labels.rank === 1, () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);
  util.assert($predictions.rank === 1, () => `Expected the rank of predictions to be 1, ` + `but got ${$predictions.rank}`);
  util.assert($labels.shape[0] === $predictions.shape[0], () => `Mismatch in the number of examples: ` + `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` + `Labels and predictions should have the same number of elements.`);
  util.assert(numClasses > 0 && Number.isInteger(numClasses), () => `numClasses is required to be a positive integer, but got ` + `${numClasses}`); // TODO(cais): In the future, if oneHot supports tensors inputs for
  //   `numClasses`, `confusionMatrix` can make `numClasses` optional.

  const oneHotLabels = (0, _one_hot.oneHot)((0, _cast.cast)($labels, 'int32'), numClasses);
  const oneHotPredictions = (0, _one_hot.oneHot)((0, _cast.cast)($predictions, 'int32'), numClasses);
  const oneHotLabelsT = (0, _transpose.transpose)(oneHotLabels);
  return (0, _cast.cast)((0, _mat_mul.matMul)(oneHotLabelsT, oneHotPredictions), 'int32');
}

const confusionMatrix = (0, _operation.op)({
  confusionMatrix_
});
exports.confusionMatrix = confusionMatrix;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./mat_mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js","./one_hot":"node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "confusionMatrix", {
  enumerable: true,
  get: function () {
    return _confusion_matrix.confusionMatrix;
  }
});

var _confusion_matrix = require("./ops/confusion_matrix");
},{"./ops/confusion_matrix":"node_modules/@tensorflow/tfjs-core/dist/ops/confusion_matrix.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor3d = tensor3d;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor3d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided,  it is inferred from
 *     `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor3d(values, shape, dtype) {
  (0, _util.assertNonNull)(values);

  if (shape != null && shape.length !== 3) {
    throw new Error('tensor3d() requires shape to have three numbers');
  }

  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);

  if (inferredShape.length !== 3 && inferredShape.length !== 1) {
    throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');
  }

  if (inferredShape.length === 1 && shape == null) {
    throw new Error('tensor3d() requires shape to be provided when `values` ' + 'are a flat array');
  }

  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./tensor_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toPixels = toPixels;
exports.fromPixels = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _kernel_registry = require("../kernel_registry");

var _tensor = require("../tensor");

var _tensor_util_env = require("../tensor_util_env");

var _cast = require("./cast");

var _operation = require("./operation");

var _tensor3d = require("./tensor3d");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let fromPixels2DContext;
/**
 * Creates a `tf.Tensor` from an image.
 *
 * ```js
 * const image = new ImageData(1, 1);
 * image.data[0] = 100;
 * image.data[1] = 150;
 * image.data[2] = 200;
 * image.data[3] = 255;
 *
 * tf.browser.fromPixels(image).print();
 * ```
 *
 * @param pixels The input image to construct the tensor from. The
 * supported image types are all 4-channel. You can also pass in an image
 * object with following attributes:
 * `{data: Uint8Array; width: number; height: number}`
 * @param numChannels The number of channels of the output tensor. A
 * numChannels value less than 4 allows you to ignore channels. Defaults to
 * 3 (ignores alpha channel of input image).
 *
 * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}
 */

function fromPixels_(pixels, numChannels = 3) {
  // Sanity checks.
  if (numChannels > 4) {
    throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');
  }

  if (pixels == null) {
    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');
  }

  let isPixelData = false;
  let isImageData = false;
  let isVideo = false;
  let isImage = false;
  let isCanvasLike = false;

  if (pixels.data instanceof Uint8Array) {
    isPixelData = true;
  } else if (typeof ImageData !== 'undefined' && pixels instanceof ImageData) {
    isImageData = true;
  } else if (typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement) {
    isVideo = true;
  } else if (typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement) {
    isImage = true; // tslint:disable-next-line: no-any
  } else if (pixels.getContext != null) {
    isCanvasLike = true;
  } else {
    throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' + `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` + `in browser, or OffscreenCanvas, ImageData in webworker` + ` or {data: Uint32Array, width: number, height: number}, ` + `but was ${pixels.constructor.name}`);
  }

  if (isVideo) {
    const HAVE_CURRENT_DATA_READY_STATE = 2;

    if (isVideo && pixels.readyState < HAVE_CURRENT_DATA_READY_STATE) {
      throw new Error('The video element has not loaded data yet. Please wait for ' + '`loadeddata` event on the <video> element.');
    }
  } // If the current backend has 'FromPixels' registered, it has a more
  // efficient way of handling pixel uploads, so we call that.


  const kernel = (0, _kernel_registry.getKernel)(_kernel_names.FromPixels, _engine.ENGINE.backendName);

  if (kernel != null) {
    const inputs = {
      pixels
    };
    const attrs = {
      numChannels
    };
    return _engine.ENGINE.runKernel(_kernel_names.FromPixels, inputs, attrs);
  }

  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];
  let vals;

  if (isCanvasLike) {
    vals = // tslint:disable-next-line:no-any
    pixels.getContext('2d').getImageData(0, 0, width, height).data;
  } else if (isImageData || isPixelData) {
    vals = pixels.data;
  } else if (isImage || isVideo) {
    if (fromPixels2DContext == null) {
      fromPixels2DContext = document.createElement('canvas').getContext('2d');
    }

    fromPixels2DContext.canvas.width = width;
    fromPixels2DContext.canvas.height = height;
    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;
  }

  let values;

  if (numChannels === 4) {
    values = new Int32Array(vals);
  } else {
    const numPixels = width * height;
    values = new Int32Array(numPixels * numChannels);

    for (let i = 0; i < numPixels; i++) {
      for (let channel = 0; channel < numChannels; ++channel) {
        values[i * numChannels + channel] = vals[i * 4 + channel];
      }
    }
  }

  const outShape = [height, width, numChannels];
  return (0, _tensor3d.tensor3d)(values, outShape, 'int32');
}
/**
 * Draws a `tf.Tensor` of pixel values to a byte array or optionally a
 * canvas.
 *
 * When the dtype of the input is 'float32', we assume values in the range
 * [0-1]. Otherwise, when input is 'int32', we assume values in the range
 * [0-255].
 *
 * Returns a promise that resolves when the canvas has been drawn to.
 *
 * @param img A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If
 *     rank-3, must have depth of 1, 3 or 4. When depth of 1, draws
 * grayscale. When depth of 3, we draw with the first three components of
 * the depth dimension corresponding to r, g, b and alpha = 1. When depth of
 * 4, all four components of the depth dimension correspond to r, g, b, a.
 * @param canvas The canvas to draw to.
 *
 * @doc {heading: 'Browser', namespace: 'browser'}
 */


async function toPixels(img, canvas) {
  let $img = (0, _tensor_util_env.convertToTensor)(img, 'img', 'toPixels');

  if (!(img instanceof _tensor.Tensor)) {
    // Assume int32 if user passed a native array.
    const originalImgTensor = $img;
    $img = (0, _cast.cast)(originalImgTensor, 'int32');
    originalImgTensor.dispose();
  }

  if ($img.rank !== 2 && $img.rank !== 3) {
    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);
  }

  const [height, width] = $img.shape.slice(0, 2);
  const depth = $img.rank === 2 ? 1 : $img.shape[2];

  if (depth > 4 || depth === 2) {
    throw new Error(`toPixels only supports depth of size ` + `1, 3 or 4 but got ${depth}`);
  }

  if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {
    throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` + ` Please use float32 or int32 tensors.`);
  }

  const data = await $img.data();
  const multiplier = $img.dtype === 'float32' ? 255 : 1;
  const bytes = new Uint8ClampedArray(width * height * 4);

  for (let i = 0; i < height * width; ++i) {
    const rgba = [0, 0, 0, 255];

    for (let d = 0; d < depth; d++) {
      const value = data[i * depth + d];

      if ($img.dtype === 'float32') {
        if (value < 0 || value > 1) {
          throw new Error(`Tensor values for a float32 Tensor must be in the ` + `range [0 - 1] but encountered ${value}.`);
        }
      } else if ($img.dtype === 'int32') {
        if (value < 0 || value > 255) {
          throw new Error(`Tensor values for a int32 Tensor must be in the ` + `range [0 - 255] but encountered ${value}.`);
        }
      }

      if (depth === 1) {
        rgba[0] = value * multiplier;
        rgba[1] = value * multiplier;
        rgba[2] = value * multiplier;
      } else {
        rgba[d] = value * multiplier;
      }
    }

    const j = i * 4;
    bytes[j + 0] = Math.round(rgba[0]);
    bytes[j + 1] = Math.round(rgba[1]);
    bytes[j + 2] = Math.round(rgba[2]);
    bytes[j + 3] = Math.round(rgba[3]);
  }

  if (canvas != null) {
    canvas.width = width;
    canvas.height = height;
    const ctx = canvas.getContext('2d');
    const imageData = new ImageData(bytes, width, height);
    ctx.putImageData(imageData, 0, 0);
  }

  if ($img !== img) {
    $img.dispose();
  }

  return bytes;
}

const fromPixels = (0, _operation.op)({
  fromPixels_
});
exports.fromPixels = fromPixels;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../kernel_registry":"node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js","../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./tensor3d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepareAndValidate = prepareAndValidate;

var _util = require("../util");

/**
 * Validate gather nd inputs.
 *
 * @param tensor The tensor contains the source values.
 * @param indices The tensor contains the indices to slice the source.
 *
 * @returns [resultShape, numUpdates, sliceSize, strides]
 */
function prepareAndValidate(tensor, indices) {
  if (tensor.rank < 1) {
    throw new Error('tf.gatherND() expects the input to be rank 1 or higher,' + ` but the rank was ${tensor.rank}.`);
  }

  if (indices.rank < 1) {
    throw new Error('tf.gatherND() expects the indices to be rank 1 or higher,' + ` but the rank was ${indices.rank}.`);
  }

  if (indices.dtype !== 'int32') {
    throw new Error('tf.gatherND() expects the indices to be int32 type,' + ` but the dtype was ${indices.dtype}.`);
  }

  if (indices.shape[indices.rank - 1] > tensor.rank) {
    throw new Error('index innermost dimension length must be <= tensor rank; saw: ' + `${indices.shape[indices.rank - 1]} vs. ${tensor.rank}`);
  }

  if (tensor.size === 0) {
    throw new Error('Requested more than 0 entries, but input is empty.' + ` Input shape: ${tensor.shape}.`);
  }

  const indicesShape = indices.shape;
  const sliceRank = indicesShape[indicesShape.length - 1]; // The result shape is
  //   indices.shape[:-1] + params.shape[indices.shape[-1]:]

  let nResult = 1;

  for (let i = 0; i < indicesShape.length - 1; ++i) {
    nResult *= indicesShape[i];
  }

  const inputShape = tensor.shape;
  const resultShape = indicesShape.slice();
  resultShape.pop();
  let sliceSize = 1;

  for (let i = sliceRank; i < tensor.rank; ++i) {
    sliceSize *= inputShape[i];
    resultShape.push(inputShape[i]);
  }

  const strides = [...(0, _util.computeStrides)(tensor.shape).map(stride => stride / sliceSize), 1].slice(0, sliceRank);
  return [resultShape, nResult, sliceSize, strides];
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateUpdateShape = validateUpdateShape;
exports.validateInput = validateInput;
exports.calculateShapes = calculateShapes;

var _util = require("../util");

/**
 * Check whether updates.shape = indices.shape[:batchDim] +
 * shape[sliceDim:]
 *
 * @param x The input tensor.
 */
function validateUpdateShape(shape, indices, updates) {
  const sliceDim = indices.rank > 1 ? indices.shape[indices.rank - 1] : 1;
  const batchDim = indices.rank > 1 ? indices.rank - 1 : 1;
  const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' + `shape[sliceDim:], got updates.shape: ${updates.shape}` + `, indices.shape: ${indices.shape}, shape: ${shape}` + `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;

  if (updates.rank < batchDim) {
    throw new Error(shapeError + ` update.rank < ${batchDim}. `);
  }

  if (shape.length < sliceDim + (updates.rank - batchDim)) {
    throw new Error(shapeError + ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);
  }

  if (updates.rank !== batchDim + shape.length - sliceDim) {
    throw new Error(shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);
  }

  for (let d = 0; d < batchDim; ++d) {
    if (updates.shape[d] !== indices.shape[d]) {
      throw new Error(shapeError + ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${indices.shape[d]}).`);
    }
  }

  for (let d = 0; d < updates.rank - batchDim; ++d) {
    if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {
      throw new Error(shapeError + ` updates.shape[${d + batchDim}] (${updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${shape[d + batchDim]})`);
    }
  }
}
/**
 * Validate scatter nd inputs.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 */


function validateInput(updates, indices, shape) {
  if (indices.rank < 1) {
    throw new Error('tf.scatterND() expects the indices to be rank 1 or higher,' + ` but the rank was ${indices.rank}.`);
  }

  if (updates.rank < 1) {
    throw new Error('tf.scatterND() expects the updates to be rank 1 or higher,' + ` but the rank was ${updates.rank}.`);
  }

  if (indices.dtype !== 'int32') {
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${indices.dtype}`);
  }

  if (shape.length < 1) {
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${shape}`);
  }

  if (shape.length === 0) {
    if (indices.size === 0) {
      throw new Error(`Indices specified for empty output. indices shape: ${indices.shape}`);
    }

    if (updates.size === 0) {
      throw new Error(`Updates specified for empty output. updates shape: ${updates.shape}`);
    }
  }

  validateUpdateShape(shape, indices, updates);
}
/**
 * Calculate the shape information for the output.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 *
 * @returns ScatterShapeInfo
 */


function calculateShapes(updates, indices, shape) {
  // Calculate the number of dimensions in indices
  const indicesRank = indices.shape.length;
  const sliceRank = indicesRank > 1 ? indices.shape[indicesRank - 1] : 1; // Calculate the number of elements that make up each slice of our updated
  // tensor. This allows us to work with flattened tensors and copy over whole
  // slices at a time.

  const totalNd = shape.length;
  let sliceSize = 1;

  for (let i = sliceRank; i < totalNd; ++i) {
    sliceSize *= shape[i];
  }

  const safeSliceDim = sliceRank < 1 ? 1 : sliceRank;
  const numUpdates = (0, _util.sizeFromShape)(indices.shape) / safeSliceDim;
  const strides = [...(0, _util.computeStrides)(shape.slice(0, sliceRank)), 1];
  const outputSize = (0, _util.sizeFromShape)(shape);
  return {
    sliceRank,
    numUpdates,
    sliceSize,
    strides,
    outputSize
  };
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertParamsValid = assertParamsValid;
exports.maskToAxes = maskToAxes;
exports.computeOutShape = computeOutShape;
exports.stridesWithElidedDims = stridesWithElidedDims;
exports.getNormalizedAxes = getNormalizedAxes;
exports.startIndicesWithElidedDims = startIndicesWithElidedDims;
exports.stopIndicesWithElidedDims = stopIndicesWithElidedDims;
exports.stridesForAxis = stridesForAxis;
exports.startForAxis = startForAxis;
exports.stopForAxis = stopForAxis;
exports.isSliceContinous = isSliceContinous;
exports.computeFlatOffset = computeFlatOffset;
exports.parseSliceParams = parseSliceParams;

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function assertParamsValid(input, begin, size) {
  util.assert(input.rank === begin.length, () => `Error in slice${input.rank}D: Length of begin ${begin} must ` + `match the rank of the array (${input.rank}).`);
  util.assert(input.rank === size.length, () => `Error in slice${input.rank}D: Length of size ${size} must ` + `match the rank of the array (${input.rank}).`);

  for (let i = 0; i < input.rank; ++i) {
    util.assert(begin[i] + size[i] <= input.shape[i], () => `Error in slice${input.rank}D: begin[${i}] + size[${i}] ` + `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${input.shape[i]})`);
  }
}
/** Converts a binary mask to an array of axes. Used in stridedSlice(). */


function maskToAxes(mask) {
  const axes = [];
  let axis = 0;

  while (mask > 0) {
    if (mask & 1) {
      axes.push(axis);
    }

    mask /= 2;
    axis++;
  }

  return axes;
}
/** Computes the output shape given the strided slice params. */


function computeOutShape(begin, end, strides) {
  const size = [];

  for (let axis = 0; axis < begin.length; axis++) {
    size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);
  }

  return size;
} // Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current stride value. Otherwise, insert.


function stridesWithElidedDims(strides, ellipsisInsertionIndex, numElidedAxes, inputShape) {
  const newStrides = [...strides];

  for (let i = newStrides.length; i < inputShape.length; i++) {
    newStrides.push(1);
  }

  for (let i = 0; i < numElidedAxes; i++) {
    if (i === 0) {
      newStrides[ellipsisInsertionIndex] = 1;
    } else {
      newStrides.splice(ellipsisInsertionIndex, 0
      /* num elements to delete */
      , 1
      /* element to add */
      );
      newStrides.pop();
    }
  }

  return newStrides;
}

function unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, normalizedAxis) {
  if (normalizedAxis <= ellipsisInsertionIndex) {
    return normalizedAxis;
  }

  return normalizedAxis - (numElidedAxes - 1);
}

function getElidedAxes(numElidedAxes, ellipsisInsertionIndex) {
  const elidedAxes = [];

  for (let i = 0; i < numElidedAxes; i++) {
    elidedAxes.push(ellipsisInsertionIndex + i);
  }

  return elidedAxes;
} // Normalize the start, end and strides.


function getNormalizedAxes(inputShape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask) {
  const inputRank = inputShape.length;
  let normalizedBegin = new Array(inputRank),
      normalizedEnd = new Array(inputRank),
      normalizedStrides = new Array(inputRank);

  if (ellipsisAxes.length && numInterpolatedAxes > 0) {
    const fullIndex = ellipsisAxes[0]; // The ellipsis applies to the masked index as well as any dimensions
    // that are interpolated.

    const numElidedAxes = numInterpolatedAxes + 1;
    normalizedBegin = startIndicesWithElidedDims(beginMask, fullIndex, numElidedAxes, begin, inputShape);
    normalizedEnd = stopIndicesWithElidedDims(endMask, fullIndex, numElidedAxes, end, inputShape);
    normalizedStrides = stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);
  } else {
    for (let axis = 0; axis < inputRank; axis++) {
      normalizedBegin[axis] = startForAxis(beginMask, begin, strides, inputShape, axis, ellipsisMask);
      normalizedEnd[axis] = stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);
      normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);
    }
  }

  return {
    begin: normalizedBegin,
    end: normalizedEnd,
    strides: normalizedStrides
  };
} // Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current start value. Otherwise, insert.


function startIndicesWithElidedDims(beginMask, ellipsisInsertionIndex, numElidedAxes, originalBegin, inputShape) {
  const newIndices = [...inputShape];
  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);

  for (let axis = 0; axis < newIndices.length; axis++) {
    if (elidedAxes.indexOf(axis) > -1) {
      newIndices[axis] = 0;
    } else {
      const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
      let originalValue = originalBegin[originalAxis];

      if (beginMask & 1 << originalAxis) {
        originalValue = 0;
      }

      newIndices[axis] = originalValue;
    }
  }

  return newIndices;
} // Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current stop value. Otherwise, insert.


function stopIndicesWithElidedDims(endMask, ellipsisInsertionIndex, numElidedAxes, originalEnd, inputShape) {
  const newIndices = [...inputShape];
  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);

  for (let axis = 0; axis < newIndices.length; axis++) {
    if (elidedAxes.indexOf(axis) > -1) {
      newIndices[axis] = Number.MAX_SAFE_INTEGER;
    } else {
      const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
      let originalValue = originalEnd[originalAxis];

      if (endMask & 1 << originalAxis) {
        originalValue = Number.MAX_SAFE_INTEGER;
      }

      newIndices[axis] = originalValue;
    }
  }

  for (let i = 0; i < newIndices.length; i++) {
    // Handle negative indices
    const axisSize = inputShape[i];

    if (newIndices[i] < 0) {
      newIndices[i] += axisSize;
    }

    newIndices[i] = util.clamp(0, newIndices[i], inputShape[i]);
  }

  return newIndices;
}

function stridesForAxis(strides, axis, ellipsisMask) {
  let stride = strides[axis];

  if (ellipsisMask & 1 << axis || stride == null) {
    stride = 1;
  }

  return stride;
}

function startForAxis(beginMask, startIndices, strides, inputShape, axis, ellipsisMask) {
  // Begin with the specified index
  let start = startIndices[axis];
  const stride = strides[axis] || 1; // Check the axis bit from right of masked axes, or the begin index is not set
  // for the axis.

  if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {
    if (stride > 0) {
      // Forward iteration - use the first element. These values will get
      // clamped below (Note: We could have set them to 0 and axis_size-1, but
      // use lowest() and max() to maintain symmetry with StopForAxis())
      start = Number.MIN_SAFE_INTEGER;
    } else {
      // Backward iteration - use the last element.
      start = Number.MAX_SAFE_INTEGER;
    }
  } // Handle negative indices


  const axisSize = inputShape[axis];

  if (start < 0) {
    start += axisSize;
  } // Clamping


  start = util.clamp(0, start, axisSize - 1);
  return start;
}

function stopForAxis(endMask, stopIndices, strides, inputShape, axis, ellipsisMask) {
  // Begin with the specified index
  let stop = stopIndices[axis];
  const stride = strides[axis] || 1; // Check the axis bit from right of masked axes, or if the stop index is not
  // set for this axis.

  if (endMask & 1 << axis || ellipsisMask & 1 << axis || stop == null) {
    if (stride > 0) {
      // Forward iteration - use the last element. These values will get
      // clamped below
      stop = Number.MAX_SAFE_INTEGER;
    } else {
      // Backward iteration - use the first element.
      stop = Number.MIN_SAFE_INTEGER;
    }
  } // Handle negative indices


  const axisSize = inputShape[axis];

  if (stop < 0) {
    stop += axisSize;
  } // Clamping
  // Because the end index points one past the last element, we need slightly
  // different clamping ranges depending on the direction.


  if (stride > 0) {
    // Forward iteration
    stop = util.clamp(0, stop, axisSize);
  } else {
    // Backward iteration
    stop = util.clamp(-1, stop, axisSize - 1);
  }

  return stop;
}
/**
 * Returns true if the slice occupies a continous set of elements in the
 * 'flat' space.
 */


function isSliceContinous(shape, begin, size) {
  // Index of the first axis that has size > 1.
  let firstNonOneAxis = size.length;

  for (let i = 0; i < size.length; i++) {
    if (size[i] > 1) {
      firstNonOneAxis = i;
      break;
    }
  }

  for (let i = firstNonOneAxis + 1; i < size.length; i++) {
    if (begin[i] > 0 || size[i] !== shape[i]) {
      return false;
    }
  }

  return true;
}

function computeFlatOffset(begin, strides) {
  let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;

  for (let i = 0; i < begin.length - 1; i++) {
    flatOffset += begin[i] * strides[i];
  }

  return flatOffset;
}

function parseSliceParams(x, begin, size) {
  // The following logic allows for more ergonomic calls.
  let begin_;

  if (typeof begin === 'number') {
    begin_ = [begin, ...new Array(x.rank - 1).fill(0)];
  } else if (begin.length < x.rank) {
    begin_ = begin.concat(new Array(x.rank - begin.length).fill(0));
  } else {
    begin_ = begin.slice();
  }

  begin_.forEach(d => {
    util.assert(d !== -1, () => 'slice() does not support negative begin indexing.');
  });
  let size_;

  if (size == null) {
    size_ = new Array(x.rank).fill(-1);
  } else if (typeof size === 'number') {
    size_ = [size, ...new Array(x.rank - 1).fill(-1)];
  } else if (size.length < x.rank) {
    size_ = size.concat(new Array(x.rank - size.length).fill(-1));
  } else {
    size_ = size;
  }

  size_ = size_.map((d, i) => {
    if (d >= 0) {
      return d;
    } else {
      util.assert(d === -1, () => `Negative size values should be exactly -1 but got ` + `${d} for the slice() size at index ${i}.`);
      return x.shape[i] - begin_[i];
    }
  });
  return [begin_, size_];
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/serialization.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerClass = registerClass;
exports.SerializationMap = exports.Serializable = void 0;

var _util = require("./util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Serializable defines the serialization contract.
 *
 * TFJS requires serializable classes to return their className when asked
 * to avoid issues with minification.
 */
class Serializable {
  /**
   * Return the class name for this class to use in serialization contexts.
   *
   * Generally speaking this will be the same thing that constructor.name
   * would have returned.  However, the class name needs to be robust
   * against minification for serialization/deserialization to work properly.
   *
   * There's also places such as initializers.VarianceScaling, where
   * implementation details between different languages led to different
   * class hierarchies and a non-leaf node is used for serialization purposes.
   */
  getClassName() {
    return this.constructor.className;
  }
  /**
   * Creates an instance of T from a ConfigDict.
   *
   * This works for most descendants of serializable.  A few need to
   * provide special handling.
   * @param cls A Constructor for the class to instantiate.
   * @param config The Configuration for the object.
   */

  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config);
  }

}
/**
 * Maps string keys to class constructors.
 *
 * Used during (de)serialization from the cross-language JSON format, which
 * requires the class name in the serialization format matches the class
 * names as used in Python, should it exist.
 */


exports.Serializable = Serializable;

class SerializationMap {
  constructor() {
    this.classNameMap = {};
  }
  /**
   * Returns the singleton instance of the map.
   */


  static getMap() {
    if (SerializationMap.instance == null) {
      SerializationMap.instance = new SerializationMap();
    }

    return SerializationMap.instance;
  }
  /**
   * Registers the class as serializable.
   */


  static register(cls) {
    SerializationMap.getMap().classNameMap[cls.className] = [cls, cls.fromConfig];
  }

}
/**
 * Register a class with the serialization map of TensorFlow.js.
 *
 * This is often used for registering custom Layers, so they can be
 * serialized and deserialized.
 *
 * Example:
 *
 * ```js
 * class MyCustomLayer extends tf.layers.Layer {
 *   static className = 'MyCustomLayer';
 *
 *   constructor(config) {
 *     super(config);
 *   }
 * }
 * tf.serialization.registerClass(MyCustomLayer);
 * ```
 *
 * @param cls The class to be registered. It must have a public static member
 *   called `className` defined and the value must be a non-empty string.
 *
 * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}
 */


exports.SerializationMap = SerializationMap;

function registerClass(cls) {
  (0, _util.assert)(cls.className != null, () => `Class being registered does not have the static className ` + `property defined.`);
  (0, _util.assert)(typeof cls.className === 'string', () => `className is required to be a string, but got type ` + typeof cls.className);
  (0, _util.assert)(cls.className.length > 0, () => `Class being registered has an empty-string as its className, ` + `which is disallowed.`);
  SerializationMap.register(cls);
}
},{"./util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/test_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expectArraysClose = expectArraysClose;
exports.testEpsilon = testEpsilon;
exports.expectPromiseToFail = expectPromiseToFail;
exports.expectArraysEqual = expectArraysEqual;
exports.expectNumbersClose = expectNumbersClose;
exports.expectValuesInRange = expectValuesInRange;
exports.expectArrayBuffersEqual = expectArrayBuffersEqual;
exports.TEST_EPSILON_FLOAT16 = void 0;

var _engine = require("./engine");

var _tensor_util_env = require("./tensor_util_env");

var _util = require("./util");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TEST_EPSILON_FLOAT32 = 1e-3;
const TEST_EPSILON_FLOAT16 = 1e-1;
exports.TEST_EPSILON_FLOAT16 = TEST_EPSILON_FLOAT16;

function expectArraysClose(actual, expected, epsilon) {
  if (epsilon == null) {
    epsilon = testEpsilon();
  }

  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));
}

function testEpsilon() {
  return _engine.ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;
}

function expectArraysPredicate(actual, expected, predicate) {
  let checkClassType = true;

  if ((0, _util.isTypedArray)(actual) || (0, _util.isTypedArray)(expected)) {
    checkClassType = false;
  }

  if ((0, _util.isTypedArray)(actual) && (0, _util.isTypedArray)(expected)) {
    checkClassType = true;
  }

  if (checkClassType) {
    const aType = actual.constructor.name;
    const bType = expected.constructor.name;

    if (aType !== bType) {
      throw new Error(`Arrays are of different type. Actual: ${aType}. ` + `Expected: ${bType}`);
    }
  }

  if (Array.isArray(actual) && Array.isArray(expected)) {
    const actualShape = (0, _tensor_util_env.inferShape)(actual);
    const expectedShape = (0, _tensor_util_env.inferShape)(expected);

    if (!(0, _util.arraysEqual)(actualShape, expectedShape)) {
      throw new Error(`Arrays have different shapes. ` + `Actual: [${actualShape}]. Expected: [${expectedShape}]`);
    }
  }

  const actualFlat = (0, _util.isTypedArray)(actual) ? actual : (0, _util.flatten)(actual);
  const expectedFlat = (0, _util.isTypedArray)(expected) ? expected : (0, _util.flatten)(expected);

  if (actualFlat.length !== expectedFlat.length) {
    throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` + `expected: ${expectedFlat.length}.\n` + `Actual:   ${actualFlat}.\n` + `Expected: ${expectedFlat}.`);
  }

  for (let i = 0; i < expectedFlat.length; ++i) {
    const a = actualFlat[i];
    const e = expectedFlat[i];

    if (!predicate(a, e)) {
      throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\n` + `Actual:   ${actualFlat}.\n` + `Expected: ${expectedFlat}.`);
    }
  }
}

function expectPromiseToFail(fn, done) {
  fn().then(() => done.fail(), () => done());
}

function expectArraysEqual(actual, expected) {
  const exp = typeof expected === 'string' || typeof expected === 'number' || typeof expected === 'boolean' ? [expected] : expected;

  if ((0, _util.isString)(actual) || (0, _util.isString)(actual[0]) || (0, _util.isString)(expected) || (0, _util.isString)(expected[0])) {
    // tslint:disable-next-line: triple-equals
    return expectArraysPredicate(actual, exp, (a, b) => a == b);
  }

  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));
}

function expectNumbersClose(a, e, epsilon) {
  if (epsilon == null) {
    epsilon = testEpsilon();
  }

  if (!areClose(a, e, epsilon)) {
    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);
  }
}

function areClose(a, e, epsilon) {
  if (!isFinite(a) && !isFinite(e)) {
    return true;
  }

  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {
    return false;
  }

  return true;
}

function expectValuesInRange(actual, low, high) {
  for (let i = 0; i < actual.length; i++) {
    if (actual[i] < low || actual[i] > high) {
      throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);
    }
  }
}

function expectArrayBuffersEqual(actual, expected) {
  // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in
  // a Float32Array solves this issue.
  expect(new Float32Array(actual)).toEqual(new Float32Array(expected));
}
},{"./engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","./tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;

/** @license See the LICENSE file. */
// This code is auto-generated, do not modify this file!
const version = '2.4.0';
exports.version = version;
},{}],"node_modules/@tensorflow/tfjs-core/dist/globals.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableProdMode = enableProdMode;
exports.enableDebugMode = enableDebugMode;
exports.disableDeprecationWarnings = disableDeprecationWarnings;
exports.deprecationWarn = deprecationWarn;
exports.disposeVariables = disposeVariables;
exports.engine = engine;
exports.memory = memory;
exports.profile = profile;
exports.tidy = tidy;
exports.dispose = dispose;
exports.keep = keep;
exports.time = time;
exports.setBackend = setBackend;
exports.ready = ready;
exports.getBackend = getBackend;
exports.removeBackend = removeBackend;
exports.findBackend = findBackend;
exports.findBackendFactory = findBackendFactory;
exports.registerBackend = registerBackend;
exports.backend = backend;
exports.setPlatform = setPlatform;

var _engine = require("./engine");

var _environment = require("./environment");

var _tensor = require("./tensor");

var _tensor_util = require("./tensor_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Enables production mode which disables correctness checks in favor of
 * performance.
 *
 * @doc {heading: 'Environment'}
 */
function enableProdMode() {
  (0, _environment.env)().set('PROD', true);
}
/**
 * Enables debug mode which will log information about all executed kernels:
 * the elapsed time of the kernel execution, as well as the rank, shape, and
 * size of the output tensor.
 *
 * Debug mode will significantly slow down your application as it will
 * download the result of every operation to the CPU. This should not be used in
 * production. Debug mode does not affect the timing information of the kernel
 * execution as we do not measure download time in the kernel execution time.
 *
 * See also: `tf.profile`, `tf.memory`.
 *
 * @doc {heading: 'Environment'}
 */


function enableDebugMode() {
  (0, _environment.env)().set('DEBUG', true);
}
/** Globally disables deprecation warnings */


function disableDeprecationWarnings() {
  (0, _environment.env)().set('DEPRECATION_WARNINGS_ENABLED', false);
  console.warn(`TensorFlow.js deprecation warnings have been disabled.`);
}
/** Warn users about deprecated functionality. */


function deprecationWarn(msg) {
  if ((0, _environment.env)().getBool('DEPRECATION_WARNINGS_ENABLED')) {
    console.warn(msg + ' You can disable deprecation warnings with ' + 'tf.disableDeprecationWarnings().');
  }
}

(0, _tensor.setDeprecationWarningFn)(deprecationWarn);
/**
 * Dispose all variables kept in backend engine.
 *
 * @doc {heading: 'Environment'}
 */

function disposeVariables() {
  _engine.ENGINE.disposeVariables();
}
/**
 * It returns the global engine that keeps track of all tensors and backends.
 *
 * @doc {heading: 'Environment'}
 */


function engine() {
  return _engine.ENGINE;
}
/**
 * Returns memory info at the current time in the program. The result is an
 * object with the following properties:
 *
 * - `numBytes`: Number of bytes allocated (undisposed) at this time.
 * - `numTensors`: Number of unique tensors allocated.
 * - `numDataBuffers`: Number of unique data buffers allocated
 *   (undisposed) at this time, which is ≤ the number of tensors
 *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same
 *   data buffer with `a`).
 * - `unreliable`: True if the memory usage is unreliable. See `reasons` when
 *    `unreliable` is true.
 * - `reasons`: `string[]`, reasons why the memory is unreliable, present if
 *    `unreliable` is true.
 *
 * WebGL Properties:
 * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at
 *     this time.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */


function memory() {
  return _engine.ENGINE.memory();
}
/**
 * Executes the provided function `f()` and returns a promise that resolves
 * with information about the function's memory use:
 * - `newBytes`: the number of new bytes allocated
 * - `newTensors`: the number of new tensors created
 * - `peakBytes`: the peak number of bytes allocated
 * - `kernels`: an array of objects for each kernel involved that reports
 * their input and output shapes, number of bytes used, and number of new
 * tensors created.
 *
 * ```js
 * const profile = await tf.profile(() => {
 *   const x = tf.tensor1d([1, 2, 3]);
 *   let x2 = x.square();
 *   x2.dispose();
 *   x2 = x.square();
 *   x2.dispose();
 *   return x;
 * });
 *
 * console.log(`newBytes: ${profile.newBytes}`);
 * console.log(`newTensors: ${profile.newTensors}`);
 * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>
 * k.totalBytesSnapshot)}`);
 * ```
 *
 *
 * @doc {heading: 'Performance', subheading: 'Profile'}
 */


function profile(f) {
  return _engine.ENGINE.profile(f);
}
/**
 * Executes the provided function `fn` and after it is executed, cleans up all
 * intermediate tensors allocated by `fn` except those returned by `fn`.
 * `fn` must not return a Promise (async functions not allowed). The returned
 * result can be a complex object.
 *
 * Using this method helps avoid memory leaks. In general, wrap calls to
 * operations in `tf.tidy` for automatic memory cleanup.
 *
 * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to
 * dispose variables, please use `tf.disposeVariables` or call dispose()
 * directly on variables.
 *
 * ```js
 * // y = 2 ^ 2 + 1
 * const y = tf.tidy(() => {
 *   // a, b, and one will be cleaned up when the tidy ends.
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *   const b = a.square();
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * y.print();
 * ```
 *
 * @param nameOrFn The name of the closure, or the function to execute.
 *     If a name is provided, the 2nd argument should be the function.
 *     If debug mode is on, the timing and the memory usage of the function
 *     will be tracked and displayed on the console using the provided name.
 * @param fn The function to execute.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */


function tidy(nameOrFn, fn) {
  return _engine.ENGINE.tidy(nameOrFn, fn);
}
/**
 * Disposes any `tf.Tensor`s found within the provided object.
 *
 * @param container an object that may be a `tf.Tensor` or may directly
 *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If
 *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing
 *     happens. In general it is safe to pass any object here, except that
 *     `Promise`s are not supported.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */


function dispose(container) {
  const tensors = (0, _tensor_util.getTensorsInContainer)(container);
  tensors.forEach(tensor => tensor.dispose());
}
/**
 * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed
 * automatically.
 *
 * ```js
 * let b;
 * const y = tf.tidy(() => {
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *
 *   // b will not be cleaned up by the tidy. a and one will be cleaned up
 *   // when the tidy ends.
 *   b = tf.keep(a.square());
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * console.log('y:');
 * y.print();
 * console.log('b:');
 * b.print();
 * ```
 *
 * @param result The tensor to keep from being disposed.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */


function keep(result) {
  return _engine.ENGINE.keep(result);
}
/**
 * Executes `f()` and returns a promise that resolves with timing
 * information.
 *
 * The result is an object with the following properties:
 *
 * - `wallMs`: Wall execution time.
 * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the
 * WebGL backend and the query timer extension is not available, this will
 * return an error object.
 * - On `WebGL` The following additional properties exist:
 *   - `uploadWaitMs`: CPU blocking time on texture uploads.
 *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).
 *
 * ```js
 * const x = tf.randomNormal([20, 20]);
 * const time = await tf.time(() => x.matMul(x));
 *
 * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);
 * ```
 *
 * @param f The function to execute and time.
 *
 * @doc {heading: 'Performance', subheading: 'Timing'}
 */


function time(f) {
  return _engine.ENGINE.time(f);
}
/**
 * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and
 * executing operations on those tensors. Returns a promise that resolves
 * to a boolean if the backend initialization was successful.
 *
 * Note this disposes the current backend, if any, as well as any tensors
 * associated with it. A new backend is initialized, even if it is of the
 * same type as the previous one.
 *
 * @param backendName The name of the backend. Currently supports
 *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js
 *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).
 *
 * @doc {heading: 'Backends'}
 */


function setBackend(backendName) {
  return _engine.ENGINE.setBackend(backendName);
}
/**
 * Returns a promise that resolves when the currently selected backend (or the
 * highest priority one) has initialized. Await this promise when you are using
 * a backend that has async initialization.
 *
 * @doc {heading: 'Backends'}
 */


function ready() {
  return _engine.ENGINE.ready();
}
/**
 * Returns the current backend name (cpu, webgl, etc). The backend is
 * responsible for creating tensors and executing operations on those tensors.
 *
 * @doc {heading: 'Backends'}
 */


function getBackend() {
  return _engine.ENGINE.backendName;
}
/**
 * Removes a backend and the registered factory.
 *
 * @doc {heading: 'Backends'}
 */


function removeBackend(name) {
  _engine.ENGINE.removeBackend(name);
}
/**
 * Finds the backend registered under the provided name. Returns null if the
 * name is not in the registry, or the registration hasn't finished yet.
 */


function findBackend(name) {
  return _engine.ENGINE.findBackend(name);
}
/**
 * Finds the backend factory registered under the provided name. Returns a
 * function that produces a new backend when called. Returns null if the name
 * is not in the registry.
 */


function findBackendFactory(name) {
  return _engine.ENGINE.findBackendFactory(name);
}
/**
 * Registers a global backend. The registration should happen when importing
 * a module file (e.g. when importing `backend_webgl.ts`), and is used for
 * modular builds (e.g. custom tfjs bundle with only webgl support).
 *
 * @param factory The backend factory function. When called, it should
 * return a backend instance, or a promise of an instance.
 * @param priority The priority of the backend (higher = more important).
 *     In case multiple backends are registered, the priority is used to find
 *     the best backend. Defaults to 1.
 * @return False if there is already a registered backend under this name, true
 *     if not.
 *
 * @doc {heading: 'Backends'}
 */


function registerBackend(name, factory, priority = 1) {
  return _engine.ENGINE.registerBackend(name, factory, priority);
}
/**
 * Gets the current backend. If no backends have been initialized, this will
 * attempt to initialize the best backend. Will throw an error if the highest
 * priority backend has async initialization, in which case, you should call
 * 'await tf.ready()' before running other code.
 *
 * @doc {heading: 'Backends'}
 */


function backend() {
  return _engine.ENGINE.backend;
}
/**
 * Sets the global platform.
 *
 * @param platformName The name of this platform.
 * @param platform A platform implementation.
 */


function setPlatform(platformName, platform) {
  (0, _environment.env)().setPlatform(platformName, platform);
}
},{"./engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","./environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","./tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js","./tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/add.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.add = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 *
 * ```js
 * // Broadcast add a with b.
 * const a = tf.scalar(5);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 * @param a The first `tf.Tensor` to add.
 * @param b The second `tf.Tensor` to add. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function add_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'add');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'add');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);

  const forward = (backend, save) => {
    const res = backend.add($a, $b);
    save([$a, $b]);
    return res;
  };

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Add);
}

const add = (0, _operation.op)({
  add_
});
exports.add = add;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floorDiv = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 * The result is rounded with floor function.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.floorDiv(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.floorDiv(b).print();  // or tf.floorDiv(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function floorDiv_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'floorDiv');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'floorDiv');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);

  const forward = (backend, save) => {
    const res = backend.floorDiv($a, $b);
    save([$a, $b]);
    return res;
  };

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.FloorDiv);
}

const floorDiv = (0, _operation.op)({
  floorDiv_
});
exports.floorDiv = floorDiv;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/div.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.div = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _floorDiv = require("./floorDiv");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function div_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'div');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'div');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);

  if ($a.dtype === 'int32' && $b.dtype === 'int32') {
    return (0, _floorDiv.floorDiv)($a, $b);
  }

  const forward = (backend, save) => {
    const res = backend.realDivide($a, $b);
    save([$a, $b]);
    return res;
  };

  const inputs = {
    a: $a,
    b: $b
  };
  const attrs = {};
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Div, attrs);
}

const div = (0, _operation.op)({
  div_
});
exports.div = div;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./floorDiv":"node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mul = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.
 *
 * We also expose `tf.mulStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([2, 3, 4, 5]);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 *
 * ```js
 * // Broadcast mul a with b.
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.scalar(5);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 * @param a The first tensor to multiply.
 * @param b The second tensor to multiply. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function mul_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'mul');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'mul');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);

  const forward = (backend, save) => {
    const res = backend.multiply($a, $b);
    save([$a, $b]);
    return res;
  };

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Multiply);
}

const mul = (0, _operation.op)({
  mul_
});
exports.mul = mul;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/abs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.abs = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes absolute value element-wise: `abs(x)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.abs().print();  // or tf.abs(x)
 * ```
 * @param x The input `tf.Tensor`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function abs_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'abs');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    save([$x]);

    if ($x.dtype === 'complex64') {
      return backend.complexAbs($x);
    }

    return backend.abs($x);
  }, inputs, null
  /* grad */
  , _kernel_names.Abs);
}

const abs = (0, _operation.op)({
  abs_
});
exports.abs = abs;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/acos.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.acos().print();  // or tf.acos(x)
 * ```
 * @param x The input tensor.
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function acos_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'acos');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.acos($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Acos);
}

const acos = (0, _operation.op)({
  acos_
});
exports.acos = acos;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/acosh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acosh = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:
 * `acosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([10, 1, 3, 5.7]);
 *
 * x.acosh().print();  // or tf.acosh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function acosh_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'acosh');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.acosh($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Acosh);
}

const acosh = (0, _operation.op)({
  acosh_
});
exports.acosh = acosh;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addN = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 *
 * tf.addN([a, b, c]).print();
 * ```
 * @param tensors A list of tensors with the same shape and dtype.
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function addN_(tensors) {
  util.assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');
  util.assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` + `${tensors.length}`);
  const $tensors = tensors.map((t, i) => (0, _tensor_util_env.convertToTensor)(t, `tensors${i}`, 'addN'));
  const firstTensor = $tensors[0];
  $tensors.forEach(t => {
    if (t.dtype !== firstTensor.dtype) {
      throw new Error('All tensors passed to tf.addN() must have the same dtype');
    }
  });
  $tensors.forEach(t => {
    if (!util.arraysEqual(t.shape, firstTensor.shape)) {
      throw new Error('All tensors passed to tf.addN() must have the same shape');
    }
  });

  const forward = (backend, save) => {
    const res = backend.addN($tensors);
    save($tensors);
    return res;
  };

  const inputs = $tensors;
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.AddN);
}

const addN = (0, _operation.op)({
  addN_
});
exports.addN = addN;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.axesAreInnerMostDims = axesAreInnerMostDims;
exports.combineLocations = combineLocations;
exports.computeOutAndReduceShapes = computeOutAndReduceShapes;
exports.expandShapeToKeepDim = expandShapeToKeepDim;
exports.assertAxesAreInnerMostDims = assertAxesAreInnerMostDims;
exports.getAxesPermutation = getAxesPermutation;
exports.getUndoAxesPermutation = getUndoAxesPermutation;
exports.getInnerMostAxes = getInnerMostAxes;

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns true if the axis specifies the inner most dimensions of the
 * array.
 */
function axesAreInnerMostDims(axes, rank) {
  for (let i = 0; i < axes.length; ++i) {
    if (axes[axes.length - i - 1] !== rank - 1 - i) {
      return false;
    }
  }

  return true;
}

function combineLocations(outputLoc, reduceLoc, axes) {
  const rank = outputLoc.length + reduceLoc.length;
  const loc = [];
  let outIdx = 0;
  let reduceIdx = 0;

  for (let dim = 0; dim < rank; dim++) {
    if (axes.indexOf(dim) === -1) {
      loc.push(outputLoc[outIdx++]);
    } else {
      loc.push(reduceLoc[reduceIdx++]);
    }
  }

  return loc;
}

function computeOutAndReduceShapes(aShape, axes) {
  const outShape = [];
  const rank = aShape.length;

  for (let dim = 0; dim < rank; dim++) {
    if (axes.indexOf(dim) === -1) {
      outShape.push(aShape[dim]);
    }
  }

  const reduceShape = axes.map(dim => aShape[dim]);
  return [outShape, reduceShape];
}

function expandShapeToKeepDim(shape, axes) {
  const reduceSubShape = axes.map(x => 1);
  return combineLocations(shape, reduceSubShape, axes);
}

function assertAxesAreInnerMostDims(msg, axes, rank) {
  util.assert(axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. ` + `Got axes ${axes} and rank-${rank} input.`);
}
/**
 * Returns the axes permutation to be used with `tf.transpose`, if such
 * permutation is necessary. Otherwise it returns null. This method is used by
 * operations that operate only on inner-most axes.
 */


function getAxesPermutation(axes, rank) {
  if (axesAreInnerMostDims(axes, rank)) {
    return null;
  }

  const result = [];

  for (let i = 0; i < rank; ++i) {
    if (axes.indexOf(i) === -1) {
      result.push(i);
    }
  }

  axes.forEach(axis => result.push(axis));
  return result;
}
/** Returns the axes permutation that undoes the original permutation. */


function getUndoAxesPermutation(axes) {
  return axes.map((axis, i) => [i, axis]).sort((a, b) => a[1] - b[1]).map(x => x[0]);
}

function getInnerMostAxes(numAxes, rank) {
  const res = [];

  for (let i = rank - numAxes; i < rank; ++i) {
    res.push(i);
  }

  return res;
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/all.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.all = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _axis_util = require("./axis_util");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _transpose = require("./transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the logical and of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.all().print();  // or tf.all(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.all(axis).print();  // or tf.all(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function all_(x, axis = null, keepDims = false) {
  let $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'all', 'bool');

  const forward = backend => {
    const origAxes = (0, _util.parseAxisParam)(axis, $x.shape);
    let axes = origAxes;
    const permutedAxes = (0, _axis_util.getAxesPermutation)(axes, $x.rank);

    if (permutedAxes != null) {
      $x = (0, _transpose.transpose)($x, permutedAxes);
      axes = (0, _axis_util.getInnerMostAxes)(axes.length, $x.rank);
    }

    const res = backend.all($x, axes);

    if (keepDims) {
      const newShape = (0, _axis_util.expandShapeToKeepDim)(res.shape, origAxes);
      return (0, _reshape.reshape)(res, newShape);
    }

    return res;
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    keepDims
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.All, attrs);
}

const all = (0, _operation.op)({
  all_
});
exports.all = all;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/any.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.any = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _axis_util = require("./axis_util");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _transpose = require("./transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the logical or of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.any().print();  // or tf.any(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.any(axis).print();  // or tf.any(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function any_(x, axis = null, keepDims = false) {
  let $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'any', 'bool');

  const forward = backend => {
    const origAxes = (0, _util.parseAxisParam)(axis, $x.shape);
    let axes = origAxes;
    const permutedAxes = (0, _axis_util.getAxesPermutation)(axes, $x.rank);

    if (permutedAxes != null) {
      $x = (0, _transpose.transpose)($x, permutedAxes);
      axes = (0, _axis_util.getInnerMostAxes)(axes.length, $x.rank);
    }

    const res = backend.any($x, axes);

    if (keepDims) {
      const newShape = (0, _axis_util.expandShapeToKeepDim)(res.shape, origAxes);
      return (0, _reshape.reshape)(res, newShape);
    }

    return res;
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    keepDims
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Any, attrs);
} // tslint:disable-next-line:variable-name


const any = (0, _operation.op)({
  any_
});
exports.any = any;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argMax = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var axis_util = _interopRequireWildcard(require("./axis_util"));

var _operation = require("./operation");

var _transpose = require("./transpose");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the indices of the maximum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMax().print();  // or tf.argMax(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMax(axis).print();  // or tf.argMax(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function argMax_(x, axis = 0) {
  let $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'argMax');

  const forward = (backend, save) => {
    save([$x]);
    let axes = util.parseAxisParam(axis, $x.shape);
    const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);

    if (permutedAxes != null) {
      $x = (0, _transpose.transpose)($x, permutedAxes);
      axes = axis_util.getInnerMostAxes(axes.length, $x.rank);
    }

    return backend.argMax($x, axes[0]);
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    axis
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.ArgMax, attrs);
}

const argMax = (0, _operation.op)({
  argMax_
});
exports.argMax = argMax;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argMin = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var axis_util = _interopRequireWildcard(require("./axis_util"));

var _operation = require("./operation");

var _transpose = require("./transpose");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the indices of the minimum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMin().print();  // or tf.argMin(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMin(axis).print();  // or tf.argMin(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function argMin_(x, axis = 0) {
  let $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'argMin');

  const forward = (backend, save) => {
    save([$x]);

    if (axis == null) {
      axis = 0;
    }

    let axes = util.parseAxisParam(axis, $x.shape);
    const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);

    if (permutedAxes != null) {
      $x = (0, _transpose.transpose)($x, permutedAxes);
      axes = axis_util.getInnerMostAxes(axes.length, $x.rank);
    }

    return backend.argMin($x, axes[0]);
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    axis
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.ArgMin, attrs);
}

const argMin = (0, _operation.op)({
  argMin_
});
exports.argMin = argMin;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/asin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asin = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asin().print();  // or tf.asin(x)
 * ```
 * @param x The input tensor.
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function asin_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'asin');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.asin($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Asin);
}

const asin = (0, _operation.op)({
  asin_
});
exports.asin = asin;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/asinh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asinh = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:
 * `asinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asinh().print();  // or tf.asinh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function asinh_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'asinh');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.asinh($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Asinh);
}

const asinh = (0, _operation.op)({
  asinh_
});
exports.asinh = asinh;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/atan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atan = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.atan().print();  // or tf.atan(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function atan_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'atan');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.atan($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Atan);
}

const atan = (0, _operation.op)({
  atan_
});
exports.atan = atan;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atan2 = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);
 * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);
 *
 * tf.atan2(a, b).print()
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function atan2_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'atan2');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'atan2');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);

  const forward = (backend, save) => {
    const res = backend.atan2($a, $b);
    save([$a, $b]);
    return res;
  };

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Atan2);
}

const atan2 = (0, _operation.op)({
  atan2_
});
exports.atan2 = atan2;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/atanh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atanh = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:
 * `atanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.atanh().print();  // or tf.atanh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function atanh_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'atanh');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.atanh($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Atanh);
}

const atanh = (0, _operation.op)({
  atanh_
});
exports.atanh = atanh;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeDilation2DInfo = computeDilation2DInfo;
exports.computePool2DInfo = computePool2DInfo;
exports.computePool3DInfo = computePool3DInfo;
exports.computeConv2DInfo = computeConv2DInfo;
exports.computeConv3DInfo = computeConv3DInfo;
exports.computeDefaultPad = computeDefaultPad;
exports.tupleValuesAreOne = tupleValuesAreOne;
exports.eitherStridesOrDilationsAreOne = eitherStridesOrDilationsAreOne;
exports.convertConv2DDataFormat = convertConv2DDataFormat;

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 *
 * @param inputShape Input tensor shape is of the following dimensions:
 *     `[batch, height, width, inChannels]`.
 * @param filterShape The filter shape is of the following dimensions:
 *     `[filterHeight, filterWidth, depth]`.
 * @param strides The strides of the sliding window for each dimension of the
 *     input tensor: `[strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat The data format of the input and output data.
 *     Defaults to 'NHWC'.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.
 *     Defaults to `[1, 1]`. If `dilations` is a single number, then
 *     `dilationHeight == dilationWidth`.
 */
function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat = 'NHWC', dilations) {
  // `computerConv2DInfo` require filterShape to be in the dimension of:
  // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have
  // outDepth, it should have the same depth as the input.
  // Input shape: [batch, height, width, inChannels]
  const inputChannels = inputShape[3];
  const $filterShape = [...filterShape, inputChannels];
  const $dataFormat = convertConv2DDataFormat(dataFormat);
  return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null
  /* roundingMode */
  , null
  /* depthWise */
  , $dataFormat);
}

function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'channelsLast') {
  const [filterHeight, filterWidth] = parseTupleParam(filterSize);
  let filterShape;

  if (dataFormat === 'channelsLast') {
    filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];
  } else if (dataFormat === 'channelsFirst') {
    filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];
  } else {
    throw new Error(`Unknown dataFormat ${dataFormat}`);
  }

  return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);
}
/**
 * Computes the information for a forward pass of a pooling3D operation.
 */


function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'NDHWC') {
  const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);
  let filterShape;
  let $dataFormat;

  if (dataFormat === 'NDHWC') {
    $dataFormat = 'channelsLast';
    filterShape = [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];
  } else if (dataFormat === 'NCDHW') {
    $dataFormat = 'channelsFirst';
    filterShape = [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];
  } else {
    throw new Error(`Unknown dataFormat ${dataFormat}`);
  }

  return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);
}
/**
 * Computes the information for a forward pass of a convolution/pooling
 * operation.
 */


function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = 'channelsLast') {
  let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];

  if (dataFormat === 'channelsLast') {
    [batchSize, inHeight, inWidth, inChannels] = inShape;
  } else if (dataFormat === 'channelsFirst') {
    [batchSize, inChannels, inHeight, inWidth] = inShape;
  } else {
    throw new Error(`Unknown dataFormat ${dataFormat}`);
  }

  const [filterHeight, filterWidth,, filterChannels] = filterShape;
  const [strideHeight, strideWidth] = parseTupleParam(strides);
  const [dilationHeight, dilationWidth] = parseTupleParam(dilations);
  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
  const {
    padInfo,
    outHeight,
    outWidth
  } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);
  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
  let outShape;

  if (dataFormat === 'channelsFirst') {
    outShape = [batchSize, outChannels, outHeight, outWidth];
  } else if (dataFormat === 'channelsLast') {
    outShape = [batchSize, outHeight, outWidth, outChannels];
  }

  return {
    batchSize,
    dataFormat,
    inHeight,
    inWidth,
    inChannels,
    outHeight,
    outWidth,
    outChannels,
    padInfo,
    strideHeight,
    strideWidth,
    filterHeight,
    filterWidth,
    effectiveFilterHeight,
    effectiveFilterWidth,
    dilationHeight,
    dilationWidth,
    inShape,
    outShape,
    filterShape
  };
}
/**
 * Computes the information for a forward pass of a 3D convolution/pooling
 * operation.
 */


function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = 'channelsLast', roundingMode) {
  let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];

  if (dataFormat === 'channelsLast') {
    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;
  } else if (dataFormat === 'channelsFirst') {
    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;
  } else {
    throw new Error(`Unknown dataFormat ${dataFormat}`);
  }

  const [filterDepth, filterHeight, filterWidth,, filterChannels] = filterShape;
  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);
  const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);
  const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);
  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
  const {
    padInfo,
    outDepth,
    outHeight,
    outWidth
  } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);
  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
  let outShape;

  if (dataFormat === 'channelsFirst') {
    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];
  } else if (dataFormat === 'channelsLast') {
    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];
  }

  return {
    batchSize,
    dataFormat,
    inDepth,
    inHeight,
    inWidth,
    inChannels,
    outDepth,
    outHeight,
    outWidth,
    outChannels,
    padInfo,
    strideDepth,
    strideHeight,
    strideWidth,
    filterDepth,
    filterHeight,
    filterWidth,
    effectiveFilterDepth,
    effectiveFilterHeight,
    effectiveFilterWidth,
    dilationDepth,
    dilationHeight,
    dilationWidth,
    inShape,
    outShape,
    filterShape
  };
}

function computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {
  if (zeroPad == null) {
    zeroPad = computeDefaultPad(inShape, fieldSize, stride);
  }

  const inputRows = inShape[0];
  const inputCols = inShape[1];
  const outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
  util.assert(util.isInt(outputRows), () => `The output # of rows (${outputRows}) must be an integer. ` + `Change the stride and/or zero pad parameters`);
  const outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
  util.assert(util.isInt(outputCols), () => `The output # of columns (${outputCols}) must be an integer. ` + `Change the stride and/or zero pad parameters`);
  return [outputRows, outputCols];
}

function computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {
  if (zeroPad == null) {
    zeroPad = computeDefaultPad(inShape, fieldSize, stride);
  }

  const inputDepth = inShape[0];
  const inputRows = inShape[1];
  const inputCols = inShape[2];
  const outputDepths = conditionalRound((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
  util.assert(util.isInt(outputDepths), () => `The output # of depths (${outputDepths}) must be an integer. ` + `Change the stride and/or zero pad parameters`);
  const outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
  util.assert(util.isInt(outputRows), () => `The output # of rows (${outputRows}) must be an integer. ` + `Change the stride and/or zero pad parameters`);
  const outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
  util.assert(util.isInt(outputCols), () => `The output # of columns (${outputCols}) must be an integer. ` + `Change the stride and/or zero pad parameters`);
  return [outputDepths, outputRows, outputCols, outChannels];
}

function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {
  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);
  return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);
}

function parseTupleParam(param) {
  if (typeof param === 'number') {
    return [param, param, param];
  }

  if (param.length === 2) {
    return [param[0], param[1], 1];
  }

  return param;
}

function parse3TupleParam(param) {
  return typeof param === 'number' ? [param, param, param] : param;
}
/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d
 * Atrous convolution is equivalent to standard convolution with upsampled
 * filters with effective_filter_height =
 * filter_height + (filter_height - 1) * (dilation - 1)
 * and effective_filter_width =
 * filter_width + (filter_width - 1) * (dilation - 1),
 * produced by inserting dilation - 1 zeros along consecutive elements across
 * the filters' spatial dimensions.
 * When there is a dilation, this converts a filter dimension to the
 * effective filter dimension, so it can be used in a standard convolution.
 */


function getEffectiveFilterSize(filterSize, dilation) {
  if (dilation <= 1) {
    return filterSize;
  }

  return filterSize + (filterSize - 1) * (dilation - 1);
}

function getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {
  let padInfo;
  let outHeight;
  let outWidth;

  if (typeof pad === 'number') {
    const padType = pad === 0 ? 'VALID' : 'NUMBER';
    padInfo = {
      top: pad,
      bottom: pad,
      left: pad,
      right: pad,
      type: padType
    };
    const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);
    outHeight = outShape[0];
    outWidth = outShape[1];
  } else if (pad === 'same') {
    outHeight = Math.ceil(inHeight / strideHeight);
    outWidth = Math.ceil(inWidth / strideWidth);
    const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);
    const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);
    const top = Math.floor(padAlongHeight / 2);
    const bottom = padAlongHeight - top;
    const left = Math.floor(padAlongWidth / 2);
    const right = padAlongWidth - left;
    padInfo = {
      top,
      bottom,
      left,
      right,
      type: 'SAME'
    };
  } else if (pad === 'valid') {
    padInfo = {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      type: 'VALID'
    };
    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
  } else if (typeof pad === 'object') {
    const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];
    const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];
    const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];
    const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];
    const padType = top === 0 && bottom === 0 && left === 0 && right === 0 ? 'VALID' : 'EXPLICIT';
    padInfo = {
      top,
      bottom,
      left,
      right,
      type: padType
    };
    outHeight = conditionalRound((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);
    outWidth = conditionalRound((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);
  } else {
    throw Error(`Unknown padding parameter: ${pad}`);
  }

  return {
    padInfo,
    outHeight,
    outWidth
  };
}

function get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {
  let padInfo;
  let outDepth;
  let outHeight;
  let outWidth;

  if (typeof pad === 'number') {
    const padType = pad === 0 ? 'VALID' : 'NUMBER';
    padInfo = {
      top: pad,
      bottom: pad,
      left: pad,
      right: pad,
      front: pad,
      back: pad,
      type: padType
    };
    const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);
    outDepth = outShape[0];
    outHeight = outShape[1];
    outWidth = outShape[2];
  } else if (pad === 'same') {
    outDepth = Math.ceil(inDepth / strideDepth);
    outHeight = Math.ceil(inHeight / strideHeight);
    outWidth = Math.ceil(inWidth / strideWidth);
    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;
    const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;
    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;
    const front = Math.floor(padAlongDepth / 2);
    const back = padAlongDepth - front;
    const top = Math.floor(padAlongHeight / 2);
    const bottom = padAlongHeight - top;
    const left = Math.floor(padAlongWidth / 2);
    const right = padAlongWidth - left;
    padInfo = {
      top,
      bottom,
      left,
      right,
      front,
      back,
      type: 'SAME'
    };
  } else if (pad === 'valid') {
    padInfo = {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      front: 0,
      back: 0,
      type: 'VALID'
    };
    outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);
    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
  } else {
    throw Error(`Unknown padding parameter: ${pad}`);
  }

  return {
    padInfo,
    outDepth,
    outHeight,
    outWidth
  };
}
/**
 * Rounds a value depending on the rounding mode
 * @param value
 * @param roundingMode
 */


function conditionalRound(value, roundingMode) {
  if (!roundingMode) {
    return value;
  }

  switch (roundingMode) {
    case 'round':
      // used for Caffe Conv
      return Math.round(value);

    case 'ceil':
      // used for Caffe Pool
      return Math.ceil(value);

    case 'floor':
      return Math.floor(value);

    default:
      throw new Error(`Unknown roundingMode ${roundingMode}`);
  }
}

function tupleValuesAreOne(param) {
  const [dimA, dimB, dimC] = parseTupleParam(param);
  return dimA === 1 && dimB === 1 && dimC === 1;
}

function eitherStridesOrDilationsAreOne(strides, dilations) {
  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);
}
/**
 * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to
 *    'channelsLast'|'channelsFirst'
 * @param dataFormat in 'NHWC'|'NCHW' mode
 * @return dataFormat in 'channelsLast'|'channelsFirst' mode
 * @throws unknown dataFormat
 */


function convertConv2DDataFormat(dataFormat) {
  if (dataFormat === 'NHWC') {
    return 'channelsLast';
  } else if (dataFormat === 'NCHW') {
    return 'channelsFirst';
  } else {
    throw new Error(`Unknown dataFormat ${dataFormat}`);
  }
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avgPool = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _cast = require("./cast");

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the 2D average pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */
function avgPool_(x, filterSize, strides, pad, dimRoundingMode) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'avgPool', 'float32');
  const dilations = 1;
  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in avgPool: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const forward = (backend, save) => {
    const convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, 1
    /* dilations */
    , pad, dimRoundingMode);
    save([x4D]);

    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {
      return x4D.clone();
    }

    return backend.avgPool(x4D, convInfo);
  };

  const inputs = {
    x: x4D
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  };

  let res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.AvgPool, attrs);

  res = (0, _cast.cast)(res, $x.dtype);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const avgPool = (0, _operation.op)({
  avgPool_
});
exports.avgPool = avgPool;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avgPool3d = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _cast = require("./cast");

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the 3D average pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.avgPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations Deprecated, this field will be gone in v3.0.0.
 *     The dilation rates:
 *     `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function avgPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat = 'NDHWC', dilations) {
  if (dilations == null) {
    dilations = [1, 1, 1];
  } else {
    (0, _globals.deprecationWarn)('dilations is deprecated, this field will be gone in ' + 'v3.0.0.');
  }

  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'avgPool3d', 'float32');
  let x5D = $x;
  let reshapedTo5D = false;

  if ($x.rank === 4) {
    reshapedTo5D = true;
    x5D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
  }

  util.assert(x5D.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
  util.assert(dataFormat === 'NDHWC', () => `Error in avgPool3d: Only NDHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);
  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool3d: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in avgPool3d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const forward = (backend, save) => {
    if (dilations == null) {
      dilations = [1, 1, 1];
    }

    const convInfo = conv_util.computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);
    save([x5D]);
    return backend.avgPool3d(x5D, convInfo);
  };

  const inputs = {
    x: x5D
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    dimRoundingMode,
    dataFormat,
    dilations
  };

  let res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.AvgPool3D, attrs);

  res = (0, _cast.cast)(res, x5D.dtype);

  if (reshapedTo5D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
  }

  return res;
}

const avgPool3d = (0, _operation.op)({
  avgPool3d_
});
exports.avgPool3d = avgPool3d;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertParamsConsistent = assertParamsConsistent;
exports.computeOutShape = computeOutShape;

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function assertParamsConsistent(shapes, axis) {
  const rank = shapes[0].length;
  shapes.forEach((shape, i) => {
    util.assert(shape.length === rank, () => `Error in concat${rank}D: rank of tensors[${i}] must be the same ` + `as the rank of the rest (${rank})`);
  });
  util.assert(axis >= 0 && axis < rank, () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);
  const firstShape = shapes[0];
  shapes.forEach((shape, i) => {
    for (let r = 0; r < rank; r++) {
      util.assert(r === axis || shape[r] === firstShape[r], () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` + `does not match the shape of the rest (${firstShape}) ` + `along the non-concatenated axis ${i}.`);
    }
  });
}

function computeOutShape(shapes, axis) {
  const outputShape = shapes[0].slice();

  for (let i = 1; i < shapes.length; i++) {
    outputShape[axis] += shapes[i][axis];
  }

  return outputShape;
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _concat_util = require("./concat_util");

var _operation = require("./operation");

var _tensor = require("./tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Concatenates a list of `tf.Tensor`s along a given axis.
 *
 * The tensors ranks and types must match, and their sizes must match in all
 * dimensions except `axis`.
 *
 * Also available are stricter rank-specific methods that assert that
 * `tensors` are of the given rank:
 *   - `tf.concat1d`
 *   - `tf.concat2d`
 *   - `tf.concat3d`
 *   - `tf.concat4d`
 *
 * Except `tf.concat1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * a.concat(b).print();  // or a.concat(b)
 * ```
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.concat([a, b, c]).print();
 * ```
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [10, 20]]);
 * const b = tf.tensor2d([[3, 4], [30, 40]]);
 * const axis = 1;
 * tf.concat([a, b], axis).print();
 * ```
 * @param tensors A list of tensors to concatenate.
 * @param axis The axis to concate along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function concat_(tensors, axis = 0) {
  (0, _util.assert)(tensors.length >= 1, () => 'Pass at least one tensor to concat');
  let $tensors = (0, _tensor_util_env.convertToTensorArray)(tensors, 'tensors', 'concat');

  if ($tensors[0].dtype === 'complex64') {
    $tensors.forEach(tensor => {
      if (tensor.dtype !== 'complex64') {
        throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${tensor.dtype}. `);
      }
    });
  }

  const $axis = (0, _util.parseAxisParam)(axis, $tensors[0].shape)[0];
  const outShape = (0, _concat_util.computeOutShape)($tensors.map(t => t.shape), $axis);

  if ((0, _util.sizeFromShape)(outShape) === 0) {
    return (0, _tensor.tensor)([], outShape);
  } // Keep only non-empty tensors (ignore tensors with 0 in their shape).


  $tensors = $tensors.filter(t => t.size > 0);

  if ($tensors.length === 1) {
    return $tensors[0];
  }

  const shapes = $tensors.map(t => t.shape);
  (0, _concat_util.assertParamsConsistent)(shapes, $axis);

  const forward = (backend, save) => {
    const res = backend.concat($tensors, $axis);
    save($tensors);
    return res;
  };

  const inputs = $tensors;
  const attr = {
    axis
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Concat, attr);
}

const concat = (0, _operation.op)({
  concat_
});
exports.concat = concat;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./concat_util":"node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./tensor":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sigmoid = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes sigmoid element-wise, `1 / (1 + exp(-x))`
 *
 * ```js
 * const x = tf.tensor1d([0, -1, 2, -3]);
 *
 * x.sigmoid().print();  // or tf.sigmoid(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sigmoid_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'sigmoid');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.sigmoid($x);
    save([res]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Sigmoid);
}

const sigmoid = (0, _operation.op)({
  sigmoid_
});
exports.sigmoid = sigmoid;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

var slice_util = _interopRequireWildcard(require("./slice_util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`
 * and is of size `size`.
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `x` is of the given rank:
 *   - `tf.slice1d`
 *   - `tf.slice2d`
 *   - `tf.slice3d`
 *   - `tf.slice4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.slice([1], [2]).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * x.slice([1, 0], [1, 2]).print();
 * ```
 * @param x The input `tf.Tensor` to slice from.
 * @param begin The coordinates to start the slice from. The length can be
 *     less than the rank of x - the rest of the axes will have implicit 0 as
 *     start. Can also be a single number, in which case it specifies the
 *     first axis.
 * @param size The size of the slice. The length can be less than the rank of
 *     x - the rest of the axes will have implicit -1. A value of -1 requests
 *     the rest of the dimensions in the axis. Can also be a single number,
 *     in which case it specifies the size of the first axis.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function slice_(x, begin, size) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'slice');

  if ($x.rank === 0) {
    throw new Error('Slicing scalar is not possible');
  }

  const [begin_, size_] = slice_util.parseSliceParams($x, begin, size);
  slice_util.assertParamsValid($x, begin_, size_);

  const forward = (backend, save) => {
    save([$x]);
    return backend.slice($x, begin_, size_);
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    begin,
    size
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Slice, attrs);
}

const slice = (0, _operation.op)({
  slice_
});
exports.slice = slice;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./slice_util":"node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tanh = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, 70]);
 *
 * x.tanh().print();  // or tf.tanh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function tanh_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'tanh');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const y = backend.tanh($x);
    save([y]);
    return y;
  }, inputs, null
  /* grad */
  , _kernel_names.Tanh);
}

const tanh = (0, _operation.op)({
  tanh_
});
exports.tanh = tanh;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/basic_lstm_cell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basicLSTMCell = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _add = require("./add");

var _concat = require("./concat");

var _mat_mul = require("./mat_mul");

var _mul = require("./mul");

var _operation = require("./operation");

var _sigmoid = require("./sigmoid");

var _slice = require("./slice");

var _tanh = require("./tanh");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the next state and output of a BasicLSTMCell.
 *
 * Returns `[newC, newH]`.
 *
 * Derived from tf.contrib.rnn.BasicLSTMCell.
 *
 * @param forgetBias Forget bias for the cell.
 * @param lstmKernel The weights for the cell.
 * @param lstmBias The bias for the cell.
 * @param data The input to the cell.
 * @param c Previous cell state.
 * @param h Previous cell output.
 *
 * @doc {heading: 'Operations', subheading: 'RNN'}
 */
function basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {
  const $forgetBias = (0, _tensor_util_env.convertToTensor)(forgetBias, 'forgetBias', 'basicLSTMCell');
  const $lstmKernel = (0, _tensor_util_env.convertToTensor)(lstmKernel, 'lstmKernel', 'basicLSTMCell');
  const $lstmBias = (0, _tensor_util_env.convertToTensor)(lstmBias, 'lstmBias', 'basicLSTMCell');
  const $data = (0, _tensor_util_env.convertToTensor)(data, 'data', 'basicLSTMCell');
  const $c = (0, _tensor_util_env.convertToTensor)(c, 'c', 'basicLSTMCell');
  const $h = (0, _tensor_util_env.convertToTensor)(h, 'h', 'basicLSTMCell');
  const combined = (0, _concat.concat)([$data, $h], 1);
  const weighted = (0, _mat_mul.matMul)(combined, $lstmKernel);
  const res = (0, _add.add)(weighted, $lstmBias); // i = input_gate, j = new_input, f = forget_gate, o = output_gate

  const batchSize = res.shape[0];
  const sliceCols = res.shape[1] / 4;
  const sliceSize = [batchSize, sliceCols];
  const i = (0, _slice.slice)(res, [0, 0], sliceSize);
  const j = (0, _slice.slice)(res, [0, sliceCols], sliceSize);
  const f = (0, _slice.slice)(res, [0, sliceCols * 2], sliceSize);
  const o = (0, _slice.slice)(res, [0, sliceCols * 3], sliceSize);
  const newC = (0, _add.add)((0, _mul.mul)((0, _sigmoid.sigmoid)(i), (0, _tanh.tanh)(j)), (0, _mul.mul)($c, (0, _sigmoid.sigmoid)((0, _add.add)($forgetBias, f))));
  const newH = (0, _mul.mul)((0, _tanh.tanh)(newC), (0, _sigmoid.sigmoid)(o));
  return [newC, newH];
}

const basicLSTMCell = (0, _operation.op)({
  basicLSTMCell_
});
exports.basicLSTMCell = basicLSTMCell;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","./concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","./mat_mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js","./mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./sigmoid":"node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js","./slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js","./tanh":"node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchToSpaceND = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * This operation reshapes the "batch" dimension 0 into `M + 1` dimensions of
 * shape `blockShape + [batch]`, interleaves these blocks back into the grid
 * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with
 * the same rank as the input. The spatial dimensions of this intermediate
 * result are then optionally cropped according to `crops` to produce the
 * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise
 * description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);
 * const blockShape = [2, 2];
 * const crops = [[0, 0], [0, 0]];
 *
 * x.batchToSpaceND(blockShape, crops).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.
 * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input
 * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required
 * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,
 * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,
 * x.shape[N-1]]`
 *
 * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /
 * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`
 * according to `crops` to produce the output of shape: `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],
 * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -
 * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function batchToSpaceND_(x, blockShape, crops) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'batchToSpaceND');
  const prod = blockShape.reduce((a, b) => a * b);
  util.assert($x.rank >= 1 + blockShape.length, () => `input rank is ${$x.rank} but should be > than blockShape.length ${blockShape.length}`);
  util.assert(crops.length === blockShape.length, () => `crops.length is ${crops.length} but should be equal to blockShape.length  ${blockShape.length}`);
  util.assert($x.shape[0] % prod === 0, () => `input tensor batch is ${$x.shape[0]} but is not divisible by the product of ` + `the elements of blockShape ${blockShape.join(' * ')} === ${prod}`);

  const forward = backend => {
    return backend.batchToSpaceND($x, blockShape, crops);
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    blockShape,
    crops
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.BatchToSpaceND, attrs);
}

const batchToSpaceND = (0, _operation.op)({
  batchToSpaceND_
});
exports.batchToSpaceND = batchToSpaceND;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xAs4D = xAs4D;

var _reshape = require("./reshape");

function xAs4D(x) {
  let x4D;

  if (x.rank === 0 || x.rank === 1) {
    x4D = (0, _reshape.reshape)(x, [1, 1, 1, x.size]);
  } else if (x.rank === 2) {
    x4D = (0, _reshape.reshape)(x, [1, 1, x.shape[0], x.shape[1]]);
  } else if (x.rank === 3) {
    x4D = (0, _reshape.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
  } else {
    x4D = x;
  }

  return x4D;
}
},{"./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchNorm = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _batchnorm_util = require("./batchnorm_util");

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Batch normalization.
 *
 * As described in
 * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).
 *
 * Mean, variance, scale, and offset can be of two shapes:
 *   - The same shape as the input.
 *   - In the common case, the depth dimension is the last dimension of x, so
 *     the values would be an `tf.Tensor1D` of shape [depth].
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that parameters passed are of given rank
 *   - `tf.batchNorm2d`
 *   - `tf.batchNorm3d`
 *   - `tf.batchNorm4d`
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function batchNorm_(x, mean, variance, offset, scale, varianceEpsilon) {
  if (varianceEpsilon == null) {
    varianceEpsilon = 0.001;
  }

  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'batchNorm');
  const $mean = (0, _tensor_util_env.convertToTensor)(mean, 'mean', 'batchNorm');
  const $variance = (0, _tensor_util_env.convertToTensor)(variance, 'variance', 'batchNorm');
  let $scale;

  if (scale != null) {
    $scale = (0, _tensor_util_env.convertToTensor)(scale, 'scale', 'batchNorm');
  }

  let $offset;

  if (offset != null) {
    $offset = (0, _tensor_util_env.convertToTensor)(offset, 'offset', 'batchNorm');
  }

  util.assert($mean.rank === $variance.rank, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');
  util.assert($offset == null || $mean.rank === $offset.rank, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');
  util.assert($scale == null || $mean.rank === $scale.rank, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');
  const x4D = (0, _batchnorm_util.xAs4D)($x);

  const forward = (backend, save) => {
    save([x4D, $mean, $variance, $scale]);
    return backend.batchNorm(x4D, as1DOr4D($mean), as1DOr4D($variance), as1DOr4D($offset), as1DOr4D($scale), varianceEpsilon);
  };

  const inputs = {
    x: x4D,
    scale: $scale,
    offset: $offset,
    mean: $mean,
    variance: $variance
  };
  const attrs = {
    varianceEpsilon
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.FusedBatchNorm, attrs);

  return (0, _reshape.reshape)(res, $x.shape);
}

function as1DOr4D(x) {
  if (x == null) {
    return null;
  }

  if (x.rank === 0) {
    // tslint:disable-next-line:no-unnecessary-type-assertion
    return (0, _reshape.reshape)(x, [x.size]);
  } else if (x.rank === 1) {
    return x;
  } else if (x.rank === 2) {
    // tslint:disable-next-line:no-unnecessary-type-assertion
    return (0, _reshape.reshape)(x, [1, 1, x.shape[0], x.shape[1]]);
  } else if (x.rank === 3) {
    // tslint:disable-next-line:no-unnecessary-type-assertion
    return (0, _reshape.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
  }

  return x;
}

const batchNorm = (0, _operation.op)({
  batchNorm_
});
exports.batchNorm = batchNorm;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./batchnorm_util":"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchNorm2d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _batchnorm = require("./batchnorm");

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Batch normalization, strictly for 2D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */
function batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'batchNorm');
  const $mean = (0, _tensor_util_env.convertToTensor)(mean, 'mean', 'batchNorm');
  const $variance = (0, _tensor_util_env.convertToTensor)(variance, 'variance', 'batchNorm');
  let $scale;

  if (scale != null) {
    $scale = (0, _tensor_util_env.convertToTensor)(scale, 'scale', 'batchNorm');
  }

  let $offset;

  if (offset != null) {
    $offset = (0, _tensor_util_env.convertToTensor)(offset, 'offset', 'batchNorm');
  }

  util.assert($x.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ` + `${$x.rank}.`);
  util.assert($mean.rank === 2 || $mean.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` + `got rank ${$mean.rank}.`);
  util.assert($variance.rank === 2 || $variance.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` + `but got rank ${$variance.rank}.`);

  if ($scale != null) {
    util.assert($scale.rank === 2 || $scale.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` + `but got rank ${$scale.rank}.`);
  }

  if ($offset != null) {
    util.assert($offset.rank === 2 || $offset.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` + `but got rank ${$offset.rank}.`);
  }

  return (0, _batchnorm.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}

const batchNorm2d = (0, _operation.op)({
  batchNorm2d_
});
exports.batchNorm2d = batchNorm2d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./batchnorm":"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm3d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchNorm3d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _batchnorm = require("./batchnorm");

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Batch normalization, strictly for 3D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */
function batchNorm3d_(x, mean, variance, offset, scale, varianceEpsilon) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'batchNorm');
  const $mean = (0, _tensor_util_env.convertToTensor)(mean, 'mean', 'batchNorm');
  const $variance = (0, _tensor_util_env.convertToTensor)(variance, 'variance', 'batchNorm');
  let $scale;

  if (scale != null) {
    $scale = (0, _tensor_util_env.convertToTensor)(scale, 'scale', 'batchNorm');
  }

  let $offset;

  if (offset != null) {
    $offset = (0, _tensor_util_env.convertToTensor)(offset, 'offset', 'batchNorm');
  }

  util.assert($x.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ` + `${$x.rank}.`);
  util.assert($mean.rank === 3 || $mean.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but ` + `got rank ${$mean.rank}.`);
  util.assert($variance.rank === 3 || $variance.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 ` + `but got rank ${$variance.rank}.`);

  if ($scale != null) {
    util.assert($scale.rank === 3 || $scale.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 ` + `but got rank ${$scale.rank}.`);
  }

  if ($offset != null) {
    util.assert($offset.rank === 3 || $offset.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 ` + `but got rank ${$offset.rank}.`);
  }

  return (0, _batchnorm.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}

const batchNorm3d = (0, _operation.op)({
  batchNorm3d_
});
exports.batchNorm3d = batchNorm3d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./batchnorm":"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchNorm4d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _batchnorm = require("./batchnorm");

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Batch normalization, strictly for 4D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */
function batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'batchNorm');
  const $mean = (0, _tensor_util_env.convertToTensor)(mean, 'mean', 'batchNorm');
  const $variance = (0, _tensor_util_env.convertToTensor)(variance, 'variance', 'batchNorm');
  let $scale;

  if (scale != null) {
    $scale = (0, _tensor_util_env.convertToTensor)(scale, 'scale', 'batchNorm');
  }

  let $offset;

  if (offset != null) {
    $offset = (0, _tensor_util_env.convertToTensor)(offset, 'offset', 'batchNorm');
  }

  util.assert($x.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ` + `${$x.rank}.`);
  util.assert($mean.rank === 4 || $mean.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` + `got rank ${$mean.rank}.`);
  util.assert($variance.rank === 4 || $variance.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` + `but got rank ${$variance.rank}.`);

  if ($scale != null) {
    util.assert($scale.rank === 4 || $scale.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` + `but got rank ${$scale.rank}.`);
  }

  if ($offset != null) {
    util.assert($offset.rank === 4 || $offset.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` + `but got rank ${$offset.rank}.`);
  }

  return (0, _batchnorm.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}

const batchNorm4d = (0, _operation.op)({
  batchNorm4d_
});
exports.batchNorm4d = batchNorm4d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./batchnorm":"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.broadcastTo = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _clone = require("./clone");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Broadcast an array to a compatible shape NumPy-style.
 *
 * The tensor's shape is compared to the broadcast shape from end to beginning.
 * Ones are prepended to the tensor's shape until is has the same length as
 * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is
 * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then
 * the input tensor is tiled N times along that axis (using tf.tile).
 *
 * @param input The tensor that is to be broadcasted.
 * @param shape The input is to be broadcast to this shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function broadcastTo_(x, shape) {
  let input = (0, _tensor_util_env.convertToTensor)(x, 'broadcastTo', 'x');
  const xShape = input.shape;

  if (shape.some(d => !(d > 0) || d % 1 !== 0)) {
    throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);
  }

  if (shape.length < input.rank) {
    throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${input.rank}.`);
  }

  if (shape.length > input.rank) {
    const newShape = input.shape.slice();

    while (newShape.length < shape.length) {
      newShape.unshift(1);
    }

    input = (0, _reshape.reshape)(input, newShape);
  }

  const inputShape = input.shape;
  const reps = Array.from(shape);

  for (let i = shape.length - 1; i >= 0; i--) {
    if (inputShape[i] === shape[i]) {
      reps[i] = 1;
    } else if (input.shape[i] !== 1) {
      throw new Error(`broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);
    }
  }

  const axes = reps.map((n, i) => n > 1 ? i : -1).filter(i => i >= 0);

  if (axes.length === 0) {
    return (0, _clone.clone)(input);
  }

  const forward = backend => backend.tile(input, reps);

  const inputs = {
    x: input
  };
  const attrs = {
    shape,
    inputShape
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.BroadcastTo, attrs);
}

const broadcastTo = (0, _operation.op)({
  broadcastTo_
});
exports.broadcastTo = broadcastTo;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./clone":"node_modules/@tensorflow/tfjs-core/dist/ops/clone.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/ceil.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ceil = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.ceil().print();  // or tf.ceil(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function ceil_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'ceil');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.ceil($x), inputs, null
  /* grad */
  , _kernel_names.Ceil);
}

const ceil = (0, _operation.op)({
  ceil_
});
exports.ceil = ceil;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clipByValue = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)
 * ```
 * @param x The input tensor.
 * @param clipValueMin Lower-bound of range to be clipped to.
 * @param clipValueMax Upper-bound of range to be clipped to.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function clipByValue_(x, clipValueMin, clipValueMax) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'clipByValue');
  util.assert(clipValueMin <= clipValueMax, () => `Error in clip: min (${clipValueMin}) must be ` + `less than or equal to max (${clipValueMax}).`);
  const inputs = {
    x: $x
  };
  const attrs = {
    clipValueMin,
    clipValueMax
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.clip($x, clipValueMin, clipValueMax);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.ClipByValue, attrs);
}

const clipByValue = (0, _operation.op)({
  clipByValue_
});
exports.clipByValue = clipByValue;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/concat_1d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat1d = void 0;

var _concat = require("./concat");

var _operation = require("./operation");

/**
 * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(3) = |r1, g1, b1|
 * B: shape(2) = |r2, g2|
 * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @return The concatenated array.
 */
function concat1d_(tensors) {
  return (0, _concat.concat)(tensors, 0
  /* axis */
  );
}

const concat1d = (0, _operation.op)({
  concat1d_
});
exports.concat1d = concat1d;
},{"./concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/concat_2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat2d = void 0;

var _concat = require("./concat");

var _operation = require("./operation");

/**
 * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *
 * B: shape(2, 3) = | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * C = tf.concat2d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *                  | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * if axis = 1:
 * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |
 *                   | r2, g2, b2, r4, g4, b4 |
 *
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concatenate along.
 * @return The concatenated array.
 */
function concat2d_(tensors, axis) {
  return (0, _concat.concat)(tensors, axis);
}

const concat2d = (0, _operation.op)({
  concat2d_
});
exports.concat2d = concat2d;
},{"./concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/concat_3d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat3d = void 0;

var _concat = require("./concat");

var _operation = require("./operation");

/**
 * Concatenates a list of `tf.Tensor3D`s along an axis.
 * See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *
 * B: shape(2, 1, 3) = | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * C = tf.concat3d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *                     | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * if axis = 1:
 * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |
 *                     | r2, g2, b2, r4, g4, b4 |
 *
 * if axis = 2:
 * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |
 *                      | r2, g2, b2, r4, g4, b4 |
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */
function concat3d_(tensors, axis) {
  return (0, _concat.concat)(tensors, axis);
}

const concat3d = (0, _operation.op)({
  concat3d_
});
exports.concat3d = concat3d;
},{"./concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/concat_4d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat4d = void 0;

var _concat = require("./concat");

var _operation = require("./operation");

/**
 * Concatenates a list of `tf.Tensor4D`s along an axis.
 * See `concat` for details.
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */
function concat4d_(tensors, axis) {
  return (0, _concat.concat)(tensors, axis);
}

const concat4d = (0, _operation.op)({
  concat4d_
});
exports.concat4d = concat4d;
},{"./concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2d = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes a 2D convolution over the input x.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'conv2d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'conv2d');
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);
  util.assert($filter.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in conv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];
  util.assert(inDepth === $filter.shape[2], () => `Error in conv2d: depth of input (${inDepth}) must match ` + `input depth for filter ${$filter.shape[2]}.`);
  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);

  const forward = (backend, save) => {
    const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);
    const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
    const res = backend.conv2d(x4D, $filter, convInfo);
    save([x4D, $filter]);
    return res;
  };

  const inputs = {
    x: x4D,
    filter: $filter
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Conv2D, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const conv2d = (0, _operation.op)({
  conv2d_
});
exports.conv2d = conv2d;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv1d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _conv2d = require("./conv2d");

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Computes a 1D convolution over the input x.
 *
 * @param x The input tensor, of rank 3 or rank 2, of shape
 *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.
 * @param filter The filter, rank 3, of shape
 *     `[filterWidth, inDepth, outDepth]`.
 * @param stride The number of entries by which the filter is moved right at
 *     each step.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat An optional string from "NWC", "NCW". Defaults to "NWC",
 *     the data is stored in the order of [batch, in_width, in_channels]. Only
 *     "NWC" is currently supported.
 * @param dilation The dilation rate in which we sample input values in
 *     atrous convolution. Defaults to `1`. If it is greater than 1, then
 *     stride must be `1`.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv1d_(x, filter, stride, pad, dataFormat = 'NWC', dilation = 1, dimRoundingMode) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'conv1d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'conv1d');
  let x3D = $x;
  let reshapedTo3D = false;

  if ($x.rank === 2) {
    reshapedTo3D = true;
    x3D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1]]);
  }

  util.assert(x3D.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);
  util.assert($filter.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ` + `${$filter.rank}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in conv1d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  util.assert(x3D.shape[2] === $filter.shape[1], () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` + `input depth for filter ${$filter.shape[1]}.`);
  util.assert(conv_util.eitherStridesOrDilationsAreOne(stride, dilation), () => 'Error in conv1D: Either stride or dilation must be 1. ' + `Got stride ${stride} and dilation '${dilation}'`);
  util.assert(dataFormat === 'NWC', () => `Error in conv1d: got dataFormat of ${dataFormat} but only NWC is currently supported.`);
  const filter4D = (0, _reshape.reshape)($filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);
  const input4D = (0, _reshape.reshape)(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);
  const strides = [1, stride];
  const dilations = [1, dilation];
  const conv2dDataFormat = 'NHWC';
  const res = (0, _conv2d.conv2d)(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);

  if (reshapedTo3D) {
    return (0, _reshape.reshape)(res, [res.shape[2], res.shape[3]]);
  }

  return (0, _reshape.reshape)(res, [res.shape[0], res.shape[2], res.shape[3]]);
}

const conv1d = (0, _operation.op)({
  conv1d_
});
exports.conv1d = conv1d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2DBackpropInput = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the derivative of the input of a 2D convolution.
 *
 * @param xShape The shape of the input: [batch, height, width, inDepth].
 * If length of 3, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 4 or rank 3 of shape
 *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */
function conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {
  util.assert(xShape.length === dy.rank, () => `Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
  let xShape4D = xShape;
  let dy4D = dy;
  let reshapedTo4D = false;

  if (dy.rank === 3) {
    reshapedTo4D = true;
    dy4D = (0, _reshape.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
    xShape4D = [1, xShape[0], xShape[1], xShape[2]];
  }

  util.assert(xShape4D.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ` + `${xShape4D.length}.`);
  util.assert(dy4D.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got ` + `rank ${dy4D.rank}`);
  util.assert(filter.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got ` + `rank ${filter.rank}`);
  const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];
  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];
  util.assert(inDepth === filter.shape[2], () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[2]}.`);
  util.assert(outDepth === filter.shape[3], () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[3]}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in conv2dDerInput: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const forward = (backend, save) => {
    const dilations = 1;
    const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);
    const convInfo = conv_util.computeConv2DInfo(xShape4D, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
    const res = backend.conv2dDerInput(dy4D, filter, convInfo);
    save([dy4D, filter]);
    return res;
  };

  const inputs = {
    dy: dy4D,
    filter
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dimRoundingMode,
    inputShape: xShape4D
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Conv2DBackpropInput, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const conv2DBackpropInput = (0, _operation.op)({
  conv2DBackpropInput_
});
exports.conv2DBackpropInput = conv2DBackpropInput;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2dTranspose = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _conv2d_backprop_input = require("./conv2d_backprop_input");

var _operation = require("./operation");

/**
 * Computes the transposed 2D convolution of an image, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 4 or rank 3, of shape
 *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 4 or rank 3:
 *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.
 * @param strides The strides of the original convolution:
 *     `[strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 * @param dimRoundingMode The rounding mode used when computing output
 *    dimensions if pad is a number. If none is provided, it will not round
 *    and error if the output is of fractional size.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'conv2dTranspose');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'conv2dTranspose');
  return (0, _conv2d_backprop_input.conv2DBackpropInput)(outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);
}

const conv2dTranspose = (0, _operation.op)({
  conv2dTranspose_
});
exports.conv2dTranspose = conv2dTranspose;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./conv2d_backprop_input":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/conv3d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv3d = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes a 3D convolution over the input x.
 *
 * @param x The input tensor, of rank 5 or rank 4, of shape
 *     `[batch, depth, height, width, channels]`. If rank 4,
 * batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.
 *      inChannels must match between input and filter.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat: An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationDepth, dilationHeight,
 *     dilationWidth]` in which we sample input values across the height
 *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.
 *     If `dilations` is a single number, then
 *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater
 *     than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv3d_(x, filter, strides, pad, dataFormat = 'NDHWC', dilations = [1, 1, 1]) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'conv3d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'conv3d');
  let x5D = $x;
  let reshapedTo5D = false;

  if ($x.rank === 4) {
    reshapedTo5D = true;
    x5D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
  }

  util.assert(x5D.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);
  util.assert($filter.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ` + `${$filter.rank}.`);
  util.assert(x5D.shape[4] === $filter.shape[3], () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` + `input depth for filter ${$filter.shape[3]}.`);
  util.assert((0, conv_util.eitherStridesOrDilationsAreOne)(strides, dilations), () => 'Error in conv3D: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  util.assert(dataFormat === 'NDHWC', () => `Error in conv3d: got dataFormat of ${dataFormat} but only NDHWC is currently supported.`);

  const forward = (backend, save) => {
    const convInfo = conv_util.computeConv3DInfo(x5D.shape, $filter.shape, strides, dilations, pad);
    const res = backend.conv3d(x5D, $filter, convInfo);
    save([x5D, $filter]);
    return res;
  };

  const inputs = {
    x: x5D,
    filter: $filter
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dilations
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Conv3D, attrs);

  if (reshapedTo5D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
  }

  return res;
}

const conv3d = (0, _operation.op)({
  conv3d_
});
exports.conv3d = conv3d;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv3DBackpropInput = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the derivative of the input of a 3D convolution.
 *
 * @param xShape The shape of the input: [batch, depth, height, width,
 * in_channels]. If length of 4, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 5 or rank 4 of shape
 *   `[batch, outDepth, outHeight, outWidth, in_channels]`.
 * If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 */
function conv3DBackpropInput_(xShape, dy, filter, strides, pad) {
  util.assert(xShape.length === dy.rank, () => `Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
  let xShape5D = xShape;
  let dy5D = dy;
  let reshapedTo5D = false;

  if (dy.rank === 4) {
    reshapedTo5D = true;
    dy5D = (0, _reshape.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);
    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];
  }

  const inDepth = xShape5D[4];
  const outDepth = dy5D.shape[4];
  util.assert(xShape5D.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ` + `${xShape5D.length}.`);
  util.assert(dy5D.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got ` + `rank ${dy5D.rank}`);
  util.assert(filter.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got ` + `rank ${filter.rank}`);
  util.assert(inDepth === filter.shape[3], () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[3]}.`);
  util.assert(outDepth === filter.shape[4], () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[4]}.`);

  const forward = backend => {
    const dilations = 1;
    const convInfo = conv_util.computeConv3DInfo(xShape5D, filter.shape, strides, dilations, pad);
    return backend.conv3dDerInput(dy5D, filter, convInfo);
  };

  const inputs = {
    dy: dy5D
  };
  const attrs = {
    pad
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null, _kernel_names.Conv3DBackpropInputV2, attrs);

  if (reshapedTo5D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
  }

  return res;
}

const conv3DBackpropInput = (0, _operation.op)({
  conv3DBackpropInput_
});
exports.conv3DBackpropInput = conv3DBackpropInput;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv3dTranspose = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _conv3d_backprop_input = require("./conv3d_backprop_input");

var _operation = require("./operation");

/**
 * Computes the transposed 3D convolution of a volume, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 5 or rank 4, of shape
 *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 5 or rank 4:
 *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is
 *    assumed.
 * @param strides The strides of the original convolution:
 *     `[strideDepth, strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv3dTranspose_(x, filter, outputShape, strides, pad) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'conv3dTranspose');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'conv3dTranspose');
  return (0, _conv3d_backprop_input.conv3DBackpropInput)(outputShape, $x, $filter, strides, pad);
}

const conv3dTranspose = (0, _operation.op)({
  conv3dTranspose_
});
exports.conv3dTranspose = conv3dTranspose;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./conv3d_backprop_input":"node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/cos.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cos = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.cos().print();  // or tf.cos(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function cos_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'cos');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.cos($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Cos);
}

const cos = (0, _operation.op)({
  cos_
});
exports.cos = cos;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cosh = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.cosh().print();  // or tf.cosh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function cosh_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'cosh');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.cosh($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Cosh);
}

const cosh = (0, _operation.op)({
  cosh_
});
exports.cosh = cosh;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cumsum = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _axis_util = require("./axis_util");

var _operation = require("./operation");

var _transpose = require("./transpose");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the cumulative sum of a `tf.Tensor` along `axis`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4]);
 * x.cumsum().print();
 * ```
 * ```js
 * const x = tf.tensor([[1, 2], [3, 4]]);
 * x.cumsum().print();
 * ```
 *
 * @param x The input tensor to be summed.
 * @param axis The axis along which to sum. Optional. Defaults to 0.
 * @param exclusive Whether to perform exclusive cumulative sum. Optional.
 *     Defaults to false. If set to true then the sum of each tensor entry
 *     does not include its own value, but only the values previous to it
 *     along the specified axis.
 * @param reverse Whether to sum in the opposite direction. Optional.
 *     Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Scan'}
 */
function cumsum_(x, axis = 0, exclusive = false, reverse = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'cumsum');

  const forward = (backend, save) => {
    const permutation = (0, _axis_util.getAxesPermutation)([axis], $x.rank);
    let permutedX = $x;

    if (permutation != null) {
      permutedX = (0, _transpose.transpose)($x, permutation);
    }

    const permutedAxis = (0, _axis_util.getInnerMostAxes)(1, $x.rank)[0];
    let value = backend.cumsum(permutedX, permutedAxis, exclusive, reverse);
    save([$x]);

    if (permutation != null) {
      const reversePermutation = (0, _axis_util.getUndoAxesPermutation)(permutation);
      value = (0, _transpose.transpose)(value, reversePermutation);
    }

    return value;
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    exclusive,
    reverse
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Cumsum, attrs);
}

const cumsum = (0, _operation.op)({
  cumsum_
});
exports.cumsum = cumsum;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthToSpace = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Rearranges data from depth into blocks of spatial data. More specifically,
 * this op outputs a copy of the input tensor where values from the `depth`
 * dimension are moved in spatial blocks to the `height` and `width` dimensions.
 * The attr `blockSize` indicates the input block size and how the data is
 * moved.
 *
 *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged
 * into non-overlapping blocks of size `blockSize x blockSize`
 *
 *  - The width the output tensor is `inputWidth * blockSize`, whereas the
 * height is `inputHeight * blockSize`
 *
 *  - The Y, X coordinates within each block of the output image are determined
 * by the high order component of the input channel index
 *
 *  - The depth of the input tensor must be divisible by `blockSize *
 * blockSize`
 *
 * The `dataFormat` attr specifies the layout of the input and output tensors
 * with the following options: "NHWC": [ `batch, height, width, channels` ]
 * "NCHW": [ `batch, channels, height, width` ]
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);
 * const blockSize = 2;
 * const dataFormat = "NHWC";
 *
 * tf.depthToSpace(x, blockSize, dataFormat).print();
 * ```
 *
 * @param x The input tensor of rank 4
 * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to "NHWC"
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function depthToSpace_(x, blockSize, dataFormat = 'NHWC') {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'depthToSpace');
  const inputHeight = dataFormat === 'NHWC' ? $x.shape[1] : $x.shape[2];
  const inputWidth = dataFormat === 'NHWC' ? $x.shape[2] : $x.shape[3];
  const inputDepth = dataFormat === 'NHWC' ? $x.shape[3] : $x.shape[1];
  util.assert(inputHeight * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${inputHeight} and ${blockSize}  for depthToSpace with input shape
    ${$x.shape}`);
  util.assert(inputWidth * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${inputWidth} and ${blockSize} for depthToSpace with input shape
        ${$x.shape}`);
  util.assert(inputDepth % (blockSize * blockSize) === 0, () => `Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);

  const forward = backend => backend.depthToSpace($x, blockSize, dataFormat);

  const inputs = {
    x: $x
  };
  const attrs = {
    blockSize,
    dataFormat
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.DepthToSpace, attrs);
}

const depthToSpace = (0, _operation.op)({
  depthToSpace_
});
exports.depthToSpace = depthToSpace;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthwiseConv2d = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Depthwise 2D convolution.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function depthwiseConv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'depthwiseConv2d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'depthwiseConv2d');
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);
  util.assert($filter.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);
  util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in depthwiseConv2d: number of input channels ` + `(${x4D.shape[3]}) must match the inChannels dimension in ` + `filter ${$filter.shape[2]}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const forward = (backend, save) => {
    if (dilations == null) {
      dilations = [1, 1];
    }

    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${dilations}'`);
    const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true
    /* depthwise */
    );
    const res = backend.depthwiseConv2D(x4D, $filter, convInfo);
    save([x4D, $filter]);
    return res;
  };

  const inputs = {
    x: x4D,
    filter: $filter
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.DepthwiseConv2dNative, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const depthwiseConv2d = (0, _operation.op)({
  depthwiseConv2d_
});
exports.depthwiseConv2d = depthwiseConv2d;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/diag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diag = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns a diagonal tensor with a given diagonal values.
 *
 * Given a diagonal, this operation returns a tensor with the diagonal and
 * everything else padded with zeros.
 *
 * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor
 * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * tf.diag(x).print()
 * ```
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])
 *
 * tf.diag(x).print()
 * ```
 * @param x The input tensor.
 */
function diag_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'diag');

  const forward = backend => {
    const flat = (0, _reshape.reshape)($x, [$x.size]);
    const result = backend.diag(flat);
    const outShape = [...x.shape, ...x.shape];
    return (0, _reshape.reshape)(result, outShape);
  };

  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Diag);
}

const diag = (0, _operation.op)({
  diag_
});
exports.diag = diag;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dilation2d = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the grayscale dilation over the input `x`.
 *
 * @param x The input tensor, rank 3 or rank 4 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter tensor, rank 3, of shape
 *     `[filterHeight, filterWidth, depth]`.
 * @param strides The strides of the sliding window for each dimension of the
 *     input tensor: `[strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat Specify the data format of the input and output data.
 *      Defaults to 'NHWC'. Only 'NHWC' is currently supported. With the
 *      default format "NHWC", the data is stored in the order of: [batch,
 *      height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     for atrous morphological dilation. Defaults to `[1, 1]`. If `dilations`
 *     is a single number, then `dilationHeight == dilationWidth`. If it is
 *     greater than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function dilation2d_(x, filter, strides, pad, dilations = [1, 1], dataFormat = 'NHWC') {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'dilation2d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'dilation2d');
  util.assert($x.rank === 3 || $x.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ` + `${$x.rank}.`);
  util.assert($filter.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ` + `${$filter.rank}.`);
  util.assert(dataFormat === 'NHWC', () => `Error in dilation2d: Only NHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    reshapedTo4D = true;
  }

  const inputs = {
    x: x4D,
    filter: $filter
  };
  const attrs = {
    strides,
    pad,
    dilations
  };

  const res = _engine.ENGINE.runKernel(_kernel_names.Dilation2D, inputs, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const dilation2d = (0, _operation.op)({
  dilation2d_
});
exports.dilation2d = dilation2d;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBroadcastDims = getBroadcastDims;
exports.getReductionAxes = getReductionAxes;
exports.assertAndGetBroadcastShape = assertAndGetBroadcastShape;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the dimensions in the input shape that are broadcasted to
 * produce the provided output shape.
 *
 * The returned dimensions are 0-indexed and sorted. An example:
 * inShape = [4, 1, 3]
 * outShape = [5, 4, 3, 3]
 * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.
 */
function getBroadcastDims(inShape, outShape) {
  const inRank = inShape.length;
  const dims = [];

  for (let i = 0; i < inRank; i++) {
    const dim = inRank - 1 - i;
    const a = inShape[dim] || 1;
    const b = outShape[outShape.length - 1 - i] || 1;

    if (b > 1 && a === 1) {
      dims.unshift(dim);
    }
  }

  return dims;
}
/**
 * Returns the axes in the output space that should be reduced to produce
 * the input space.
 */


function getReductionAxes(inShape, outShape) {
  const result = [];

  for (let i = 0; i < outShape.length; i++) {
    const inDim = inShape[inShape.length - i - 1];
    const outAxis = outShape.length - i - 1;
    const outDim = outShape[outAxis];

    if (inDim == null || inDim === 1 && outDim > 1) {
      result.unshift(outAxis);
    }
  }

  return result;
}

function assertAndGetBroadcastShape(shapeA, shapeB) {
  const result = [];
  const l = Math.max(shapeA.length, shapeB.length);

  for (let i = 0; i < l; i++) {
    let a = shapeA[shapeA.length - i - 1];

    if (a == null) {
      a = 1;
    }

    let b = shapeB[shapeB.length - i - 1];

    if (b == null) {
      b = 1;
    }

    if (a === 1) {
      result.unshift(b);
    } else if (b === 1) {
      result.unshift(a);
    } else if (a !== b) {
      const errMsg = `Operands could not be broadcast together with shapes ` + `${shapeA} and ${shapeB}.`;
      throw Error(errMsg);
    } else {
      result.unshift(a);
    }
  }

  return result;
}
},{}],"node_modules/@tensorflow/tfjs-core/dist/ops/equal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equal = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of (a == b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.equal(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function equal_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'equal');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'equal');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);

  const forward = backend => backend.equal($a, $b);

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null, _kernel_names.Equal);
}

const equal = (0, _operation.op)({
  equal_
});
exports.equal = equal;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/where.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.where = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _broadcast_to = require("./broadcast_to");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the elements, either `a` or `b` depending on the `condition`.
 *
 * If the condition is true, select from `a`, otherwise select from `b`.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const a = tf.tensor1d([1 , 2, 3]);
 * const b = tf.tensor1d([-1, -2, -3]);
 *
 * a.where(cond, b).print();
 * ```
 *
 * @param condition The input condition. Must be of dtype bool.
 * @param a If `condition` is rank 1, `a` may have a higher rank but
 *     its first dimension must match the size of `condition`.
 * @param b A tensor with the same dtype as `a` and with shape that is
 *     compatible with `a`.
 * @return A tensor with same dtype as `a` and `b`, and shape that is
 *     broadcastable from `a` and `b`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function where_(condition, a, b) {
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'where');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'where');
  const $condition = (0, _tensor_util_env.convertToTensor)(condition, 'condition', 'where', 'bool'); // TODO: move this logic to forward function when the broadcastTo op is
  // implemented in WASM.
  // Find the broadcastable shape for $a and $b.

  const broadcastShape = (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const $broadcastedA = (0, _broadcast_to.broadcastTo)($a, broadcastShape);
  const $broadcastedB = (0, _broadcast_to.broadcastTo)($b, broadcastShape);

  if ($condition.rank === 1) {
    // If condition rank is 1, then the first dimension must match the size of
    // condition.
    (0, _util.assert)($condition.shape[0] === $a.shape[0], () => 'The first dimension of `a` must match the size of `condition`.');
  }

  if ($condition.rank !== 1) {
    // A must have the same shape as condition.
    (0, _util.assertShapesMatch)($condition.shape, $broadcastedB.shape, 'Error in where: ');
  }

  const forward = (backend, save) => {
    const res = backend.select($condition, $broadcastedA, $broadcastedB);
    save([$condition]);
    return res;
  };

  const inputs = {
    condition: $condition,
    t: $broadcastedA,
    e: $broadcastedB
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.SelectV2);
}

const where = (0, _operation.op)({
  where_
});
exports.where = where;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./broadcast_to":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zerosLike = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.zerosLike(x).print();
 * ```
 *
 * @param x The tensor of required shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function zerosLike_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'zerosLike');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.zerosLike($x), inputs, null
  /* grad */
  , _kernel_names.ZerosLike);
}

const zerosLike = (0, _operation.op)({
  zerosLike_
});
exports.zerosLike = zerosLike;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divNoNan = void 0;

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _div = require("./div");

var _equal = require("./equal");

var _operation = require("./operation");

var _where = require("./where");

var _zeros_like = require("./zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0
 * if denominator is 0.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 * const c = tf.tensor1d([0, 0, 0, 0]);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 * const c = tf.scalar(0);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function divNoNan_(a, b) {
  // TODO: Make this into its own kernel.
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'div');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'div');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  const divResult = (0, _div.div)($a, $b);
  const zeros = (0, _zeros_like.zerosLike)(divResult);
  const bEqualsZero = (0, _equal.equal)($b, zeros);
  return (0, _where.where)(bEqualsZero, zeros, divResult);
}

const divNoNan = (0, _operation.op)({
  divNoNan_
});
exports.divNoNan = divNoNan;
},{"../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","./equal":"node_modules/@tensorflow/tfjs-core/dist/ops/equal.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./where":"node_modules/@tensorflow/tfjs-core/dist/ops/where.js","./zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/dot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dot = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _mat_mul = require("./mat_mul");

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor2d([[1, 2], [3, 4]]);
 * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 *
 * a.dot(b).print();  // or tf.dot(a, b)
 * b.dot(a).print();
 * b.dot(c).print();
 * ```
 * @param t1 The first tensor in the dot operation.
 * @param t2 The second tensor in the dot operation.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function dot_(t1, t2) {
  const $t1 = (0, _tensor_util_env.convertToTensor)(t1, 't1', 'dot');
  const $t2 = (0, _tensor_util_env.convertToTensor)(t2, 't2', 'dot');
  util.assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` + `${$t1.rank} and ${$t2.rank}.`);
  const t1Inner = $t1.rank === 1 ? $t1.size : $t1.shape[1];
  const t2Inner = $t2.rank === 1 ? $t2.size : $t2.shape[0];
  util.assert(t1Inner === t2Inner, () => `Error in dot: inner dimensions of inputs must match, but got ` + `${t1Inner} and ${t2Inner}.`);

  if ($t1.rank === 1 && $t2.rank === 1) {
    const t12D = (0, _reshape.reshape)($t1, [1, -1]);
    const t22D = (0, _reshape.reshape)($t2, [-1, 1]);
    const t1t2 = (0, _mat_mul.matMul)(t12D, t22D);
    return (0, _reshape.reshape)(t1t2, []);
  } else if ($t1.rank === 1 && $t2.rank === 2) {
    const t12D = (0, _reshape.reshape)($t1, [1, -1]);
    const t22D = (0, _reshape.reshape)($t2, [$t2.shape[0], $t2.shape[1]]);
    const t1t2 = (0, _mat_mul.matMul)(t12D, t22D);
    return (0, _reshape.reshape)(t1t2, [t1t2.size]);
  } else if ($t1.rank === 2 && $t2.rank === 1) {
    const t22D = (0, _reshape.reshape)($t2, [-1, 1]);
    const t1t2 = (0, _mat_mul.matMul)($t1, t22D);
    return (0, _reshape.reshape)(t1t2, [t1t2.size]);
  } else {
    const t22D = (0, _reshape.reshape)($t2, [$t2.shape[0], $t2.shape[1]]);
    const t1t2 = (0, _mat_mul.matMul)($t1, t22D);
    return t1t2;
  }
}

const dot = (0, _operation.op)({
  dot_
});
exports.dot = dot;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./mat_mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/elu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elu = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes exponential linear element-wise: `x > 0 ? e ^ x - 1 : 0`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 1, -3, 2]);
 *
 * x.elu().print();  // or tf.elu(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function elu_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'elu');

  const forward = (backend, save) => {
    const y = backend.elu($x);
    save([y]);
    return y;
  };

  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Elu);
}

const elu = (0, _operation.op)({
  elu_
});
exports.elu = elu;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/erf.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.erf = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _cast = require("./cast");

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes gause error function of the input `tf.Tensor` element-wise:
 * `erf(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.erf().print(); // or tf.erf(x);
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function erf_(x) {
  let $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'erf');
  util.assert($x.dtype === 'int32' || $x.dtype === 'float32', () => 'Input dtype must be `int32` or `float32`.');

  if ($x.dtype === 'int32') {
    $x = (0, _cast.cast)($x, 'float32');
  }

  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.erf($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Erf);
}

const erf = (0, _operation.op)({
  erf_
});
exports.erf = erf;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/exp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exp = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.exp().print();  // or tf.exp(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function exp_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'exp');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.exp($x);
    save([res]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Exp);
}

const exp = (0, _operation.op)({
  exp_
});
exports.exp = exp;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expandDims = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension
 * into the tensor's shape.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const axis = 1;
 * x.expandDims(axis).print();
 * ```
 *
 * @param x The input tensor whose dimensions to be expanded.
 * @param axis The dimension index at which to insert shape of `1`. Defaults
 *     to 0 (the first dimension).
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function expandDims_(x, axis = 0) {
  const parseAs = null;
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'expandDims', parseAs);
  util.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');
  const newShape = $x.shape.slice();

  if (axis < 0) {
    // Negative value is counted from the tail of rank.
    util.assert(-($x.rank + 1) <= axis, () => `Axis must be in the interval [${-($x.rank + 1)}, ${$x.rank}]`);
    axis = $x.rank + axis + 1;
  }

  newShape.splice(axis, 0, 1);
  return (0, _reshape.reshape)($x, newShape);
}

const expandDims = (0, _operation.op)({
  expandDims_
});
exports.expandDims = expandDims;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/expm1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expm1 = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes exponential of the input `tf.Tensor` minus one element-wise.
 * `e ^ x - 1`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.expm1().print();  // or tf.expm1(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function expm1_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'expm1');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.expm1($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Expm1);
}

const expm1 = (0, _operation.op)({
  expm1_
});
exports.expm1 = expm1;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/tile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tile = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Construct a tensor by repeating it the number of times given by reps.
 *
 * This operation creates a new tensor by replicating `input` `reps`
 * times. The output tensor's i'th dimension has `input.shape[i] *
 * reps[i]` elements, and the values of `input` are replicated
 * `reps[i]` times along the i'th dimension. For example, tiling
 * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 *
 * a.tile([2]).print();    // or a.tile([2])
 * ```
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.tile([1, 2]).print();  // or a.tile([1, 2])
 * ```
 * @param x The tensor to tile.
 * @param reps Determines the number of replications per dimension.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function tile_(x, reps) {
  const parseAs = null;
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'tile', parseAs);
  util.assert($x.rank === reps.length, () => `Error in transpose: rank of input ${$x.rank} ` + `must match length of reps ${reps}.`);

  const forward = (backend, save) => {
    const res = backend.tile($x, reps);
    save([$x]);
    return res;
  };

  const inputsToSave = [$x];
  const inputs = {
    x: $x
  };
  const attrs = {
    reps
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Tile, attrs, inputsToSave);
}

const tile = (0, _operation.op)({
  tile_
});
exports.tile = tile;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/eye.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eye = void 0;

var _buffer = require("./buffer");

var _expand_dims = require("./expand_dims");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _tile = require("./tile");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Create an identity matrix.
 *
 * @param numRows Number of rows.
 * @param numColumns Number of columns. Defaults to `numRows`.
 * @param batchShape If provided, will add the batch shape to the beginning
 *   of the shape of the returned `tf.Tensor` by repeating the identity
 *   matrix.
 * @param dtype Data type.
 * @returns Identity matrix of the specified size and data type, possibly
 *   with batch repetition if `batchShape` is specified.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function eye_(numRows, numColumns, batchShape, dtype = 'float32') {
  if (numColumns == null) {
    numColumns = numRows;
  }

  const buff = (0, _buffer.buffer)([numRows, numColumns], dtype);
  const n = numRows <= numColumns ? numRows : numColumns;

  for (let i = 0; i < n; ++i) {
    buff.set(1, i, i);
  }

  const out = (0, _reshape.reshape)(buff.toTensor(), [numRows, numColumns]);

  if (batchShape == null) {
    return out;
  } else {
    if (batchShape.length === 1) {
      return (0, _tile.tile)((0, _expand_dims.expandDims)(out, 0), [batchShape[0], 1, 1]);
    } else if (batchShape.length === 2) {
      // tslint:disable-next-line:no-unnecessary-type-assertion
      return (0, _tile.tile)((0, _expand_dims.expandDims)((0, _expand_dims.expandDims)(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);
    } else if (batchShape.length === 3) {
      // tslint:disable-next-line:no-unnecessary-type-assertion
      return (0, _tile.tile)((0, _expand_dims.expandDims)((0, _expand_dims.expandDims)((0, _expand_dims.expandDims)(out, 0), 0), 0), [batchShape[0], batchShape[1], batchShape[2], 1, 1]);
    } else {
      throw new Error(`eye() currently supports only 1D and 2D ` + // tslint:disable-next-line:no-any
      `batchShapes, but received ${batchShape.length}D.`);
    }
  }
}

const eye = (0, _operation.op)({
  eye_
});
exports.eye = eye;
},{"./buffer":"node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","./expand_dims":"node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./tile":"node_modules/@tensorflow/tfjs-core/dist/ops/tile.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/fill.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fill = fill;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` filled with a scalar value.
 *
 * ```js
 * tf.fill([2, 2], 4).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param value The scalar value to fill the tensor with.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 * 'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function fill(shape, value, dtype) {
  const attrs = {
    shape,
    value,
    dtype
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.fill(shape, value, dtype), {}, null, _kernel_names.Fill, attrs);
}
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/floor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floor = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.floor().print();  // or tf.floor(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function floor_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'floor');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.floor($x), inputs, null
  /* grad */
  , _kernel_names.Floor);
}

const floor = (0, _operation.op)({
  floor_
});
exports.floor = floor;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeOptimalWindowSize = computeOptimalWindowSize;
exports.PARALLELIZE_THRESHOLD = void 0;

var _util = require("../util");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Inputs of size above this threshold will be parallelized by calling multiple
 * shader programs.
 */
const PARALLELIZE_THRESHOLD = 30;
exports.PARALLELIZE_THRESHOLD = PARALLELIZE_THRESHOLD;

function computeOptimalWindowSize(inSize) {
  if (inSize <= PARALLELIZE_THRESHOLD) {
    return inSize;
  }

  return (0, _util.nearestDivisor)(inSize, Math.floor(Math.sqrt(inSize)));
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.segOpComputeOptimalWindowSize = segOpComputeOptimalWindowSize;
exports.computeOutShape = computeOutShape;
exports.collectGatherOpShapeInfo = collectGatherOpShapeInfo;

var _util = require("../util");

var _reduce_util = require("./reduce_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function segOpComputeOptimalWindowSize(inSize, numSegments) {
  let done = false;
  let res;

  if (inSize <= _reduce_util.PARALLELIZE_THRESHOLD) {
    res = inSize;
    done = true;
  } else {
    res = (0, _util.nearestDivisor)(inSize, Math.floor(Math.sqrt(inSize)));
  }

  while (!done) {
    if (res > numSegments || res === inSize) {
      done = true;
    } else {
      res = (0, _util.nearestDivisor)(inSize, res + 1);
    }
  }

  return res;
}

function computeOutShape(aShape, axis, numSegments) {
  const outShape = [];
  const rank = aShape.length;

  for (let dim = 0; dim < rank; dim++) {
    if (dim !== axis) {
      outShape.push(aShape[dim]);
    } else {
      outShape.push(numSegments);
    }
  }

  return outShape;
}

function collectGatherOpShapeInfo(x, indices, axis) {
  const dimSize = x.shape[axis];
  const outputShape = [];
  let batchSize = 1;
  let sliceSize = 1;

  for (let i = 0; i < axis; i++) {
    outputShape.push(x.shape[i]);
    batchSize *= x.shape[i];
  }

  for (let i = 0; i < indices.rank; i++) {
    outputShape.push(indices.shape[i]);
  }

  for (let i = axis + 1; i < x.rank; i++) {
    outputShape.push(x.shape[i]);
    sliceSize *= x.shape[i];
  }

  return {
    batchSize,
    sliceSize,
    dimSize,
    outputShape
  };
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./reduce_util":"node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/gather.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gather = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _segment_util = require("./segment_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Gather slices from tensor `x`'s axis `axis` according to `indices`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const indices = tf.tensor1d([1, 3, 3], 'int32');
 *
 * x.gather(indices).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const indices = tf.tensor1d([1, 1, 0], 'int32');
 *
 * x.gather(indices).print();
 * ```
 * @param x The input tensor whose slices to be gathered.
 * @param indices The indices of the values to extract.
 * @param axis The axis over which to select values. Defaults to 0.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function gather_(x, indices, axis = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'gather');
  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'gather', 'int32');
  const inputs = {
    x: $x,
    indices: $indices
  };
  const attrs = {
    axis
  };

  const forward = (backend, save) => {
    const parsedAxis = (0, _util.parseAxisParam)(axis, $x.shape)[0];
    const shapeInfo = (0, _segment_util.collectGatherOpShapeInfo)($x, $indices, parsedAxis);
    const res = backend.gather($x, (0, _reshape.reshape)($indices, [$indices.size]), parsedAxis);
    save([$x, $indices]);
    return (0, _reshape.reshape)(res, shapeInfo.outputShape);
  };

  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.GatherV2, attrs);
}

const gather = (0, _operation.op)({
  gather_
});
exports.gather = gather;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./segment_util":"node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/greater.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.greater = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of (a > b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greater(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function greater_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'greater');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'greater');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);

  const forward = backend => backend.greater($a, $b);

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Greater);
}

const greater = (0, _operation.op)({
  greater_
});
exports.greater = greater;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.greaterEqual = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of (a >= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greaterEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function greaterEqual_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'greaterEqual');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'greaterEqual');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);

  const forward = (backend, save) => {
    const res = backend.greaterEqual($a, $b);
    save([$a, $b]);
    return res;
  };

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.GreaterEqual);
}

const greaterEqual = (0, _operation.op)({
  greaterEqual_
});
exports.greaterEqual = greaterEqual;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/imag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.imag = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the imaginary part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the imaginary part of each element in input considered as a complex number.
 * If input is real, a tensor of all zeros is returned.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.imag(x).print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function imag_(input) {
  const $input = (0, _tensor_util_env.convertToTensor)(input, 'input', 'imag');

  const forward = backend => {
    return backend.imag($input);
  };

  const inputs = {
    input: $input
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Imag);
}

const imag = (0, _operation.op)({
  imag_
});
exports.imag = imag;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/is_finite.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFinite = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns which elements of x are finite.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isFinite().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function isFinite_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'isFinite');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.isFinite($x), inputs, null
  /* grad */
  , _kernel_names.IsFinite);
}

const isFinite = (0, _operation.op)({
  isFinite_
});
exports.isFinite = isFinite;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/is_inf.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isInf = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns which elements of x are Infinity or -Infinity.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isInf().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function isInf_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'isInf');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.isInf($x), inputs, null
  /* grad */
  , _kernel_names.IsInf);
}

const isInf = (0, _operation.op)({
  isInf_
});
exports.isInf = isInf;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/is_nan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNaN = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * RReturns which elements of x are NaN.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isNaN().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function isNaN_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'isNaN');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.isNaN($x), inputs, null
  /* grad */
  , _kernel_names.IsNan);
}

const isNaN = (0, _operation.op)({
  isNaN_
});
exports.isNaN = isNaN;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maximum = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _cast = require("./cast");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the max of a and b (`a > b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `tf.maximumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * ```js
 * // Broadcast maximum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function maximum_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'maximum');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'maximum');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);

  if ($a.dtype === 'bool') {
    $a = (0, _cast.cast)($a, 'int32');
    $b = (0, _cast.cast)($b, 'int32');
  }

  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);

  const forward = (backend, save) => {
    const res = backend.maximum($a, $b);
    save([$a, $b]);
    return res;
  };

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Maximum);
}

const maximum = (0, _operation.op)({
  maximum_
});
exports.maximum = maximum;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scalar = scalar;

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.scalar` as it makes the code more readable.
 *
 * ```js
 * tf.scalar(3.14).print();
 * ```
 *
 * @param value The value of the scalar.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function scalar(value, dtype) {
  if (((0, _util.isTypedArray)(value) && dtype !== 'string' || Array.isArray(value)) && dtype !== 'complex64') {
    throw new Error('Error creating a new Scalar: value must be a primitive ' + '(number|boolean|string)');
  }

  if (dtype === 'string' && (0, _util.isTypedArray)(value) && !(value instanceof Uint8Array)) {
    throw new Error('When making a scalar from encoded string, ' + 'the value must be `Uint8Array`.');
  }

  const shape = [];
  const inferredShape = [];
  return (0, _tensor_ops_util.makeTensor)(value, shape, inferredShape, dtype);
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./tensor_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.leakyRelu = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _maximum = require("./maximum");

var _mul = require("./mul");

var _operation = require("./operation");

var _scalar = require("./scalar");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes leaky rectified linear element-wise.
 *
 * See
 * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](
 *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)
 * ```
 * @param x The input tensor.
 * @param alpha The scaling factor for negative values, defaults to 0.2.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function leakyRelu_(x, alpha = 0.2) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'leakyRelu');
  return (0, _maximum.maximum)((0, _mul.mul)((0, _scalar.scalar)(alpha), $x), $x);
}

const leakyRelu = (0, _operation.op)({
  leakyRelu_
});
exports.leakyRelu = leakyRelu;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./maximum":"node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js","./mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/less.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.less = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of (a < b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.less(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function less_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'less');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'less');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);

  const forward = backend => backend.less($a, $b);

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Less);
}

const less = (0, _operation.op)({
  less_
});
exports.less = less;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lessEqual = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of (a <= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.lessEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function lessEqual_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'lessEqual');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'lessEqual');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);

  const forward = (backend, save) => {
    const res = backend.lessEqual($a, $b);
    save([$a, $b]);
    return res;
  };

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.LessEqual);
}

const lessEqual = (0, _operation.op)({
  lessEqual_
});
exports.lessEqual = lessEqual;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/linspace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linspace = linspace;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Return an evenly spaced sequence of numbers over the given interval.
 *
 * ```js
 * tf.linspace(0, 9, 10).print();
 * ```
 * @param start The start value of the sequence.
 * @param stop The end value of the sequence.
 * @param num The number of values to generate.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function linspace(start, stop, num) {
  if (num <= 0) {
    throw new Error('The number of values should be positive.');
  }

  const attrs = {
    start,
    stop,
    num
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.linspace(start, stop, num), {}
  /* inputs */
  , null
  /* grad */
  , _kernel_names.LinSpace, attrs);
}
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.localResponseNormalization = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Normalizes the activation of a local neighborhood across or within
 * channels.
 *
 * @param x The input tensor. The 4-D input tensor is treated as a 3-D array
 *     of 1D vectors (along the last dimension), and each vector is
 *     normalized independently.
 * @param depthRadius The number of adjacent channels in the 1D normalization
 *     window.
 * @param bias A constant bias term for the basis.
 * @param alpha A scale factor, usually positive.
 * @param beta An exponent.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function localResponseNormalization_(x, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'localResponseNormalization');
  util.assert($x.rank === 4 || $x.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${$x.rank}.`);
  util.assert(util.isInt(depthRadius), () => `Error in localResponseNormalization: depthRadius must be an ` + `integer but got depthRadius ${depthRadius}.`);
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  const forward = (backend, save) => {
    const y = backend.localResponseNormalization4D(x4D, depthRadius, bias, alpha, beta);
    save([x4D, y]);
    return y;
  };

  const inputs = {
    x: x4D
  };
  const attrs = {
    depthRadius,
    bias,
    alpha,
    beta
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.LRN, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  } else {
    return res;
  }
}

const localResponseNormalization = (0, _operation.op)({
  localResponseNormalization_
});
exports.localResponseNormalization = localResponseNormalization;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E]);
 *
 * x.log().print();  // or tf.log(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function log_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'log');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.log($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Log);
}

const log = (0, _operation.op)({
  log_
});
exports.log = log;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log1p = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes natural logarithm of the input `tf.Tensor` plus one
 * element-wise: `ln(1 + x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E - 1]);
 *
 * x.log1p().print();  // or tf.log1p(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function log1p_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'log1p');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.log1p($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Log1p);
}

const log1p = (0, _operation.op)({
  log1p_
});
exports.log1p = log1p;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customGrad = customGrad;
exports.variableGrads = variableGrads;
exports.valueAndGrad = valueAndGrad;
exports.valueAndGrads = valueAndGrads;
exports.grad = grad;
exports.grads = grads;

var _engine = require("./engine");

var _tensor = require("./tensor");

var _tensor_util_env = require("./tensor_util_env");

var util = _interopRequireWildcard(require("./util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the
 * gradient of `f(x)` with respect to `x`.
 *
 * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to
 * `x` is computed instead. `f(x)` must take a single tensor `x` and return a
 * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.grad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * g(x).print();
 * ```
 *
 * ```js
 * // f(x) = x ^ 3
 * const f = x => x.pow(tf.scalar(3, 'int32'));
 * // f'(x) = 3x ^ 2
 * const g = tf.grad(f);
 * // f''(x) = 6x
 * const gg = tf.grad(g);
 *
 * const x = tf.tensor1d([2, 3]);
 * gg(x).print();
 * ```
 *
 * @param f The function f(x), to compute gradient for.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function grad(f) {
  util.assert(util.isFunction(f), () => 'The f passed in grad(f) must be a function');
  return (x, dy) => {
    // x can be of any dtype, thus null as the last argument.
    const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'tf.grad', null);
    const $dy = dy != null ? (0, _tensor_util_env.convertToTensor)(dy, 'dy', 'tf.grad') : null;
    return _engine.ENGINE.tidy(() => {
      const {
        value,
        grads
      } = _engine.ENGINE.gradients(() => f($x), [$x], $dy);

      if ($dy != null) {
        util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' + 'returned by f(x)');
      }

      checkGrads(grads);
      return grads[0];
    });
  };
}
/**
 * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,
 * which gives an array of gradients of `f()` with respect to each input
 * [`x1`,`x2`,...].
 *
 * If `dy` is passed when calling `g()`, the gradient of
 * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.
 * The provided `f` must take one or more tensors and return a single tensor
 * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df / da = b, df / db = a
 * const g = tf.grads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const [da, db] = g([a, b]);
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @param f The function `f(x1, x2,...)` to compute gradients for.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */


function grads(f) {
  util.assert(util.isFunction(f), () => 'The f passed in grads(f) must be a function');
  return (args, dy) => {
    util.assert(Array.isArray(args), () => 'The args passed in grads(f)(args) must be an array ' + 'of `Tensor`s or `TensorLike`s'); // args can be of any dtype, thus null as the last argument.

    const $args = (0, _tensor_util_env.convertToTensorArray)(args, 'args', 'tf.grads', null);
    const $dy = dy != null ? (0, _tensor_util_env.convertToTensor)(dy, 'dy', 'tf.grads') : null;
    return _engine.ENGINE.tidy(() => {
      const {
        value,
        grads
      } = _engine.ENGINE.gradients(() => f(...$args), $args, $dy);

      if ($dy != null) {
        util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');
      }

      checkGrads(grads);
      return grads;
    });
  };
}
/**
 * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.valueAndGrad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * const {value, grad} = g(x);
 *
 * console.log('value');
 * value.print();
 * console.log('grad');
 * grad.print();
 * ```
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */


function valueAndGrad(f) {
  util.assert(util.isFunction(f), () => 'The f passed in valueAndGrad(f) must be a function');
  return (x, dy) => {
    util.assert(x instanceof _tensor.Tensor, () => 'The x passed in valueAndGrad(f)(x) must be a tensor');
    util.assert(dy == null || dy instanceof _tensor.Tensor, () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');

    const {
      grads,
      value
    } = _engine.ENGINE.gradients(() => f(x), [x], dy);

    checkGrads(grads);
    return {
      grad: grads[0],
      value
    };
  };
}
/**
 * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df/da = b, df/db = a
 * const g = tf.valueAndGrads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const {value, grads} = g([a, b]);
 *
 * const [da, db] = grads;
 *
 * console.log('value');
 * value.print();
 *
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */


function valueAndGrads(f) {
  util.assert(util.isFunction(f), () => 'The f passed in valueAndGrads(f) must be a function');
  return (args, dy) => {
    util.assert(Array.isArray(args) && args.every(arg => arg instanceof _tensor.Tensor), () => 'The args passed in valueAndGrads(f)(args) must be array of ' + 'tensors');
    util.assert(dy == null || dy instanceof _tensor.Tensor, () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');

    const res = _engine.ENGINE.gradients(() => f(...args), args, dy);

    if (dy != null) {
      util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');
    }

    checkGrads(res.grads);
    return res;
  };
}
/**
 * Computes and returns the gradient of f(x) with respect to the list of
 * trainable variables provided by `varList`. If no list is provided, it
 * defaults to all trainable variables.
 *
 * ```js
 * const a = tf.variable(tf.tensor1d([3, 4]));
 * const b = tf.variable(tf.tensor1d([5, 6]));
 * const x = tf.tensor1d([1, 2]);
 *
 * // f(a, b) = a * x ^ 2 + b * x
 * const f = () => a.mul(x.square()).add(b.mul(x)).sum();
 * // df/da = x ^ 2, df/db = x
 * const {value, grads} = tf.variableGrads(f);
 *
 * Object.keys(grads).forEach(varName => grads[varName].print());
 * ```
 *
 * @param f The function to execute. f() should return a scalar.
 * @param varList The list of variables to compute the gradients with respect
 *     to. Defaults to all trainable variables.
 * @returns An object with the following keys and values:
 *   - `value`: The value of the function `f`.
 *   - `grads`: A map from the names of the variables to the gradients.
 *     If the `varList` argument is provided explicitly and contains a subset of
 *     non-trainable variables, this map in the return value will contain keys
 *     that map the names of the non-trainable variables to `null`.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */


function variableGrads(f, varList) {
  util.assert(util.isFunction(f), () => 'The f passed in variableGrads(f) must be a function');
  util.assert(varList == null || Array.isArray(varList) && varList.every(v => v instanceof _tensor.Variable), () => 'The varList passed in variableGrads(f, varList) must be an array ' + 'of variables');
  const specifiedVarList = varList != null;

  if (!specifiedVarList) {
    // Get all of the trainable variables.
    varList = [];

    for (const varName in _engine.ENGINE.registeredVariables) {
      varList.push(_engine.ENGINE.registeredVariables[varName]);
    }
  }

  const specifiedNonTrainable = specifiedVarList ? varList.filter(variable => !variable.trainable) : null; // Prune non-trainable variables.

  const originalVarCount = varList.length;
  varList = varList.filter(variable => variable.trainable);
  util.assert(varList.length > 0, () => `variableGrads() expects at least one of the input variables to ` + `be trainable, but none of the ${originalVarCount} variables is ` + `trainable.`);
  const allowNoGradients = true;

  const {
    value,
    grads
  } = _engine.ENGINE.gradients(f, varList, null, allowNoGradients);

  util.assert(grads.some(g => g != null), () => 'Cannot find a connection between any variable and the result of ' + 'the loss function y=f(x). Please make sure the operations that ' + 'use variables are inside the function f passed to minimize().');
  util.assert(value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it ` + `returned a rank-${value.rank} tensor`);
  const namedGrads = {};
  varList.forEach((v, i) => {
    if (grads[i] != null) {
      namedGrads[v.name] = grads[i];
    }
  });

  if (specifiedNonTrainable != null) {
    // If varList is explicitly provided and contains non-trainable values,
    // add them to the returned gradients with `null` values.
    specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);
  }

  return {
    value,
    grads: namedGrads
  };
}
/**
 * Overrides the gradient computation of a function `f`.
 *
 * Takes a function
 * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`
 * and returns another function `g(...inputs)` which takes the same inputs as
 * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients
 * with respect to each input of `f` are computed using `f().gradFunc`.
 *
 * The `save` function passsed to `f` should be used for saving tensors needed
 * in the gradient. And the `saved` passed to the `gradFunc` is a
 * `NamedTensorMap`, which contains those saved tensor.
 *
 * ```js
 * const customOp = tf.customGrad((x, save) => {
 *   // Save x to make sure it's available later for the gradient.
 *   save([x]);
 *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);
 *   return {
 *     value: x.square(),
 *     // Note `saved.x` which points to the `x` we saved earlier.
 *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]
 *   };
 * });
 *
 * const x = tf.tensor1d([-1, -2, 3]);
 * const dx = tf.grad(x => customOp(x));
 *
 * console.log(`f(x):`);
 * customOp(x).print();
 * console.log(`f'(x):`);
 * dx(x).print();
 * ```
 *
 * @param f The function to evaluate in forward mode, which should return
 *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`
 *     returns the custom gradients of `f` with respect to its inputs.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */


function customGrad(f) {
  return _engine.ENGINE.customGrad(f);
}

function checkGrads(grads) {
  const numNullGradients = grads.filter(g => g == null).length;

  if (numNullGradients > 0) {
    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
  }
}
},{"./engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","./tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js","./tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.neg = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes `-1 * x` element-wise.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);
 *
 * x.neg().print();  // or tf.neg(x)
 * ```
 *
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function neg_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'neg');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.neg($x), inputs, null
  /* grad */
  , _kernel_names.Negate);
}

const neg = (0, _operation.op)({
  neg_
});
exports.neg = neg;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.softplus = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.softplus().print();  // or tf.softplus(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function softplus_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'softplus');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.softplus($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Softplus);
}

const softplus = (0, _operation.op)({
  softplus_
});
exports.softplus = softplus;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/log_sigmoid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logSigmoid = void 0;

var _gradients = require("../gradients");

var _tensor_util_env = require("../tensor_util_env");

var _mul = require("./mul");

var _neg = require("./neg");

var _operation = require("./operation");

var _sigmoid = require("./sigmoid");

var _softplus = require("./softplus");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes log sigmoid of the input `tf.Tensor` element-wise:
 * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.logSigmoid().print();  // or tf.logSigmoid(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function logSigmoid_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'logSigmoid'); // Use a custom gradient to maintain previous implementation.
  // There is no LogSigmoid kernel in TF so we can't use engine.runKernel
  // directly

  const customOp = (0, _gradients.customGrad)(x => {
    // TODO(yassogba) we can remove the chained softplus call here only
    // after backends have modualrized softplus at which point we can call
    // engine runKernel(..., Sotfplus, ...) directly.
    const value = (0, _neg.neg)((0, _softplus.softplus)((0, _neg.neg)(x)));

    const gradFunc = dy => {
      const derX = (0, _mul.mul)(dy, (0, _sigmoid.sigmoid)((0, _neg.neg)(x)));
      return derX;
    };

    return {
      value,
      gradFunc
    };
  });
  return customOp($x);
}

const logSigmoid = (0, _operation.op)({
  logSigmoid_
});
exports.logSigmoid = logSigmoid;
},{"../gradients":"node_modules/@tensorflow/tfjs-core/dist/gradients.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","./neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./sigmoid":"node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js","./softplus":"node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.max = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var axis_util = _interopRequireWildcard(require("./axis_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

var _transpose = require("./transpose");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the maximum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.max().print();  // or tf.max(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.max(axis).print();  // or tf.max(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function max_(x, axis = null, keepDims = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'max');

  const forward = (backend, save) => {
    const origAxes = util.parseAxisParam(axis, $x.shape);
    let axes = origAxes;
    const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);
    let maxInput = $x;

    if (permutedAxes != null) {
      maxInput = (0, _transpose.transpose)($x, permutedAxes);
      axes = axis_util.getInnerMostAxes(axes.length, maxInput.rank);
    }

    const y = backend.max(maxInput, axes);

    if (permutedAxes != null) {
      maxInput.dispose();
    }

    let res = y;

    if (keepDims) {
      const expandedShape = axis_util.expandShapeToKeepDim(res.shape, util.parseAxisParam(axis, $x.shape));
      res = (0, _reshape.reshape)(res, expandedShape);
      y.dispose();
    }

    save([$x, res]);
    return res;
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    reductionIndices: axis,
    keepDims
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Max, attrs);
}

const max = (0, _operation.op)({
  max_
});
exports.max = max;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sub = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 *
 * ```js
 * // Broadcast subtract a with b.
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.scalar(5);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 * @param a The first `tf.Tensor` to subtract from.
 * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function sub_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'sub');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'sub');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);

  const forward = (backend, save) => {
    const res = backend.subtract($a, $b);
    save([$a, $b]);
    return res;
  };

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Sub);
}

const sub = (0, _operation.op)({
  sub_
});
exports.sub = sub;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sum = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _axis_util = require("./axis_util");

var _cast = require("./cast");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _transpose = require("./transpose");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the sum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If axes has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.sum().print();  // or tf.sum(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.sum(axis).print();  // or tf.sum(x, axis)
 * ```
 *
 * @param x The input tensor to compute the sum over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function sum_(x, axis = null, keepDims = false) {
  let $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'sum');

  if ($x.dtype === 'bool') {
    $x = (0, _cast.cast)($x, 'int32');
  }

  const forward = (backend, save) => {
    save([$x]);
    const axes = (0, _util.parseAxisParam)(axis, $x.shape);
    const permutation = (0, _axis_util.getAxesPermutation)(axes, $x.rank);
    let reductionAxes = axes;
    let permutedX = $x;

    if (permutation != null) {
      permutedX = (0, _transpose.transpose)($x, permutation);
      reductionAxes = (0, _axis_util.getInnerMostAxes)(reductionAxes.length, $x.rank);
    }

    let value = backend.sum(permutedX, reductionAxes);

    if (keepDims) {
      const newShape = (0, _axis_util.expandShapeToKeepDim)(value.shape, axes);
      value = (0, _reshape.reshape)(value, newShape);
    }

    return value;
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    keepDims
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Sum, attrs);
}

const sum = (0, _operation.op)({
  sum_
});
exports.sum = sum;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logSoftmax = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _cast = require("./cast");

var _exp = require("./exp");

var _log = require("./log");

var _max = require("./max");

var _operation = require("./operation");

var _sub = require("./sub");

var _sum = require("./sum");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the log softmax.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param axis The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function logSoftmax_(logits, axis = -1) {
  const $logits = (0, _tensor_util_env.convertToTensor)(logits, 'logits', 'logSoftmax');

  if (axis === -1) {
    axis = $logits.rank - 1;
  }

  if (axis !== $logits.rank - 1) {
    throw Error('Log Softmax along a non-last dimension is not yet supported. ' + `Logits was rank ${$logits.rank} and axis was ${axis}`);
  }

  const forward = (backend, save) => {
    const keepDims = true;
    const xMax = (0, _max.max)(logits, axis, true);
    const shifted = (0, _sub.sub)(logits, xMax);
    const value = (0, _sub.sub)((0, _cast.cast)(shifted, 'float32'), (0, _log.log)((0, _sum.sum)((0, _exp.exp)(shifted), axis, keepDims)));
    save([value]);
    return value;
  };

  const inputs = {
    logits: $logits
  };
  const attrs = {
    axis
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.LogSoftmax, attrs);
}

const logSoftmax = (0, _operation.op)({
  logSoftmax_
});
exports.logSoftmax = logSoftmax;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./exp":"node_modules/@tensorflow/tfjs-core/dist/ops/exp.js","./log":"node_modules/@tensorflow/tfjs-core/dist/ops/log.js","./max":"node_modules/@tensorflow/tfjs-core/dist/ops/max.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","./sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logSumExp = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _add = require("./add");

var _axis_util = require("./axis_util");

var _exp = require("./exp");

var _log = require("./log");

var _max = require("./max");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _sub = require("./sub");

var _sum = require("./sum");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the log(sum(exp(elements across the reduction dimensions)).
 *
 * Reduces the input along the dimensions given in `axis`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.logSumExp().print();  // or tf.logSumExp(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)
 * ```
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. If null (the default),
 *     reduces all dimensions.
 * @param keepDims If true, retains reduced dimensions with length
 *     of 1. Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function logSumExp_(x, axis = null, keepDims = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'logSumExp');
  const axes = (0, _util.parseAxisParam)(axis, $x.shape);
  const xMax = (0, _max.max)($x, axes, true
  /* keepDims */
  );
  const a = (0, _sub.sub)($x, xMax);
  const b = (0, _exp.exp)(a);
  const c = (0, _sum.sum)(b, axes);
  const d = (0, _log.log)(c);
  const res = (0, _add.add)((0, _reshape.reshape)(xMax, d.shape), d);

  if (keepDims) {
    const newShape = (0, _axis_util.expandShapeToKeepDim)(res.shape, axes);
    return (0, _reshape.reshape)(res, newShape);
  }

  return res;
}

const logSumExp = (0, _operation.op)({
  logSumExp_
});
exports.logSumExp = logSumExp;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./exp":"node_modules/@tensorflow/tfjs-core/dist/ops/exp.js","./log":"node_modules/@tensorflow/tfjs-core/dist/ops/log.js","./max":"node_modules/@tensorflow/tfjs-core/dist/ops/max.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","./sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logicalAnd = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of `a AND b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalAnd(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalAnd_(a, b) {
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'logicalAnd', 'bool');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'logicalAnd', 'bool');
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.logicalAnd($a, $b), inputs, null
  /* grad */
  , _kernel_names.LogicalAnd);
}

const logicalAnd = (0, _operation.op)({
  logicalAnd_
});
exports.logicalAnd = logicalAnd;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logicalNot = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of `NOT x` element-wise.
 *
 * ```js
 * const a = tf.tensor1d([false, true], 'bool');
 *
 * a.logicalNot().print();
 * ```
 *
 * @param x The input tensor. Must be of dtype 'bool'.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalNot_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'logicalNot', 'bool');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.logicalNot($x), inputs, null
  /* grad */
  , _kernel_names.LogicalNot);
}

const logicalNot = (0, _operation.op)({
  logicalNot_
});
exports.logicalNot = logicalNot;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logicalOr = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of `a OR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalOr(b).print();
 * ```
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalOr_(a, b) {
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'logicalOr', 'bool');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'logicalOr', 'bool');
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.logicalOr($a, $b), inputs, null
  /* grad */
  , _kernel_names.LogicalOr);
}

const logicalOr = (0, _operation.op)({
  logicalOr_
});
exports.logicalOr = logicalOr;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logicalXor = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _logical_and = require("./logical_and");

var _logical_not = require("./logical_not");

var _logical_or = require("./logical_or");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalXor(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalXor_(a, b) {
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'logicalXor', 'bool');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'logicalXor', 'bool');
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape); // x ^ y = (x | y) & ~(x & y)

  return (0, _logical_and.logicalAnd)((0, _logical_or.logicalOr)(a, b), (0, _logical_not.logicalNot)((0, _logical_and.logicalAnd)(a, b)));
}

const logicalXor = (0, _operation.op)({
  logicalXor_
});
exports.logicalXor = logicalXor;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./logical_and":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js","./logical_not":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js","./logical_or":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPool = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the 2D max pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */
function maxPool_(x, filterSize, strides, pad, dimRoundingMode) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'maxPool');
  const dilations = 1;
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);
  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in maxPool: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const forward = (backend, save) => {
    const convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, 1
    /* dilations */
    , pad, dimRoundingMode);
    let y;

    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {
      y = x4D.clone();
    } else {
      y = backend.maxPool(x4D, convInfo);
    }

    save([x4D, y]);
    return y;
  };

  const inputs = {
    x: x4D
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.MaxPool, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const maxPool = (0, _operation.op)({
  maxPool_
});
exports.maxPool = maxPool;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPool3d = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the 3D max pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.maxPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations Deprecated, this field will be gone in v3.0.0.
 *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function maxPool3d_(x, filterSize = [1, 1, 1], strides, pad, dimRoundingMode, dataFormat = 'NDHWC', dilations) {
  if (dilations == null) {
    dilations = [1, 1, 1];
  } else {
    (0, _globals.deprecationWarn)('dilations is deprecated, this field will be gone in ' + 'v3.0.0.');
  }

  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'maxPool3d');
  let x5D = $x;
  let reshapedTo5D = false;

  if ($x.rank === 4) {
    reshapedTo5D = true;
    x5D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
  }

  util.assert(x5D.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
  util.assert(dataFormat === 'NDHWC', () => `Error in maxPool3d: Only NDHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);
  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool3d: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in maxPool3d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const forward = (backend, save) => {
    if (dilations == null) {
      dilations = [1, 1, 1];
    }

    const convInfo = conv_util.computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);
    const y = backend.maxPool3d(x5D, convInfo);
    save([x5D, y]);
    return y;
  };

  const inputs = {
    x: x5D
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    dimRoundingMode,
    dataFormat,
    dilations
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.MaxPool3D, attrs);

  if (reshapedTo5D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
  }

  return res;
}

const maxPool3d = (0, _operation.op)({
  maxPool3d_
});
exports.maxPool3d = maxPool3d;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPoolWithArgmax = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the 2D max pooling of an image with Argmax index.
 * The indices in argmax are flattened, so that a maximum value at position `[b,
 * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if
 * include_batch_in_index is False; `((b * height + y) * width + x) * channels
 * +c` if include_batch_in_index is True.
 *
 * The indices returned are always in `[0, height) x [0, width)` before
 * flattening.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param includeBatchIndex Defaults to False. Whether to include batch
 *    dimension in flattened index of argmax.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function maxPoolWithArgmax_(x, filterSize, strides, pad, includeBatchInIndex = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'maxPoolWithArgmax');
  const inputs = {
    x: $x
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    includeBatchInIndex
  };

  const result = _engine.ENGINE.runKernel(_kernel_names.MaxPoolWithArgmax, inputs, attrs);

  return {
    result: result[0],
    indexes: result[1]
  };
}

const maxPoolWithArgmax = (0, _operation.op)({
  maxPoolWithArgmax_
});
exports.maxPoolWithArgmax = maxPoolWithArgmax;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zeros = zeros;

var _engine = require("../engine");

var _util = require("../util");

var _complex = require("./complex");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with all elements set to 0.
 *
 * ```js
 * tf.zeros([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Can
 *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function zeros(shape, dtype = 'float32') {
  if (dtype === 'complex64') {
    const real = zeros(shape, 'float32');
    const imag = zeros(shape, 'float32');
    return (0, _complex.complex)(real, imag);
  }

  const values = (0, _util.makeZerosTypedArray)((0, _util.sizeFromShape)(shape), dtype);
  return _engine.ENGINE.makeTensor(values, shape, dtype);
}
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./complex":"node_modules/@tensorflow/tfjs-core/dist/ops/complex.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/ones.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ones = ones;

var _engine = require("../engine");

var _util = require("../util");

var _complex = require("./complex");

var _zeros = require("./zeros");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with all elements set to 1.
 *
 * ```js
 * tf.ones([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 *     'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function ones(shape, dtype = 'float32') {
  if (dtype === 'complex64') {
    const real = ones(shape, 'float32');
    const imag = (0, _zeros.zeros)(shape, 'float32');
    return (0, _complex.complex)(real, imag);
  }

  const values = (0, _util.makeOnesTypedArray)((0, _util.sizeFromShape)(shape), dtype);
  return _engine.ENGINE.makeTensor(values, shape, dtype);
}
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./complex":"node_modules/@tensorflow/tfjs-core/dist/ops/complex.js","./zeros":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/mean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mean = void 0;

var _gradients = require("../gradients");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _axis_util = require("./axis_util");

var _cast = require("./cast");

var _div = require("./div");

var _mul = require("./mul");

var _ones = require("./ones");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _scalar = require("./scalar");

var _sum = require("./sum");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the mean of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is
 * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with
 * a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.mean().print();  // or tf.mean(a)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.mean(axis).print();  // or tf.mean(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function mean_(x, axis = null, keepDims = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'mean');
  const axes = (0, _util.parseAxisParam)(axis, $x.shape);
  const shapes = (0, _axis_util.computeOutAndReduceShapes)($x.shape, axes);
  const reduceShape = shapes[1];
  const reduceSize = (0, _util.sizeFromShape)(reduceShape); // Use a custom gradient to bypass 2 gradient backprops since mean is used
  // extremely often.

  const customOp = (0, _gradients.customGrad)(x => {
    const reduceSizeScalar = (0, _scalar.scalar)(reduceSize); // Cast if needed.

    const xReduce = reduceSizeScalar.dtype === x.dtype ? x : (0, _cast.cast)(x, reduceSizeScalar.dtype);
    const res = (0, _div.div)(xReduce, reduceSizeScalar);
    const value = (0, _sum.sum)(res, axis, keepDims);

    const gradFunc = dy => {
      const expandedDyShape = x.shape.slice();
      axes.forEach(axis => {
        expandedDyShape[axis] = 1;
      });
      const expandedDy = (0, _reshape.reshape)(dy, expandedDyShape);
      const derX = (0, _div.div)((0, _mul.mul)(expandedDy, (0, _ones.ones)(x.shape, 'float32')), reduceSize);
      return derX;
    };

    return {
      value,
      gradFunc
    };
  });
  return customOp($x);
}

const mean = (0, _operation.op)({
  mean_
});
exports.mean = mean;
},{"../gradients":"node_modules/@tensorflow/tfjs-core/dist/gradients.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","./mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","./ones":"node_modules/@tensorflow/tfjs-core/dist/ops/ones.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","./sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/min.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.min = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var axis_util = _interopRequireWildcard(require("./axis_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

var _transpose = require("./transpose");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Computes the minimum value from the input.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axes`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axes` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.min().print();  // or tf.min(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.min(axis).print();  // or tf.min(x, axis)
 * ```
 *
 * @param x The input Tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function min_(x, axis = null, keepDims = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'min');

  const forward = (backend, save) => {
    const origAxes = (0, _util.parseAxisParam)(axis, $x.shape);
    let axes = origAxes;
    const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);
    let minInput = $x;

    if (permutedAxes != null) {
      minInput = (0, _transpose.transpose)($x, permutedAxes);
      axes = axis_util.getInnerMostAxes(axes.length, $x.rank);
    }

    const y = backend.min(minInput, axes);

    if (permutedAxes != null) {
      minInput.dispose();
    }

    let res = y;

    if (keepDims) {
      const expandedShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);
      res = (0, _reshape.reshape)(y, expandedShape);
      y.dispose();
    }

    save([$x, res]);
    return res;
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    keepDims
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Min, attrs);
}

const min = (0, _operation.op)({
  min_
});
exports.min = min;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minimum = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _cast = require("./cast");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the min of a and b (`a < b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `minimumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * ```js
 * // Broadcast minimum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function minimum_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'minimum');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'minimum');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);

  if ($a.dtype === 'bool') {
    $a = (0, _cast.cast)($a, 'int32');
    $b = (0, _cast.cast)($b, 'int32');
  }

  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);

  const forward = (backend, save) => {
    const res = backend.minimum($a, $b);
    save([$a, $b]);
    return res;
  };

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Minimum);
}

const minimum = (0, _operation.op)({
  minimum_
});
exports.minimum = minimum;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/mod.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mod = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the mod of a and b element-wise.
 * `floor(x / y) * y + mod(x, y) = x`
 * Supports broadcasting.
 *
 * We also expose `tf.modStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * ```js
 * // Broadcast a mod b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function mod_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'mod');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'mod');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);

  const forward = (backend, save) => {
    const res = backend.mod($a, $b);
    save([$a, $b]);
    return res;
  };

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Mod);
}

const mod = (0, _operation.op)({
  mod_
});
exports.mod = mod;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/square.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.square = void 0;

var _engine = require("../engine");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes square of `x` element-wise: `x ^ 2`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);
 *
 * x.square().print();  // or tf.square(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function square_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'square');
  const attrs = {};
  const inputsToSave = [$x];
  const outputsToSave = [];
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    save([$x]);
    return backend.square($x);
  }, {
    x: $x
  }, null
  /* grad */
  , 'Square', attrs, inputsToSave, outputsToSave);
}

const square = (0, _operation.op)({
  square_
});
exports.square = square;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/moments.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.moments = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _axis_util = require("./axis_util");

var _cast = require("./cast");

var _mean = require("./mean");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _square = require("./square");

var _sub = require("./sub");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Calculates the mean and variance of `x`. The mean and variance are
 * calculated by aggregating the contents of `x` across `axes`. If `x` is
 * 1-D and `axes = [0]` this is just the mean and variance of a vector.
 *
 * @param x The input tensor.
 * @param axis The dimension(s) along with to compute mean and
 *     variance. By default it reduces all dimensions.
 * @param keepDims If true, the moments have the same dimensionality as the
 *     input.
 * @return An object with two keys: `mean` and `variance`.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function moments_(x, axis = null, keepDims = false) {
  x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'moments');
  const axes = (0, _util.parseAxisParam)(axis, x.shape);
  const xMean = (0, _mean.mean)(x, axes, keepDims);
  let keepDimsShape = xMean.shape;

  if (!keepDims) {
    keepDimsShape = (0, _axis_util.expandShapeToKeepDim)(xMean.shape, axes);
  }

  const devSquared = (0, _square.square)((0, _sub.sub)((0, _cast.cast)(x, 'float32'), (0, _reshape.reshape)(xMean, keepDimsShape)));
  const variance = (0, _mean.mean)(devSquared, axes, keepDims);
  return {
    mean: xMean,
    variance
  };
}

const moments = (0, _operation.op)({
  moments_
});
exports.moments = moments;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./mean":"node_modules/@tensorflow/tfjs-core/dist/ops/mean.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","./sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/multi_rnn_cell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiRNNCell = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * Computes the next states and outputs of a stack of LSTMCells.
 *
 * Each cell output is used as input to the next cell.
 *
 * Returns `[cellState, cellOutput]`.
 *
 * Derived from tf.contrib.rn.MultiRNNCell.
 *
 * @param lstmCells Array of LSTMCell functions.
 * @param data The input to the cell.
 * @param c Array of previous cell states.
 * @param h Array of previous cell outputs.
 *
 * @doc {heading: 'Operations', subheading: 'RNN'}
 */
function multiRNNCell_(lstmCells, data, c, h) {
  const $data = (0, _tensor_util_env.convertToTensor)(data, 'data', 'multiRNNCell');
  const $c = (0, _tensor_util_env.convertToTensorArray)(c, 'c', 'multiRNNCell');
  const $h = (0, _tensor_util_env.convertToTensorArray)(h, 'h', 'multiRNNCell');
  let input = $data;
  const newStates = [];

  for (let i = 0; i < lstmCells.length; i++) {
    const output = lstmCells[i](input, $c[i], $h[i]);
    newStates.push(output[0]);
    newStates.push(output[1]);
    input = output[1];
  }

  const newC = [];
  const newH = [];

  for (let i = 0; i < newStates.length; i += 2) {
    newC.push(newStates[i]);
    newH.push(newStates[i + 1]);
  }

  return [newC, newH];
}

const multiRNNCell = (0, _operation.op)({
  multiRNNCell_
});
exports.multiRNNCell = multiRNNCell;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multinomial = void 0;

var _engine = require("../engine");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with values drawn from a multinomial distribution.
 *
 * ```js
 * const probs = tf.tensor([.75, .25]);
 * tf.multinomial(probs, 3).print();
 * ```
 *
 * @param logits 1D array with unnormalized log-probabilities, or
 *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`
 *     parameter.
 * @param numSamples Number of samples to draw for each row slice.
 * @param seed The seed number.
 * @param normalized Whether the provided `logits` are normalized true
 *     probabilities (sum to 1). Defaults to false.
 * @return 1D array of shape `[numSamples]`, or 2D array of shape
 *     `[batchSize, numSamples]`, depending on the rank of the input.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function multinomial_(logits, numSamples, seed, normalized = false) {
  const $logits = (0, _tensor_util_env.convertToTensor)(logits, 'logits', 'multinomial');
  const numOutcomes = $logits.size;
  const origRank = $logits.rank;

  if (numOutcomes < 2) {
    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` + `${numOutcomes}.`);
  }

  if (origRank > 2) {
    throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);
  }

  seed = seed || Math.random();
  const logits2D = origRank === 1 ? (0, _reshape.reshape)($logits, [1, -1]) : $logits;

  const res = _engine.ENGINE.runKernelFunc(backend => backend.multinomial(logits2D, normalized, numSamples, seed), {
    logits2D
  }); // tslint:disable-next-line:no-unnecessary-type-assertion


  return origRank === 1 ? (0, _reshape.reshape)(res, [res.size]) : res;
}

const multinomial = (0, _operation.op)({
  multinomial_
});
exports.multinomial = multinomial;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notEqual = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of (a != b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([0, 2, 3]);
 *
 * a.notEqual(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function notEqual_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'notEqual');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'notEqual');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);

  const forward = backend => backend.notEqual($a, $b);

  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.NotEqual);
}

const notEqual = (0, _operation.op)({
  notEqual_
});
exports.notEqual = notEqual;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/real.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.real = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the real part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the real part of each element in input considered as a complex number.
 *
 * If the input is real, it simply makes a clone.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.real(x).print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function real_(input) {
  const $input = (0, _tensor_util_env.convertToTensor)(input, 'input', 'real');

  const forward = backend => {
    return backend.real($input);
  };

  const inputs = {
    input: $input
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Real);
}

const real = (0, _operation.op)({
  real_
});
exports.real = real;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/ones_like.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onesLike = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _complex = require("./complex");

var _imag = require("./imag");

var _operation = require("./operation");

var _real = require("./real");

var _zeros_like = require("./zeros_like");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.onesLike(x).print();
 * ```
 * @param x A tensor.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function onesLike_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'onesLike');

  const forward = (backend, save) => {
    if ($x.dtype === 'complex64') {
      const r = onesLike((0, _real.real)($x));
      const i = (0, _zeros_like.zerosLike)((0, _imag.imag)($x));
      return (0, _complex.complex)(r, i);
    }

    return backend.onesLike($x);
  };

  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.OnesLike);
}

const onesLike = (0, _operation.op)({
  onesLike_
});
exports.onesLike = onesLike;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./complex":"node_modules/@tensorflow/tfjs-core/dist/ops/complex.js","./imag":"node_modules/@tensorflow/tfjs-core/dist/ops/imag.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./real":"node_modules/@tensorflow/tfjs-core/dist/ops/real.js","./zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/outer_product.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outerProduct = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _mat_mul = require("./mat_mul");

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Computes the outer product of two vectors, `v1` and `v2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([3, 4, 5]);
 *
 * tf.outerProduct(a, b).print();
 * ```
 * @param v1 The first vector in the outer product operation.
 * @param v2 The second vector in the outer product operation.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function outerProduct_(v1, v2) {
  const $v1 = (0, _tensor_util_env.convertToTensor)(v1, 'v1', 'outerProduct');
  const $v2 = (0, _tensor_util_env.convertToTensor)(v2, 'v2', 'outerProduct');
  util.assert($v1.rank === 1 && $v2.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ` + `${$v1.rank} and ${$v2.rank}.`);
  const v12D = (0, _reshape.reshape)($v1, [-1, 1]);
  const v22D = (0, _reshape.reshape)($v2, [1, -1]);
  return (0, _mat_mul.matMul)(v12D, v22D);
}

const outerProduct = (0, _operation.op)({
  outerProduct_
});
exports.outerProduct = outerProduct;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./mat_mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/pad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pad = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Pads a `tf.Tensor` with a given value and paddings.
 *
 * This operation currently only implements the `CONSTANT` mode.
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `paddings` is of given length.
 *   - `tf.pad1d`
 *   - `tf.pad2d`
 *   - `tf.pad3d`
 *   - `tf.pad4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.pad([[1, 2]]).print();
 * ```
 * @param x The tensor to pad.
 * @param paddings An array of length `R` (the rank of the tensor), where
 * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
 * specifying how much to pad along each dimension of the tensor.
 * @param constantValue The pad value to use. Defaults to 0.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function pad_(x, paddings, constantValue = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'pad');

  if ($x.rank === 0) {
    throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');
  }

  const forward = (backend, save) => {
    save([$x]);
    return backend.pad($x, paddings, constantValue);
  };

  const attrs = {
    paddings,
    constantValue
  };
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.PadV2, attrs);
}

const pad = (0, _operation.op)({
  pad_
});
exports.pad = pad;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/pad1d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pad1d = void 0;

var _util = require("../util");

var _operation = require("./operation");

var _pad = require("./pad");

/**
 * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.
 */
function pad1d_(x, paddings, constantValue = 0) {
  (0, _util.assert)(paddings.length === 2, () => 'Invalid number of paddings. Must be length of 2.');
  return (0, _pad.pad)(x, [paddings], constantValue);
}

const pad1d = (0, _operation.op)({
  pad1d_
});
exports.pad1d = pad1d;
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./pad":"node_modules/@tensorflow/tfjs-core/dist/ops/pad.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/pad2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pad2d = void 0;

var _util = require("../util");

var _operation = require("./operation");

var _pad = require("./pad");

/**
 * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.
 */
function pad2d_(x, paddings, constantValue = 0) {
  (0, _util.assert)(paddings.length === 2 && paddings[0].length === 2 && paddings[1].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
  return (0, _pad.pad)(x, paddings, constantValue);
}

const pad2d = (0, _operation.op)({
  pad2d_
});
exports.pad2d = pad2d;
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./pad":"node_modules/@tensorflow/tfjs-core/dist/ops/pad.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/pad3d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pad3d = void 0;

var _util = require("../util");

var _operation = require("./operation");

var _pad = require("./pad");

/**
 * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.
 */
function pad3d_(x, paddings, constantValue = 0) {
  (0, _util.assert)(paddings.length === 3 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
  return (0, _pad.pad)(x, paddings, constantValue);
}

const pad3d = (0, _operation.op)({
  pad3d_
});
exports.pad3d = pad3d;
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./pad":"node_modules/@tensorflow/tfjs-core/dist/ops/pad.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/pad4d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pad4d = void 0;

var _util = require("../util");

var _operation = require("./operation");

var _pad = require("./pad");

/**
 * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.
 */
function pad4d_(x, paddings, constantValue = 0) {
  (0, _util.assert)(paddings.length === 4 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2 && paddings[3].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
  return (0, _pad.pad)(x, paddings, constantValue);
}

const pad4d = (0, _operation.op)({
  pad4d_
});
exports.pad4d = pad4d;
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./pad":"node_modules/@tensorflow/tfjs-core/dist/ops/pad.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spaceToBatchND = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * This operation divides "spatial" dimensions `[1, ..., M]` of the input into
 * a grid of blocks of shape `blockShape`, and interleaves these blocks with
 * the "batch" dimension (0) such that in the output, the spatial
 * dimensions `[1, ..., M]` correspond to the position within the grid,
 * and the batch dimension combines both the position within a spatial block
 * and the original batch position. Prior to division into blocks,
 * the spatial dimensions of the input are optionally zero padded
 * according to `paddings`. See below for a precise description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);
 * const blockShape = [2, 2];
 * const paddings = [[0, 0], [0, 0]];
 *
 * x.spaceToBatchND(blockShape, paddings).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=
 *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad
 * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It
 * is required that
 * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input
 * according to `paddings` to produce `padded` of shape paddedShape.
 *
 * 2. Reshape `padded` to `reshapedPadded` of shape:
 * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`
 *
 * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`
 * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the
 * batch dimension, producing an output tensor of shape:
 * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function spaceToBatchND_(x, blockShape, paddings) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'spaceToBatchND');
  util.assert($x.rank >= 1 + blockShape.length, () => `input rank ${$x.rank} should be > than [blockShape] ${blockShape.length}`);
  util.assert(paddings.length === blockShape.length, () => `paddings.shape[0] ${paddings.length} must be equal to [blockShape] ${blockShape.length}`);
  util.assert($x.shape.reduce((a, b, i) => {
    if (i > 0 && i <= blockShape.length) {
      return a && (b + paddings[i - 1][0] + paddings[i - 1][1]) % blockShape[i - 1] === 0;
    }

    return a;
  }, true), () => `input spatial dimensions ${$x.shape.slice(1)} with paddings ${paddings.toString()} must be divisible by blockShapes ${blockShape.toString()}`);

  const forward = backend => backend.spaceToBatchND($x, blockShape, paddings);

  const inputs = {
    x: $x
  };
  const attrs = {
    blockShape,
    paddings
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.SpaceToBatchND, attrs);
}

const spaceToBatchND = (0, _operation.op)({
  spaceToBatchND_
});
exports.spaceToBatchND = spaceToBatchND;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pool = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _avg_pool = require("./avg_pool");

var _batch_to_space_nd = require("./batch_to_space_nd");

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _max_pool = require("./max_pool");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _space_to_batch_nd = require("./space_to_batch_nd");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Performs an N-D pooling operation
 *
 * @param input The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param windowShape The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param poolingType The type of pooling, either 'max' or 'avg'.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function pool_(input, windowShape, poolingType, pad, dilations, strides) {
  if (dilations == null) {
    dilations = [1, 1];
  }

  if (strides == null) {
    strides = 1;
  }

  if (pad === 0) {
    pad = 'valid';
  }

  const $x = (0, _tensor_util_env.convertToTensor)(input, 'x', 'maxPool');
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in pool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  const convInfo = conv_util.computePool2DInfo(x4D.shape, windowShape, strides, dilations, pad);
  const dilation = [convInfo.dilationHeight, convInfo.dilationWidth]; // The following implementation does batchToSpace(pool(spaceToBatch(x)))
  // whenever dilation > 1 since the TF kernels do not support dilation > 1.
  // tslint:disable-next-line:max-line-length
  // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037

  let basePadding;

  if (pad === 'same') {
    basePadding = withSpaceToBatchBasePaddings([convInfo.filterHeight, convInfo.filterWidth], dilation);
  } else {
    basePadding = [[0, 0], [0, 0]];
  }

  const isDilationOne = dilation[0] === 1 && dilation[1] === 1;
  const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings([convInfo.inHeight, convInfo.inWidth], dilation, basePadding);
  const convertedPad = isDilationOne ? pad : 'valid';
  const convertedX = isDilationOne ? x4D : (0, _space_to_batch_nd.spaceToBatchND)(x4D, dilation, adjustedPadding);
  const forwardOp = poolingType === 'avg' ? () => (0, _avg_pool.avgPool)(convertedX, windowShape, strides, convertedPad) : () => (0, _max_pool.maxPool)(convertedX, windowShape, strides, convertedPad);
  const y = forwardOp();
  const res = isDilationOne ? y : (0, _batch_to_space_nd.batchToSpaceND)(y, dilation, adjustedCrops);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
} // Helper function to compute crops and paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184


function requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {
  const padStart = basePadding.map(b => b[0]);
  const origPadEnd = basePadding.map(b => b[1]);
  const fullInputShape = inputShape.concat(padStart, origPadEnd);
  const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);
  const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);
  const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);
  const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);
  return [paddings, crops];
} // Helper function to compute base paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524


function withSpaceToBatchBasePaddings(filterShape, dilation) {
  // Spatial dimensions of the filters and the upsampled filters in which we
  // introduce (rate - 1) zeros between consecutive filter values.
  const dilatedFilterShape = filterShape.map((s, i) => {
    return s + (s - 1) * (dilation[i] - 1);
  });
  const padExtraShape = dilatedFilterShape.map(s => s - 1); // When padding is odd, we pad more at end, following the same
  // convention as conv2d.

  const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));
  const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);
  return padExtraShape.map((_, i) => {
    return [padExtraStart[i], padExtraEnd[i]];
  });
}

const pool = (0, _operation.op)({
  pool_
});
exports.pool = pool;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./avg_pool":"node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js","./batch_to_space_nd":"node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./max_pool":"node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./space_to_batch_nd":"node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pow = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the power of one `tf.Tensor` to another. Supports broadcasting.
 *
 * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for
 * corresponding elements in x and y. The result's dtype will be the upcasted
 * type of the `base` and `exp` dtypes.
 *
 * ```js
 * const a = tf.tensor([[2, 3], [4, 5]])
 * const b = tf.tensor([[1, 2], [3, 0]]).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 *
 * ```js
 * const a = tf.tensor([[1, 2], [3, 4]])
 * const b = tf.tensor(2).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 * We also expose `powStrict` which has the same signature as this op and
 * asserts that `base` and `exp` are the same shape (does not broadcast).
 *
 * @param base The base `tf.Tensor` to pow element-wise.
 * @param exp The exponent `tf.Tensor` to pow element-wise.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function pow_(base, exp) {
  let $base = (0, _tensor_util_env.convertToTensor)(base, 'base', 'pow');
  let $exp = (0, _tensor_util_env.convertToTensor)(exp, 'exp', 'pow');
  [$base, $exp] = (0, _tensor_util.makeTypesMatch)($base, $exp);
  const inputs = {
    a: $base,
    b: $exp
  };

  const forward = (backend, save) => {
    const y = backend.pow($base, $exp);
    save([$base, $exp, y]);
    return y;
  };

  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Pow);
}

const pow = (0, _operation.op)({
  pow_
});
exports.pow = pow;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prelu = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes leaky rectified linear element-wise with parametric alphas.
 *
 * `x < 0 ? alpha * x : f(x) = x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 * const alpha = tf.scalar(0.1);
 *
 * x.prelu(alpha).print();  // or tf.prelu(x, alpha)
 * ```
 * @param x The input tensor.
 * @param alpha Scaling factor for negative values.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function prelu_(x, alpha) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'prelu');
  const $alpha = (0, _tensor_util_env.convertToTensor)(alpha, 'alpha', 'prelu');

  const forward = (backend, save) => {
    const res = backend.prelu($x, $alpha);
    save([$x, $alpha]);
    return res;
  };

  const inputs = {
    x: $x,
    alpha: $alpha
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Prelu);
}

const prelu = (0, _operation.op)({
  prelu_
});
exports.prelu = prelu;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/prod.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prod = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _axis_util = require("./axis_util");

var _cast = require("./cast");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _transpose = require("./transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the product of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.prod().print();  // or tf.prod(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.prod(axis).print();  // or tf.prod(x, axis)
 * ```
 *
 * @param x The input tensor to compute the product over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function prod_(x, axis = null, keepDims = false) {
  let $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'prod');

  const forward = backend => {
    if ($x.dtype === 'bool') {
      $x = (0, _cast.cast)($x, 'int32');
    }

    const axes = (0, _util.parseAxisParam)(axis, $x.shape);
    const permutation = (0, _axis_util.getAxesPermutation)(axes, $x.rank);
    let reductionAxes = axes;
    let permutedX = $x;

    if (permutation != null) {
      permutedX = (0, _transpose.transpose)($x, permutation);
      reductionAxes = (0, _axis_util.getInnerMostAxes)(reductionAxes.length, $x.rank);
    }

    let value = backend.prod(permutedX, reductionAxes);

    if (keepDims) {
      const newShape = (0, _axis_util.expandShapeToKeepDim)(value.shape, axes);
      value = (0, _reshape.reshape)(value, newShape);
    }

    return value;
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    keepDims
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Prod, attrs);
}

const prod = (0, _operation.op)({
  prod_
});
exports.prod = prod;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/rand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rand = void 0;

var _engine = require("../engine");

var _util = require("../util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with values sampled from a random number generator
 * function defined by the user.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param randFunction A random number generator function which is called
 * for each element in the output tensor.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 */
function rand_(shape, randFunction, dtype) {
  const size = (0, _util.sizeFromShape)(shape);
  let values = null;

  if (dtype == null || dtype === 'float32') {
    values = new Float32Array(size);
  } else if (dtype === 'int32') {
    values = new Int32Array(size);
  } else if (dtype === 'bool') {
    values = new Uint8Array(size);
  } else {
    throw new Error(`Unknown data type ${dtype}`);
  }

  for (let i = 0; i < size; i++) {
    values[i] = randFunction();
  }

  return _engine.ENGINE.makeTensor(values, shape, dtype);
}

const rand = (0, _operation.op)({
  rand_
});
exports.rand = rand;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/seedrandom/lib/alea.js":[function(require,module,exports) {
var define;
// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -

// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



(function(global, module, define) {

function Alea(seed) {
  var me = this, mash = Mash();

  me.next = function() {
    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
    me.s0 = me.s1;
    me.s1 = me.s2;
    return me.s2 = t - (me.c = t | 0);
  };

  // Apply the seeding algorithm from Baagoe.
  me.c = 1;
  me.s0 = mash(' ');
  me.s1 = mash(' ');
  me.s2 = mash(' ');
  me.s0 -= mash(seed);
  if (me.s0 < 0) { me.s0 += 1; }
  me.s1 -= mash(seed);
  if (me.s1 < 0) { me.s1 += 1; }
  me.s2 -= mash(seed);
  if (me.s2 < 0) { me.s2 += 1; }
  mash = null;
}

function copy(f, t) {
  t.c = f.c;
  t.s0 = f.s0;
  t.s1 = f.s1;
  t.s2 = f.s2;
  return t;
}

function impl(seed, opts) {
  var xg = new Alea(seed),
      state = opts && opts.state,
      prng = xg.next;
  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }
  prng.double = function() {
    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
  };
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

function Mash() {
  var n = 0xefc8249d;

  var mash = function(data) {
    data = data.toString();
    for (var i = 0; i < data.length; i++) {
      n += data.charCodeAt(i);
      var h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 0x100000000; // 2^32
    }
    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
  };

  return mash;
}


if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.alea = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"node_modules/seedrandom/lib/xor128.js":[function(require,module,exports) {
var define;
// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;

  // Set up generator function.
  me.next = function() {
    var t = me.x ^ (me.x << 11);
    me.x = me.y;
    me.y = me.z;
    me.z = me.w;
    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
  };

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor128 = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"node_modules/seedrandom/lib/xorwow.js":[function(require,module,exports) {
var define;
// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var t = (me.x ^ (me.x >>> 2));
    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
    return (me.d = (me.d + 362437 | 0)) +
       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
  };

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;
  me.v = 0;

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    if (k == strseed.length) {
      me.d = me.x << 10 ^ me.x >>> 4;
    }
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  t.v = f.v;
  t.d = f.d;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorwow = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"node_modules/seedrandom/lib/xorshift7.js":[function(require,module,exports) {
var define;
// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    // Update xor generator.
    var X = me.x, i = me.i, t, v, w;
    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
    X[i] = v;
    me.i = (i + 1) & 7;
    return v;
  };

  function init(me, seed) {
    var j, w, X = [];

    if (seed === (seed | 0)) {
      // Seed state array using a 32-bit integer.
      w = X[0] = seed;
    } else {
      // Seed state using a string.
      seed = '' + seed;
      for (j = 0; j < seed.length; ++j) {
        X[j & 7] = (X[j & 7] << 15) ^
            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
      }
    }
    // Enforce an array length of 8, not all zeroes.
    while (X.length < 8) X.push(0);
    for (j = 0; j < 8 && X[j] === 0; ++j);
    if (j == 8) w = X[7] = -1; else w = X[j];

    me.x = X;
    me.i = 0;

    // Discard an initial 256 values.
    for (j = 256; j > 0; --j) {
      me.next();
    }
  }

  init(me, seed);
}

function copy(f, t) {
  t.x = f.x.slice();
  t.i = f.i;
  return t;
}

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.x) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorshift7 = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);


},{}],"node_modules/seedrandom/lib/xor4096.js":[function(require,module,exports) {
var define;
// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    var w = me.w,
        X = me.X, i = me.i, t, v;
    // Update Weyl generator.
    me.w = w = (w + 0x61c88647) | 0;
    // Update xor generator.
    v = X[(i + 34) & 127];
    t = X[i = ((i + 1) & 127)];
    v ^= v << 13;
    t ^= t << 17;
    v ^= v >>> 15;
    t ^= t >>> 12;
    // Update Xor generator array state.
    v = X[i] = v ^ t;
    me.i = i;
    // Result is the combination.
    return (v + (w ^ (w >>> 16))) | 0;
  };

  function init(me, seed) {
    var t, v, i, j, w, X = [], limit = 128;
    if (seed === (seed | 0)) {
      // Numeric seeds initialize v, which is used to generates X.
      v = seed;
      seed = null;
    } else {
      // String seeds are mixed into v and X one character at a time.
      seed = seed + '\0';
      v = 0;
      limit = Math.max(limit, seed.length);
    }
    // Initialize circular array and weyl value.
    for (i = 0, j = -32; j < limit; ++j) {
      // Put the unicode characters into the array, and shuffle them.
      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
      // After 32 shuffles, take v as the starting w value.
      if (j === 0) w = v;
      v ^= v << 10;
      v ^= v >>> 15;
      v ^= v << 4;
      v ^= v >>> 13;
      if (j >= 0) {
        w = (w + 0x61c88647) | 0;     // Weyl.
        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
        i = (0 == t) ? i + 1 : 0;     // Count zeroes.
      }
    }
    // We have detected all zeroes; make the key nonzero.
    if (i >= 128) {
      X[(seed && seed.length || 0) & 127] = -1;
    }
    // Run the generator 512 times to further mix the state before using it.
    // Factoring this as a function slows the main generator, so it is just
    // unrolled here.  The weyl generator is not advanced while warming up.
    i = 127;
    for (j = 4 * 128; j > 0; --j) {
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      X[i] = v ^ t;
    }
    // Storing state as object members is faster than using closure variables.
    me.w = w;
    me.X = X;
    me.i = i;
  }

  init(me, seed);
}

function copy(f, t) {
  t.i = f.i;
  t.w = f.w;
  t.X = f.X.slice();
  return t;
};

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.X) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor4096 = impl;
}

})(
  this,                                     // window object or global
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);

},{}],"node_modules/seedrandom/lib/tychei.js":[function(require,module,exports) {
var define;
// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var b = me.b, c = me.c, d = me.d, a = me.a;
    b = (b << 25) ^ (b >>> 7) ^ c;
    c = (c - d) | 0;
    d = (d << 24) ^ (d >>> 8) ^ a;
    a = (a - b) | 0;
    me.b = b = (b << 20) ^ (b >>> 12) ^ c;
    me.c = c = (c - d) | 0;
    me.d = (d << 16) ^ (c >>> 16) ^ a;
    return me.a = (a - b) | 0;
  };

  /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */

  me.a = 0;
  me.b = 0;
  me.c = 2654435769 | 0;
  me.d = 1367130551;

  if (seed === Math.floor(seed)) {
    // Integer seed.
    me.a = (seed / 0x100000000) | 0;
    me.b = seed | 0;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 20; k++) {
    me.b ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.a = f.a;
  t.b = f.b;
  t.c = f.c;
  t.d = f.d;
  return t;
};

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.tychei = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"node_modules/seedrandom/seedrandom.js":[function(require,module,exports) {
var global = arguments[3];
var define;
/*
Copyright 2014 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (pool, math) {
//
// The following constants are related to IEEE 754 limits.
//
var global = this,
    width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; }
  prng.quick = function() { return arc4.g(4) / 0x100000000; }
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); }
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}
math['seed' + rngname] = seedrandom;

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
};

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    var out;
    if (nodecrypto && (out = nodecrypto.randomBytes)) {
      // The use of 'out' to remember randomBytes makes tight minified code.
      out = out(width);
    } else {
      out = new Uint8Array(width);
      (global.crypto || global.msCrypto).getRandomValues(out);
    }
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if ((typeof module) == 'object' && module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = require('crypto');
  } catch (ex) {}
} else if ((typeof define) == 'function' && define.amd) {
  define(function() { return seedrandom; });
}

// End anonymous scope, and pass initial values.
})(
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);

},{"crypto":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/seedrandom/index.js":[function(require,module,exports) {
// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = require('./lib/alea');

// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = require('./lib/xor128');

// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = require('./lib/xorwow');

// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = require('./lib/xorshift7');

// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = require('./lib/xor4096');

// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = require('./lib/tychei');

// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = require('./seedrandom');

sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;

module.exports = sr;

},{"./lib/alea":"node_modules/seedrandom/lib/alea.js","./lib/xor128":"node_modules/seedrandom/lib/xor128.js","./lib/xorwow":"node_modules/seedrandom/lib/xorwow.js","./lib/xorshift7":"node_modules/seedrandom/lib/xorshift7.js","./lib/xor4096":"node_modules/seedrandom/lib/xor4096.js","./lib/tychei":"node_modules/seedrandom/lib/tychei.js","./seedrandom":"node_modules/seedrandom/seedrandom.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jarqueBeraNormalityTest = jarqueBeraNormalityTest;
exports.expectArrayInMeanStdRange = expectArrayInMeanStdRange;
exports.UniformRandom = exports.RandGamma = exports.MPRandGauss = void 0;

var seedrandom = _interopRequireWildcard(require("seedrandom"));

var _test_util = require("../test_util");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// https://en.wikipedia.org/wiki/Marsaglia_polar_method
class MPRandGauss {
  constructor(mean, stdDeviation, dtype, truncated, seed) {
    this.mean = mean;
    this.stdDev = stdDeviation;
    this.dtype = dtype;
    this.nextVal = NaN;
    this.truncated = truncated;

    if (this.truncated) {
      this.upper = this.mean + this.stdDev * 2;
      this.lower = this.mean - this.stdDev * 2;
    }

    const seedValue = seed ? seed : Math.random();
    this.random = seedrandom.alea(seedValue.toString());
  }
  /** Returns next sample from a Gaussian distribution. */


  nextValue() {
    if (!isNaN(this.nextVal)) {
      const value = this.nextVal;
      this.nextVal = NaN;
      return value;
    }

    let resultX, resultY;
    let isValid = false;

    while (!isValid) {
      let v1, v2, s;

      do {
        v1 = 2 * this.random() - 1;
        v2 = 2 * this.random() - 1;
        s = v1 * v1 + v2 * v2;
      } while (s >= 1 || s === 0);

      const mul = Math.sqrt(-2.0 * Math.log(s) / s);
      resultX = this.mean + this.stdDev * v1 * mul;
      resultY = this.mean + this.stdDev * v2 * mul;

      if (!this.truncated || this.isValidTruncated(resultX)) {
        isValid = true;
      }
    }

    if (!this.truncated || this.isValidTruncated(resultY)) {
      this.nextVal = this.convertValue(resultY);
    }

    return this.convertValue(resultX);
  }
  /** Handles proper rounding for non-floating-point numbers. */


  convertValue(value) {
    if (this.dtype == null || this.dtype === 'float32') {
      return value;
    }

    return Math.round(value);
  }
  /** Returns true if less than 2-standard-deviations from the mean. */


  isValidTruncated(value) {
    return value <= this.upper && value >= this.lower;
  }

} // Marsaglia, George, and Wai Wan Tsang. 2000. "A Simple Method for Generating
// Gamma Variables."


exports.MPRandGauss = MPRandGauss;

class RandGamma {
  constructor(alpha, beta, dtype, seed) {
    this.alpha = alpha;
    this.beta = 1 / beta; // convert rate to scale parameter

    this.dtype = dtype;
    const seedValue = seed ? seed : Math.random();
    this.randu = seedrandom.alea(seedValue.toString());
    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());

    if (alpha < 1) {
      this.d = alpha + 2 / 3;
    } else {
      this.d = alpha - 1 / 3;
    }

    this.c = 1 / Math.sqrt(9 * this.d);
  }
  /** Returns next sample from a gamma distribution. */


  nextValue() {
    let x2, v0, v1, x, u, v;

    while (true) {
      do {
        x = this.randn.nextValue();
        v = 1 + this.c * x;
      } while (v <= 0);

      v *= v * v;
      x2 = x * x;
      v0 = 1 - 0.331 * x2 * x2;
      v1 = 0.5 * x2 + this.d * (1 - v + Math.log(v));
      u = this.randu();

      if (u < v0 || Math.log(u) < v1) {
        break;
      }
    }

    v = 1 / this.beta * this.d * v;

    if (this.alpha < 1) {
      v *= Math.pow(this.randu(), 1 / this.alpha);
    }

    return this.convertValue(v);
  }
  /** Handles proper rounding for non-floating-point numbers. */


  convertValue(value) {
    if (this.dtype === 'float32') {
      return value;
    }

    return Math.round(value);
  }

}

exports.RandGamma = RandGamma;

class UniformRandom {
  constructor(min = 0, max = 1, dtype, seed) {
    /** Handles proper rounding for non floating point numbers. */
    this.canReturnFloat = () => this.dtype == null || this.dtype === 'float32';

    this.min = min;
    this.range = max - min;
    this.dtype = dtype;

    if (seed == null) {
      seed = Math.random();
    }

    if (typeof seed === 'number') {
      seed = seed.toString();
    }

    if (!this.canReturnFloat() && this.range <= 1) {
      throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);
    }

    this.random = seedrandom.alea(seed);
  }

  convertValue(value) {
    if (this.canReturnFloat()) {
      return value;
    }

    return Math.round(value);
  }

  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }

}

exports.UniformRandom = UniformRandom;

function jarqueBeraNormalityTest(values) {
  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test
  const n = values.length;
  const s = skewness(values);
  const k = kurtosis(values);
  const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2)); // JB test requires 2-degress of freedom from Chi-Square @ 0.95:
  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm

  const CHI_SQUARE_2DEG = 5.991;

  if (jb > CHI_SQUARE_2DEG) {
    throw new Error(`Invalid p-value for JB: ${jb}`);
  }
}

function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {
  if (epsilon == null) {
    epsilon = (0, _test_util.testEpsilon)();
  }

  const actualMean = mean(actual);
  (0, _test_util.expectNumbersClose)(actualMean, expectedMean, epsilon);
  (0, _test_util.expectNumbersClose)(standardDeviation(actual, actualMean), expectedStdDev, epsilon);
}

function mean(values) {
  let sum = 0;

  for (let i = 0; i < values.length; i++) {
    sum += values[i];
  }

  return sum / values.length;
}

function standardDeviation(values, mean) {
  let squareDiffSum = 0;

  for (let i = 0; i < values.length; i++) {
    const diff = values[i] - mean;
    squareDiffSum += diff * diff;
  }

  return Math.sqrt(squareDiffSum / values.length);
}

function kurtosis(values) {
  // https://en.wikipedia.org/wiki/Kurtosis
  const valuesMean = mean(values);
  const n = values.length;
  let sum2 = 0;
  let sum4 = 0;

  for (let i = 0; i < n; i++) {
    const v = values[i] - valuesMean;
    sum2 += Math.pow(v, 2);
    sum4 += Math.pow(v, 4);
  }

  return 1 / n * sum4 / Math.pow(1 / n * sum2, 2);
}

function skewness(values) {
  // https://en.wikipedia.org/wiki/Skewness
  const valuesMean = mean(values);
  const n = values.length;
  let sum2 = 0;
  let sum3 = 0;

  for (let i = 0; i < n; i++) {
    const v = values[i] - valuesMean;
    sum2 += Math.pow(v, 2);
    sum3 += Math.pow(v, 3);
  }

  return 1 / n * sum3 / Math.pow(1 / (n - 1) * sum2, 3 / 2);
}
},{"seedrandom":"node_modules/seedrandom/index.js","../test_util":"node_modules/@tensorflow/tfjs-core/dist/test_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/random_gamma.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomGamma = void 0;

var _buffer = require("./buffer");

var _operation = require("./operation");

var _rand_util = require("./rand_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with values sampled from a gamma distribution.
 *
 * ```js
 * tf.randomGamma([2, 2], 1).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param alpha The shape parameter of the gamma distribution.
 * @param beta The inverse scale parameter of the gamma distribution. Defaults
 *     to 1.
 * @param dtype The data type of the output. Defaults to float32.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function randomGamma_(shape, alpha, beta = 1, dtype = 'float32', seed) {
  if (beta == null) {
    beta = 1;
  }

  if (dtype == null) {
    dtype = 'float32';
  }

  if (dtype !== 'float32' && dtype !== 'int32') {
    throw new Error(`Unsupported data type ${dtype}`);
  }

  const rgamma = new _rand_util.RandGamma(alpha, beta, dtype, seed);
  const res = (0, _buffer.buffer)(shape, dtype);

  for (let i = 0; i < res.values.length; i++) {
    res.values[i] = rgamma.nextValue();
  }

  return res.toTensor();
}

const randomGamma = (0, _operation.op)({
  randomGamma_
});
exports.randomGamma = randomGamma;
},{"./buffer":"node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./rand_util":"node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/random_normal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomNormal = void 0;

var _buffer = require("./buffer");

var _operation = require("./operation");

var _rand_util = require("./rand_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with values sampled from a normal distribution.
 *
 * ```js
 * tf.randomNormal([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function randomNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
  if (dtype != null && dtype === 'bool') {
    throw new Error(`Unsupported data type ${dtype}`);
  }

  const randGauss = new _rand_util.MPRandGauss(mean, stdDev, dtype, false
  /* truncated */
  , seed);
  const res = (0, _buffer.buffer)(shape, dtype);

  for (let i = 0; i < res.values.length; i++) {
    res.values[i] = randGauss.nextValue();
  }

  return res.toTensor();
}

const randomNormal = (0, _operation.op)({
  randomNormal_
});
exports.randomNormal = randomNormal;
},{"./buffer":"node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./rand_util":"node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomUniform = void 0;

var _buffer = require("./buffer");

var _operation = require("./operation");

var _rand_util = require("./rand_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with values sampled from a uniform distribution.
 *
 * The generated values follow a uniform distribution in the range [minval,
 * maxval). The lower bound minval is included in the range, while the upper
 * bound maxval is excluded.
 *
 * ```js
 * tf.randomUniform([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param minval The lower bound on the range of random values to generate.
 *   Defaults to 0.
 * @param maxval The upper bound on the range of random values to generate.
 *   Defaults to 1.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function randomUniform_(shape, minval = 0, maxval = 1, dtype = 'float32', seed) {
  const res = (0, _buffer.buffer)(shape, dtype);
  const random = new _rand_util.UniformRandom(minval, maxval, null, seed);

  for (let i = 0; i < res.values.length; i++) {
    res.values[i] = random.nextValue();
  }

  return res.toTensor();
}

const randomUniform = (0, _operation.op)({
  randomUniform_
});
exports.randomUniform = randomUniform;
},{"./buffer":"node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./rand_util":"node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor1d = tensor1d;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor1d` as it makes the code more readable.
 *
 * ```js
 * tf.tensor1d([1, 2, 3]).print();
 * ```
 *
 * @param values The values of the tensor. Can be array of numbers,
 *     or a `TypedArray`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor1d(values, dtype) {
  (0, _util.assertNonNull)(values);
  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);

  if (inferredShape.length !== 1) {
    throw new Error('tensor1d() requires values to be a flat/TypedArray');
  }

  const shape = null;
  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./tensor_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.range = range;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _util = require("../util");

var _tensor1d = require("./tensor1d");

var _zeros = require("./zeros");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.
 *
 * The tensor is a is half-open interval meaning it includes start, but
 * excludes stop. Decrementing ranges and negative step values are also
 * supported.sv
 *
 *
 * ```js
 * tf.range(0, 9, 2).print();
 * ```
 *
 * @param start An integer start value
 * @param stop An integer stop value
 * @param step An integer increment (will default to 1 or -1)
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function range(start, stop, step = 1, dtype = 'float32') {
  if (step === 0) {
    throw new Error('Cannot have a step of zero');
  }

  const forward = () => {
    const sameStartStop = start === stop;
    const increasingRangeNegativeStep = start < stop && step < 0;
    const decreasingRangePositiveStep = stop < start && step > 1;

    if (sameStartStop || increasingRangeNegativeStep || decreasingRangePositiveStep) {
      return (0, _zeros.zeros)([0], dtype);
    }

    const numElements = Math.abs(Math.ceil((stop - start) / step));
    const values = (0, _util.makeZerosTypedArray)(numElements, dtype);

    if (stop < start && step === 1) {
      // Auto adjust the step's sign if it hasn't been set
      // (or was set to 1)
      step = -1;
    }

    values[0] = start;

    for (let i = 1; i < values.length; i++) {
      values[i] = values[i - 1] + step;
    }

    return (0, _tensor1d.tensor1d)(values, dtype);
  };

  const attrs = {
    start,
    stop,
    step,
    dtype
  };
  return _engine.ENGINE.runKernelFunc(forward, {}
  /* inputs */
  , null
  /* grad */
  , _kernel_names.Range, attrs);
}
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./tensor1d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js","./zeros":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/reciprocal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reciprocal = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes reciprocal of x element-wise: `1 / x`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, 2]);
 *
 * x.reciprocal().print();  // or tf.reciprocal(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function reciprocal_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reciprocal');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.reciprocal($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Reciprocal);
}

const reciprocal = (0, _operation.op)({
  reciprocal_
});
exports.reciprocal = reciprocal;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/relu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.relu = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

var _cast = require("./cast");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes rectified linear element-wise: `max(x, 0)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.relu().print();  // or tf.relu(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32'.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function relu_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'relu');

  const forward = (backend, save) => {
    save([$x]);

    if ($x.dtype === 'bool') {
      return (0, _cast.cast)($x, 'int32');
    }

    return backend.relu($x);
  };

  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Relu);
}

const relu = (0, _operation.op)({
  relu_
});
exports.relu = relu;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.relu6 = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _cast = require("./cast");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 8]);
 *
 * x.relu6().print();  // or tf.relu6(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32'.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function relu6_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'relu6');

  const forward = (backend, save) => {
    save([$x]);

    if ($x.dtype === 'bool') {
      return (0, _cast.cast)($x, 'int32');
    }

    return backend.relu6($x);
  };

  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Relu6);
}

const relu6 = (0, _operation.op)({
  relu6_
});
exports.relu6 = relu6;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverse = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _clone = require("./clone");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reverses a `tf.Tensor` along a specified axis.
 *
 * Also available are stricter rank-specific methods that assert that `x` is
 * of the given rank:
 *   - `tf.reverse1d`
 *   - `tf.reverse2d`
 *   - `tf.reverse3d`
 *   - `tf.reverse4d`
 *
 * Except `tf.reverse1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.reverse().print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.reverse(axis).print();
 * ```
 * @param x The input tensor to be reversed.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function reverse_(x, axis) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reverse');

  const forward = backend => {
    const axes = (0, _util.parseAxisParam)(axis, $x.shape);

    if ($x.rank === 0) {
      return (0, _clone.clone)($x);
    }

    const res = backend.reverse($x, axes);
    return (0, _reshape.reshape)(res, $x.shape);
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    dims: axis
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.Reverse, attrs);
}

const reverse = (0, _operation.op)({
  reverse_
});
exports.reverse = reverse;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./clone":"node_modules/@tensorflow/tfjs-core/dist/ops/clone.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/reverse_1d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverse1d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reverse = require("./reverse");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reverses a `tf.Tensor1D`.
 *
 * @param x The input tensor.
 */
function reverse1d_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reverse');
  util.assert($x.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);
  return (0, _reverse.reverse)($x, 0);
}

const reverse1d = (0, _operation.op)({
  reverse1d_
});
exports.reverse1d = reverse1d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reverse":"node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/reverse_2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverse2d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reverse = require("./reverse");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reverses a `tf.Tensor2D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */
function reverse2d_(x, axis) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reverse');
  util.assert($x.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);
  return (0, _reverse.reverse)($x, axis);
}

const reverse2d = (0, _operation.op)({
  reverse2d_
});
exports.reverse2d = reverse2d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reverse":"node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/reverse_3d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverse3d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reverse = require("./reverse");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reverses a `tf.Tensor3D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */
function reverse3d_(x, axis) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reverse');
  util.assert($x.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);
  return (0, _reverse.reverse)($x, axis);
}

const reverse3d = (0, _operation.op)({
  reverse3d_
});
exports.reverse3d = reverse3d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reverse":"node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/reverse_4d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverse4d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reverse = require("./reverse");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reverses a `tf.Tensor4D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */
function reverse4d_(x, axis) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reverse');
  util.assert($x.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);
  return (0, _reverse.reverse)($x, axis);
}

const reverse4d = (0, _operation.op)({
  reverse4d_
});
exports.reverse4d = reverse4d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reverse":"node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.round = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes round of input `tf.Tensor` element-wise: `round(x)`.
 * It implements banker's rounding.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.round().print();  // or tf.round(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function round_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'round');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.round($x), inputs, null
  /* grad */
  , _kernel_names.Round);
}

const round = (0, _operation.op)({
  round_
});
exports.round = round;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rsqrt = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes reciprocal of square root of the input `tf.Tensor` element-wise:
 * `y = 1 / sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.rsqrt().print();  // or tf.rsqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function rsqrt_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'rsqrt');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.rsqrt($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Rsqrt);
}

const rsqrt = (0, _operation.op)({
  rsqrt_
});
exports.rsqrt = rsqrt;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/selu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selu = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes scaled exponential linear element-wise.
 *
 * `x < 0 ? scale * alpha * (exp(x) - 1) : x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.selu().print();  // or tf.selu(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function selu_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'selu');

  const forward = (backend, save) => {
    const res = backend.selu($x);
    save([$x]);
    return res;
  };

  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Selu);
}

const selu = (0, _operation.op)({
  selu_
});
exports.selu = selu;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.separableConv2d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _conv2d = require("./conv2d");

var _depthwise_conv2d = require("./depthwise_conv2d");

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * 2-D convolution with separable filters.
 *
 * Performs a depthwise convolution that acts separately on channels followed
 * by a pointwise convolution that mixes channels. Note that this is
 * separability between dimensions [1, 2] and 3, not spatial separability
 * between dimensions 1 and 2.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is
 *     the filter used in the first step.
 * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape
 *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is
 *     the filter used in the second step.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation = [1, 1], dataFormat = 'NHWC') {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'separableConv2d');
  const $depthwiseFilter = (0, _tensor_util_env.convertToTensor)(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');
  const $pointwiseFilter = (0, _tensor_util_env.convertToTensor)(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  if (dataFormat === 'NCHW') {
    throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' + 'NHWC is supported');
  }

  util.assert(x4D.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);
  util.assert($depthwiseFilter.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but ` + `got rank ${$depthwiseFilter.rank}.`);
  util.assert($pointwiseFilter.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but ` + `got rank ${$depthwiseFilter.rank}.`);
  util.assert($pointwiseFilter.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter ` + ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);
  util.assert($pointwiseFilter.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise ` + `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);
  const inChannels = $depthwiseFilter.shape[2];
  const channelMultiplier = $depthwiseFilter.shape[3];
  util.assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, () => `Error in separableConv2d: the third dimension of pointwise filter ` + `must be ${inChannels * channelMultiplier}, ` + `but got ${$pointwiseFilter.shape[2]}.`);
  const depthwise = (0, _depthwise_conv2d.depthwiseConv2d)(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);
  const pointwiseStride = 1;
  const res = (0, _conv2d.conv2d)(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const separableConv2d = (0, _operation.op)({
  separableConv2d_
});
exports.separableConv2d = separableConv2d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js","./depthwise_conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/setdiff1d_async.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setdiff1dAsync = void 0;

var _tensor = require("../tensor");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the difference between two lists of numbers.
 *
 * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`
 * that represents all values that are in `x` but not in `y`. The returned
 * Tensor `out` is sorted in the same order that the numbers appear in `x`
 * (duplicates are preserved). This operation also returns a Tensor indices that
 * represents the position of each out element in `x`. In other words:
 *
 * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`
 *
 * ```js
 * const x = [1, 2, 3, 4, 5, 6];
 * const y = [1, 3, 5];
 *
 * const [out, indices] = await tf.setdiff1dAsync(x, y);
 * out.print(); // [2, 4, 6]
 * indices.print(); // [1, 3, 5]
 * ```
 *
 * @param x 1-D Tensor. Values to keep.
 * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the
 *     output.
 * @returns Promise of Tensor tuple [out, indices].
 *  out: Tensor with the same type as x.
 *  indices: A Tensor of type int32.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
async function setdiff1dAsync_(x, y) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'setdiff1d');
  const $y = (0, _tensor_util_env.convertToTensor)(y, 'y', 'setdiff1d');
  util.assert($x.dtype === $y.dtype, () => `x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);
  util.assert($x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);
  util.assert($y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);
  const xVals = await $x.data();
  const yVals = await $y.data();
  const ySet = new Set(yVals);
  let outputSize = 0;

  for (let i = 0; i < xVals.length; i++) {
    if (!ySet.has(xVals[i])) {
      outputSize++;
    }
  }

  const buffer = new _tensor.TensorBuffer([outputSize], $x.dtype);
  const indices = new _tensor.TensorBuffer([outputSize], 'int32');

  for (let i = 0, p = 0; i < xVals.length; i++) {
    if (!ySet.has(xVals[i])) {
      buffer.values[p] = xVals[i];
      indices.values[p] = i;
      p++;
    }
  }

  return [buffer.toTensor(), indices.toTensor()];
}

const setdiff1dAsync = setdiff1dAsync_;
exports.setdiff1dAsync = setdiff1dAsync;
},{"../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/sign.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sign = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns an element-wise indication of the sign of a number.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);
 *
 * x.sign().print();  // or tf.sign(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sign_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'sign');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.sign($x), inputs, null
  /* grad */
  , _kernel_names.Sign);
}

const sign = (0, _operation.op)({
  sign_
});
exports.sign = sign;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/sin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sin = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes sin of the input Tensor element-wise: `sin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.sin().print();  // or tf.sin(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sin_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'sin');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.sin($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Sin);
}

const sin = (0, _operation.op)({
  sin_
});
exports.sin = sin;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinh = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.sinh().print();  // or tf.sinh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sinh_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'sinh');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.sinh($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Sinh);
}

const sinh = (0, _operation.op)({
  sinh_
});
exports.sinh = sinh;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/slice1d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice1d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _slice = require("./slice");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts a 1D slice from 1D array starting at coordinates `begin` and is
 * of length `size`. See `slice` for details.
 */
function slice1d_(x, begin, size) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'slice1d');
  util.assert($x.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);
  return (0, _slice.slice)($x, [begin], [size]);
}

const slice1d = (0, _operation.op)({
  slice1d_
});
exports.slice1d = slice1d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/slice2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice2d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _slice = require("./slice");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts a 2D slice from a 2D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */
function slice2d_(x, begin, size) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'slice2d');
  util.assert($x.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);
  return (0, _slice.slice)($x, begin, size);
}

const slice2d = (0, _operation.op)({
  slice2d_
});
exports.slice2d = slice2d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/slice3d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice3d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _slice = require("./slice");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts a 3D slice from a 3D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */
function slice3d_(x, begin, size) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'slice3d');
  util.assert($x.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);
  return (0, _slice.slice)($x, begin, size);
}

const slice3d = (0, _operation.op)({
  slice3d_
});
exports.slice3d = slice3d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/slice4d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice4d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _slice = require("./slice");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts a 4D slice from a 4D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */
function slice4d_(x, begin, size) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'slice4d');
  util.assert($x.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);
  return (0, _slice.slice)($x, begin, size);
}

const slice4d = (0, _operation.op)({
  slice4d_
});
exports.slice4d = slice4d;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.softmax = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the softmax normalized vector given the logits.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function softmax_(logits, dim = -1) {
  const $logits = (0, _tensor_util_env.convertToTensor)(logits, 'logits', 'softmax', 'float32');

  if (dim === -1) {
    dim = $logits.rank - 1;
  }

  if (dim !== $logits.rank - 1) {
    throw Error('Softmax along a non-last dimension is not yet supported. ' + `Logits was rank ${$logits.rank} and dim was ${dim}`);
  }

  const inputs = {
    logits: $logits
  };
  const attrs = {
    dim
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const y = backend.softmax($logits, dim);
    save([y]);
    return y;
  }, inputs, null
  /* grad */
  , _kernel_names.Softmax, attrs);
}

const softmax = (0, _operation.op)({
  softmax_
});
exports.softmax = softmax;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fft = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _util = require("../../util");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the inner-most
 * dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.fft().print();  // tf.spectral.fft(x).print();
 * ```
 * @param input The complex input to compute an fft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function fft_(input) {
  (0, _util.assert)(input.dtype === 'complex64', () => `The dtype for tf.spectral.fft() must be complex64 ` + `but got ${input.dtype}.`);
  const inputs = {
    input
  };
  return _engine.ENGINE.runKernelFunc(backend => {
    // Collapse all outer dimensions to a single batch dimension.
    const innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = input.size / innerDimensionSize;
    const input2D = input.as2D(batch, innerDimensionSize);
    const result = backend.fft(input2D);
    return result.reshape(input.shape);
  }, inputs, null
  /* gradient */
  , _kernel_names.FFT);
}

const fft = (0, _operation.op)({
  fft_
});
exports.fft = fft;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ifft = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _util = require("../../util");

var _operation = require("../operation");

var _reshape = require("../reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Inverse fast Fourier transform.
 *
 * Computes the inverse 1-dimensional discrete Fourier transform over the
 * inner-most dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.ifft().print();  // tf.spectral.ifft(x).print();
 * ```
 * @param input The complex input to compute an ifft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function ifft_(input) {
  (0, _util.assert)(input.dtype === 'complex64', () => `The dtype for tf.spectral.ifft() must be complex64 ` + `but got ${input.dtype}.`);
  const inputs = {
    input
  };
  return _engine.ENGINE.runKernelFunc(backend => {
    // Collapse all outer dimensions to a single batch dimension.
    const innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = input.size / innerDimensionSize;
    const input2D = (0, _reshape.reshape)(input, [batch, innerDimensionSize]);
    const result = backend.ifft(input2D);
    return (0, _reshape.reshape)(result, input.shape);
  }, inputs, null
  /* gradient */
  , _kernel_names.IFFT);
}

const ifft = (0, _operation.op)({
  ifft_
});
exports.ifft = ifft;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.irfft = void 0;

var _complex = require("../complex");

var _concat = require("../concat");

var _imag = require("../imag");

var _mul = require("../mul");

var _operation = require("../operation");

var _real = require("../real");

var _reshape = require("../reshape");

var _reverse = require("../reverse");

var _scalar = require("../scalar");

var _slice = require("../slice");

var _ifft = require("./ifft");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Inversed real value input fast Fourier transform.
 *
 * Computes the 1-dimensional inversed discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([0, 0, 0]);
 * const x = tf.complex(real, imag);
 *
 * x.irfft().print();
 * ```
 * @param input The real value input to compute an irfft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function irfft_(input) {
  const innerDimensionSize = input.shape[input.shape.length - 1];
  const batch = input.size / innerDimensionSize;
  let ret;

  if (innerDimensionSize <= 2) {
    const complexInput = (0, _reshape.reshape)(input, [batch, innerDimensionSize]);
    ret = (0, _ifft.ifft)(complexInput);
  } else {
    // The length of unique components of the DFT of a real-valued signal
    // is 2 * (input_len - 1)
    const outputShape = [batch, 2 * (innerDimensionSize - 1)];
    const realInput = (0, _reshape.reshape)((0, _real.real)(input), [batch, innerDimensionSize]);
    const imagInput = (0, _reshape.reshape)((0, _imag.imag)(input), [batch, innerDimensionSize]);
    const realConjugate = (0, _reverse.reverse)((0, _slice.slice)(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);
    const imagConjugate = (0, _mul.mul)((0, _reverse.reverse)((0, _slice.slice)(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1), (0, _scalar.scalar)(-1));
    const r = (0, _concat.concat)([realInput, realConjugate], 1);
    const i = (0, _concat.concat)([imagInput, imagConjugate], 1);
    const complexInput = (0, _reshape.reshape)((0, _complex.complex)(r, i), [outputShape[0], outputShape[1]]);
    ret = (0, _ifft.ifft)(complexInput);
  }

  ret = (0, _real.real)(ret); // reshape the result if the input is 3D tensor.

  if (input.rank === 3 && input.shape[0] !== 0) {
    const temp = ret;
    const batch = input.shape[0];
    ret = (0, _reshape.reshape)(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);
    temp.dispose();
  }

  return ret;
}

const irfft = (0, _operation.op)({
  irfft_
});
exports.irfft = irfft;
},{"../complex":"node_modules/@tensorflow/tfjs-core/dist/ops/complex.js","../concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","../imag":"node_modules/@tensorflow/tfjs-core/dist/ops/imag.js","../mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../real":"node_modules/@tensorflow/tfjs-core/dist/ops/real.js","../reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../reverse":"node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js","../scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js","./ifft":"node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepareSplitSize = prepareSplitSize;

var _util = require("../util");

/**
 * Prepare the split size array. When the input is a number, the axis is evenly
 * divided among the split size. When the input contains the negative value, the
 * rest of the axis is allocated toward that.
 */
function prepareSplitSize(x, numOrSizeSplits, axis = 0) {
  let splitSizes = [];

  if (typeof numOrSizeSplits === 'number') {
    (0, _util.assert)(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');
    splitSizes = new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);
  } else {
    const numOfNegs = numOrSizeSplits.reduce((count, value) => {
      if (value === -1) {
        count += 1;
      }

      return count;
    }, 0);
    (0, _util.assert)(numOfNegs <= 1, () => 'There should be only one negative value in split array.');
    const negIndex = numOrSizeSplits.indexOf(-1); // Allow the number of split array to be -1, which indicates the rest
    // of dimension is allocated to that split.

    if (negIndex !== -1) {
      const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);
      numOrSizeSplits[negIndex] = x.shape[axis] - total;
    }

    (0, _util.assert)(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');
    splitSizes = numOrSizeSplits;
  }

  return splitSizes;
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/split.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.split = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _operation = require("./operation");

var _split_util = require("./split_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Splits a `tf.Tensor` into sub tensors.
 *
 * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`
 * into `numOrSizeSplits` smaller tensors.
 * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.
 *
 * If `numOrSizeSplits` is a number array, splits `x` into
 * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the
 * same size as `x` except along dimension `axis` where the size is
 * `numOrSizeSplits[i]`.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);
 * const [a, b] = tf.split(x, 2, 1);
 * a.print();
 * b.print();
 *
 * const [c, d, e] = tf.split(x, [1, 2, 1], 1);
 * c.print();
 * d.print();
 * e.print();
 * ```
 *
 * @param x The input tensor to split.
 * @param numOrSizeSplits Either an integer indicating the number of
 * splits along the axis or an array of integers containing the sizes of
 * each output tensor along the axis. If a number then it must evenly divide
 * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.
 * Can contain one -1 indicating that dimension is to be inferred.
 * @param axis The dimension along which to split. Defaults to 0 (the first
 * dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function split_(x, numOrSizeSplits, axis = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'split');

  const forward = (backend, _) => {
    const $axis = (0, _util.parseAxisParam)(axis, $x.shape)[0];
    const splitSizes = (0, _split_util.prepareSplitSize)($x, numOrSizeSplits, $axis);
    return backend.split($x, splitSizes, $axis);
  };

  const inputs = {
    x: $x
  };
  const attr = {
    numOrSizeSplits,
    axis
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.SplitV, attr);
}

const split = (0, _operation.op)({
  split_
});
exports.split = split;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./split_util":"node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rfft = void 0;

var _util = require("../../util");

var _complex = require("../complex");

var _concat = require("../concat");

var _imag = require("../imag");

var _operation = require("../operation");

var _real = require("../real");

var _reshape = require("../reshape");

var _slice = require("../slice");

var _split = require("../split");

var _zeros = require("../zeros");

var _zeros_like = require("../zeros_like");

var _fft = require("./fft");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Real value input fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 *
 * real.rfft().print();
 * ```
 * @param input The real value input to compute an rfft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function rfft_(input, fftLength) {
  (0, _util.assert)(input.dtype === 'float32', () => `The dtype for rfft() must be real value but got ${input.dtype}`);
  let innerDimensionSize = input.shape[input.shape.length - 1];
  const batch = input.size / innerDimensionSize;
  let adjustedInput;

  if (fftLength != null && fftLength < innerDimensionSize) {
    // Need to crop
    const begin = input.shape.map(v => 0);
    const size = input.shape.map(v => v);
    size[input.shape.length - 1] = fftLength;
    adjustedInput = (0, _slice.slice)(input, begin, size);
    innerDimensionSize = fftLength;
  } else if (fftLength != null && fftLength > innerDimensionSize) {
    // Need to pad with zeros
    const zerosShape = input.shape.map(v => v);
    zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;
    adjustedInput = (0, _concat.concat)([input, (0, _zeros.zeros)(zerosShape)], input.shape.length - 1);
    innerDimensionSize = fftLength;
  } else {
    adjustedInput = input;
  } // Complement the input with zero imaginary numbers.


  const zerosInput = (0, _zeros_like.zerosLike)(adjustedInput);
  const complexInput = (0, _reshape.reshape)((0, _complex.complex)(adjustedInput, zerosInput), [batch, innerDimensionSize]);
  const ret = (0, _fft.fft)(complexInput); // Exclude complex conjugations. These conjugations are put symmetrically.

  const half = Math.floor(innerDimensionSize / 2) + 1;
  const realValues = (0, _real.real)(ret);
  const imagValues = (0, _imag.imag)(ret);
  const realComplexConjugate = (0, _split.split)(realValues, [half, innerDimensionSize - half], realValues.shape.length - 1);
  const imagComplexConjugate = (0, _split.split)(imagValues, [half, innerDimensionSize - half], imagValues.shape.length - 1);
  const outputShape = adjustedInput.shape.slice();
  outputShape[adjustedInput.shape.length - 1] = half;
  return (0, _reshape.reshape)((0, _complex.complex)(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);
}

const rfft = (0, _operation.op)({
  rfft_
});
exports.rfft = rfft;
},{"../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../complex":"node_modules/@tensorflow/tfjs-core/dist/ops/complex.js","../concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","../imag":"node_modules/@tensorflow/tfjs-core/dist/ops/imag.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../real":"node_modules/@tensorflow/tfjs-core/dist/ops/real.js","../reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js","../split":"node_modules/@tensorflow/tfjs-core/dist/ops/split.js","../zeros":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js","../zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js","./fft":"node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sqrt = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.sqrt().print();  // or tf.sqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sqrt_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'sqrt');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.sqrt($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Sqrt);
}

const sqrt = (0, _operation.op)({
  sqrt_
});
exports.sqrt = sqrt;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squaredDifference = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns (a - b) * (a - b) element-wise.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * ```js
 * // Broadcast squared difference  a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function squaredDifference_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'squaredDifference');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'squaredDifference');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);

  const forward = (backend, save) => {
    const res = backend.squaredDifference($a, $b);
    save([$a, $b]);
    return res;
  };

  const inputs = {
    a: $a,
    b: $b
  };
  const attrs = {};
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.SquaredDifference, attrs);
}

const squaredDifference = (0, _operation.op)({
  squaredDifference_
});
exports.squaredDifference = squaredDifference;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squeeze = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Removes dimensions of size 1 from the shape of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);
 * x.squeeze().print();
 * ```
 *
 * @param x The input tensor to be squeezed.
 * @param axis An optional list of numbers. If specified, only
 *     squeezes the dimensions listed. The dimension index starts at 0. It
 * is an error to squeeze a dimension that is not 1.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function squeeze_(x, axis) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'squeeze');
  return (0, _reshape.reshape)($x, (0, _util.squeezeShape)($x.shape, axis).newShape);
}

const squeeze = (0, _operation.op)({
  squeeze_
});
exports.squeeze = squeeze;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/stack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stack = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _concat = require("./concat");

var _expand_dims = require("./expand_dims");

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.stack([a, b, c]).print();
 * ```
 *
 * @param tensors A list of tensor objects with the same shape and dtype.
 * @param axis The axis to stack along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function stack_(tensors, axis = 0) {
  const $tensors = (0, _tensor_util_env.convertToTensorArray)(tensors, 'tensors', 'stack');
  util.assert($tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');

  if ($tensors.length === 1) {
    return (0, _expand_dims.expandDims)($tensors[0], axis);
  }

  const rank = $tensors[0].rank;
  const shape = $tensors[0].shape;
  const dtype = $tensors[0].dtype;
  util.assert(axis <= rank, () => 'Axis must be <= rank of the tensor');
  $tensors.forEach(t => {
    util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');
    util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');
  });
  const expandedTensors = $tensors.map(t => (0, _expand_dims.expandDims)(t, axis)); // Stack exists in the TensorFlow C++ API
  // (https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/stack) but not
  // in
  // https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/core/ops/ops.pbtxt.
  // Therefore we are treating it like a high-level op rather than
  // creating a dedicated stack kernel.

  return (0, _concat.concat)(expandedTensors, axis);
}

const stack = (0, _operation.op)({
  stack_
});
exports.stack = stack;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","./expand_dims":"node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/step.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.step = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`
 *
 * ```js
 * const x = tf.tensor1d([0, 2, -1, -3]);
 *
 * x.step(.5).print();  // or tf.step(x, .5)
 * ```
 * @param x The input tensor.
 * @param alpha The gradient when input is negative.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function step_(x, alpha = 0.0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'step');
  const inputs = {
    x: $x
  };
  const attrs = {
    alpha
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.step($x, alpha), inputs, null
  /* grad */
  , _kernel_names.Step, attrs);
}

const step = (0, _operation.op)({
  step_
});
exports.step = step;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stridedSlice = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _slice = require("./slice");

var _slice_util = require("./slice_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts a strided slice of a tensor.
 *
 * Roughly speaking, this op extracts a slice of size (end-begin)/stride from
 * the given input tensor (x). Starting at the location specified by begin the
 * slice continues by adding stride to the index until all dimensions are not
 * less than end. Note that a stride can be negative, which causes a reverse
 * slice.
 *
 * ```js
 * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],
 *    [3, 2, 3]);
 * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]
 * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],
 *                                                     // [4, 4, 4]]]
 * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],
 *                                                     // [3, 3, 3]]]
 * ```
 *
 * @param x The tensor to stride slice.
 * @param begin The coordinates to start the slice from.
 * @param end: The coordinates to end the slice at.
 * @param strides: The size of the slice.
 * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param endMask: If the ith bit of endMask is set, end[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param shrinkAxisMask: a bitmask where bit i implies that
 * the ith specification should shrink the dimensionality. begin and end must
 * imply a slice of size 1 in the dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function stridedSlice_(x, begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {
  let $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'stridedSlice');

  const forward = backend => {
    if (strides == null) {
      strides = new Array(begin.length);
    }

    const ellipsisAxes = (0, _slice_util.maskToAxes)(ellipsisMask);

    if (ellipsisAxes.length > 1) {
      throw new Error('Multiple ellipses in slice is not allowed.');
    }

    if (ellipsisMask !== 0 && newAxisMask !== 0) {
      throw new Error('Using both ellipsisMask and newAxisMask is not yet supported.');
    }

    if (ellipsisMask !== 0 && shrinkAxisMask !== 0) {
      throw new Error('Using both ellipsisMask and shrinkAxisMask is not yet supported.');
    }

    const numInterpolatedAxes = $x.rank - begin.length; // Expand the dims of x based on the newAxisMask.

    const expandAxes = (0, _slice_util.maskToAxes)(newAxisMask);
    const newShape = $x.shape.slice();
    expandAxes.forEach(axis => {
      begin[axis] = 0;
      end[axis] = 1;
      newShape.splice(axis, 0, 1);
    });
    $x = (0, _reshape.reshape)($x, newShape);
    const {
      begin: normalizedBegin,
      end: normalizedEnd,
      strides: normalizedStrides
    } = (0, _slice_util.getNormalizedAxes)($x.shape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask);
    begin = normalizedBegin;
    end = normalizedEnd;
    strides = normalizedStrides;
    const shrinkAxes = (0, _slice_util.maskToAxes)(shrinkAxisMask); // Adjust the ends based on the shrink mask.

    shrinkAxes.forEach(axis => {
      end[axis] = begin[axis] + 1;
      strides[axis] = 1;
    }); // Figure out the output shape.

    const size = (0, _slice_util.computeOutShape)(begin, end, strides); // Remove the axes based on shrinkMask.

    const outShape = size.filter((_, axis) => shrinkAxes.indexOf(axis) === -1);
    const nonStrided = strides.every(v => v === 1);

    if (nonStrided) {
      return (0, _reshape.reshape)((0, _slice.slice)($x, begin, size), outShape);
    }

    const res = backend.stridedSlice($x, begin, end, strides);
    return (0, _reshape.reshape)(res, outShape);
  };

  const inputs = {
    x: $x
  };
  const attrs = {
    begin,
    end,
    strides,
    beginMask,
    endMask,
    ellipsisMask,
    newAxisMask,
    shrinkAxisMask
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.StridedSlice, attrs);
}

const stridedSlice = (0, _operation.op)({
  stridedSlice_
});
exports.stridedSlice = stridedSlice;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js","./slice_util":"node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/tan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tan = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.tan().print();  // or tf.tan(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function tan_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'tan');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernelFunc((backend, save) => {
    const res = backend.tan($x);
    save([$x]);
    return res;
  }, inputs, null
  /* grad */
  , _kernel_names.Tan);
}

const tan = (0, _operation.op)({
  tan_
});
exports.tan = tan;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor2d = tensor2d;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor2d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor2d([[1, 2], [3, 4]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided, it is inferred from
 *     `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor2d(values, shape, dtype) {
  (0, _util.assertNonNull)(values);

  if (shape != null && shape.length !== 2) {
    throw new Error('tensor2d() requires shape to have two numbers');
  }

  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);

  if (inferredShape.length !== 2 && inferredShape.length !== 1) {
    throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');
  }

  if (inferredShape.length === 1 && shape == null) {
    throw new Error('tensor2d() requires shape to be provided when `values` ' + 'are a flat/TypedArray');
  }

  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./tensor_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/tensor4d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor4d = tensor4d;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor4d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor4d(values, shape, dtype) {
  (0, _util.assertNonNull)(values);

  if (shape != null && shape.length !== 4) {
    throw new Error('tensor4d() requires shape to have four numbers');
  }

  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);

  if (inferredShape.length !== 4 && inferredShape.length !== 1) {
    throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');
  }

  if (inferredShape.length === 1 && shape == null) {
    throw new Error('tensor4d() requires shape to be provided when `values` ' + 'are a flat array');
  }

  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./tensor_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/tensor5d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor5d = tensor5d;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor5d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor5d([[[[[1], [2]], [[3], [4]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor5d(values, shape, dtype) {
  (0, _util.assertNonNull)(values);

  if (shape != null && shape.length !== 5) {
    throw new Error('tensor5d() requires shape to have five numbers');
  }

  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);

  if (inferredShape.length !== 5 && inferredShape.length !== 1) {
    throw new Error('tensor5d() requires values to be ' + 'number[][][][][] or flat/TypedArray');
  }

  if (inferredShape.length === 1 && shape == null) {
    throw new Error('tensor5d() requires shape to be provided when `values` ' + 'are a flat array');
  }

  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./tensor_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/tensor6d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor6d = tensor6d;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor6d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor6d(values, shape, dtype) {
  (0, _util.assertNonNull)(values);

  if (shape != null && shape.length !== 6) {
    throw new Error('tensor6d() requires shape to have six numbers');
  }

  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);

  if (inferredShape.length !== 6 && inferredShape.length !== 1) {
    throw new Error('tensor6d() requires values to be number[][][][][][] or ' + 'flat/TypedArray');
  }

  if (inferredShape.length === 1 && shape == null) {
    throw new Error('tensor6d() requires shape to be provided when `values` ' + 'are a flat array');
  }

  shape = shape || inferredShape;
  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./tensor_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/topk.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.topk = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Finds the values and indices of the `k` largest entries along the last
 * dimension.
 *
 * If the input is a vector (rank=1), finds the k largest entries in the vector
 * and outputs their values and indices as vectors. Thus values[j] is the j-th
 * largest entry in input, and its index is indices[j].
 * For higher rank inputs, computes the top k entries along the last dimension.
 *
 * If two elements are equal, the lower-index element appears first.
 *
 * ```js
 * const a = tf.tensor2d([[1, 5], [4, 3]]);
 * const {values, indices} = tf.topk(a);
 * values.print();
 * indices.print();
 * ```
 * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.
 * @param k Number of top elements to look for along the last dimension.
 * @param sorted If true, the resulting `k` elements will be sorted by the
 *     values in descending order.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
function topk_(x, k = 1, sorted = true) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'topk');

  if ($x.rank === 0) {
    throw new Error('topk() expects the input to be of rank 1 or higher');
  }

  const lastDim = $x.shape[$x.shape.length - 1];

  if (k > lastDim) {
    throw new Error(`'k' passed to topk() must be <= the last dimension (${lastDim}) ` + `but got ${k}`);
  }

  const inputs = {
    x: $x
  };
  const attrs = {
    k,
    sorted
  };

  const [values, indices] = _engine.ENGINE.runKernelFunc(b => b.topk($x, k, sorted), inputs, null
  /* grad */
  , _kernel_names.TopK, attrs);

  return {
    values,
    indices
  };
}

const topk = (0, _operation.op)({
  topk_
});
exports.topk = topk;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.truncatedNormal = void 0;

var _buffer = require("./buffer");

var _operation = require("./operation");

var _rand_util = require("./rand_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with values sampled from a truncated normal
 * distribution.
 *
 * ```js
 * tf.truncatedNormal([2, 2]).print();
 * ```
 *
 * The generated values follow a normal distribution with specified mean and
 * standard deviation, except that values whose magnitude is more than 2
 * standard deviations from the mean are dropped and re-picked.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output tensor.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function truncatedNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
  if (dtype != null && dtype === 'bool') {
    throw new Error(`Unsupported data type $ { dtype }`);
  }

  const randGauss = new _rand_util.MPRandGauss(mean, stdDev, dtype, true
  /* truncated */
  , seed);
  const res = (0, _buffer.buffer)(shape, dtype);

  for (let i = 0; i < res.values.length; i++) {
    res.values[i] = randGauss.nextValue();
  }

  return res.toTensor();
}

const truncatedNormal = (0, _operation.op)({
  truncatedNormal_
});
exports.truncatedNormal = truncatedNormal;
},{"./buffer":"node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./rand_util":"node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unsortedSegmentSum = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the sum along segments of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');
 * const numSegments = 3;
 *
 * x.unsortedSegmentSum(segmentIds, numSegments).print()
 * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)
 * ```
 * @param x The `tf.Tensor` that will be summed along its segments.
 * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s
 * dimension along the `axis`.  Maps each element of `x` to a segment.
 * @param numSegments The number of distinct `segmentIds`.
 *
 * @doc {heading: 'Operations', subheading: 'Segment'}
 */
function unsortedSegmentSum_(x, segmentIds, numSegments) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'unsortedSegmentSum');
  const $segmentIds = (0, _tensor_util_env.convertToTensor)(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');
  (0, _util.assert)((0, _util.isInt)(numSegments), () => 'numSegments must be of dtype int');
  const inputs = {
    x: $x,
    segmentIds: $segmentIds
  };
  const attrs = {
    numSegments
  };

  const forward = (backend, save) => {
    const res = backend.unsortedSegmentSum($x, $segmentIds, numSegments);
    save([$segmentIds]);
    return res;
  };

  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.UnsortedSegmentSum, attrs);
}

const unsortedSegmentSum = (0, _operation.op)({
  unsortedSegmentSum_
});
exports.unsortedSegmentSum = unsortedSegmentSum;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unstack = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * tf.unstack(a).forEach(tensor => tensor.print());
 * ```
 *
 * @param x A tensor object.
 * @param axis The axis to unstack along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function unstack_(x, axis = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'unstack');
  util.assert(axis >= -$x.shape.length && axis < $x.shape.length, () => `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);

  if (axis < 0) {
    axis += $x.shape.length;
  }

  const inputs = {
    value: $x
  };
  const attrs = {
    axis
  };

  const forward = backend => backend.unstack($x, axis);

  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.Unpack, attrs);
}

const unstack = (0, _operation.op)({
  unstack_
});
exports.unstack = unstack;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/variable.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.variable = variable;

var _engine = require("../engine");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a new variable with the provided initial value.
 * ```js
 * const x = tf.variable(tf.tensor([1, 2, 3]));
 * x.assign(tf.tensor([4, 5, 6]));
 *
 * x.print();
 * ```
 *
 * @param initialValue Initial value for the tensor.
 * @param trainable If true, optimizers are allowed to update it.
 * @param name Name of the variable. Defaults to a unique id.
 * @param dtype If set, initialValue will be converted to the given type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function variable(initialValue, trainable = true, name, dtype) {
  return _engine.ENGINE.makeVariable(initialValue, trainable, name, dtype);
}
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js"}],"node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.whereImpl = whereImpl;

var _buffer = require("../ops/buffer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** An implementation of the Where kernel shared between cpu and webgl */
function whereImpl(condShape, condVals) {
  const indices = [];

  for (let i = 0; i < condVals.length; i++) {
    if (condVals[i]) {
      indices.push(i);
    }
  }

  const inBuffer = (0, _buffer.buffer)(condShape, 'int32');
  const out = (0, _buffer.buffer)([indices.length, condShape.length], 'int32');

  for (let i = 0; i < indices.length; i++) {
    const loc = inBuffer.indexToLoc(indices[i]);
    const offset = i * condShape.length;
    out.values.set(loc, offset);
  }

  return out.toTensor();
}
},{"../ops/buffer":"node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.whereAsync = void 0;

var _where_impl = require("../backends/where_impl");

var _tensor_util_env = require("../tensor_util_env");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the coordinates of true elements of condition.
 *
 * The coordinates are returned in a 2-D tensor where the first dimension (rows)
 * represents the number of true elements, and the second dimension (columns)
 * represents the coordinates of the true elements. Keep in mind, the shape of
 * the output tensor can vary depending on how many true values there are in
 * input. Indices are output in row-major order. The resulting tensor has the
 * shape `[numTrueElems, condition.rank]`.
 *
 * This is analogous to calling the python `tf.where(cond)` without an x or y.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const result = await tf.whereAsync(cond);
 * result.print();
 * ```
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
async function whereAsync_(condition) {
  const $condition = (0, _tensor_util_env.convertToTensor)(condition, 'condition', 'whereAsync', 'bool');
  const vals = await $condition.data();
  const res = (0, _where_impl.whereImpl)($condition.shape, vals);

  if (condition !== $condition) {
    $condition.dispose();
  }

  return res;
}

const whereAsync = whereAsync_;
exports.whereAsync = whereAsync;
},{"../backends/where_impl":"node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/boolean_mask.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.booleanMaskAsync = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _gather = require("./gather");

var _reshape = require("./reshape");

var _squeeze = require("./squeeze");

var _where_async = require("./where_async");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Apply boolean mask to tensor.
 *
 * ```js
 * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);
 * const mask = tf.tensor1d([1, 0, 1], 'bool');
 * const result = await tf.booleanMaskAsync(tensor, mask);
 * result.print();
 * ```
 *
 * @param tensor N-D tensor.
 * @param mask K-D boolean tensor, K <= N and K must be known statically.
 * @param axis A 0-D int Tensor representing the axis in tensor to mask from.
 *     By default, axis is 0 which will mask from the first dimension.
 *     Otherwise K + axis <= N.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
async function booleanMaskAsync_(tensor, mask, axis) {
  const $tensor = (0, _tensor_util_env.convertToTensor)(tensor, 'tensor', 'boolMask');
  const $mask = (0, _tensor_util_env.convertToTensor)(mask, 'mask', 'boolMask', 'bool');
  const axisFrom = axis == null ? 0 : axis;
  const maskDim = $mask.rank;
  const tensorShape = $tensor.shape;
  util.assert(maskDim > 0, () => 'mask cannot be scalar');
  util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);
  let leadingSize = 1;

  for (let i = axisFrom; i < axisFrom + maskDim; i++) {
    leadingSize *= tensorShape[i];
  }

  const targetTensorShape = tensorShape.slice(0, axisFrom).concat([leadingSize], tensorShape.slice(axisFrom + maskDim));
  const reshapedTensor = (0, _reshape.reshape)($tensor, targetTensorShape);
  const reshapedMask = (0, _reshape.reshape)($mask, [-1]);
  const positivePositions = await (0, _where_async.whereAsync)(reshapedMask);
  const indices = (0, _squeeze.squeeze)(positivePositions, [1]);
  const res = (0, _gather.gather)(reshapedTensor, indices, axisFrom); // Ensure no memory leak.

  if (tensor !== $tensor) {
    $tensor.dispose();
  }

  if (mask !== $mask) {
    $mask.dispose();
  }

  indices.dispose();
  reshapedTensor.dispose();
  reshapedMask.dispose();
  positivePositions.dispose();
  return res;
}

const booleanMaskAsync = booleanMaskAsync_;
exports.booleanMaskAsync = booleanMaskAsync;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./gather":"node_modules/@tensorflow/tfjs-core/dist/ops/gather.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./squeeze":"node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js","./where_async":"node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/compare.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notEqualStrict = exports.lessStrict = exports.lessEqualStrict = exports.greaterStrict = exports.greaterEqualStrict = exports.equalStrict = void 0;

var _globals = require("../globals");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _equal = require("./equal");

var _greater = require("./greater");

var _greater_equal = require("./greater_equal");

var _less = require("./less");

var _less_equal = require("./less_equal");

var _not_equal = require("./not_equal");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * @deprecated
 * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same
 * shape.
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same shape and dtype as
 *     `a`.
 */
function notEqualStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'notEqualStrict');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'notEqualStrict');
  (0, _util.assertShapesMatch)($a.shape, $b.shape, 'Error in notEqualStrict: ');
  return (0, _not_equal.notEqual)($a, $b);
}
/**
 * @deprecated
 * Strict version of `tf.less` that forces `a` and `b` to be of the same
 * shape.
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same shape and dtype as
 *     `a`.
 */


function lessStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'lessStrict');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'lessStrict');
  (0, _util.assertShapesMatch)($a.shape, $b.shape, 'Error in lessStrict: ');
  return (0, _less.less)($a, $b);
}

function equalStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'equalStrict');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'equalStrict');
  (0, _util.assertShapesMatch)($a.shape, $b.shape, 'Error in equalStrict: ');
  return (0, _equal.equal)($a, $b);
}

function lessEqualStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'lessEqualStrict');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'lessEqualStrict');
  (0, _util.assertShapesMatch)($a.shape, $b.shape, 'Error in lessEqualStrict: ');
  return (0, _less_equal.lessEqual)($a, $b);
}

function greaterStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'greaterStrict');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'greaterStrict');
  (0, _util.assertShapesMatch)($a.shape, $b.shape, 'Error in greaterStrict: ');
  return (0, _greater.greater)($a, $b);
}

function greaterEqualStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'greaterEqualStrict');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'greaterEqualStrict');
  (0, _util.assertShapesMatch)($a.shape, $b.shape, 'Error in greaterEqualStrict: ');
  return (0, _greater_equal.greaterEqual)($a, $b);
}

const equalStrict = (0, _operation.op)({
  equalStrict_
});
exports.equalStrict = equalStrict;
const greaterEqualStrict = (0, _operation.op)({
  greaterEqualStrict_
});
exports.greaterEqualStrict = greaterEqualStrict;
const greaterStrict = (0, _operation.op)({
  greaterStrict_
});
exports.greaterStrict = greaterStrict;
const lessEqualStrict = (0, _operation.op)({
  lessEqualStrict_
});
exports.lessEqualStrict = lessEqualStrict;
const lessStrict = (0, _operation.op)({
  lessStrict_
});
exports.lessStrict = lessStrict;
const notEqualStrict = (0, _operation.op)({
  notEqualStrict_
});
exports.notEqualStrict = notEqualStrict;
},{"../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./equal":"node_modules/@tensorflow/tfjs-core/dist/ops/equal.js","./greater":"node_modules/@tensorflow/tfjs-core/dist/ops/greater.js","./greater_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js","./less":"node_modules/@tensorflow/tfjs-core/dist/ops/less.js","./less_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js","./not_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subStrict = exports.squaredDifferenceStrict = exports.powStrict = exports.mulStrict = exports.modStrict = exports.minimumStrict = exports.maximumStrict = exports.divStrict = exports.addStrict = void 0;

var _globals = require("../globals");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _add = require("./add");

var _div = require("./div");

var _maximum = require("./maximum");

var _minimum = require("./minimum");

var _mod = require("./mod");

var _mul = require("./mul");

var _operation = require("./operation");

var _pow = require("./pow");

var _squared_difference = require("./squared_difference");

var _sub = require("./sub");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * @deprecated
 * Adds two `tf.Tensor`s element-wise, A + B.
 *
 * Inputs must be the same shape. For broadcasting support, use add() instead.
 *
 * @param a The first Tensor to add element-wise.
 * @param b The second Tensor to add element-wise.
 */
function addStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'addStrict');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'addStrict');
  util.assertShapesMatch($a.shape, $b.shape, 'Error in addStrict: ');
  return (0, _add.add)($a, $b);
}
/**
 * @deprecated
 * Subtracts two `tf.Tensor`s element-wise, A - B. Inputs must
 * be the same shape.
 *
 * For broadcasting support, use `tf.sub` instead.
 *
 * @param a The first Tensor to subtract element-wise.
 * @param b The second Tensor to subtract element-wise.
 */


function subStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'subStrict');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'subStrict');
  util.assertShapesMatch($a.shape, $b.shape, 'Error in subStrict: ');
  return (0, _sub.sub)($a, $b);
}
/**
 * @deprecated
 * Computes the power of one `tf.Tensor` to another. Inputs must
 * be the same shape.
 *
 * For broadcasting support, use `tf.pow` instead.
 *
 * @param base The base tensor to pow element-wise.
 * @param exp The exponent tensor to pow element-wise.
 */


function powStrict_(base, exp) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  util.assertShapesMatch(base.shape, exp.shape, 'Error in powStrict: ');
  return (0, _pow.pow)(base, exp);
}
/**
 * @deprecated
 * Multiplies two `tf.Tensor`s element-wise, A * B.
 *
 * Inputs must be the same shape. For broadcasting support, use `tf.mul`.
 *
 * @param a The first tensor to multiply.
 * @param b The first tensor to multiply. Must have the same
 *    dtype as `a`.
 */


function mulStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'mul');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'mul');
  util.assertShapesMatch($a.shape, $b.shape, 'Error in multiplyStrict: ');
  return (0, _mul.mul)($a, $b);
}
/**
 * @deprecated
 * Divides two `tf.Tensor`s element-wise, A / B. Inputs must
 * be the same shape.
 *
 * @param a The first tensor as the numerator for element-wise division.
 * @param b The second tensor as the denominator for element-wise division.
 */


function divStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'div');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'div');
  util.assertShapesMatch($a.shape, $b.shape, 'Error in divideStrict: ');
  return (0, _div.div)($a, $b);
}
/**
 * @deprecated
 * Returns the mod of a and b (`a < b ? a : b`) element-wise. Inputs must
 * be the same shape. For broadcasting support, use mod().
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 */


function modStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'modStrict');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'modStrict');
  util.assertShapesMatch($a.shape, $b.shape, 'Error in modStrict: ');
  return (0, _mod.mod)($a, $b);
}
/**
 * @deprecated
 * Returns the min of a and b (`a < b ? a : b`) element-wise. Inputs must
 * be the same shape. For broadcasting support, use minimum().
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 */


function minimumStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'minimumStrict');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'minimumStrict');
  util.assertShapesMatch($a.shape, $b.shape, 'Error in minimumStrict: ');
  return (0, _minimum.minimum)($a, $b);
}
/**
 * @deprecated
 * Returns the max of a and b (`a > b ? a : b`) element-wise. Inputs must
 * be the same shape. For broadcasting support, use maximum().
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 */


function maximumStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'maximumStrict');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'maximumStrict');
  util.assertShapesMatch($a.shape, $b.shape, 'Error in maximumStrict: ');
  return (0, _maximum.maximum)($a, $b);
}
/**
 * @deprecated
 * Returns (a - b) * (a - b) element-wise.
 *
 * Inputs must be the same shape. For broadcasting support, use
 * `tf.squaredDifference` instead.
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 */


function squaredDifferenceStrict_(a, b) {
  (0, _globals.deprecationWarn)('strict variants of ops have been deprecated ' + 'and will be removed in future');
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'squaredDifferenceStrict');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'squaredDifferenceStrict');
  util.assertShapesMatch($a.shape, $b.shape, 'Error in squaredDifferenceStrict: ');
  return (0, _squared_difference.squaredDifference)($a, $b);
}

const addStrict = (0, _operation.op)({
  addStrict_
});
exports.addStrict = addStrict;
const divStrict = (0, _operation.op)({
  divStrict_
});
exports.divStrict = divStrict;
const maximumStrict = (0, _operation.op)({
  maximumStrict_
});
exports.maximumStrict = maximumStrict;
const minimumStrict = (0, _operation.op)({
  minimumStrict_
});
exports.minimumStrict = minimumStrict;
const modStrict = (0, _operation.op)({
  modStrict_
});
exports.modStrict = modStrict;
const mulStrict = (0, _operation.op)({
  mulStrict_
});
exports.mulStrict = mulStrict;
const powStrict = (0, _operation.op)({
  powStrict_
});
exports.powStrict = powStrict;
const squaredDifferenceStrict = (0, _operation.op)({
  squaredDifferenceStrict_
});
exports.squaredDifferenceStrict = squaredDifferenceStrict;
const subStrict = (0, _operation.op)({
  subStrict_
});
exports.subStrict = subStrict;
},{"../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","./div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","./maximum":"node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js","./minimum":"node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js","./mod":"node_modules/@tensorflow/tfjs-core/dist/ops/mod.js","./mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./pow":"node_modules/@tensorflow/tfjs-core/dist/ops/pow.js","./squared_difference":"node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js","./sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/norm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.norm = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _abs = require("./abs");

var axis_util = _interopRequireWildcard(require("./axis_util"));

var _max = require("./max");

var _min = require("./min");

var _operation = require("./operation");

var _pow = require("./pow");

var _reshape = require("./reshape");

var _scalar = require("./scalar");

var _sqrt = require("./sqrt");

var _square = require("./square");

var _sum = require("./sum");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the norm of scalar, vectors, and matrices.
 * This function can compute several different vector norms (the 1-norm, the
 * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)
 * and matrix norms (Frobenius, 1-norm, and inf-norm).
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.norm().print();  // or tf.norm(x)
 * ```
 *
 * @param x The input array.
 * @param ord Optional. Order of the norm. Supported norm types are
 * following:
 *
 *  | ord        | norm for matrices         | norm for vectors
 *  |------------|---------------------------|---------------------
 *  |'euclidean' |Frobenius norm             |2-norm
 *  |'fro'       |Frobenius norm	           |
 *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))
 *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))
 *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))
 *  |2           |                           |sum(abs(x)^2)^1/2*
 *
 * @param axis Optional. If axis is null (the default), the input is
 * considered a vector and a single vector norm is computed over the entire
 * set of values in the Tensor, i.e. norm(x, ord) is equivalent
 * to norm(x.reshape([-1]), ord). If axis is a integer, the input
 * is considered a batch of vectors, and axis determines the axis in x
 * over which to compute vector norms. If axis is a 2-tuple of integer it is
 * considered a batch of matrices and axis determines the axes in NDArray
 * over which to compute a matrix norm.
 * @param keepDims Optional. If true, the norm have the same dimensionality
 * as the input.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function norm_(x, ord = 'euclidean', axis = null, keepDims = false) {
  x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'norm');
  const norm = normImpl(x, ord, axis);
  let keepDimsShape = norm.shape;

  if (keepDims) {
    const axes = (0, _util.parseAxisParam)(axis, x.shape);
    keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);
  }

  return (0, _reshape.reshape)(norm, keepDimsShape);
}

function normImpl(x, p, axis = null) {
  if (x.rank === 0) {
    return (0, _abs.abs)(x);
  } // consider vector when no axis is specified


  if (x.rank !== 1 && axis === null) {
    return normImpl((0, _reshape.reshape)(x, [-1]), p, axis);
  } // vector


  if (x.rank === 1 || typeof axis === 'number' || Array.isArray(axis) && axis.length === 1) {
    if (p === 1) {
      return (0, _sum.sum)((0, _abs.abs)(x), axis);
    }

    if (p === Infinity) {
      return (0, _max.max)((0, _abs.abs)(x), axis);
    }

    if (p === -Infinity) {
      return (0, _min.min)((0, _abs.abs)(x), axis);
    }

    if (p === 'euclidean' || p === 2) {
      // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2
      return (0, _sqrt.sqrt)((0, _sum.sum)((0, _pow.pow)((0, _abs.abs)(x), (0, _scalar.scalar)(2, 'int32')), axis));
    }

    throw new Error(`Error in norm: invalid ord value: ${p}`);
  } // matrix (assumption axis[0] < axis[1])


  if (Array.isArray(axis) && axis.length === 2) {
    if (p === 1) {
      return (0, _max.max)((0, _sum.sum)((0, _abs.abs)(x), axis[0]), axis[1] - 1);
    }

    if (p === Infinity) {
      return (0, _max.max)((0, _sum.sum)((0, _abs.abs)(x), axis[1]), axis[0]);
    }

    if (p === -Infinity) {
      return (0, _min.min)((0, _sum.sum)((0, _abs.abs)(x), axis[1]), axis[0]);
    }

    if (p === 'fro' || p === 'euclidean') {
      // norm(x) = sqrt(sum(pow(x, 2)))
      return (0, _sqrt.sqrt)((0, _sum.sum)((0, _square.square)(x), axis));
    }

    throw new Error(`Error in norm: invalid ord value: ${p}`);
  }

  throw new Error(`Error in norm: invalid axis: ${axis}`);
}

const norm = (0, _operation.op)({
  norm_
});
exports.norm = norm;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./abs":"node_modules/@tensorflow/tfjs-core/dist/ops/abs.js","./axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./max":"node_modules/@tensorflow/tfjs-core/dist/ops/max.js","./min":"node_modules/@tensorflow/tfjs-core/dist/ops/min.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./pow":"node_modules/@tensorflow/tfjs-core/dist/ops/pow.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","./sqrt":"node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js","./square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","./sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/moving_average.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.movingAverage = void 0;

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _add = require("./add");

var _div = require("./div");

var _mul = require("./mul");

var _operation = require("./operation");

var _pow = require("./pow");

var _scalar = require("./scalar");

var _sub = require("./sub");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Compute the moving average of a variable.
 *
 * Without zeroDebias, the moving average operation is defined by:
 *   `v += delta`
 * where
 *   `delta = (1 - decay) * (x - v)`
 *
 * With zeroDebias (default), the `delta` term is scaled to debias the
 * effect of the (assumed) zero-initialization of `v`.
 *   `delta /= (1 - decay ^ step)`
 *
 * For more details on the zero-debiasing algorithm, see:
 *   https://arxiv.org/abs/1412.6980
 *
 * Note that this function is completely stateless and does not keep track of
 * step count. The step count needs to be maintained by the caller and passed
 * in as `step`.
 *
 * @param v The current moving average value.
 * @param x New input value, must have the same shape and dtype as `v`.
 * @param decay The decay factor. Typical values are 0.95 and 0.99.
 * @param step Step count.
 * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).
 * @returns The new moving average value.
 *
 * @doc {heading: 'Operations', subheading: 'Moving Average'}
 */
function movingAverage_(v, x, decay, step, zeroDebias = true) {
  const $v = (0, _tensor_util_env.convertToTensor)(v, 'v', 'movingAverage');
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'movingAverage');
  const $decay = (0, _tensor_util_env.convertToTensor)(decay, 'decay', 'movingAverage');
  (0, _tensor_util.assertTypesMatch)($v, $x);
  util.assert(util.arraysEqual($v.shape, $x.shape), () => 'Shape mismatch in v and x');
  const one = (0, _scalar.scalar)(1);
  const oneMinusDecay = (0, _sub.sub)(one, $decay);
  let update = (0, _mul.mul)((0, _sub.sub)($x, $v), oneMinusDecay);

  if (zeroDebias) {
    util.assert(step != null, () => 'When using zeroDebias: true, step is required.');
    const $step = (0, _tensor_util_env.convertToTensor)(step, 'step', 'movingAverage');
    update = (0, _div.div)(update, (0, _sub.sub)(one, (0, _pow.pow)($decay, $step)));
  }

  return (0, _add.add)($v, update);
}

const movingAverage = (0, _operation.op)({
  movingAverage_
});
exports.movingAverage = movingAverage;
},{"../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","./div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","./mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./pow":"node_modules/@tensorflow/tfjs-core/dist/ops/pow.js","./scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","./sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scatterND = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

var scatter_nd_util = _interopRequireWildcard(require("./scatter_nd_util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a new tensor by applying sparse updates to individual
 * values or slices within a zero tensor of the given shape tensor according to
 * indices. This operator is the inverse of the `tf.gatherND` operator which
 * extracts values or slices from a given tensor.
 *
 * ```js
 * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');
 * const updates = tf.tensor1d([9, 10, 11, 12]);
 * const shape = [8];
 * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]
 * ```
 *
 * @param indices The tensor contains the indices into the output tensor.
 * @param updates The tensor contains the value for the indices.
 * @param shape: The shape of the output tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function scatterND_(indices, updates, shape) {
  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'scatterND', 'int32');
  const $updates = (0, _tensor_util_env.convertToTensor)(updates, 'updates', 'scatterND');
  scatter_nd_util.validateInput($updates, $indices, shape);

  const forward = backend => {
    return backend.scatterND($indices, $updates, shape);
  };

  const inputs = {
    indices: $indices,
    updates: $updates
  };
  const attrs = {
    shape
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.ScatterNd, attrs);
}

const scatterND = (0, _operation.op)({
  scatterND_
});
exports.scatterND = scatterND;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./scatter_nd_util":"node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateInput = validateInput;

/**
 * Validate sparseToDense inputs.
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape number[]. Shape of the dense output tensor.
 * @param validateIndices boolean. indice validation is not supported, error
 * will be thrown if it is set.
 */
function validateInput(sparseIndices, sparseValues, outputShape, defaultValues) {
  if (sparseIndices.dtype !== 'int32') {
    throw new Error('tf.sparseToDense() expects the indices to be int32 type,' + ` but the dtype was ${sparseIndices.dtype}.`);
  }

  if (sparseIndices.rank > 2) {
    throw new Error('sparseIndices should be a scalar, vector, or matrix,' + ` but got shape ${sparseIndices.shape}.`);
  }

  const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;
  const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;

  if (outputShape.length !== numDims) {
    throw new Error('outputShape has incorrect number of elements:,' + ` ${outputShape.length}, should be: ${numDims}.`);
  }

  const numValues = sparseValues.size;

  if (!(sparseValues.rank === 0 || sparseValues.rank === 1 && numValues === numElems)) {
    throw new Error('sparseValues has incorrect shape ' + `${sparseValues.shape}, should be [] or [${numElems}]`);
  }

  if (sparseValues.dtype !== defaultValues.dtype) {
    throw new Error('sparseValues.dtype must match defaultValues.dtype');
  }
}
},{}],"node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseToDense = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var sparse_to_dense = _interopRequireWildcard(require("../ops/sparse_to_dense_util"));

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Converts a sparse representation into a dense tensor.
 *
 * Builds an array dense with shape outputShape such that:
 *
 * // If sparseIndices is scalar
 * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)
 *
 * // If sparseIndices is a vector, then for each i
 * dense[sparseIndices[i]] = sparseValues[i]
 *
 * // If sparseIndices is an n by d matrix, then for each i in [0, n)
 * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]
 * All other values in dense are set to defaultValue. If sparseValues is a
 * scalar, all sparse indices are set to this single value.
 *
 * If indices are repeated the final value is summed over all values for those
 * indices.
 *
 * ```js
 * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');
 * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');
 * const shape = [8];
 * tf.sparseToDense(indices, values, shape).print();
 * ```
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape Shape of the dense output tensor. the type is inferred.
 * @param defaultValue Scalar. Value to set for indices not specified in
 * sparseIndices. Defaults to zero.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function sparseToDense_(sparseIndices, sparseValues, outputShape, defaultValue = 0) {
  const $sparseIndices = (0, _tensor_util_env.convertToTensor)(sparseIndices, 'sparseIndices', 'sparseToDense', 'int32');
  const $sparseValues = (0, _tensor_util_env.convertToTensor)(sparseValues, 'sparseValues', 'sparseToDense');
  const $defaultValue = (0, _tensor_util_env.convertToTensor)(defaultValue, 'defaultValue', 'sparseToDense', $sparseValues.dtype);
  sparse_to_dense.validateInput($sparseIndices, $sparseValues, outputShape, $defaultValue);
  const inputs = {
    sparseIndices: $sparseIndices,
    sparseValues: $sparseValues,
    defaultValue: $defaultValue
  };
  const attrs = {
    outputShape
  };
  return _engine.ENGINE.runKernelFunc(backend => backend.sparseToDense($sparseIndices, $sparseValues, outputShape, $defaultValue), inputs, null
  /* grad */
  , _kernel_names.SparseToDense, attrs);
}

const sparseToDense = (0, _operation.op)({
  sparseToDense_
});
exports.sparseToDense = sparseToDense;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/sparse_to_dense_util":"node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense_util.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gatherND = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Gather slices from input tensor into a Tensor with shape specified by
 * `indices`.
 *
 * `indices` is an K-dimensional integer tensor, best thought of as a
 * (K-1)-dimensional tensor of indices into input, where each element defines a
 * slice of input:
 * output[\\(i_0, ..., i_{K-2}\\)] = input[indices[\\(i_0, ..., i_{K-2}\\)]]
 *
 * Whereas in `tf.gather`, `indices` defines slices into the first dimension of
 * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions
 * of input, where N = indices.shape[-1].
 *
 * The last dimension of indices can be at most the rank of input:
 * indices.shape[-1] <= input.rank
 *
 * The last dimension of `indices` corresponds to elements
 * (if indices.shape[-1] == input.rank) or slices
 * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of
 * input.
 * The output tensor has shape
 * indices.shape[:-1] + input.shape[indices.shape[-1]:]
 *
 * Note that on CPU, if an out of bound index is found, an error is returned. On
 * GPU, if an out of bound index is found, a 0 is stored in the corresponding
 * output value.
 *
 * ```js
 * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');
 * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);
 * tf.gatherND(input, indices).print() // [10, 11]
 * ```
 *
 * @param x The tensor from which to gather values.
 * @param indices Index tensor, must be of type int32.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function gatherND_(x, indices) {
  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'gatherND', 'int32');
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'gatherND');

  const forward = backend => {
    return backend.gatherND($x, $indices);
  };

  const inputs = {
    params: $x,
    indices: $indices
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.GatherNd);
}

const gatherND = (0, _operation.op)({
  gatherND_
});
exports.gatherND = gatherND;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/dropout_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNoiseShape = getNoiseShape;

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Normalize noise shape based on provided tensor and noise shape.
 *
 * @param x Tensor.
 * @param noiseShape The shape for the randomly generated keep/drop flags, as
 *   an array of numbers. Optional.
 * @returns Normalized noise shape.
 */
function getNoiseShape(x, noiseShape) {
  if (noiseShape == null) {
    return x.shape.slice();
  }

  if (util.arraysEqual(x.shape, noiseShape)) {
    return noiseShape;
  }

  if (x.shape.length === noiseShape.length) {
    const newDimension = [];

    for (let i = 0; i < x.shape.length; i++) {
      if (noiseShape[i] == null && x.shape[i] != null) {
        newDimension.push(x.shape[i]);
      } else {
        newDimension.push(noiseShape[i]);
      }
    }

    return newDimension;
  }

  return noiseShape;
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/dropout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dropout = void 0;

var _tensor = require("../tensor");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _add = require("./add");

var _div = require("./div");

var _dropout_util = require("./dropout_util");

var _floor = require("./floor");

var _mul = require("./mul");

var _operation = require("./operation");

var _random_uniform = require("./random_uniform");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes dropout.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 2, 1]);
 * const rate = 0.75;
 * const output = tf.dropout(x, rate);
 * output.print();
 * ```
 *
 * @param x A floating point Tensor or TensorLike.
 * @param rate A float in the range [0, 1). The probability that each element
 *   of x is discarded.
 * @param noiseShape An array of numbers of type int32, representing the
 * shape for randomly generated keep/drop flags. If the noiseShape has null
 * value, it will be automatically replaced with the x's relative dimension
 * size. Optional.
 * @param seed Used to create random seeds. Optional.
 * @returns A Tensor of the same shape of x.
 *
 * @doc {heading: 'Operations', subheading: 'Dropout'}
 */
function dropout_(x, rate, noiseShape, seed) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'dropout');
  util.assert($x.dtype === 'float32', () => `x has to be a floating point tensor since it's going to be ` + `scaled, but got a ${$x.dtype} tensor instead.`);
  util.assert(rate >= 0 && rate < 1, () => `rate must be a float in the range [0, 1), but got ${rate}.`);

  if (rate === 0) {
    return x instanceof _tensor.Tensor ? $x.clone() : $x;
  }

  const $noiseShape = (0, _dropout_util.getNoiseShape)($x, noiseShape);
  const keepProb = 1 - rate;
  const multiplier = (0, _div.div)((0, _floor.floor)((0, _add.add)((0, _random_uniform.randomUniform)($noiseShape, 0, 1, 'float32', seed), keepProb)), keepProb);
  return (0, _mul.mul)($x, multiplier);
}

const dropout = (0, _operation.op)({
  dropout_
});
exports.dropout = dropout;
},{"../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","./div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","./dropout_util":"node_modules/@tensorflow/tfjs-core/dist/ops/dropout_util.js","./floor":"node_modules/@tensorflow/tfjs-core/dist/ops/floor.js","./mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./random_uniform":"node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enclosingPowerOfTwo = enclosingPowerOfTwo;
exports.cosineWindow = cosineWindow;

var _tensor1d = require("./tensor1d");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function enclosingPowerOfTwo(value) {
  // Return 2**N for integer N such that 2**N >= value.
  return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));
}

function cosineWindow(windowLength, a, b) {
  const even = 1 - windowLength % 2;
  const newValues = new Float32Array(windowLength);

  for (let i = 0; i < windowLength; ++i) {
    const cosArg = 2.0 * Math.PI * i / (windowLength + even - 1);
    newValues[i] = a - b * Math.cos(cosArg);
  }

  return (0, _tensor1d.tensor1d)(newValues, 'float32');
}
},{"./tensor1d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/in_top_k.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inTopKAsync = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor = require("./tensor");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns whether the targets are in the top K predictions.
 *
 * ```js
 * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);
 * const targets = tf.tensor1d([2, 0]);
 * const precision = await tf.inTopKAsync(predictions, targets);
 * precision.print();
 * ```
 * @param predictions 2-D or higher `tf.Tensor` with last dimension being
 *     at least `k`.
 * @param targets 1-D or higher `tf.Tensor`.
 * @param k Optional Number of top elements to look at for computing precision,
 *     default to 1.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
async function inTopKAsync_(predictions, targets, k = 1) {
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'inTopK');
  const $targets = (0, _tensor_util_env.convertToTensor)(targets, 'targets', 'inTopK');
  (0, _util.assert)($predictions.rank > 1, () => 'inTopK() expects the predictions to be of rank 2 or higher, ' + `but got ${$predictions.rank}`);
  (0, _util.assert)($predictions.rank - 1 === $targets.rank, () => `predictions rank should be 1 larger than ` + `targets rank, but got predictions rank ` + `${$predictions.rank} and targets rank ${$targets.rank}`);
  (0, _util.assertShapesMatch)($predictions.shape.slice(0, $predictions.shape.length - 1), $targets.shape, `predictions's shape should be align with the targets' shape, ` + 'except the last dimension.');
  const lastDim = $predictions.shape[$predictions.shape.length - 1];
  (0, _util.assert)(k > 0 && k <= lastDim, () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` + `dimension (${lastDim}), but got ${k}`);
  const predictionsVals = await $predictions.data();
  const targetsVals = await $targets.data(); // Reshape predictionsVals into a 2d tensor [batch, lastDim]
  // and look up topK along lastDim.

  const [batch, size] = [predictionsVals.length / lastDim, lastDim];
  const precision = (0, _util.getTypedArrayFromDType)('bool', batch);

  for (let b = 0; b < batch; b++) {
    const offset = b * size;
    const vals = predictionsVals.subarray(offset, offset + size);
    const valAndInd = [];

    for (let i = 0; i < vals.length; i++) {
      valAndInd.push({
        value: vals[i],
        index: i
      });
    }

    valAndInd.sort((a, b) => b.value - a.value);
    precision[b] = 0;

    for (let i = 0; i < k; i++) {
      if (valAndInd[i].index === targetsVals[b]) {
        precision[b] = 1;
        break;
      }
    }
  }

  if (predictions !== $predictions) {
    $predictions.dispose();
  }

  if (targets !== $targets) {
    $targets.dispose();
  } // Output precision has the same shape as targets.


  return (0, _tensor.tensor)(precision, $targets.shape, 'bool');
}

const inTopKAsync = inTopKAsync_;
exports.inTopKAsync = inTopKAsync;
},{"../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./tensor":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2DBackpropFilter = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the derivative of the filter of a 2D convolution.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.
 * @param dy The dy image, of rank 4 or rank 3, of shape
 *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.
 * @param filterShape The shape of the filter, length 4,
 *     [filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
 *     rounding mode used when computing output dimensions if pad is a
 *     number. If none is provided, it will not round and error if the output
 *     is of fractional size.
 */
function conv2DBackpropFilter_(x, dy, filterShape, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {
  let x4D = x;

  if (x.rank === 3) {
    x4D = (0, _reshape.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
  }

  let dy4D = dy;

  if (dy4D.rank === 3) {
    dy4D = (0, _reshape.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` + `${x4D.shape}.`);
  util.assert(dy4D.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` + `${dy4D.shape}.`);
  util.assert(filterShape.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` + `${filterShape}.`);
  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];
  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];
  util.assert(inDepth === filterShape[2], () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` + `match input depth in filter (${filterShape[2]}.`);
  util.assert(outDepth === filterShape[3], () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` + `match output depth for filter (${filterShape[3]}).`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in conv2dDerFilter: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const forward = backend => {
    const dilations = 1;
    const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);
    const convInfo = conv_util.computeConv2DInfo(x4D.shape, filterShape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
    return backend.conv2dDerFilter(x4D, dy4D, convInfo);
  };

  const inputs = {
    x: x4D,
    dy: dy4D
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dimRoundingMode
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null, _kernel_names.Conv2DBackpropFilter, attrs);
}

const conv2DBackpropFilter = (0, _operation.op)({
  conv2DBackpropFilter_
});
exports.conv2DBackpropFilter = conv2DBackpropFilter;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFusedDyActivation = getFusedDyActivation;
exports.getFusedBiasGradient = getFusedBiasGradient;
exports.applyActivation = applyActivation;
exports.shouldFuse = void 0;

var broadcast_util = _interopRequireWildcard(require("./broadcast_util"));

var _elu = require("./elu");

var _mul = require("./mul");

var _prelu = require("./prelu");

var _relu = require("./relu");

var _relu2 = require("./relu6");

var _reshape = require("./reshape");

var _step = require("./step");

var _sum = require("./sum");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Returns gradient for fused activation.
function getFusedDyActivation(dy, y, activation) {
  if (activation == null || activation === 'linear') {
    return dy;
  }

  if (activation === 'relu') {
    return (0, _mul.mul)(dy, (0, _step.step)(y));
  }

  throw new Error(`Cannot compute gradient for fused activation ${activation}.`);
} // Returns gradient for fused bias.


function getFusedBiasGradient(bias, dyActivation) {
  let res = dyActivation;
  const reduceAxes = broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);

  if (reduceAxes.length > 0) {
    res = (0, _sum.sum)(res, reduceAxes);
  }

  return (0, _reshape.reshape)(res, bias.shape);
}

function applyActivation(x, activation, preluActivationWeights) {
  if (activation === 'linear') {
    return x;
  } else if (activation === 'relu') {
    return (0, _relu.relu)(x);
  } else if (activation === 'elu') {
    return (0, _elu.elu)(x);
  } else if (activation === 'relu6') {
    return (0, _relu2.relu6)(x);
  } else if (activation === 'prelu') {
    return (0, _prelu.prelu)(x, preluActivationWeights);
  }

  throw new Error(`Unknown fused activation ${activation}.`);
} // Whether we should call fused ops.


const shouldFuse = (gradientDepth, activation) => {
  const gradientMode = gradientDepth > 0;
  return !gradientMode || activation === 'linear';
};

exports.shouldFuse = shouldFuse;
},{"./broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./elu":"node_modules/@tensorflow/tfjs-core/dist/ops/elu.js","./mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","./prelu":"node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js","./relu":"node_modules/@tensorflow/tfjs-core/dist/ops/relu.js","./relu6":"node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./step":"node_modules/@tensorflow/tfjs-core/dist/ops/step.js","./sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/fused/conv2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2d = void 0;

var _engine = require("../../engine");

var _gradients = require("../../gradients");

var _kernel_names = require("../../kernel_names");

var _tensor_util = require("../../tensor_util");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _add = require("../add");

var broadcast_util = _interopRequireWildcard(require("../broadcast_util"));

var _conv2d = require("../conv2d");

var _conv2d_backprop_filter = require("../conv2d_backprop_filter");

var _conv2d_backprop_input = require("../conv2d_backprop_input");

var conv_util = _interopRequireWildcard(require("../conv_util"));

var _fused_util = require("../fused_util");

var _operation = require("../operation");

var _reshape = require("../reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes a 2D convolution over the input x, optionally fused with adding a
 * bias and applying an activation.
 *
 * ```js
 * const inputDepth = 2;
 * const inShape = [2, 2, 2, inputDepth];
 * const outputDepth = 2;
 * const fSize = 1;
 * const pad = 0;
 * const strides = 1;
 *
 * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
 * 16], inShape);
 * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,
 * outputDepth]);
 *
 * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',
 * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();
 * ```
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid` output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`) to be
 *     applied
 *      after biasAdd.
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 */
function fusedConv2d_({
  x,
  filter,
  strides,
  pad,
  dataFormat = 'NHWC',
  dilations = [1, 1],
  dimRoundingMode,
  bias,
  activation = 'linear',
  preluActivationWeights
}) {
  activation = activation || 'linear';

  if ((0, _fused_util.shouldFuse)(_engine.ENGINE.state.gradientDepth, activation) === false) {
    let result = (0, _conv2d.conv2d)(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);

    if (bias != null) {
      result = (0, _add.add)(result, bias);
    }

    return (0, _fused_util.applyActivation)(result, activation, preluActivationWeights);
  }

  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'conv2d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'conv2d');
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ` + `${x4D.rank}.`);
  util.assert($filter.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in fused conv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in conv2d: depth of input (${x4D.shape[3]}) must match ` + `input depth for filter ${$filter.shape[2]}.`);
  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  util.assert(dataFormat === 'NHWC', () => `Error in conv2d: got dataFormat of ${dataFormat} but only NHWC is currently supported.`);
  const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);
  let $bias;

  if (bias != null) {
    $bias = (0, _tensor_util_env.convertToTensor)(bias, 'bias', 'fused conv2d');
    [$bias] = (0, _tensor_util.makeTypesMatch)($bias, $x);
    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
  }

  let $preluActivationWeights;

  if (preluActivationWeights != null) {
    $preluActivationWeights = (0, _tensor_util_env.convertToTensor)(preluActivationWeights, 'prelu weights', 'fused conv2d');
  }

  const grad = (dy, saved) => {
    const [$filter, x4D, y, $bias] = saved;
    const dyActivation = (0, _fused_util.getFusedDyActivation)(dy, y, activation);
    util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of fused conv2D: ' + `dilation rates greater than 1 ` + `are not yet supported in gradients. Got dilations '${dilations}'`);
    const xDer = (0, _conv2d_backprop_input.conv2DBackpropInput)(x4D.shape, dyActivation, $filter, strides, pad);
    const filterDer = (0, _conv2d_backprop_filter.conv2DBackpropFilter)(x4D, dyActivation, $filter.shape, strides, pad);
    const der = [xDer, filterDer];

    if ($bias != null) {
      const biasDer = (0, _fused_util.getFusedBiasGradient)($bias, dyActivation);
      der.push(biasDer);
    }

    return der;
  };

  const forward = backend => {
    const res = backend.fusedConv2d({
      input: x4D,
      filter: $filter,
      convInfo,
      bias: $bias,
      activation,
      preluActivationWeights: $preluActivationWeights
    });
    return res;
  };

  const inputs = {
    x: x4D,
    filter: $filter,
    bias: $bias,
    preluActivationWeights: $preluActivationWeights
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode,
    activation
  }; // Depending on the the params passed in we will have different number of
  // inputs and thus a a different number of elements in the gradient.

  if (bias == null) {
    const customOp = (0, _gradients.customGrad)((x4D, filter, save) => {
      let res = _engine.ENGINE.runKernelFunc(forward, inputs, null
      /* grad */
      , _kernel_names.FusedConv2D, attrs);

      save([filter, x4D, res]);

      if (reshapedTo4D) {
        res = (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }

      return {
        value: res,
        gradFunc: grad
      };
    });
    return customOp(x4D, $filter);
  } else {
    const customOpWithBias = (0, _gradients.customGrad)((x4D, filter, bias, save) => {
      let res = _engine.ENGINE.runKernelFunc(forward, inputs, null
      /* grad */
      , _kernel_names.FusedConv2D, attrs);

      save([filter, x4D, res, bias]);

      if (reshapedTo4D) {
        res = (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }

      return {
        value: res,
        gradFunc: grad
      };
    });
    return customOpWithBias(x4D, $filter, $bias);
  }
}

const conv2d = (0, _operation.op)({
  fusedConv2d_
});
exports.conv2d = conv2d;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../gradients":"node_modules/@tensorflow/tfjs-core/dist/gradients.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js","../conv2d_backprop_filter":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js","../conv2d_backprop_input":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js","../conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","../fused_util":"node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthwiseConv2dNativeBackpropFilter = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNativeBackpropFilter_(x, dy, filterShape, convInfo) {
  let x4D = x;

  if (x.rank === 3) {
    x4D = (0, _reshape.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
  }

  let dy4D = dy;

  if (dy4D.rank === 3) {
    dy4D = (0, _reshape.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
  }

  const forward = backend => backend.depthwiseConv2DDerFilter(x4D, dy4D, convInfo);

  const inputs = {
    x: x4D,
    dy: dy4D
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null, _kernel_names.DepthwiseConv2dNativeBackpropFilter);
}

const depthwiseConv2dNativeBackpropFilter = (0, _operation.op)({
  depthwiseConv2dNativeBackpropFilter_
});
exports.depthwiseConv2dNativeBackpropFilter = depthwiseConv2dNativeBackpropFilter;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthwiseConv2dNativeBackpropInput = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, convInfo) {
  let dy4D = dy;
  let reshapedTo4D = false;

  if (dy.rank === 3) {
    reshapedTo4D = true;
    dy4D = (0, _reshape.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
  }

  const forward = backend => backend.depthwiseConv2DDerInput(dy4D, filter, convInfo);

  const inputs = {
    dy: dy4D
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null, _kernel_names.DepthwiseConv2dNativeBackpropInput);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const depthwiseConv2dNativeBackpropInput = (0, _operation.op)({
  depthwiseConv2dNativeBackpropInput_
});
exports.depthwiseConv2dNativeBackpropInput = depthwiseConv2dNativeBackpropInput;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/fused/depthwise_conv2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthwiseConv2d = void 0;

var _engine = require("../../engine");

var _gradients = require("../../gradients");

var _kernel_names = require("../../kernel_names");

var _tensor_util = require("../../tensor_util");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _add = require("../add");

var broadcast_util = _interopRequireWildcard(require("../broadcast_util"));

var conv_util = _interopRequireWildcard(require("../conv_util"));

var _depthwise_conv2d = require("../depthwise_conv2d");

var _depthwise_conv2d_native_backprop_filter = require("../depthwise_conv2d_native_backprop_filter");

var _depthwise_conv2d_native_backprop_input = require("../depthwise_conv2d_native_backprop_input");

var _fused_util = require("../fused_util");

var _operation = require("../operation");

var _reshape = require("../reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes depthwise 2D convolution, optionally fused with adding a
 * bias and applying an activation.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`).
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 */
function fusedDepthwiseConv2d_({
  x,
  filter,
  strides,
  pad,
  dataFormat = 'NHWC',
  dilations = [1, 1],
  dimRoundingMode,
  bias,
  activation = 'linear',
  preluActivationWeights
}) {
  if ((0, _fused_util.shouldFuse)(_engine.ENGINE.state.gradientDepth, activation) === false) {
    let result = (0, _depthwise_conv2d.depthwiseConv2d)(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);

    if (bias != null) {
      result = (0, _add.add)(result, bias);
    }

    return (0, _fused_util.applyActivation)(result, activation, preluActivationWeights);
  }

  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'depthwiseConv2d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'depthwiseConv2d');
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);
  util.assert($filter.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, ` + `but got rank ${$filter.rank}.`);
  util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in fused depthwiseConv2d: number of input channels ` + `(${x4D.shape[3]}) must match the inChannels dimension in ` + `filter ${$filter.shape[2]}.`);

  if (dilations == null) {
    dilations = [1, 1];
  }

  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in fused depthwiseConv2d: Either strides or dilations must ' + `be 1. Got strides ${strides} and dilations '${dilations}'`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in fused depthwiseConv2d: pad must be an integer when ` + `using dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true
  /* depthwise */
  );
  let $bias;

  if (bias != null) {
    $bias = (0, _tensor_util_env.convertToTensor)(bias, 'bias', 'fused conv2d');
    [$bias] = (0, _tensor_util.makeTypesMatch)($bias, $x);
    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
  }

  let $preluActivationWeights;

  if (preluActivationWeights != null) {
    $preluActivationWeights = (0, _tensor_util_env.convertToTensor)(preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');
  }

  const grad = (dy, saved) => {
    util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of fused depthwiseConv2d: dilation rates ' + `greater than 1 are not yet supported. Got dilations ` + `'${dilations}'`);
    const [$filter, x4D, y, bias] = saved;
    const dyActivation = (0, _fused_util.getFusedDyActivation)(dy, y, activation);
    const xDer = (0, _depthwise_conv2d_native_backprop_input.depthwiseConv2dNativeBackpropInput)(x4D.shape, dyActivation, $filter, convInfo);
    const filterDer = (0, _depthwise_conv2d_native_backprop_filter.depthwiseConv2dNativeBackpropFilter)(x4D, dyActivation, $filter.shape, convInfo);

    if (bias != null) {
      const biasDer = (0, _fused_util.getFusedBiasGradient)($bias, dyActivation);
      return [xDer, filterDer, biasDer];
    }

    return [xDer, filterDer];
  };

  const forward = backend => {
    const res = backend.fusedDepthwiseConv2D({
      input: x4D,
      filter: $filter,
      convInfo,
      bias: $bias,
      activation,
      preluActivationWeights: $preluActivationWeights
    });
    return res;
  };

  const inputs = {
    x: x4D,
    filter: $filter,
    bias: $bias,
    preluActivationWeights: $preluActivationWeights
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode,
    activation
  }; // Depending on the the params passed in we will have different number of
  // inputs and thus a a different number of elements in the gradient.

  if (bias == null) {
    const customOp = (0, _gradients.customGrad)((x4D, filter, save) => {
      let res = _engine.ENGINE.runKernelFunc(forward, inputs, null
      /* grad */
      , _kernel_names.FusedDepthwiseConv2D, attrs);

      save([filter, x4D, res]);

      if (reshapedTo4D) {
        res = (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }

      return {
        value: res,
        gradFunc: grad
      };
    });
    return customOp(x4D, $filter);
  } else {
    const customOpWithBias = (0, _gradients.customGrad)((x4D, filter, bias, save) => {
      let res = _engine.ENGINE.runKernelFunc(forward, inputs, null
      /* grad */
      , _kernel_names.FusedDepthwiseConv2D, attrs);

      save([filter, x4D, res, bias]);

      if (reshapedTo4D) {
        res = (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }

      return {
        value: res,
        gradFunc: grad
      };
    });
    return customOpWithBias(x4D, $filter, $bias);
  }
}

const depthwiseConv2d = (0, _operation.op)({
  fusedDepthwiseConv2d_
});
exports.depthwiseConv2d = depthwiseConv2d;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../gradients":"node_modules/@tensorflow/tfjs-core/dist/gradients.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","../depthwise_conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js","../depthwise_conv2d_native_backprop_filter":"node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js","../depthwise_conv2d_native_backprop_input":"node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js","../fused_util":"node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/fused/mat_mul.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matMul = void 0;

var _engine = require("../../engine");

var _gradients = require("../../gradients");

var _kernel_names = require("../../kernel_names");

var _tensor_util = require("../../tensor_util");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _add = require("../add");

var broadcast_util = _interopRequireWildcard(require("../broadcast_util"));

var _fused_util = require("../fused_util");

var _mat_mul = require("../mat_mul");

var _operation = require("../operation");

var _reshape = require("../reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the dot product of two matrices with optional activation and bias.
 *
 * ```js
 * const a = tf.tensor2d([-1, -2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const bias = tf.tensor2d([1, 2], [1, 2]);
 *
 * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();
 * ```
 *
 * @param obj An object with the following properties:
 * - `a` First matrix in dot product operation.
 * - `b` Second matrix in dot product operation.
 * - `transposeA` If true, `a` is transposed before multiplication.
 * - `transposeB` If true, `b` is transposed before multiplication.
 * - `bias` Matrix to be added to the result.
 * - `activation` Name of activation kernel (defaults to `linear`).
 * - `preluActivationWeights` Tensor of prelu weights.
 */
function fusedMatMul_({
  a,
  b,
  transposeA = false,
  transposeB = false,
  bias,
  activation = 'linear',
  preluActivationWeights
}) {
  if ((0, _fused_util.shouldFuse)(_engine.ENGINE.state.gradientDepth, activation) === false) {
    let result = (0, _mat_mul.matMul)(a, b, transposeA, transposeB);

    if (bias != null) {
      result = (0, _add.add)(result, bias);
    }

    return (0, _fused_util.applyActivation)(result, activation, preluActivationWeights);
  }

  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'fused matMul');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'fused matMul');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];
  const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];
  const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];
  const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];
  const outerDimsA = $a.shape.slice(0, -2);
  const outerDimsB = $b.shape.slice(0, -2);
  const batchDimA = util.sizeFromShape(outerDimsA);
  const batchDimB = util.sizeFromShape(outerDimsB);
  util.assert($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, () => `Error in fused matMul: inputs must have the same rank of at least ` + `2, got ranks ${$a.rank} and ${$b.rank}.`);
  util.assert(util.arraysEqual(outerDimsA, outerDimsB), () => `Error in fused matMul: outer dimensions (${outerDimsA}) and (` + `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} must match.`);
  util.assert(innerShapeA === innerShapeB, () => `Error in fused matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);
  const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);
  const a3D = transposeA ? (0, _reshape.reshape)($a, [batchDimA, innerShapeA, outerShapeA]) : (0, _reshape.reshape)($a, [batchDimA, outerShapeA, innerShapeA]);
  const b3D = transposeB ? (0, _reshape.reshape)($b, [batchDimB, outerShapeB, innerShapeB]) : (0, _reshape.reshape)($b, [batchDimB, innerShapeB, outerShapeB]);
  let $bias;

  if (bias != null) {
    $bias = (0, _tensor_util_env.convertToTensor)(bias, 'bias', 'fused matMul');
    [$bias] = (0, _tensor_util.makeTypesMatch)($bias, $a);
    broadcast_util.assertAndGetBroadcastShape(outShape, $bias.shape);
  }

  let $preluActivationWeights;

  if (preluActivationWeights != null) {
    $preluActivationWeights = (0, _tensor_util_env.convertToTensor)(preluActivationWeights, 'prelu weights', 'fused matMul');
  }

  const grad = (dy, saved) => {
    const [a3D, b3D, y, $bias] = saved; // we reshape dy because the result of the forward is not
    // necessarily going to be a 3d tensor due to a reshape done at the end of
    // the customOp.

    const dyActivation = (0, _fused_util.getFusedDyActivation)((0, _reshape.reshape)(dy, y.shape), y, activation);
    let aDer;
    let bDer;

    if (!transposeA && !transposeB) {
      aDer = (0, _mat_mul.matMul)(dyActivation, b3D, false, true);
      bDer = (0, _mat_mul.matMul)(a3D, dyActivation, true, false);
    } else if (!transposeA && transposeB) {
      aDer = (0, _mat_mul.matMul)(dyActivation, b3D, false, false);
      bDer = (0, _mat_mul.matMul)(dyActivation, a3D, true, false);
    } else if (transposeA && !transposeB) {
      aDer = (0, _mat_mul.matMul)(b3D, dyActivation, false, true);
      bDer = (0, _mat_mul.matMul)(a3D, dyActivation, false, false);
    } else {
      aDer = (0, _mat_mul.matMul)(b3D, dyActivation, true, true);
      bDer = (0, _mat_mul.matMul)(dyActivation, a3D, true, true);
    }

    if (bias != null) {
      const biasDer = (0, _fused_util.getFusedBiasGradient)($bias, dyActivation);
      return [aDer, bDer, biasDer];
    } else {
      return [aDer, bDer];
    }
  };

  const forward = backend => {
    const y = backend.fusedBatchMatMul({
      a: a3D,
      b: b3D,
      transposeA,
      transposeB,
      bias: $bias,
      activation,
      preluActivationWeights: $preluActivationWeights
    });
    return y;
  };

  const inputs = {
    a: a3D,
    b: b3D,
    bias: $bias,
    preluActivationWeights: $preluActivationWeights
  };
  const attrs = {
    transposeA,
    transposeB,
    activation
  }; // Depending on the the params passed in we will have different number of
  // inputs and thus a a different number of elements in the gradient.

  if (bias == null) {
    const customOp = (0, _gradients.customGrad)((a3D, b3D, save) => {
      const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
      /* grad */
      , _kernel_names._FusedMatMul, attrs);

      save([a3D, b3D, res]);
      return {
        value: (0, _reshape.reshape)(res, outShape),
        gradFunc: grad
      };
    });
    return customOp(a3D, b3D);
  } else {
    const customOpWithBias = (0, _gradients.customGrad)((a3D, b3D, $bias, save) => {
      const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
      /* grad */
      , _kernel_names._FusedMatMul, attrs);

      save([a3D, b3D, res, $bias]);
      return {
        value: (0, _reshape.reshape)(res, outShape),
        gradFunc: grad
      };
    });
    return customOpWithBias(a3D, b3D, $bias);
  }
}

const matMul = (0, _operation.op)({
  fusedMatMul_
});
exports.matMul = matMul;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../gradients":"node_modules/@tensorflow/tfjs-core/dist/gradients.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../fused_util":"node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js","../mat_mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "conv2d", {
  enumerable: true,
  get: function () {
    return _conv2d.conv2d;
  }
});
Object.defineProperty(exports, "depthwiseConv2d", {
  enumerable: true,
  get: function () {
    return _depthwise_conv2d.depthwiseConv2d;
  }
});
Object.defineProperty(exports, "matMul", {
  enumerable: true,
  get: function () {
    return _mat_mul.matMul;
  }
});

var _conv2d = require("./fused/conv2d");

var _depthwise_conv2d = require("./fused/depthwise_conv2d");

var _mat_mul = require("./fused/mat_mul");
},{"./fused/conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/fused/conv2d.js","./fused/depthwise_conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/fused/depthwise_conv2d.js","./fused/mat_mul":"node_modules/@tensorflow/tfjs-core/dist/ops/fused/mat_mul.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/signal/hamming_window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hammingWindow = void 0;

var _operation = require("../operation");

var _signal_ops_util = require("../signal_ops_util");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Generate a hamming window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hammingWindow(10).print();
 * ```
 * @param The length of window
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function hammingWindow_(windowLength) {
  return (0, _signal_ops_util.cosineWindow)(windowLength, 0.54, 0.46);
}

const hammingWindow = (0, _operation.op)({
  hammingWindow_
});
exports.hammingWindow = hammingWindow;
},{"../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../signal_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hannWindow = void 0;

var _operation = require("../operation");

var _signal_ops_util = require("../signal_ops_util");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Generate a Hann window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hannWindow(10).print();
 * ```
 * @param The length of window
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function hannWindow_(windowLength) {
  return (0, _signal_ops_util.cosineWindow)(windowLength, 0.5, 0.5);
}

const hannWindow = (0, _operation.op)({
  hannWindow_
});
exports.hannWindow = hannWindow;
},{"../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../signal_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.frame = void 0;

var _concat = require("../concat");

var _fill = require("../fill");

var _operation = require("../operation");

var _reshape = require("../reshape");

var _slice = require("../slice");

var _tensor2d = require("../tensor2d");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Expands input into frames of frameLength.
 * Slides a window size with frameStep.
 *
 * ```js
 * tf.signal.frame([1, 2, 3], 2, 1).print();
 * ```
 * @param signal The input tensor to be expanded
 * @param frameLength Length of each frame
 * @param frameStep The frame hop size in samples.
 * @param padEnd Whether to pad the end of signal with padValue.
 * @param padValue An number to use where the input signal does
 *     not exist when padEnd is True.
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {
  let start = 0;
  const output = [];

  while (start + frameLength <= signal.size) {
    output.push((0, _slice.slice)(signal, start, frameLength));
    start += frameStep;
  }

  if (padEnd) {
    while (start < signal.size) {
      const padLen = start + frameLength - signal.size;
      const pad = (0, _concat.concat)([(0, _slice.slice)(signal, start, frameLength - padLen), (0, _fill.fill)([padLen], padValue)]);
      output.push(pad);
      start += frameStep;
    }
  }

  if (output.length === 0) {
    return (0, _tensor2d.tensor2d)([], [0, frameLength]);
  }

  return (0, _reshape.reshape)((0, _concat.concat)(output), [output.length, frameLength]);
}

const frame = (0, _operation.op)({
  frame_
});
exports.frame = frame;
},{"../concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","../fill":"node_modules/@tensorflow/tfjs-core/dist/ops/fill.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js","../tensor2d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/signal/stft.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stft = void 0;

var _concat = require("../concat");

var _mul = require("../mul");

var _operation = require("../operation");

var _signal_ops_util = require("../signal_ops_util");

var _slice = require("../slice");

var _rfft = require("../spectral/rfft");

var _frame = require("./frame");

var _hann_window = require("./hann_window");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the Short-time Fourier Transform of signals
 * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform
 *
 * ```js
 * const input = tf.tensor1d([1, 1, 1, 1, 1])
 * tf.signal.stft(input, 3, 1).print();
 * ```
 * @param signal 1-dimensional real value tensor.
 * @param frameLength The window length of samples.
 * @param frameStep The number of samples to step.
 * @param fftLength The size of the FFT to apply.
 * @param windowFn A callable that takes a window length and returns 1-d tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function stft_(signal, frameLength, frameStep, fftLength, windowFn = _hann_window.hannWindow) {
  if (fftLength == null) {
    fftLength = (0, _signal_ops_util.enclosingPowerOfTwo)(frameLength);
  }

  const framedSignal = (0, _frame.frame)(signal, frameLength, frameStep);
  const windowedSignal = (0, _mul.mul)(framedSignal, windowFn(frameLength));
  const output = [];

  for (let i = 0; i < framedSignal.shape[0]; i++) {
    output.push((0, _rfft.rfft)((0, _slice.slice)(windowedSignal, [i, 0], [1, frameLength]), fftLength));
  }

  return (0, _concat.concat)(output);
}

const stft = (0, _operation.op)({
  stft_
});
exports.stft = stft;
},{"../concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","../mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../signal_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js","../slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js","../spectral/rfft":"node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js","./frame":"node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js","./hann_window":"node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cropAndResize = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _operation = require("../operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts crops from the input image tensor and resizes them using bilinear
 * sampling or nearest neighbor sampling (possibly with aspect ratio change)
 * to a common output size specified by crop_size.
 *
 * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,
 *     where imageHeight and imageWidth must be positive, specifying the
 *     batch of images from which to take crops
 * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized
 *     coordinates of the box in the boxInd[i]'th image in the batch
 * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range
 *     `[0, batch)` that specifies the image that the `i`-th box refers to.
 * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`
 *     specifying the size to which all crops are resized to.
 * @param method Optional string from `'bilinear' | 'nearest'`,
 *     defaults to bilinear, which specifies the sampling method for resizing
 * @param extrapolationValue A threshold for deciding when to remove boxes based
 *     on score. Defaults to 0.
 * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function cropAndResize_(image, boxes, boxInd, cropSize, method, extrapolationValue) {
  const $image = (0, _tensor_util_env.convertToTensor)(image, 'image', 'cropAndResize');
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'cropAndResize', 'float32');
  const $boxInd = (0, _tensor_util_env.convertToTensor)(boxInd, 'boxInd', 'cropAndResize', 'int32');
  method = method || 'bilinear';
  extrapolationValue = extrapolationValue || 0;
  const numBoxes = $boxes.shape[0];
  util.assert($image.rank === 4, () => 'Error in cropAndResize: image must be rank 4,' + `but got rank ${$image.rank}.`);
  util.assert($boxes.rank === 2 && $boxes.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` + `but had shape ${$boxes.shape}.`);
  util.assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` + `but had shape ${$boxes.shape}.`);
  util.assert(cropSize.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got ` + `length ${cropSize.length}.`);
  util.assert(cropSize[0] >= 1 && cropSize[1] >= 1, () => `cropSize must be atleast [1,1], but was ${cropSize}`);
  util.assert(method === 'bilinear' || method === 'nearest', () => `method must be bilinear or nearest, but was ${method}`);

  const forward = backend => backend.cropAndResize($image, $boxes, $boxInd, cropSize, method, extrapolationValue);

  const inputs = {
    image: $image,
    boxes: $boxes,
    boxInd: $boxInd
  };
  const attrs = {
    method,
    extrapolationValue,
    cropSize
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.CropAndResize, attrs);

  return res;
}

const cropAndResize = (0, _operation.op)({
  cropAndResize_
});
exports.cropAndResize = cropAndResize;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/image/flip_left_right.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flipLeftRight = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _operation = require("../operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Flips the image left to right. Currently available in the CPU, WebGL, and
 * WASM backends.
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 */

/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
function flipLeftRight_(image) {
  const $image = (0, _tensor_util_env.convertToTensor)(image, 'image', 'flipLeftRight', 'float32');
  util.assert($image.rank === 4, () => 'Error in flipLeftRight: image must be rank 4,' + `but got rank ${$image.rank}.`);
  const inputs = {
    image: $image
  };

  const res = _engine.ENGINE.runKernel(_kernel_names.FlipLeftRight, inputs, {});

  return res;
}

const flipLeftRight = (0, _operation.op)({
  flipLeftRight_
});
exports.flipLeftRight = flipLeftRight;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/image/rotate_with_offset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rotateWithOffset = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _operation = require("../operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Rotates the input image tensor counter-clockwise with an optional offset
 * center of rotation. Currently available in the CPU, WebGL, and WASM backends.
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 * @param radians The amount of rotation.
 * @param fillValue The value to fill in the empty space leftover
 *     after rotation. Can be either a single grayscale value (0-255), or an
 *     array of three numbers `[red, green, blue]` specifying the red, green,
 *     and blue channels. Defaults to `0` (black).
 * @param center The center of rotation. Can be either a single value (0-1), or
 *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates
 *     the image around its center).
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function rotateWithOffset_(image, radians, fillValue = 0, center = 0.5) {
  const $image = (0, _tensor_util_env.convertToTensor)(image, 'image', 'rotateWithOffset', 'float32');
  util.assert($image.rank === 4, () => 'Error in rotateWithOffset: image must be rank 4,' + `but got rank ${$image.rank}.`);
  const inputs = {
    image: $image
  };
  const attrs = {
    radians,
    fillValue,
    center
  };

  const res = _engine.ENGINE.runKernel(_kernel_names.RotateWithOffset, inputs, attrs);

  return res;
}

const rotateWithOffset = (0, _operation.op)({
  rotateWithOffset_
});
exports.rotateWithOffset = rotateWithOffset;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppSanityCheck = nonMaxSuppSanityCheck;

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
  if (iouThreshold == null) {
    iouThreshold = 0.5;
  }

  if (scoreThreshold == null) {
    scoreThreshold = Number.NEGATIVE_INFINITY;
  }

  if (softNmsSigma == null) {
    softNmsSigma = 0.0;
  }

  const numBoxes = boxes.shape[0];
  maxOutputSize = Math.min(maxOutputSize, numBoxes);
  util.assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);
  util.assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);
  util.assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);
  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');
  util.assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` + `but was ${scores.shape[0]}`);
  util.assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);
  return {
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    softNmsSigma
  };
}
},{"../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppression = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _nonmax_util = require("../nonmax_util");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'nonMaxSuppression');
  const $scores = (0, _tensor_util_env.convertToTensor)(scores, 'scores', 'nonMaxSuppression');
  const inputs = (0, _nonmax_util.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
  maxOutputSize = inputs.maxOutputSize;
  iouThreshold = inputs.iouThreshold;
  scoreThreshold = inputs.scoreThreshold;
  const attrs = {
    maxOutputSize,
    iouThreshold,
    scoreThreshold
  };
  return _engine.ENGINE.runKernelFunc(b => b.nonMaxSuppression($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold), {
    boxes: $boxes,
    scores: $scores
  }, null
  /* grad */
  , _kernel_names.NonMaxSuppressionV3, attrs);
}

const nonMaxSuppression = (0, _operation.op)({
  nonMaxSuppression_
});
exports.nonMaxSuppression = nonMaxSuppression;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../nonmax_util":"node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/backends/array_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.binaryInsert = binaryInsert;
exports.binarySearch = binarySearch;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Inserts a value into a sorted array. This method allows duplicate, meaning it
 * allows inserting duplicate value, in which case, the element will be inserted
 * at the lowest index of the value.
 * @param arr The array to modify.
 * @param element The element to insert.
 * @param comparator Optional. If no comparator is specified, elements are
 * compared using array_util.defaultComparator, which is suitable for Strings
 * and Numbers in ascending arrays. If the array contains multiple instances of
 * the target value, the left-most instance will be returned. To provide a
 * comparator, it should take 2 arguments to compare and return a negative,
 * zero, or a positive number.
 */
function binaryInsert(arr, element, comparator) {
  const index = binarySearch(arr, element, comparator);
  const insertionPoint = index < 0 ? -(index + 1) : index;
  arr.splice(insertionPoint, 0, element);
}
/**
 * Searches the array for the target using binary search, returns the index
 * of the found element, or position to insert if element not found. If no
 * comparator is specified, elements are compared using array_
 * util.defaultComparator, which is suitable for Strings and Numbers in
 * ascending arrays. If the array contains multiple instances of the target
 * value, the left-most instance will be returned.
 * @param arr The array to be searched in.
 * @param target The target to be searched for.
 * @param comparator Should take 2 arguments to compare and return a negative,
 *    zero, or a positive number.
 * @return Lowest index of the target value if found, otherwise the insertion
 *    point where the target should be inserted, in the form of
 *    (-insertionPoint - 1).
 */


function binarySearch(arr, target, comparator) {
  return binarySearch_(arr, target, comparator || defaultComparator);
}
/**
 * Compares its two arguments for order.
 * @param a The first element to be compared.
 * @param b The second element to be compared.
 * @return A negative number, zero, or a positive number as the first
 *     argument is less than, equal to, or greater than the second.
 */


function defaultComparator(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
}

function binarySearch_(arr, target, comparator) {
  let left = 0;
  let right = arr.length;
  let middle = 0;
  let found = false;

  while (left < right) {
    middle = left + (right - left >>> 1);
    const compareResult = comparator(target, arr[middle]);

    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle; // If compareResult is 0, the value is found. We record it is found,
      // and then keep looking because there may be duplicate.

      found = !compareResult;
    }
  }

  return found ? left : -left - 1;
}
},{}],"node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionV3Impl = nonMaxSuppressionV3Impl;
exports.nonMaxSuppressionV4Impl = nonMaxSuppressionV4Impl;
exports.nonMaxSuppressionV5Impl = nonMaxSuppressionV5Impl;

var _scalar = require("../ops/scalar");

var _tensor1d = require("../ops/tensor1d");

var _array_util = require("./array_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Implementation of the NonMaxSuppression kernel shared between webgl and cpu.
 */
function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0
  /* softNmsSigma */
  ).selectedIndices;
}

function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {
  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0
  /* softNmsSigma */
  , false
  /* returnScoresTensor */
  , padToMaxOutputSize
  /* padToMaxOutputSize */
  , true
  /* returnValidOutputs */
  );
}

function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true
  /* returnScoresTensor */
  );
}

function nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false, returnValidOutputs = false) {
  // The list is sorted in ascending order, so that we can always pop the
  // candidate with the largest score in O(1) time.
  const candidates = [];

  for (let i = 0; i < scores.length; i++) {
    if (scores[i] > scoreThreshold) {
      candidates.push({
        score: scores[i],
        boxIndex: i,
        suppressBeginIndex: 0
      });
    }
  }

  candidates.sort(ascendingComparator); // If softNmsSigma is 0, the outcome of this algorithm is exactly same as
  // before.

  const scale = softNmsSigma > 0 ? -0.5 / softNmsSigma : 0.0;
  const selectedIndices = [];
  const selectedScores = [];

  while (selectedIndices.length < maxOutputSize && candidates.length > 0) {
    const candidate = candidates.pop();
    const {
      score: originalScore,
      boxIndex,
      suppressBeginIndex
    } = candidate;

    if (originalScore < scoreThreshold) {
      break;
    } // Overlapping boxes are likely to have similar scores, therefore we
    // iterate through the previously selected boxes backwards in order to
    // see if candidate's score should be suppressed. We use
    // suppressBeginIndex to track and ensure a candidate can be suppressed
    // by a selected box no more than once. Also, if the overlap exceeds
    // iouThreshold, we simply ignore the candidate.


    let ignoreCandidate = false;

    for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {
      const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);

      if (iou >= iouThreshold) {
        ignoreCandidate = true;
        break;
      }

      candidate.score = candidate.score * suppressWeight(iouThreshold, scale, iou);

      if (candidate.score <= scoreThreshold) {
        break;
      }
    } // At this point, if `candidate.score` has not dropped below
    // `scoreThreshold`, then we know that we went through all of the
    // previous selections and can safely update `suppressBeginIndex` to the
    // end of the selected array. Then we can re-insert the candidate with
    // the updated score and suppressBeginIndex back in the candidate list.
    // If on the other hand, `candidate.score` has dropped below the score
    // threshold, we will not add it back to the candidates list.


    candidate.suppressBeginIndex = selectedIndices.length;

    if (!ignoreCandidate) {
      // Candidate has passed all the tests, and is not suppressed, so
      // select the candidate.
      if (candidate.score === originalScore) {
        selectedIndices.push(boxIndex);
        selectedScores.push(candidate.score);
      } else if (candidate.score > scoreThreshold) {
        // Candidate's score is suppressed but is still high enough to be
        // considered, so add back to the candidates list.
        (0, _array_util.binaryInsert)(candidates, candidate, ascendingComparator);
      }
    }
  } // NonMaxSuppressionV4 feature: padding output to maxOutputSize.


  const validOutputs = selectedIndices.length;
  const elemsToPad = maxOutputSize - validOutputs;

  if (padToMaxOutputSize && elemsToPad > 0) {
    selectedIndices.push(...new Array(elemsToPad).fill(0));
    selectedScores.push(...new Array(elemsToPad).fill(0.0));
  }

  const result = {
    selectedIndices: (0, _tensor1d.tensor1d)(selectedIndices, 'int32')
  };

  if (returnScoresTensor) {
    result['selectedScores'] = (0, _tensor1d.tensor1d)(selectedScores, 'float32');
  }

  if (returnValidOutputs) {
    result['validOutputs'] = (0, _scalar.scalar)(validOutputs, 'int32');
  }

  return result;
}

function intersectionOverUnion(boxes, i, j) {
  const iCoord = boxes.subarray(i * 4, i * 4 + 4);
  const jCoord = boxes.subarray(j * 4, j * 4 + 4);
  const yminI = Math.min(iCoord[0], iCoord[2]);
  const xminI = Math.min(iCoord[1], iCoord[3]);
  const ymaxI = Math.max(iCoord[0], iCoord[2]);
  const xmaxI = Math.max(iCoord[1], iCoord[3]);
  const yminJ = Math.min(jCoord[0], jCoord[2]);
  const xminJ = Math.min(jCoord[1], jCoord[3]);
  const ymaxJ = Math.max(jCoord[0], jCoord[2]);
  const xmaxJ = Math.max(jCoord[1], jCoord[3]);
  const areaI = (ymaxI - yminI) * (xmaxI - xminI);
  const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);

  if (areaI <= 0 || areaJ <= 0) {
    return 0.0;
  }

  const intersectionYmin = Math.max(yminI, yminJ);
  const intersectionXmin = Math.max(xminI, xminJ);
  const intersectionYmax = Math.min(ymaxI, ymaxJ);
  const intersectionXmax = Math.min(xmaxI, xmaxJ);
  const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) * Math.max(intersectionXmax - intersectionXmin, 0.0);
  return intersectionArea / (areaI + areaJ - intersectionArea);
} // A Gaussian penalty function, this method always returns values in [0, 1].
// The weight is a function of similarity, the more overlap two boxes are, the
// smaller the weight is, meaning highly overlapping boxe will be significantly
// penalized. On the other hand, a non-overlapping box will not be penalized.


function suppressWeight(iouThreshold, scale, iou) {
  const weight = Math.exp(scale * iou * iou);
  return iou <= iouThreshold ? weight : 0.0;
}

function ascendingComparator(c1, c2) {
  // For objects with same scores, we make the object with the larger index go
  // first. In an array that pops from the end, this means that the object with
  // the smaller index will be popped first. This ensures the same output as
  // the TensorFlow python version.
  return c1.score - c2.score || c1.score === c2.score && c2.boxIndex - c1.boxIndex;
}
},{"../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/tensor1d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js","./array_util":"node_modules/@tensorflow/tfjs-core/dist/backends/array_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_async.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionAsync = void 0;

var _non_max_suppression_impl = require("../../backends/non_max_suppression_impl");

var _tensor_util_env = require("../../tensor_util_env");

var _nonmax_util = require("../nonmax_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This is the async version of `nonMaxSuppression`
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @return A 1D tensor with the selected box indices.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
async function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'nonMaxSuppressionAsync');
  const $scores = (0, _tensor_util_env.convertToTensor)(scores, 'scores', 'nonMaxSuppressionAsync');
  const inputs = (0, _nonmax_util.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
  maxOutputSize = inputs.maxOutputSize;
  iouThreshold = inputs.iouThreshold;
  scoreThreshold = inputs.scoreThreshold;
  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);
  const boxesVals = boxesAndScores[0];
  const scoresVals = boxesAndScores[1]; // We call a cpu based impl directly with the typedarray data  here rather
  // than a kernel because all kernels are synchronous (and thus cannot await
  // .data()).

  const res = (0, _non_max_suppression_impl.nonMaxSuppressionV3Impl)(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);

  if ($boxes !== boxes) {
    $boxes.dispose();
  }

  if ($scores !== scores) {
    $scores.dispose();
  }

  return res;
}

const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;
exports.nonMaxSuppressionAsync = nonMaxSuppressionAsync;
},{"../../backends/non_max_suppression_impl":"node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../nonmax_util":"node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionWithScore = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _nonmax_util = require("../nonmax_util");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (c.f.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'nonMaxSuppression');
  const $scores = (0, _tensor_util_env.convertToTensor)(scores, 'scores', 'nonMaxSuppression');
  const params = (0, _nonmax_util.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
  maxOutputSize = params.maxOutputSize;
  iouThreshold = params.iouThreshold;
  scoreThreshold = params.scoreThreshold;
  softNmsSigma = params.softNmsSigma;
  const inputs = {
    boxes: $boxes,
    scores: $scores
  };
  const attrs = {
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    softNmsSigma
  };

  const result = _engine.ENGINE.runKernel(_kernel_names.NonMaxSuppressionV5, inputs, attrs);

  return {
    selectedIndices: result[0],
    selectedScores: result[1]
  };
}

const nonMaxSuppressionWithScore = (0, _operation.op)({
  nonMaxSuppressionWithScore_
});
exports.nonMaxSuppressionWithScore = nonMaxSuppressionWithScore;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../nonmax_util":"node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score_async.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionWithScoreAsync = void 0;

var _non_max_suppression_impl = require("../../backends/non_max_suppression_impl");

var _tensor_util_env = require("../../tensor_util_env");

var _nonmax_util = require("../nonmax_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (c.f.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
async function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'nonMaxSuppressionAsync');
  const $scores = (0, _tensor_util_env.convertToTensor)(scores, 'scores', 'nonMaxSuppressionAsync');
  const params = (0, _nonmax_util.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
  maxOutputSize = params.maxOutputSize;
  iouThreshold = params.iouThreshold;
  scoreThreshold = params.scoreThreshold;
  softNmsSigma = params.softNmsSigma;
  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);
  const boxesVals = boxesAndScores[0];
  const scoresVals = boxesAndScores[1]; // We call a cpu based impl directly with the typedarray data  here rather
  // than a kernel because all kernels are synchronous (and thus cannot await
  // .data()).

  const res = (0, _non_max_suppression_impl.nonMaxSuppressionV5Impl)(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);

  if ($boxes !== boxes) {
    $boxes.dispose();
  }

  if ($scores !== scores) {
    $scores.dispose();
  }

  return res;
}

const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;
exports.nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync;
},{"../../backends/non_max_suppression_impl":"node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../nonmax_util":"node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionPadded = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _nonmax_util = require("../nonmax_util");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union), with an option to pad results.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param padToMaxOutputSize Defalts to false. If true, size of output
 *     `selectedIndices` is padded to maxOutputSize.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
 *       are valid. Valid elements occur first, then padding.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function nonMaxSuppressionPadded_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'nonMaxSuppression');
  const $scores = (0, _tensor_util_env.convertToTensor)(scores, 'scores', 'nonMaxSuppression');
  const params = (0, _nonmax_util.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null
  /* softNmsSigma */
  );
  const $maxOutputSize = params.maxOutputSize;
  const $iouThreshold = params.iouThreshold;
  const $scoreThreshold = params.scoreThreshold;
  const inputs = {
    boxes: $boxes,
    scores: $scores
  };
  const attrs = {
    maxOutputSize: $maxOutputSize,
    iouThreshold: $iouThreshold,
    scoreThreshold: $scoreThreshold,
    padToMaxOutputSize
  };

  const result = _engine.ENGINE.runKernel(_kernel_names.NonMaxSuppressionV4, inputs, attrs);

  return {
    selectedIndices: result[0],
    validOutputs: result[1]
  };
}

const nonMaxSuppressionPadded = (0, _operation.op)({
  nonMaxSuppressionPadded_
});
exports.nonMaxSuppressionPadded = nonMaxSuppressionPadded;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../nonmax_util":"node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded_async.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionPaddedAsync = void 0;

var _non_max_suppression_impl = require("../../backends/non_max_suppression_impl");

var _tensor_util_env = require("../../tensor_util_env");

var _nonmax_util = require("../nonmax_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union), with an option to pad results.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param padToMaxOutputSize Defalts to false. If true, size of output
 *     `selectedIndices` is padded to maxOutputSize.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
 *       are valid. Valid elements occur first, then padding.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
async function nonMaxSuppressionPaddedAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'nonMaxSuppressionAsync');
  const $scores = (0, _tensor_util_env.convertToTensor)(scores, 'scores', 'nonMaxSuppressionAsync');
  const params = (0, _nonmax_util.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null
  /* softNmsSigma */
  );
  const $maxOutputSize = params.maxOutputSize;
  const $iouThreshold = params.iouThreshold;
  const $scoreThreshold = params.scoreThreshold;
  const [boxesVals, scoresVals] = await Promise.all([$boxes.data(), $scores.data()]); // We call a cpu based impl directly with the typedarray data here rather
  // than a kernel because all kernels are synchronous (and thus cannot await
  // .data()).

  const res = (0, _non_max_suppression_impl.nonMaxSuppressionV4Impl)(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);

  if ($boxes !== boxes) {
    $boxes.dispose();
  }

  if ($scores !== scores) {
    $scores.dispose();
  }

  return res;
}

const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;
exports.nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync;
},{"../../backends/non_max_suppression_impl":"node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../nonmax_util":"node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeBilinear = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _operation = require("../operation");

var _reshape = require("../reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Bilinear resize a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to False. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function resizeBilinear_(images, size, alignCorners = false) {
  const $images = (0, _tensor_util_env.convertToTensor)(images, 'images', 'resizeBilinear');
  util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` + `rank ${$images.rank}.`);
  util.assert(size.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ` + `${size}.`);
  let batchImages = $images;
  let reshapedTo4D = false;

  if ($images.rank === 3) {
    reshapedTo4D = true;
    batchImages = (0, _reshape.reshape)($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);
  }

  const [newHeight, newWidth] = size;

  const forward = (backend, save) => {
    save([batchImages]);
    return backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners);
  };

  const inputs = {
    images: batchImages
  };
  const attrs = {
    alignCorners,
    size
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.ResizeBilinear, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const resizeBilinear = (0, _operation.op)({
  resizeBilinear_
});
exports.resizeBilinear = resizeBilinear;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeNearestNeighbor = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _operation = require("../operation");

var _reshape = require("../reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * NearestNeighbor resize a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to False. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function resizeNearestNeighbor_(images, size, alignCorners = false) {
  const $images = (0, _tensor_util_env.convertToTensor)(images, 'images', 'resizeNearestNeighbor');
  util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` + `rank ${$images.rank}.`);
  util.assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` + `${size}.`);
  util.assert($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');
  let batchImages = $images;
  let reshapedTo4D = false;

  if ($images.rank === 3) {
    reshapedTo4D = true;
    batchImages = (0, _reshape.reshape)($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);
  }

  const [newHeight, newWidth] = size;
  const inputs = {
    images: batchImages
  };
  const attrs = {
    alignCorners,
    size
  };

  const forward = (backend, save) => {
    save([batchImages]);
    return backend.resizeNearestNeighbor(batchImages, newHeight, newWidth, alignCorners);
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* gradient */
  , _kernel_names.ResizeNearestNeighbor, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const resizeNearestNeighbor = (0, _operation.op)({
  resizeNearestNeighbor_
});
exports.resizeNearestNeighbor = resizeNearestNeighbor;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bandPart = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _greater_equal = require("../greater_equal");

var _less_equal = require("../less_equal");

var _logical_and = require("../logical_and");

var _operation = require("../operation");

var _range = require("../range");

var _reshape = require("../reshape");

var _scalar = require("../scalar");

var _stack = require("../stack");

var _sub = require("../sub");

var _unstack = require("../unstack");

var _where = require("../where");

var _zeros = require("../zeros");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Copy a tensor setting everything outside a central band in each innermost
 * matrix to zero.
 *
 * The band part is computed as follows: Assume input has `k` dimensions
 * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where
 * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.
 * The indicator function
 * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`
 * `&& (num_upper < 0 || (n-m) <= num_upper)`
 *
 * ```js
 * const x = tf.tensor2d([[ 0,  1,  2, 3],
 *                        [-1,  0,  1, 2],
 *                        [-2, -1,  0, 1],
 *                        [-3, -2, -1, 0]]);
 * let y = tf.linalg.bandPart(x, 1, -1);
 * y.print(); // [[ 0,  1,  2, 3],
 *            //  [-1,  0,  1, 2],
 *            //  [ 0, -1,  0, 1],
 *            //  [ 0, 0 , -1, 0]]
 * let z = tf.linalg.bandPart(x, 2, 1);
 * z.print(); // [[ 0,  1,  0, 0],
 *            //  [-1,  0,  1, 0],
 *            //  [-2, -1,  0, 1],
 *            //  [ 0, -2, -1, 0]]
 * ```
 *
 * @param x Rank `k` tensor
 * @param numLower Number of subdiagonals to keep.
 *   If negative, keep entire lower triangle.
 * @param numUpper Number of subdiagonals to keep.
 *   If negative, keep entire upper triangle.
 * @returns Rank `k` tensor of the same shape as input.
 *   The extracted banded tensor.
 *
 * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
 */
function bandPart_(a, numLower, numUpper) {
  (0, _util.assert)(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);
  (0, _util.assert)(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'bandPart');
  (0, _util.assert)($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);
  const shape = $a.shape;
  const [M, N] = $a.shape.slice(-2);

  if (!(numLower <= M)) {
    throw new Error(`bandPart(): numLower (${numLower})` + ` must not be greater than the number of rows (${M}).`);
  }

  if (!(numUpper <= N)) {
    throw new Error(`bandPart(): numUpper (${numUpper})` + ` must not be greater than the number of columns (${N}).`);
  }

  if (numLower < 0) {
    numLower = M;
  }

  if (numUpper < 0) {
    numUpper = N;
  }

  const i = (0, _reshape.reshape)((0, _range.range)(0, M, 1, 'int32'), [-1, 1]);
  const j = (0, _range.range)(0, N, 1, 'int32');
  const ij = (0, _sub.sub)(i, j);
  const inBand = (0, _logical_and.logicalAnd)((0, _less_equal.lessEqual)(ij, (0, _scalar.scalar)(+numLower, 'int32')), (0, _greater_equal.greaterEqual)(ij, (0, _scalar.scalar)(-numUpper, 'int32')));
  const zero = (0, _zeros.zeros)([M, N], $a.dtype);
  return (0, _reshape.reshape)((0, _stack.stack)((0, _unstack.unstack)((0, _reshape.reshape)($a, [-1, M, N])).map(mat => (0, _where.where)(inBand, mat, zero))), shape);
}

const bandPart = (0, _operation.op)({
  bandPart_
});
exports.bandPart = bandPart;
},{"../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../greater_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js","../less_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js","../logical_and":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../range":"node_modules/@tensorflow/tfjs-core/dist/ops/range.js","../reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../stack":"node_modules/@tensorflow/tfjs-core/dist/ops/stack.js","../sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../unstack":"node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js","../where":"node_modules/@tensorflow/tfjs-core/dist/ops/where.js","../zeros":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gramSchmidt = void 0;

var _engine = require("../../engine");

var _util = require("../../util");

var _div = require("../div");

var _mul = require("../mul");

var _norm = require("../norm");

var _operation = require("../operation");

var _split = require("../split");

var _squeeze = require("../squeeze");

var _stack = require("../stack");

var _sub = require("../sub");

var _sum = require("../sum");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Gram-Schmidt orthogonalization.
 *
 * ```js
 * const x = tf.tensor2d([[1, 2], [3, 4]]);
 * let y = tf.linalg.gramSchmidt(x);
 * y.print();
 * console.log('Othogonalized:');
 * y.dot(y.transpose()).print();  // should be nearly the identity matrix.
 * console.log('First row direction maintained:');
 * const data = await y.array();
 * console.log(data[0][1] / data[0][0]);  // should be nearly 2.
 * ```
 *
 * @param xs The vectors to be orthogonalized, in one of the two following
 *   formats:
 *   - An Array of `tf.Tensor1D`.
 *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows
 *     of `xs`.
 *   In each case, all the vectors must have the same length and the length
 *   must be greater than or equal to the number of vectors.
 * @returns The orthogonalized and normalized vectors or matrix.
 *   Orthogonalization means that the vectors or the rows of the matrix
 *   are orthogonal (zero inner products). Normalization means that each
 *   vector or each row of the matrix has an L2 norm that equals `1`.
 *
 * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
 */
function gramSchmidt_(xs) {
  let inputIsTensor2D;

  if (Array.isArray(xs)) {
    inputIsTensor2D = false;
    (0, _util.assert)(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' + 'empty');
    const dim = xs[0].shape[0];

    for (let i = 1; i < xs.length; ++i) {
      (0, _util.assert)(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' + `(${xs[i].shape[0]} vs. ${dim})`);
    }
  } else {
    inputIsTensor2D = true;
    xs = (0, _split.split)(xs, xs.shape[0], 0).map(x => (0, _squeeze.squeeze)(x, [0]));
  }

  (0, _util.assert)(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` + `number of dimensions (${xs[0].shape[0]}).`);
  const ys = [];
  const xs1d = xs;

  for (let i = 0; i < xs.length; ++i) {
    ys.push(_engine.ENGINE.tidy(() => {
      let x = xs1d[i];

      if (i > 0) {
        for (let j = 0; j < i; ++j) {
          const proj = (0, _mul.mul)((0, _sum.sum)((0, _mul.mul)(ys[j], x)), ys[j]);
          x = (0, _sub.sub)(x, proj);
        }
      }

      return (0, _div.div)(x, (0, _norm.norm)(x, 'euclidean'));
    }));
  }

  if (inputIsTensor2D) {
    return (0, _stack.stack)(ys, 0);
  } else {
    return ys;
  }
}

const gramSchmidt = (0, _operation.op)({
  gramSchmidt_
});
exports.gramSchmidt = gramSchmidt;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../norm":"node_modules/@tensorflow/tfjs-core/dist/ops/norm.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../split":"node_modules/@tensorflow/tfjs-core/dist/ops/split.js","../squeeze":"node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js","../stack":"node_modules/@tensorflow/tfjs-core/dist/ops/stack.js","../sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.qr = void 0;

var _engine = require("../../engine");

var _globals = require("../../globals");

var _util = require("../../util");

var _clone = require("../clone");

var _concat = require("../concat");

var _div = require("../div");

var _eye = require("../eye");

var _greater = require("../greater");

var _mat_mul = require("../mat_mul");

var _mul = require("../mul");

var _neg = require("../neg");

var _norm = require("../norm");

var _operation = require("../operation");

var _reshape = require("../reshape");

var _slice = require("../slice");

var _stack = require("../stack");

var _sub = require("../sub");

var _tensor2d = require("../tensor2d");

var _transpose = require("../transpose");

var _unstack = require("../unstack");

var _where = require("../where");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Compute QR decomposition of m-by-n matrix using Householder transformation.
 *
 * Implementation based on
 *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]
 * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [3, 4]]);
 * let [q, r] = tf.linalg.qr(a);
 * console.log('Q');
 * q.print();
 * console.log('R');
 * r.print();
 * console.log('Orthogonalized');
 * q.dot(q.transpose()).print()  // should be nearly the identity matrix.
 * console.log('Reconstructed');
 * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];
 * ```
 *
 * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose
 *   it has the shape `[..., M, N]`.
 * @param fullMatrices An optional boolean parameter. Defaults to `false`.
 *   If `true`, compute full-sized `Q`. If `false` (the default),
 *   compute only the leading N columns of `Q` and `R`.
 * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,
 *   i.e., its columns all have unit norm and are mutually orthogonal.
 *   If `M >= N`,
 *     If `fullMatrices` is `false` (default),
 *       - `Q` has a shape of `[..., M, N]`,
 *       - `R` has a shape of `[..., N, N]`.
 *     If `fullMatrices` is `true` (default),
 *       - `Q` has a shape of `[..., M, M]`,
 *       - `R` has a shape of `[..., M, N]`.
 *   If `M < N`,
 *     - `Q` has a shape of `[..., M, M]`,
 *     - `R` has a shape of `[..., M, N]`.
 * @throws If the rank of `x` is less than 2.
 *
 * @doc {heading:'Operations',
 *       subheading:'Linear Algebra',
 *       namespace:'linalg'}
 */
function qr_(x, fullMatrices = false) {
  (0, _util.assert)(x.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);

  if (x.rank === 2) {
    return qr2d(x, fullMatrices);
  } else {
    // Rank > 2.
    // TODO(cais): Below we split the input into individual 2D tensors,
    //   perform QR decomposition on them and then stack the results back
    //   together. We should explore whether this can be parallelized.
    const outerDimsProd = x.shape.slice(0, x.shape.length - 2).reduce((value, prev) => value * prev);
    const x2ds = (0, _unstack.unstack)((0, _reshape.reshape)(x, [outerDimsProd, x.shape[x.shape.length - 2], x.shape[x.shape.length - 1]]), 0);
    const q2ds = [];
    const r2ds = [];
    x2ds.forEach(x2d => {
      const [q2d, r2d] = qr2d(x2d, fullMatrices);
      q2ds.push(q2d);
      r2ds.push(r2d);
    });
    const q = (0, _reshape.reshape)((0, _stack.stack)(q2ds, 0), x.shape);
    const r = (0, _reshape.reshape)((0, _stack.stack)(r2ds, 0), x.shape);
    return [q, r];
  }
}

function qr2d(x, fullMatrices = false) {
  return _engine.ENGINE.tidy(() => {
    (0, _util.assert)(x.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);
    const m = x.shape[0];
    const n = x.shape[1];
    let q = (0, _eye.eye)(m); // Orthogonal transform so far.

    let r = (0, _clone.clone)(x); // Transformed matrix so far.

    const one2D = (0, _tensor2d.tensor2d)([[1]], [1, 1]);
    let w = (0, _clone.clone)(one2D);
    const iters = m >= n ? n : m;

    for (let j = 0; j < iters; ++j) {
      // This tidy within the for-loop ensures we clean up temporary
      // tensors as soon as they are no longer needed.
      const rTemp = r;
      const wTemp = w;
      const qTemp = q;
      [w, r, q] = _engine.ENGINE.tidy(() => {
        // Find H = I - tau * w * w', to put zeros below R(j, j).
        const rjEnd1 = (0, _slice.slice)(r, [j, j], [m - j, 1]);
        const normX = (0, _norm.norm)(rjEnd1);
        const rjj = (0, _slice.slice)(r, [j, j], [1, 1]); // The sign() function returns 0 on 0, which causes division by zero.

        const s = (0, _where.where)((0, _greater.greater)(rjj, 0), (0, _tensor2d.tensor2d)([[-1]]), (0, _tensor2d.tensor2d)([[1]]));
        const u1 = (0, _sub.sub)(rjj, (0, _mul.mul)(s, normX));
        const wPre = (0, _div.div)(rjEnd1, u1);

        if (wPre.shape[0] === 1) {
          w = (0, _clone.clone)(one2D);
        } else {
          w = (0, _concat.concat)([one2D, (0, _slice.slice)(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])], 0);
        }

        const tau = (0, _neg.neg)((0, _div.div)((0, _mat_mul.matMul)(s, u1), normX)); // -- R := HR, Q := QH.

        const rjEndAll = (0, _slice.slice)(r, [j, 0], [m - j, n]);
        const tauTimesW = (0, _mul.mul)(tau, w);
        const wT = (0, _transpose.transpose)(w);

        if (j === 0) {
          r = (0, _sub.sub)(rjEndAll, (0, _mat_mul.matMul)(tauTimesW, (0, _mat_mul.matMul)(wT, rjEndAll)));
        } else {
          const rTimesTau = (0, _sub.sub)(rjEndAll, (0, _mat_mul.matMul)(tauTimesW, (0, _mat_mul.matMul)(wT, rjEndAll)));
          r = (0, _concat.concat)([(0, _slice.slice)(r, [0, 0], [j, n]), rTimesTau], 0);
        }

        const tawTimesWT = (0, _transpose.transpose)(tauTimesW);
        const qAllJEnd = (0, _slice.slice)(q, [0, j], [m, q.shape[1] - j]);

        if (j === 0) {
          q = (0, _sub.sub)(qAllJEnd, (0, _mat_mul.matMul)((0, _mat_mul.matMul)(qAllJEnd, w), tawTimesWT));
        } else {
          const qTimesTau = (0, _sub.sub)(qAllJEnd, (0, _mat_mul.matMul)((0, _mat_mul.matMul)(qAllJEnd, w), tawTimesWT));
          q = (0, _concat.concat)([(0, _slice.slice)(q, [0, 0], [m, j]), qTimesTau], 1);
        }

        return [w, r, q];
      });
      (0, _globals.dispose)([rTemp, wTemp, qTemp]);
    }

    if (!fullMatrices && m > n) {
      q = (0, _slice.slice)(q, [0, 0], [m, n]);
      r = (0, _slice.slice)(r, [0, 0], [n, n]);
    }

    return [q, r];
  });
}

const qr = (0, _operation.op)({
  qr_
});
exports.qr = qr;
},{"../../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../clone":"node_modules/@tensorflow/tfjs-core/dist/ops/clone.js","../concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","../div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../eye":"node_modules/@tensorflow/tfjs-core/dist/ops/eye.js","../greater":"node_modules/@tensorflow/tfjs-core/dist/ops/greater.js","../mat_mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js","../mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../norm":"node_modules/@tensorflow/tfjs-core/dist/ops/norm.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js","../stack":"node_modules/@tensorflow/tfjs-core/dist/ops/stack.js","../sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../tensor2d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js","../transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js","../unstack":"node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js","../where":"node_modules/@tensorflow/tfjs-core/dist/ops/where.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Reduction = void 0;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Reduction;
exports.Reduction = Reduction;

(function (Reduction) {
  Reduction[Reduction["NONE"] = 0] = "NONE";
  Reduction[Reduction["MEAN"] = 1] = "MEAN";
  Reduction[Reduction["SUM"] = 2] = "SUM";
  Reduction[Reduction["SUM_BY_NONZERO_WEIGHTS"] = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Reduction || (exports.Reduction = Reduction = {}));
},{}],"node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeWeightedLoss = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _cast = require("../cast");

var _div = require("../div");

var _loss_ops_utils = require("../loss_ops_utils");

var _mean = require("../mean");

var _mul = require("../mul");

var _not_equal = require("../not_equal");

var _ones = require("../ones");

var _operation = require("../operation");

var _scalar = require("../scalar");

var _sum = require("../sum");

/**
 * Computes the weighted loss between two tensors.
 *
 * @param losses Tensor of shape `[batch_size, d1, ... dN]`.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `losses`, and must be broadcastable to `losses` (i.e., all
 *    dimensions must be either `1`, or the same as the corresponding
 *    `losses` dimension).
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function computeWeightedLoss_(losses, weights, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const $losses = (0, _tensor_util_env.convertToTensor)(losses, 'losses', 'computeWeightedLoss');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'computeWeightedLoss');
  }

  const weightedLoss = $weights == null ? $losses : (0, _mul.mul)($losses, $weights);

  if (reduction === _loss_ops_utils.Reduction.NONE) {
    return weightedLoss;
  }

  if (reduction === _loss_ops_utils.Reduction.SUM) {
    return (0, _sum.sum)(weightedLoss);
  }

  if (reduction === _loss_ops_utils.Reduction.MEAN) {
    if ($weights == null) {
      return (0, _mean.mean)(weightedLoss);
    } else {
      const broadcastFactor = $losses.size / $weights.size;
      const result = (0, _div.div)((0, _sum.sum)(weightedLoss), (0, _sum.sum)($weights));
      return broadcastFactor > 1 ? (0, _div.div)(result, (0, _scalar.scalar)(broadcastFactor)) : result;
    }
  }

  if (reduction === _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
    if ($weights == null) {
      return (0, _div.div)((0, _sum.sum)(weightedLoss), (0, _scalar.scalar)($losses.size));
    } else {
      const broadcastedWeights = (0, _mul.mul)($weights, (0, _ones.ones)($losses.shape));
      const numNonZeros = (0, _cast.cast)((0, _sum.sum)((0, _not_equal.notEqual)(broadcastedWeights, (0, _scalar.scalar)(0))), 'float32');
      return (0, _div.div)((0, _sum.sum)(weightedLoss), numNonZeros);
    }
  }

  throw Error(`Unknown reduction: ${reduction}`);
}

const computeWeightedLoss = (0, _operation.op)({
  computeWeightedLoss_
});
exports.computeWeightedLoss = computeWeightedLoss;
},{"../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../loss_ops_utils":"node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","../mean":"node_modules/@tensorflow/tfjs-core/dist/ops/mean.js","../mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../not_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js","../ones":"node_modules/@tensorflow/tfjs-core/dist/ops/ones.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/losses/absolute_difference.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.absoluteDifference = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _abs = require("../abs");

var _loss_ops_utils = require("../loss_ops_utils");

var _operation = require("../operation");

var _sub = require("../sub");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the absolute difference loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function absoluteDifference_(labels, predictions, weights, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'absoluteDifference');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'absoluteDifference');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'absoluteDifference');
  }

  (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in absoluteDifference: ');
  const losses = (0, _abs.abs)((0, _sub.sub)($labels, $predictions));
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const absoluteDifference = (0, _operation.op)({
  absoluteDifference_
});
exports.absoluteDifference = absoluteDifference;
},{"../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../abs":"node_modules/@tensorflow/tfjs-core/dist/ops/abs.js","../loss_ops_utils":"node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","./compute_weighted_loss":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cosineDistance = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _loss_ops_utils = require("../loss_ops_utils");

var _mul = require("../mul");

var _operation = require("../operation");

var _scalar = require("../scalar");

var _sub = require("../sub");

var _sum = require("../sum");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * Computes the cosine distance loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param axis The dimension along which the cosine distance is computed.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function cosineDistance_(labels, predictions, axis, weights, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'cosineDistance');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'cosineDistance');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'cosineDistance');
  }

  (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in cosineDistance: ');
  const one = (0, _scalar.scalar)(1);
  const losses = (0, _sub.sub)(one, (0, _sum.sum)((0, _mul.mul)($labels, $predictions), axis, true));
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const cosineDistance = (0, _operation.op)({
  cosineDistance_
});
exports.cosineDistance = cosineDistance;
},{"../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../loss_ops_utils":"node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","../mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js","./compute_weighted_loss":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hingeLoss = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _loss_ops_utils = require("../loss_ops_utils");

var _mul = require("../mul");

var _operation = require("../operation");

var _relu = require("../relu");

var _scalar = require("../scalar");

var _sub = require("../sub");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * Computes the Hinge loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function hingeLoss_(labels, predictions, weights, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  let $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'hingeLoss');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'hingeLoss');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'hingeLoss');
  }

  (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in hingeLoss: ');
  const one = (0, _scalar.scalar)(1); // Convert binary labels to (-1, 1)

  $labels = (0, _sub.sub)((0, _mul.mul)((0, _scalar.scalar)(2), $labels), one);
  const losses = (0, _relu.relu)((0, _sub.sub)(one, (0, _mul.mul)($labels, $predictions)));
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const hingeLoss = (0, _operation.op)({
  hingeLoss_
});
exports.hingeLoss = hingeLoss;
},{"../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../loss_ops_utils":"node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","../mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../relu":"node_modules/@tensorflow/tfjs-core/dist/ops/relu.js","../scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","./compute_weighted_loss":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/losses/huber_loss.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.huberLoss = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _abs = require("../abs");

var _add = require("../add");

var _loss_ops_utils = require("../loss_ops_utils");

var _minimum = require("../minimum");

var _mul = require("../mul");

var _operation = require("../operation");

var _scalar = require("../scalar");

var _square = require("../square");

var _sub = require("../sub");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the huber loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param delta Point where huber loss changes from quadratic to linear.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`.
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function huberLoss_(labels, predictions, weights, delta = 1.0, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'huberLoss');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'huberLoss');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'huberLoss');
  }

  (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in huberLoss: ');
  const deltaScalar = (0, _scalar.scalar)(delta);
  const error = (0, _abs.abs)((0, _sub.sub)($predictions, $labels));
  const quadratic = (0, _minimum.minimum)(error, deltaScalar);
  const linear = (0, _sub.sub)(error, quadratic);
  const losses = (0, _add.add)((0, _mul.mul)((0, _scalar.scalar)(0.5), (0, _square.square)(quadratic)), (0, _mul.mul)(deltaScalar, linear));
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const huberLoss = (0, _operation.op)({
  huberLoss_
});
exports.huberLoss = huberLoss;
},{"../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../abs":"node_modules/@tensorflow/tfjs-core/dist/ops/abs.js","../add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../loss_ops_utils":"node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","../minimum":"node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js","../mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","./compute_weighted_loss":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logLoss = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _add = require("../add");

var _log = require("../log");

var _loss_ops_utils = require("../loss_ops_utils");

var _mul = require("../mul");

var _neg = require("../neg");

var _operation = require("../operation");

var _scalar = require("../scalar");

var _sub = require("../sub");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the log loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param epsilon A small increment to avoid taking log of zero
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'logLoss');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'logLoss');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'logLoss');
  }

  (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in logLoss: ');
  const one = (0, _scalar.scalar)(1);
  const epsilonScalar = (0, _scalar.scalar)(epsilon);
  const l1 = (0, _neg.neg)((0, _mul.mul)($labels, (0, _log.log)((0, _add.add)($predictions, epsilonScalar))));
  const l2 = (0, _mul.mul)((0, _sub.sub)(one, $labels), (0, _log.log)((0, _add.add)((0, _sub.sub)(one, $predictions), epsilonScalar)));
  const losses = (0, _sub.sub)(l1, l2);
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const logLoss = (0, _operation.op)({
  logLoss_
});
exports.logLoss = logLoss;
},{"../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../log":"node_modules/@tensorflow/tfjs-core/dist/ops/log.js","../loss_ops_utils":"node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","../mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","./compute_weighted_loss":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/losses/mean_squared_error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.meanSquaredError = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _loss_ops_utils = require("../loss_ops_utils");

var _operation = require("../operation");

var _squared_difference = require("../squared_difference");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the mean squared error between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function meanSquaredError_(labels, predictions, weights, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'meanSquaredError');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'meanSquaredError');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'meanSquaredError');
  }

  (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in meanSquaredError: ');
  const losses = (0, _squared_difference.squaredDifference)($labels, $predictions);
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const meanSquaredError = (0, _operation.op)({
  meanSquaredError_
});
exports.meanSquaredError = meanSquaredError;
},{"../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../loss_ops_utils":"node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../squared_difference":"node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js","./compute_weighted_loss":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/losses/sigmoid_cross_entropy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sigmoidCrossEntropy = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _abs = require("../abs");

var _add = require("../add");

var _exp = require("../exp");

var _log1p = require("../log1p");

var _loss_ops_utils = require("../loss_ops_utils");

var _mul = require("../mul");

var _neg = require("../neg");

var _operation = require("../operation");

var _relu = require("../relu");

var _scalar = require("../scalar");

var _sub = require("../sub");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sigmoidCrossEntropyWithLogits_(labels, logits) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'sigmoidCrossEntropyWithLogits');
  const $logits = (0, _tensor_util_env.convertToTensor)(logits, 'logits', 'sigmoidCrossEntropyWithLogits');
  (0, _util.assertShapesMatch)($labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');
  /**
   * Implementation Details:
   *
   * For brevity, let `x = logits`, `z = labels`.  The logistic loss is
   *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))
   *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))
   *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))
   *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))
   *   = (1 - z) * x + log(1 + exp(-x))
   *   = x - x * z + log(1 + exp(-x))
   *
   *   For x < 0, to avoid overflow in exp(-x), we reformulate the above
   *     x - x * z + log(1 + exp(-x))
   *   = log(exp(x)) - x * z + log(1 + exp(-x))
   *   = - x * z + log(1 + exp(x))
   *
   * Hence, to ensure stability and avoid overflow, the implementation uses
   * this equivalent formulation:
   *     max(x, 0) - x * z + log(1 + exp(-abs(x)))
   */

  const maxOutput = (0, _relu.relu)($logits);
  const outputXTarget = (0, _mul.mul)($logits, $labels);
  const sigmoidOutput = (0, _log1p.log1p)((0, _exp.exp)((0, _neg.neg)((0, _abs.abs)($logits))));
  return (0, _add.add)((0, _sub.sub)(maxOutput, outputXTarget), sigmoidOutput);
}
/**
 * Computes the sigmoid cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)
 *                         + 0.5 * labelSmoothing
 *
 * @param multiClassLabels The ground truth output tensor of shape
 * [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
 */


function sigmoidCrossEntropy_(multiClassLabels, logits, weights, labelSmoothing = 0, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  let $multiClassLabels = (0, _tensor_util_env.convertToTensor)(multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');
  const $logits = (0, _tensor_util_env.convertToTensor)(logits, 'logits', 'sigmoidCrossEntropy');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'sigmoidCrossEntropy');
  }

  (0, _util.assertShapesMatch)($multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');

  if (labelSmoothing > 0) {
    const labelSmoothingScalar = (0, _scalar.scalar)(labelSmoothing);
    const one = (0, _scalar.scalar)(1);
    const half = (0, _scalar.scalar)(0.5);
    $multiClassLabels = (0, _add.add)((0, _mul.mul)($multiClassLabels, (0, _sub.sub)(one, labelSmoothingScalar)), (0, _mul.mul)(half, labelSmoothingScalar));
  }

  const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const sigmoidCrossEntropy = (0, _operation.op)({
  sigmoidCrossEntropy_
});
exports.sigmoidCrossEntropy = sigmoidCrossEntropy;
},{"../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../abs":"node_modules/@tensorflow/tfjs-core/dist/ops/abs.js","../add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../exp":"node_modules/@tensorflow/tfjs-core/dist/ops/exp.js","../log1p":"node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js","../loss_ops_utils":"node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","../mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../relu":"node_modules/@tensorflow/tfjs-core/dist/ops/relu.js","../scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","./compute_weighted_loss":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/losses/softmax_cross_entropy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.softmaxCrossEntropy = void 0;

var _gradients = require("../../gradients");

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _add = require("../add");

var _axis_util = require("../axis_util");

var _cast = require("../cast");

var _div = require("../div");

var _exp = require("../exp");

var _log_sum_exp = require("../log_sum_exp");

var _loss_ops_utils = require("../loss_ops_utils");

var _mul = require("../mul");

var _neg = require("../neg");

var _operation = require("../operation");

var _reshape = require("../reshape");

var _scalar = require("../scalar");

var _sub = require("../sub");

var _sum = require("../sum");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes softmax cross entropy between logits and labels.
 *
 * Measures the probability error in discrete classification tasks in which
 * the classes are mutually exclusive (each entry is in exactly one class).
 * For example, each CIFAR-10 image is labeled with one and only one label: an
 * image can be a dog or a truck, but not both.
 *
 * `NOTE`: While the classes are mutually exclusive, their probabilities need
 * not be. All that is required is that each row of labels is a valid
 * probability distribution. If they are not, the computation of the gradient
 * will be incorrect.
 *
 * `WARNING`: This op expects unscaled logits, since it performs a softmax on
 * logits internally for efficiency. Do not call this op with the output of
 * softmax, as it will produce incorrect results.
 *
 * logits and labels must have the same shape, e.g. [batch_size, num_classes]
 * and the same dtype.
 * @param labels The labels array.
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 */
function softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {
  if (dim === -1) {
    dim = logits.rank - 1;
  }

  if (dim !== logits.rank - 1) {
    throw Error(`Softmax cross entropy along a non-last dimension is not yet ` + `supported. Labels / logits was rank ${logits.rank} ` + `and dim was ${dim}`);
  } // Use a custom gradient for numerical stability.


  const customOp = (0, _gradients.customGrad)((labels, logits, save) => {
    // Reference:
    //   1. http://cs231n.github.io/linear-classify/#softmax
    //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/
    const keepDims = true;
    const lse = (0, _log_sum_exp.logSumExp)(logits, [dim], keepDims);
    const logResult = (0, _sub.sub)((0, _cast.cast)(logits, 'float32'), lse);
    save([labels, logResult]);
    const costVector = (0, _neg.neg)((0, _mul.mul)(logResult, labels));
    const value = (0, _sum.sum)(costVector, [dim]);

    const gradFunc = (dy, saved) => {
      const [labels, logResult] = saved;
      const dyShape = (0, _axis_util.expandShapeToKeepDim)(dy.shape, [dim]);
      return [(0, _mul.mul)((0, _reshape.reshape)(dy, dyShape), (0, _sub.sub)((0, _cast.cast)(labels, 'float32'), (0, _exp.exp)(logResult))), (0, _mul.mul)((0, _reshape.reshape)(dy, dyShape), (0, _sub.sub)((0, _exp.exp)(logResult), (0, _cast.cast)(labels, 'float32')))];
    };

    return {
      value,
      gradFunc
    };
  });
  return customOp(labels, logits);
}
/**
 * Computes the softmax cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)
 *                         + labelSmoothing / numClasses
 *
 * @param onehotLabels One hot encoded labels
 *    [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or 1, and must be
 *    broadcastable to `loss`  of shape [batch_size]
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
 */


function softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  let $onehotLabels = (0, _tensor_util_env.convertToTensor)(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');
  const $logits = (0, _tensor_util_env.convertToTensor)(logits, 'logits', 'softmaxCrossEntropy');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'softmaxCrossEntropy');
  }

  (0, _util.assertShapesMatch)($onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');

  if (labelSmoothing > 0) {
    const labelSmoothingScalar = (0, _scalar.scalar)(labelSmoothing);
    const one = (0, _scalar.scalar)(1);
    const numClasses = (0, _scalar.scalar)($onehotLabels.shape[1]);
    $onehotLabels = (0, _add.add)((0, _mul.mul)($onehotLabels, (0, _sub.sub)(one, labelSmoothingScalar)), (0, _div.div)(labelSmoothingScalar, numClasses));
  }

  const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const softmaxCrossEntropy = (0, _operation.op)({
  softmaxCrossEntropy_
});
exports.softmaxCrossEntropy = softmaxCrossEntropy;
},{"../../gradients":"node_modules/@tensorflow/tfjs-core/dist/gradients.js","../../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","../cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../exp":"node_modules/@tensorflow/tfjs-core/dist/ops/exp.js","../log_sum_exp":"node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js","../loss_ops_utils":"node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","../mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js","./compute_weighted_loss":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  image: true,
  linalg: true,
  losses: true,
  spectral: true,
  signal: true,
  abs: true,
  acos: true,
  acosh: true,
  add: true,
  addN: true,
  all: true,
  any: true,
  argMax: true,
  argMin: true,
  asin: true,
  asinh: true,
  atan: true,
  atan2: true,
  atanh: true,
  avgPool: true,
  avgPool3d: true,
  basicLSTMCell: true,
  batchToSpaceND: true,
  batchNorm: true,
  batchNorm2d: true,
  batchNorm3d: true,
  batchNorm4d: true,
  broadcastTo: true,
  buffer: true,
  cast: true,
  ceil: true,
  clipByValue: true,
  clone: true,
  complex: true,
  concat: true,
  concat1d: true,
  concat2d: true,
  concat3d: true,
  concat4d: true,
  conv1d: true,
  conv2d: true,
  conv2dTranspose: true,
  conv3d: true,
  conv3dTranspose: true,
  cos: true,
  cosh: true,
  cumsum: true,
  depthToSpace: true,
  depthwiseConv2d: true,
  diag: true,
  dilation2d: true,
  div: true,
  divNoNan: true,
  dot: true,
  elu: true,
  equal: true,
  erf: true,
  exp: true,
  expandDims: true,
  expm1: true,
  eye: true,
  fill: true,
  floor: true,
  floorDiv: true,
  gather: true,
  greater: true,
  greaterEqual: true,
  imag: true,
  isFinite: true,
  isInf: true,
  isNaN: true,
  leakyRelu: true,
  less: true,
  lessEqual: true,
  linspace: true,
  localResponseNormalization: true,
  log: true,
  log1p: true,
  logSigmoid: true,
  logSoftmax: true,
  logSumExp: true,
  logicalAnd: true,
  logicalNot: true,
  logicalOr: true,
  logicalXor: true,
  matMul: true,
  max: true,
  maxPool: true,
  maxPool3d: true,
  maxPoolWithArgmax: true,
  maximum: true,
  mean: true,
  min: true,
  minimum: true,
  mod: true,
  moments: true,
  mul: true,
  multiRNNCell: true,
  multinomial: true,
  neg: true,
  notEqual: true,
  oneHot: true,
  ones: true,
  onesLike: true,
  outerProduct: true,
  pad: true,
  pad1d: true,
  pad2d: true,
  pad3d: true,
  pad4d: true,
  pool: true,
  pow: true,
  prelu: true,
  print: true,
  prod: true,
  rand: true,
  randomGamma: true,
  randomNormal: true,
  randomUniform: true,
  range: true,
  real: true,
  reciprocal: true,
  relu: true,
  relu6: true,
  reshape: true,
  reverse: true,
  reverse1d: true,
  reverse2d: true,
  reverse3d: true,
  reverse4d: true,
  round: true,
  rsqrt: true,
  scalar: true,
  selu: true,
  separableConv2d: true,
  setdiff1dAsync: true,
  sigmoid: true,
  sign: true,
  sin: true,
  sinh: true,
  slice: true,
  slice1d: true,
  slice2d: true,
  slice3d: true,
  slice4d: true,
  softmax: true,
  softplus: true,
  spaceToBatchND: true,
  fft: true,
  ifft: true,
  irfft: true,
  rfft: true,
  split: true,
  sqrt: true,
  square: true,
  squaredDifference: true,
  squeeze: true,
  stack: true,
  step: true,
  stridedSlice: true,
  sub: true,
  sum: true,
  tan: true,
  tanh: true,
  tensor: true,
  tensor1d: true,
  tensor2d: true,
  tensor3d: true,
  tensor4d: true,
  tensor5d: true,
  tensor6d: true,
  tile: true,
  topk: true,
  truncatedNormal: true,
  unsortedSegmentSum: true,
  unstack: true,
  variable: true,
  where: true,
  whereAsync: true,
  zeros: true,
  zerosLike: true,
  op: true,
  OP_SCOPE_SUFFIX: true,
  fused: true
};
Object.defineProperty(exports, "abs", {
  enumerable: true,
  get: function () {
    return _abs.abs;
  }
});
Object.defineProperty(exports, "acos", {
  enumerable: true,
  get: function () {
    return _acos.acos;
  }
});
Object.defineProperty(exports, "acosh", {
  enumerable: true,
  get: function () {
    return _acosh.acosh;
  }
});
Object.defineProperty(exports, "add", {
  enumerable: true,
  get: function () {
    return _add.add;
  }
});
Object.defineProperty(exports, "addN", {
  enumerable: true,
  get: function () {
    return _add_n.addN;
  }
});
Object.defineProperty(exports, "all", {
  enumerable: true,
  get: function () {
    return _all.all;
  }
});
Object.defineProperty(exports, "any", {
  enumerable: true,
  get: function () {
    return _any.any;
  }
});
Object.defineProperty(exports, "argMax", {
  enumerable: true,
  get: function () {
    return _arg_max.argMax;
  }
});
Object.defineProperty(exports, "argMin", {
  enumerable: true,
  get: function () {
    return _arg_min.argMin;
  }
});
Object.defineProperty(exports, "asin", {
  enumerable: true,
  get: function () {
    return _asin.asin;
  }
});
Object.defineProperty(exports, "asinh", {
  enumerable: true,
  get: function () {
    return _asinh.asinh;
  }
});
Object.defineProperty(exports, "atan", {
  enumerable: true,
  get: function () {
    return _atan.atan;
  }
});
Object.defineProperty(exports, "atan2", {
  enumerable: true,
  get: function () {
    return _atan2.atan2;
  }
});
Object.defineProperty(exports, "atanh", {
  enumerable: true,
  get: function () {
    return _atanh.atanh;
  }
});
Object.defineProperty(exports, "avgPool", {
  enumerable: true,
  get: function () {
    return _avg_pool.avgPool;
  }
});
Object.defineProperty(exports, "avgPool3d", {
  enumerable: true,
  get: function () {
    return _avg_pool_3d.avgPool3d;
  }
});
Object.defineProperty(exports, "basicLSTMCell", {
  enumerable: true,
  get: function () {
    return _basic_lstm_cell.basicLSTMCell;
  }
});
Object.defineProperty(exports, "batchToSpaceND", {
  enumerable: true,
  get: function () {
    return _batch_to_space_nd.batchToSpaceND;
  }
});
Object.defineProperty(exports, "batchNorm", {
  enumerable: true,
  get: function () {
    return _batchnorm.batchNorm;
  }
});
Object.defineProperty(exports, "batchNorm2d", {
  enumerable: true,
  get: function () {
    return _batchnorm2d.batchNorm2d;
  }
});
Object.defineProperty(exports, "batchNorm3d", {
  enumerable: true,
  get: function () {
    return _batchnorm3d.batchNorm3d;
  }
});
Object.defineProperty(exports, "batchNorm4d", {
  enumerable: true,
  get: function () {
    return _batchnorm4d.batchNorm4d;
  }
});
Object.defineProperty(exports, "broadcastTo", {
  enumerable: true,
  get: function () {
    return _broadcast_to.broadcastTo;
  }
});
Object.defineProperty(exports, "buffer", {
  enumerable: true,
  get: function () {
    return _buffer.buffer;
  }
});
Object.defineProperty(exports, "cast", {
  enumerable: true,
  get: function () {
    return _cast.cast;
  }
});
Object.defineProperty(exports, "ceil", {
  enumerable: true,
  get: function () {
    return _ceil.ceil;
  }
});
Object.defineProperty(exports, "clipByValue", {
  enumerable: true,
  get: function () {
    return _clip_by_value.clipByValue;
  }
});
Object.defineProperty(exports, "clone", {
  enumerable: true,
  get: function () {
    return _clone.clone;
  }
});
Object.defineProperty(exports, "complex", {
  enumerable: true,
  get: function () {
    return _complex.complex;
  }
});
Object.defineProperty(exports, "concat", {
  enumerable: true,
  get: function () {
    return _concat.concat;
  }
});
Object.defineProperty(exports, "concat1d", {
  enumerable: true,
  get: function () {
    return _concat_1d.concat1d;
  }
});
Object.defineProperty(exports, "concat2d", {
  enumerable: true,
  get: function () {
    return _concat_2d.concat2d;
  }
});
Object.defineProperty(exports, "concat3d", {
  enumerable: true,
  get: function () {
    return _concat_3d.concat3d;
  }
});
Object.defineProperty(exports, "concat4d", {
  enumerable: true,
  get: function () {
    return _concat_4d.concat4d;
  }
});
Object.defineProperty(exports, "conv1d", {
  enumerable: true,
  get: function () {
    return _conv1d.conv1d;
  }
});
Object.defineProperty(exports, "conv2d", {
  enumerable: true,
  get: function () {
    return _conv2d.conv2d;
  }
});
Object.defineProperty(exports, "conv2dTranspose", {
  enumerable: true,
  get: function () {
    return _conv2d_transpose.conv2dTranspose;
  }
});
Object.defineProperty(exports, "conv3d", {
  enumerable: true,
  get: function () {
    return _conv3d.conv3d;
  }
});
Object.defineProperty(exports, "conv3dTranspose", {
  enumerable: true,
  get: function () {
    return _conv3d_transpose.conv3dTranspose;
  }
});
Object.defineProperty(exports, "cos", {
  enumerable: true,
  get: function () {
    return _cos.cos;
  }
});
Object.defineProperty(exports, "cosh", {
  enumerable: true,
  get: function () {
    return _cosh.cosh;
  }
});
Object.defineProperty(exports, "cumsum", {
  enumerable: true,
  get: function () {
    return _cumsum.cumsum;
  }
});
Object.defineProperty(exports, "depthToSpace", {
  enumerable: true,
  get: function () {
    return _depth_to_space.depthToSpace;
  }
});
Object.defineProperty(exports, "depthwiseConv2d", {
  enumerable: true,
  get: function () {
    return _depthwise_conv2d.depthwiseConv2d;
  }
});
Object.defineProperty(exports, "diag", {
  enumerable: true,
  get: function () {
    return _diag.diag;
  }
});
Object.defineProperty(exports, "dilation2d", {
  enumerable: true,
  get: function () {
    return _dilation2d.dilation2d;
  }
});
Object.defineProperty(exports, "div", {
  enumerable: true,
  get: function () {
    return _div.div;
  }
});
Object.defineProperty(exports, "divNoNan", {
  enumerable: true,
  get: function () {
    return _div_no_nan.divNoNan;
  }
});
Object.defineProperty(exports, "dot", {
  enumerable: true,
  get: function () {
    return _dot.dot;
  }
});
Object.defineProperty(exports, "elu", {
  enumerable: true,
  get: function () {
    return _elu.elu;
  }
});
Object.defineProperty(exports, "equal", {
  enumerable: true,
  get: function () {
    return _equal.equal;
  }
});
Object.defineProperty(exports, "erf", {
  enumerable: true,
  get: function () {
    return _erf.erf;
  }
});
Object.defineProperty(exports, "exp", {
  enumerable: true,
  get: function () {
    return _exp.exp;
  }
});
Object.defineProperty(exports, "expandDims", {
  enumerable: true,
  get: function () {
    return _expand_dims.expandDims;
  }
});
Object.defineProperty(exports, "expm1", {
  enumerable: true,
  get: function () {
    return _expm.expm1;
  }
});
Object.defineProperty(exports, "eye", {
  enumerable: true,
  get: function () {
    return _eye.eye;
  }
});
Object.defineProperty(exports, "fill", {
  enumerable: true,
  get: function () {
    return _fill.fill;
  }
});
Object.defineProperty(exports, "floor", {
  enumerable: true,
  get: function () {
    return _floor.floor;
  }
});
Object.defineProperty(exports, "floorDiv", {
  enumerable: true,
  get: function () {
    return _floorDiv.floorDiv;
  }
});
Object.defineProperty(exports, "gather", {
  enumerable: true,
  get: function () {
    return _gather.gather;
  }
});
Object.defineProperty(exports, "greater", {
  enumerable: true,
  get: function () {
    return _greater.greater;
  }
});
Object.defineProperty(exports, "greaterEqual", {
  enumerable: true,
  get: function () {
    return _greater_equal.greaterEqual;
  }
});
Object.defineProperty(exports, "imag", {
  enumerable: true,
  get: function () {
    return _imag.imag;
  }
});
Object.defineProperty(exports, "isFinite", {
  enumerable: true,
  get: function () {
    return _is_finite.isFinite;
  }
});
Object.defineProperty(exports, "isInf", {
  enumerable: true,
  get: function () {
    return _is_inf.isInf;
  }
});
Object.defineProperty(exports, "isNaN", {
  enumerable: true,
  get: function () {
    return _is_nan.isNaN;
  }
});
Object.defineProperty(exports, "leakyRelu", {
  enumerable: true,
  get: function () {
    return _leaky_relu.leakyRelu;
  }
});
Object.defineProperty(exports, "less", {
  enumerable: true,
  get: function () {
    return _less.less;
  }
});
Object.defineProperty(exports, "lessEqual", {
  enumerable: true,
  get: function () {
    return _less_equal.lessEqual;
  }
});
Object.defineProperty(exports, "linspace", {
  enumerable: true,
  get: function () {
    return _linspace.linspace;
  }
});
Object.defineProperty(exports, "localResponseNormalization", {
  enumerable: true,
  get: function () {
    return _local_response_normalization.localResponseNormalization;
  }
});
Object.defineProperty(exports, "log", {
  enumerable: true,
  get: function () {
    return _log.log;
  }
});
Object.defineProperty(exports, "log1p", {
  enumerable: true,
  get: function () {
    return _log1p.log1p;
  }
});
Object.defineProperty(exports, "logSigmoid", {
  enumerable: true,
  get: function () {
    return _log_sigmoid.logSigmoid;
  }
});
Object.defineProperty(exports, "logSoftmax", {
  enumerable: true,
  get: function () {
    return _log_softmax.logSoftmax;
  }
});
Object.defineProperty(exports, "logSumExp", {
  enumerable: true,
  get: function () {
    return _log_sum_exp.logSumExp;
  }
});
Object.defineProperty(exports, "logicalAnd", {
  enumerable: true,
  get: function () {
    return _logical_and.logicalAnd;
  }
});
Object.defineProperty(exports, "logicalNot", {
  enumerable: true,
  get: function () {
    return _logical_not.logicalNot;
  }
});
Object.defineProperty(exports, "logicalOr", {
  enumerable: true,
  get: function () {
    return _logical_or.logicalOr;
  }
});
Object.defineProperty(exports, "logicalXor", {
  enumerable: true,
  get: function () {
    return _logical_xor.logicalXor;
  }
});
Object.defineProperty(exports, "matMul", {
  enumerable: true,
  get: function () {
    return _mat_mul.matMul;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.max;
  }
});
Object.defineProperty(exports, "maxPool", {
  enumerable: true,
  get: function () {
    return _max_pool.maxPool;
  }
});
Object.defineProperty(exports, "maxPool3d", {
  enumerable: true,
  get: function () {
    return _max_pool_3d.maxPool3d;
  }
});
Object.defineProperty(exports, "maxPoolWithArgmax", {
  enumerable: true,
  get: function () {
    return _max_pool_with_argmax.maxPoolWithArgmax;
  }
});
Object.defineProperty(exports, "maximum", {
  enumerable: true,
  get: function () {
    return _maximum.maximum;
  }
});
Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function () {
    return _mean.mean;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.min;
  }
});
Object.defineProperty(exports, "minimum", {
  enumerable: true,
  get: function () {
    return _minimum.minimum;
  }
});
Object.defineProperty(exports, "mod", {
  enumerable: true,
  get: function () {
    return _mod.mod;
  }
});
Object.defineProperty(exports, "moments", {
  enumerable: true,
  get: function () {
    return _moments.moments;
  }
});
Object.defineProperty(exports, "mul", {
  enumerable: true,
  get: function () {
    return _mul.mul;
  }
});
Object.defineProperty(exports, "multiRNNCell", {
  enumerable: true,
  get: function () {
    return _multi_rnn_cell.multiRNNCell;
  }
});
Object.defineProperty(exports, "multinomial", {
  enumerable: true,
  get: function () {
    return _multinomial.multinomial;
  }
});
Object.defineProperty(exports, "neg", {
  enumerable: true,
  get: function () {
    return _neg.neg;
  }
});
Object.defineProperty(exports, "notEqual", {
  enumerable: true,
  get: function () {
    return _not_equal.notEqual;
  }
});
Object.defineProperty(exports, "oneHot", {
  enumerable: true,
  get: function () {
    return _one_hot.oneHot;
  }
});
Object.defineProperty(exports, "ones", {
  enumerable: true,
  get: function () {
    return _ones.ones;
  }
});
Object.defineProperty(exports, "onesLike", {
  enumerable: true,
  get: function () {
    return _ones_like.onesLike;
  }
});
Object.defineProperty(exports, "outerProduct", {
  enumerable: true,
  get: function () {
    return _outer_product.outerProduct;
  }
});
Object.defineProperty(exports, "pad", {
  enumerable: true,
  get: function () {
    return _pad.pad;
  }
});
Object.defineProperty(exports, "pad1d", {
  enumerable: true,
  get: function () {
    return _pad1d.pad1d;
  }
});
Object.defineProperty(exports, "pad2d", {
  enumerable: true,
  get: function () {
    return _pad2d.pad2d;
  }
});
Object.defineProperty(exports, "pad3d", {
  enumerable: true,
  get: function () {
    return _pad3d.pad3d;
  }
});
Object.defineProperty(exports, "pad4d", {
  enumerable: true,
  get: function () {
    return _pad4d.pad4d;
  }
});
Object.defineProperty(exports, "pool", {
  enumerable: true,
  get: function () {
    return _pool.pool;
  }
});
Object.defineProperty(exports, "pow", {
  enumerable: true,
  get: function () {
    return _pow.pow;
  }
});
Object.defineProperty(exports, "prelu", {
  enumerable: true,
  get: function () {
    return _prelu.prelu;
  }
});
Object.defineProperty(exports, "print", {
  enumerable: true,
  get: function () {
    return _print.print;
  }
});
Object.defineProperty(exports, "prod", {
  enumerable: true,
  get: function () {
    return _prod.prod;
  }
});
Object.defineProperty(exports, "rand", {
  enumerable: true,
  get: function () {
    return _rand.rand;
  }
});
Object.defineProperty(exports, "randomGamma", {
  enumerable: true,
  get: function () {
    return _random_gamma.randomGamma;
  }
});
Object.defineProperty(exports, "randomNormal", {
  enumerable: true,
  get: function () {
    return _random_normal.randomNormal;
  }
});
Object.defineProperty(exports, "randomUniform", {
  enumerable: true,
  get: function () {
    return _random_uniform.randomUniform;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.range;
  }
});
Object.defineProperty(exports, "real", {
  enumerable: true,
  get: function () {
    return _real.real;
  }
});
Object.defineProperty(exports, "reciprocal", {
  enumerable: true,
  get: function () {
    return _reciprocal.reciprocal;
  }
});
Object.defineProperty(exports, "relu", {
  enumerable: true,
  get: function () {
    return _relu.relu;
  }
});
Object.defineProperty(exports, "relu6", {
  enumerable: true,
  get: function () {
    return _relu2.relu6;
  }
});
Object.defineProperty(exports, "reshape", {
  enumerable: true,
  get: function () {
    return _reshape.reshape;
  }
});
Object.defineProperty(exports, "reverse", {
  enumerable: true,
  get: function () {
    return _reverse.reverse;
  }
});
Object.defineProperty(exports, "reverse1d", {
  enumerable: true,
  get: function () {
    return _reverse_1d.reverse1d;
  }
});
Object.defineProperty(exports, "reverse2d", {
  enumerable: true,
  get: function () {
    return _reverse_2d.reverse2d;
  }
});
Object.defineProperty(exports, "reverse3d", {
  enumerable: true,
  get: function () {
    return _reverse_3d.reverse3d;
  }
});
Object.defineProperty(exports, "reverse4d", {
  enumerable: true,
  get: function () {
    return _reverse_4d.reverse4d;
  }
});
Object.defineProperty(exports, "round", {
  enumerable: true,
  get: function () {
    return _round.round;
  }
});
Object.defineProperty(exports, "rsqrt", {
  enumerable: true,
  get: function () {
    return _rsqrt.rsqrt;
  }
});
Object.defineProperty(exports, "scalar", {
  enumerable: true,
  get: function () {
    return _scalar.scalar;
  }
});
Object.defineProperty(exports, "selu", {
  enumerable: true,
  get: function () {
    return _selu.selu;
  }
});
Object.defineProperty(exports, "separableConv2d", {
  enumerable: true,
  get: function () {
    return _separable_conv2d.separableConv2d;
  }
});
Object.defineProperty(exports, "setdiff1dAsync", {
  enumerable: true,
  get: function () {
    return _setdiff1d_async.setdiff1dAsync;
  }
});
Object.defineProperty(exports, "sigmoid", {
  enumerable: true,
  get: function () {
    return _sigmoid.sigmoid;
  }
});
Object.defineProperty(exports, "sign", {
  enumerable: true,
  get: function () {
    return _sign.sign;
  }
});
Object.defineProperty(exports, "sin", {
  enumerable: true,
  get: function () {
    return _sin.sin;
  }
});
Object.defineProperty(exports, "sinh", {
  enumerable: true,
  get: function () {
    return _sinh.sinh;
  }
});
Object.defineProperty(exports, "slice", {
  enumerable: true,
  get: function () {
    return _slice.slice;
  }
});
Object.defineProperty(exports, "slice1d", {
  enumerable: true,
  get: function () {
    return _slice1d.slice1d;
  }
});
Object.defineProperty(exports, "slice2d", {
  enumerable: true,
  get: function () {
    return _slice2d.slice2d;
  }
});
Object.defineProperty(exports, "slice3d", {
  enumerable: true,
  get: function () {
    return _slice3d.slice3d;
  }
});
Object.defineProperty(exports, "slice4d", {
  enumerable: true,
  get: function () {
    return _slice4d.slice4d;
  }
});
Object.defineProperty(exports, "softmax", {
  enumerable: true,
  get: function () {
    return _softmax.softmax;
  }
});
Object.defineProperty(exports, "softplus", {
  enumerable: true,
  get: function () {
    return _softplus.softplus;
  }
});
Object.defineProperty(exports, "spaceToBatchND", {
  enumerable: true,
  get: function () {
    return _space_to_batch_nd.spaceToBatchND;
  }
});
Object.defineProperty(exports, "fft", {
  enumerable: true,
  get: function () {
    return _fft.fft;
  }
});
Object.defineProperty(exports, "ifft", {
  enumerable: true,
  get: function () {
    return _ifft.ifft;
  }
});
Object.defineProperty(exports, "irfft", {
  enumerable: true,
  get: function () {
    return _irfft.irfft;
  }
});
Object.defineProperty(exports, "rfft", {
  enumerable: true,
  get: function () {
    return _rfft.rfft;
  }
});
Object.defineProperty(exports, "split", {
  enumerable: true,
  get: function () {
    return _split.split;
  }
});
Object.defineProperty(exports, "sqrt", {
  enumerable: true,
  get: function () {
    return _sqrt.sqrt;
  }
});
Object.defineProperty(exports, "square", {
  enumerable: true,
  get: function () {
    return _square.square;
  }
});
Object.defineProperty(exports, "squaredDifference", {
  enumerable: true,
  get: function () {
    return _squared_difference.squaredDifference;
  }
});
Object.defineProperty(exports, "squeeze", {
  enumerable: true,
  get: function () {
    return _squeeze.squeeze;
  }
});
Object.defineProperty(exports, "stack", {
  enumerable: true,
  get: function () {
    return _stack.stack;
  }
});
Object.defineProperty(exports, "step", {
  enumerable: true,
  get: function () {
    return _step.step;
  }
});
Object.defineProperty(exports, "stridedSlice", {
  enumerable: true,
  get: function () {
    return _strided_slice.stridedSlice;
  }
});
Object.defineProperty(exports, "sub", {
  enumerable: true,
  get: function () {
    return _sub.sub;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function () {
    return _sum.sum;
  }
});
Object.defineProperty(exports, "tan", {
  enumerable: true,
  get: function () {
    return _tan.tan;
  }
});
Object.defineProperty(exports, "tanh", {
  enumerable: true,
  get: function () {
    return _tanh.tanh;
  }
});
Object.defineProperty(exports, "tensor", {
  enumerable: true,
  get: function () {
    return _tensor.tensor;
  }
});
Object.defineProperty(exports, "tensor1d", {
  enumerable: true,
  get: function () {
    return _tensor1d.tensor1d;
  }
});
Object.defineProperty(exports, "tensor2d", {
  enumerable: true,
  get: function () {
    return _tensor2d.tensor2d;
  }
});
Object.defineProperty(exports, "tensor3d", {
  enumerable: true,
  get: function () {
    return _tensor3d.tensor3d;
  }
});
Object.defineProperty(exports, "tensor4d", {
  enumerable: true,
  get: function () {
    return _tensor4d.tensor4d;
  }
});
Object.defineProperty(exports, "tensor5d", {
  enumerable: true,
  get: function () {
    return _tensor5d.tensor5d;
  }
});
Object.defineProperty(exports, "tensor6d", {
  enumerable: true,
  get: function () {
    return _tensor6d.tensor6d;
  }
});
Object.defineProperty(exports, "tile", {
  enumerable: true,
  get: function () {
    return _tile.tile;
  }
});
Object.defineProperty(exports, "topk", {
  enumerable: true,
  get: function () {
    return _topk.topk;
  }
});
Object.defineProperty(exports, "truncatedNormal", {
  enumerable: true,
  get: function () {
    return _truncated_normal.truncatedNormal;
  }
});
Object.defineProperty(exports, "unsortedSegmentSum", {
  enumerable: true,
  get: function () {
    return _unsorted_segment_sum.unsortedSegmentSum;
  }
});
Object.defineProperty(exports, "unstack", {
  enumerable: true,
  get: function () {
    return _unstack.unstack;
  }
});
Object.defineProperty(exports, "variable", {
  enumerable: true,
  get: function () {
    return _variable.variable;
  }
});
Object.defineProperty(exports, "where", {
  enumerable: true,
  get: function () {
    return _where.where;
  }
});
Object.defineProperty(exports, "whereAsync", {
  enumerable: true,
  get: function () {
    return _where_async.whereAsync;
  }
});
Object.defineProperty(exports, "zeros", {
  enumerable: true,
  get: function () {
    return _zeros.zeros;
  }
});
Object.defineProperty(exports, "zerosLike", {
  enumerable: true,
  get: function () {
    return _zeros_like.zerosLike;
  }
});
Object.defineProperty(exports, "op", {
  enumerable: true,
  get: function () {
    return _operation.op;
  }
});
Object.defineProperty(exports, "OP_SCOPE_SUFFIX", {
  enumerable: true,
  get: function () {
    return _operation.OP_SCOPE_SUFFIX;
  }
});
exports.fused = exports.signal = exports.spectral = exports.losses = exports.linalg = exports.image = void 0;

var _abs = require("./abs");

var _acos = require("./acos");

var _acosh = require("./acosh");

var _add = require("./add");

var _add_n = require("./add_n");

var _all = require("./all");

var _any = require("./any");

var _arg_max = require("./arg_max");

var _arg_min = require("./arg_min");

var _asin = require("./asin");

var _asinh = require("./asinh");

var _atan = require("./atan");

var _atan2 = require("./atan2");

var _atanh = require("./atanh");

var _avg_pool = require("./avg_pool");

var _avg_pool_3d = require("./avg_pool_3d");

var _basic_lstm_cell = require("./basic_lstm_cell");

var _batch_to_space_nd = require("./batch_to_space_nd");

var _batchnorm = require("./batchnorm");

var _batchnorm2d = require("./batchnorm2d");

var _batchnorm3d = require("./batchnorm3d");

var _batchnorm4d = require("./batchnorm4d");

var _broadcast_to = require("./broadcast_to");

var _buffer = require("./buffer");

var _cast = require("./cast");

var _ceil = require("./ceil");

var _clip_by_value = require("./clip_by_value");

var _clone = require("./clone");

var _complex = require("./complex");

var _concat = require("./concat");

var _concat_1d = require("./concat_1d");

var _concat_2d = require("./concat_2d");

var _concat_3d = require("./concat_3d");

var _concat_4d = require("./concat_4d");

var _conv1d = require("./conv1d");

var _conv2d = require("./conv2d");

var _conv2d_transpose = require("./conv2d_transpose");

var _conv3d = require("./conv3d");

var _conv3d_transpose = require("./conv3d_transpose");

var _cos = require("./cos");

var _cosh = require("./cosh");

var _cumsum = require("./cumsum");

var _depth_to_space = require("./depth_to_space");

var _depthwise_conv2d = require("./depthwise_conv2d");

var _diag = require("./diag");

var _dilation2d = require("./dilation2d");

var _div = require("./div");

var _div_no_nan = require("./div_no_nan");

var _dot = require("./dot");

var _elu = require("./elu");

var _equal = require("./equal");

var _erf = require("./erf");

var _exp = require("./exp");

var _expand_dims = require("./expand_dims");

var _expm = require("./expm1");

var _eye = require("./eye");

var _fill = require("./fill");

var _floor = require("./floor");

var _floorDiv = require("./floorDiv");

var _gather = require("./gather");

var _greater = require("./greater");

var _greater_equal = require("./greater_equal");

var _imag = require("./imag");

var _is_finite = require("./is_finite");

var _is_inf = require("./is_inf");

var _is_nan = require("./is_nan");

var _leaky_relu = require("./leaky_relu");

var _less = require("./less");

var _less_equal = require("./less_equal");

var _linspace = require("./linspace");

var _local_response_normalization = require("./local_response_normalization");

var _log = require("./log");

var _log1p = require("./log1p");

var _log_sigmoid = require("./log_sigmoid");

var _log_softmax = require("./log_softmax");

var _log_sum_exp = require("./log_sum_exp");

var _logical_and = require("./logical_and");

var _logical_not = require("./logical_not");

var _logical_or = require("./logical_or");

var _logical_xor = require("./logical_xor");

var _mat_mul = require("./mat_mul");

var _max = require("./max");

var _max_pool = require("./max_pool");

var _max_pool_3d = require("./max_pool_3d");

var _max_pool_with_argmax = require("./max_pool_with_argmax");

var _maximum = require("./maximum");

var _mean = require("./mean");

var _min = require("./min");

var _minimum = require("./minimum");

var _mod = require("./mod");

var _moments = require("./moments");

var _mul = require("./mul");

var _multi_rnn_cell = require("./multi_rnn_cell");

var _multinomial = require("./multinomial");

var _neg = require("./neg");

var _not_equal = require("./not_equal");

var _one_hot = require("./one_hot");

var _ones = require("./ones");

var _ones_like = require("./ones_like");

var _outer_product = require("./outer_product");

var _pad = require("./pad");

var _pad1d = require("./pad1d");

var _pad2d = require("./pad2d");

var _pad3d = require("./pad3d");

var _pad4d = require("./pad4d");

var _pool = require("./pool");

var _pow = require("./pow");

var _prelu = require("./prelu");

var _print = require("./print");

var _prod = require("./prod");

var _rand = require("./rand");

var _random_gamma = require("./random_gamma");

var _random_normal = require("./random_normal");

var _random_uniform = require("./random_uniform");

var _range = require("./range");

var _real = require("./real");

var _reciprocal = require("./reciprocal");

var _relu = require("./relu");

var _relu2 = require("./relu6");

var _reshape = require("./reshape");

var _reverse = require("./reverse");

var _reverse_1d = require("./reverse_1d");

var _reverse_2d = require("./reverse_2d");

var _reverse_3d = require("./reverse_3d");

var _reverse_4d = require("./reverse_4d");

var _round = require("./round");

var _rsqrt = require("./rsqrt");

var _scalar = require("./scalar");

var _selu = require("./selu");

var _separable_conv2d = require("./separable_conv2d");

var _setdiff1d_async = require("./setdiff1d_async");

var _sigmoid = require("./sigmoid");

var _sign = require("./sign");

var _sin = require("./sin");

var _sinh = require("./sinh");

var _slice = require("./slice");

var _slice1d = require("./slice1d");

var _slice2d = require("./slice2d");

var _slice3d = require("./slice3d");

var _slice4d = require("./slice4d");

var _softmax = require("./softmax");

var _softplus = require("./softplus");

var _space_to_batch_nd = require("./space_to_batch_nd");

var _fft = require("./spectral/fft");

var _ifft = require("./spectral/ifft");

var _irfft = require("./spectral/irfft");

var _rfft = require("./spectral/rfft");

var _split = require("./split");

var _sqrt = require("./sqrt");

var _square = require("./square");

var _squared_difference = require("./squared_difference");

var _squeeze = require("./squeeze");

var _stack = require("./stack");

var _step = require("./step");

var _strided_slice = require("./strided_slice");

var _sub = require("./sub");

var _sum = require("./sum");

var _tan = require("./tan");

var _tanh = require("./tanh");

var _tensor = require("./tensor");

var _tensor1d = require("./tensor1d");

var _tensor2d = require("./tensor2d");

var _tensor3d = require("./tensor3d");

var _tensor4d = require("./tensor4d");

var _tensor5d = require("./tensor5d");

var _tensor6d = require("./tensor6d");

var _tile = require("./tile");

var _topk = require("./topk");

var _truncated_normal = require("./truncated_normal");

var _unsorted_segment_sum = require("./unsorted_segment_sum");

var _unstack = require("./unstack");

var _variable = require("./variable");

var _where = require("./where");

var _where_async = require("./where_async");

var _zeros = require("./zeros");

var _zeros_like = require("./zeros_like");

var _boolean_mask = require("./boolean_mask");

Object.keys(_boolean_mask).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _boolean_mask[key];
    }
  });
});

var _compare = require("./compare");

Object.keys(_compare).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _compare[key];
    }
  });
});

var _binary_ops = require("./binary_ops");

Object.keys(_binary_ops).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _binary_ops[key];
    }
  });
});

var _transpose = require("./transpose");

Object.keys(_transpose).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _transpose[key];
    }
  });
});

var _norm = require("./norm");

Object.keys(_norm).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _norm[key];
    }
  });
});

var _moving_average = require("./moving_average");

Object.keys(_moving_average).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _moving_average[key];
    }
  });
});

var _scatter_nd = require("./scatter_nd");

Object.keys(_scatter_nd).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _scatter_nd[key];
    }
  });
});

var _sparse_to_dense = require("./sparse_to_dense");

Object.keys(_sparse_to_dense).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _sparse_to_dense[key];
    }
  });
});

var _gather_nd = require("./gather_nd");

Object.keys(_gather_nd).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gather_nd[key];
    }
  });
});

var _dropout = require("./dropout");

Object.keys(_dropout).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dropout[key];
    }
  });
});

var _signal_ops_util = require("./signal_ops_util");

Object.keys(_signal_ops_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _signal_ops_util[key];
    }
  });
});

var _in_top_k = require("./in_top_k");

Object.keys(_in_top_k).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _in_top_k[key];
    }
  });
});

var _operation = require("./operation");

var fused = _interopRequireWildcard(require("./fused_ops"));

exports.fused = fused;

var _hamming_window = require("./signal/hamming_window");

var _hann_window = require("./signal/hann_window");

var _frame = require("./signal/frame");

var _stft = require("./signal/stft");

var _crop_and_resize = require("./image/crop_and_resize");

var _flip_left_right = require("./image/flip_left_right");

var _rotate_with_offset = require("./image/rotate_with_offset");

var _non_max_suppression = require("./image/non_max_suppression");

var _non_max_suppression_async = require("./image/non_max_suppression_async");

var _non_max_suppression_with_score = require("./image/non_max_suppression_with_score");

var _non_max_suppression_with_score_async = require("./image/non_max_suppression_with_score_async");

var _non_max_suppression_padded = require("./image/non_max_suppression_padded");

var _non_max_suppression_padded_async = require("./image/non_max_suppression_padded_async");

var _resize_bilinear = require("./image/resize_bilinear");

var _resize_nearest_neighbor = require("./image/resize_nearest_neighbor");

var _band_part = require("./linalg/band_part");

var _gram_schmidt = require("./linalg/gram_schmidt");

var _qr = require("./linalg/qr");

var _absolute_difference = require("./losses/absolute_difference");

var _compute_weighted_loss = require("./losses/compute_weighted_loss");

var _cosine_distance = require("./losses/cosine_distance");

var _hinge_loss = require("./losses/hinge_loss");

var _huber_loss = require("./losses/huber_loss");

var _log_loss = require("./losses/log_loss");

var _mean_squared_error = require("./losses/mean_squared_error");

var _sigmoid_cross_entropy = require("./losses/sigmoid_cross_entropy");

var _softmax_cross_entropy = require("./losses/softmax_cross_entropy");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Modularized ops.
const spectral = {
  fft: _fft.fft,
  ifft: _ifft.ifft,
  rfft: _rfft.rfft,
  irfft: _irfft.irfft
};
exports.spectral = spectral;
const signal = {
  hammingWindow: _hamming_window.hammingWindow,
  hannWindow: _hann_window.hannWindow,
  frame: _frame.frame,
  stft: _stft.stft
}; // Image Ops namespace

exports.signal = signal;
const image = {
  flipLeftRight: _flip_left_right.flipLeftRight,
  resizeNearestNeighbor: _resize_nearest_neighbor.resizeNearestNeighbor,
  resizeBilinear: _resize_bilinear.resizeBilinear,
  rotateWithOffset: _rotate_with_offset.rotateWithOffset,
  cropAndResize: _crop_and_resize.cropAndResize,
  nonMaxSuppression: _non_max_suppression.nonMaxSuppression,
  nonMaxSuppressionAsync: _non_max_suppression_async.nonMaxSuppressionAsync,
  nonMaxSuppressionWithScore: _non_max_suppression_with_score.nonMaxSuppressionWithScore,
  nonMaxSuppressionWithScoreAsync: _non_max_suppression_with_score_async.nonMaxSuppressionWithScoreAsync,
  nonMaxSuppressionPadded: _non_max_suppression_padded.nonMaxSuppressionPadded,
  nonMaxSuppressionPaddedAsync: _non_max_suppression_padded_async.nonMaxSuppressionPaddedAsync
}; // linalg namespace

exports.image = image;
const linalg = {
  bandPart: _band_part.bandPart,
  gramSchmidt: _gram_schmidt.gramSchmidt,
  qr: _qr.qr
}; // losses namespace;

exports.linalg = linalg;
const losses = {
  absoluteDifference: _absolute_difference.absoluteDifference,
  computeWeightedLoss: _compute_weighted_loss.computeWeightedLoss,
  cosineDistance: _cosine_distance.cosineDistance,
  hingeLoss: _hinge_loss.hingeLoss,
  huberLoss: _huber_loss.huberLoss,
  logLoss: _log_loss.logLoss,
  meanSquaredError: _mean_squared_error.meanSquaredError,
  sigmoidCrossEntropy: _sigmoid_cross_entropy.sigmoidCrossEntropy,
  softmaxCrossEntropy: _softmax_cross_entropy.softmaxCrossEntropy
}; // Second level exports.

exports.losses = losses;
},{"./abs":"node_modules/@tensorflow/tfjs-core/dist/ops/abs.js","./acos":"node_modules/@tensorflow/tfjs-core/dist/ops/acos.js","./acosh":"node_modules/@tensorflow/tfjs-core/dist/ops/acosh.js","./add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","./add_n":"node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js","./all":"node_modules/@tensorflow/tfjs-core/dist/ops/all.js","./any":"node_modules/@tensorflow/tfjs-core/dist/ops/any.js","./arg_max":"node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js","./arg_min":"node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js","./asin":"node_modules/@tensorflow/tfjs-core/dist/ops/asin.js","./asinh":"node_modules/@tensorflow/tfjs-core/dist/ops/asinh.js","./atan":"node_modules/@tensorflow/tfjs-core/dist/ops/atan.js","./atan2":"node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js","./atanh":"node_modules/@tensorflow/tfjs-core/dist/ops/atanh.js","./avg_pool":"node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js","./avg_pool_3d":"node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d.js","./basic_lstm_cell":"node_modules/@tensorflow/tfjs-core/dist/ops/basic_lstm_cell.js","./batch_to_space_nd":"node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js","./batchnorm":"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","./batchnorm2d":"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm2d.js","./batchnorm3d":"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm3d.js","./batchnorm4d":"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js","./broadcast_to":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js","./buffer":"node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./ceil":"node_modules/@tensorflow/tfjs-core/dist/ops/ceil.js","./clip_by_value":"node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js","./clone":"node_modules/@tensorflow/tfjs-core/dist/ops/clone.js","./complex":"node_modules/@tensorflow/tfjs-core/dist/ops/complex.js","./concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","./concat_1d":"node_modules/@tensorflow/tfjs-core/dist/ops/concat_1d.js","./concat_2d":"node_modules/@tensorflow/tfjs-core/dist/ops/concat_2d.js","./concat_3d":"node_modules/@tensorflow/tfjs-core/dist/ops/concat_3d.js","./concat_4d":"node_modules/@tensorflow/tfjs-core/dist/ops/concat_4d.js","./conv1d":"node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js","./conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js","./conv2d_transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js","./conv3d":"node_modules/@tensorflow/tfjs-core/dist/ops/conv3d.js","./conv3d_transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_transpose.js","./cos":"node_modules/@tensorflow/tfjs-core/dist/ops/cos.js","./cosh":"node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js","./cumsum":"node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js","./depth_to_space":"node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js","./depthwise_conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js","./diag":"node_modules/@tensorflow/tfjs-core/dist/ops/diag.js","./dilation2d":"node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js","./div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","./div_no_nan":"node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js","./dot":"node_modules/@tensorflow/tfjs-core/dist/ops/dot.js","./elu":"node_modules/@tensorflow/tfjs-core/dist/ops/elu.js","./equal":"node_modules/@tensorflow/tfjs-core/dist/ops/equal.js","./erf":"node_modules/@tensorflow/tfjs-core/dist/ops/erf.js","./exp":"node_modules/@tensorflow/tfjs-core/dist/ops/exp.js","./expand_dims":"node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js","./expm1":"node_modules/@tensorflow/tfjs-core/dist/ops/expm1.js","./eye":"node_modules/@tensorflow/tfjs-core/dist/ops/eye.js","./fill":"node_modules/@tensorflow/tfjs-core/dist/ops/fill.js","./floor":"node_modules/@tensorflow/tfjs-core/dist/ops/floor.js","./floorDiv":"node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js","./gather":"node_modules/@tensorflow/tfjs-core/dist/ops/gather.js","./greater":"node_modules/@tensorflow/tfjs-core/dist/ops/greater.js","./greater_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js","./imag":"node_modules/@tensorflow/tfjs-core/dist/ops/imag.js","./is_finite":"node_modules/@tensorflow/tfjs-core/dist/ops/is_finite.js","./is_inf":"node_modules/@tensorflow/tfjs-core/dist/ops/is_inf.js","./is_nan":"node_modules/@tensorflow/tfjs-core/dist/ops/is_nan.js","./leaky_relu":"node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js","./less":"node_modules/@tensorflow/tfjs-core/dist/ops/less.js","./less_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js","./linspace":"node_modules/@tensorflow/tfjs-core/dist/ops/linspace.js","./local_response_normalization":"node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js","./log":"node_modules/@tensorflow/tfjs-core/dist/ops/log.js","./log1p":"node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js","./log_sigmoid":"node_modules/@tensorflow/tfjs-core/dist/ops/log_sigmoid.js","./log_softmax":"node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js","./log_sum_exp":"node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js","./logical_and":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js","./logical_not":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js","./logical_or":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js","./logical_xor":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js","./mat_mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js","./max":"node_modules/@tensorflow/tfjs-core/dist/ops/max.js","./max_pool":"node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js","./max_pool_3d":"node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d.js","./max_pool_with_argmax":"node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js","./maximum":"node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js","./mean":"node_modules/@tensorflow/tfjs-core/dist/ops/mean.js","./min":"node_modules/@tensorflow/tfjs-core/dist/ops/min.js","./minimum":"node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js","./mod":"node_modules/@tensorflow/tfjs-core/dist/ops/mod.js","./moments":"node_modules/@tensorflow/tfjs-core/dist/ops/moments.js","./mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","./multi_rnn_cell":"node_modules/@tensorflow/tfjs-core/dist/ops/multi_rnn_cell.js","./multinomial":"node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js","./neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","./not_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js","./one_hot":"node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js","./ones":"node_modules/@tensorflow/tfjs-core/dist/ops/ones.js","./ones_like":"node_modules/@tensorflow/tfjs-core/dist/ops/ones_like.js","./outer_product":"node_modules/@tensorflow/tfjs-core/dist/ops/outer_product.js","./pad":"node_modules/@tensorflow/tfjs-core/dist/ops/pad.js","./pad1d":"node_modules/@tensorflow/tfjs-core/dist/ops/pad1d.js","./pad2d":"node_modules/@tensorflow/tfjs-core/dist/ops/pad2d.js","./pad3d":"node_modules/@tensorflow/tfjs-core/dist/ops/pad3d.js","./pad4d":"node_modules/@tensorflow/tfjs-core/dist/ops/pad4d.js","./pool":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","./pow":"node_modules/@tensorflow/tfjs-core/dist/ops/pow.js","./prelu":"node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js","./print":"node_modules/@tensorflow/tfjs-core/dist/ops/print.js","./prod":"node_modules/@tensorflow/tfjs-core/dist/ops/prod.js","./rand":"node_modules/@tensorflow/tfjs-core/dist/ops/rand.js","./random_gamma":"node_modules/@tensorflow/tfjs-core/dist/ops/random_gamma.js","./random_normal":"node_modules/@tensorflow/tfjs-core/dist/ops/random_normal.js","./random_uniform":"node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js","./range":"node_modules/@tensorflow/tfjs-core/dist/ops/range.js","./real":"node_modules/@tensorflow/tfjs-core/dist/ops/real.js","./reciprocal":"node_modules/@tensorflow/tfjs-core/dist/ops/reciprocal.js","./relu":"node_modules/@tensorflow/tfjs-core/dist/ops/relu.js","./relu6":"node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./reverse":"node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js","./reverse_1d":"node_modules/@tensorflow/tfjs-core/dist/ops/reverse_1d.js","./reverse_2d":"node_modules/@tensorflow/tfjs-core/dist/ops/reverse_2d.js","./reverse_3d":"node_modules/@tensorflow/tfjs-core/dist/ops/reverse_3d.js","./reverse_4d":"node_modules/@tensorflow/tfjs-core/dist/ops/reverse_4d.js","./round":"node_modules/@tensorflow/tfjs-core/dist/ops/round.js","./rsqrt":"node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js","./scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","./selu":"node_modules/@tensorflow/tfjs-core/dist/ops/selu.js","./separable_conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js","./setdiff1d_async":"node_modules/@tensorflow/tfjs-core/dist/ops/setdiff1d_async.js","./sigmoid":"node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js","./sign":"node_modules/@tensorflow/tfjs-core/dist/ops/sign.js","./sin":"node_modules/@tensorflow/tfjs-core/dist/ops/sin.js","./sinh":"node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js","./slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js","./slice1d":"node_modules/@tensorflow/tfjs-core/dist/ops/slice1d.js","./slice2d":"node_modules/@tensorflow/tfjs-core/dist/ops/slice2d.js","./slice3d":"node_modules/@tensorflow/tfjs-core/dist/ops/slice3d.js","./slice4d":"node_modules/@tensorflow/tfjs-core/dist/ops/slice4d.js","./softmax":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","./softplus":"node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js","./space_to_batch_nd":"node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js","./spectral/fft":"node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js","./spectral/ifft":"node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js","./spectral/irfft":"node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js","./spectral/rfft":"node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js","./split":"node_modules/@tensorflow/tfjs-core/dist/ops/split.js","./sqrt":"node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js","./square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","./squared_difference":"node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js","./squeeze":"node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js","./stack":"node_modules/@tensorflow/tfjs-core/dist/ops/stack.js","./step":"node_modules/@tensorflow/tfjs-core/dist/ops/step.js","./strided_slice":"node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js","./sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","./sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js","./tan":"node_modules/@tensorflow/tfjs-core/dist/ops/tan.js","./tanh":"node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js","./tensor":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js","./tensor1d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js","./tensor2d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js","./tensor3d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js","./tensor4d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor4d.js","./tensor5d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor5d.js","./tensor6d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor6d.js","./tile":"node_modules/@tensorflow/tfjs-core/dist/ops/tile.js","./topk":"node_modules/@tensorflow/tfjs-core/dist/ops/topk.js","./truncated_normal":"node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js","./unsorted_segment_sum":"node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js","./unstack":"node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js","./variable":"node_modules/@tensorflow/tfjs-core/dist/ops/variable.js","./where":"node_modules/@tensorflow/tfjs-core/dist/ops/where.js","./where_async":"node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js","./zeros":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js","./zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js","./boolean_mask":"node_modules/@tensorflow/tfjs-core/dist/ops/boolean_mask.js","./compare":"node_modules/@tensorflow/tfjs-core/dist/ops/compare.js","./binary_ops":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","./transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js","./norm":"node_modules/@tensorflow/tfjs-core/dist/ops/norm.js","./moving_average":"node_modules/@tensorflow/tfjs-core/dist/ops/moving_average.js","./scatter_nd":"node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js","./sparse_to_dense":"node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js","./gather_nd":"node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js","./dropout":"node_modules/@tensorflow/tfjs-core/dist/ops/dropout.js","./signal_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js","./in_top_k":"node_modules/@tensorflow/tfjs-core/dist/ops/in_top_k.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./fused_ops":"node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js","./signal/hamming_window":"node_modules/@tensorflow/tfjs-core/dist/ops/signal/hamming_window.js","./signal/hann_window":"node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js","./signal/frame":"node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js","./signal/stft":"node_modules/@tensorflow/tfjs-core/dist/ops/signal/stft.js","./image/crop_and_resize":"node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js","./image/flip_left_right":"node_modules/@tensorflow/tfjs-core/dist/ops/image/flip_left_right.js","./image/rotate_with_offset":"node_modules/@tensorflow/tfjs-core/dist/ops/image/rotate_with_offset.js","./image/non_max_suppression":"node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression.js","./image/non_max_suppression_async":"node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_async.js","./image/non_max_suppression_with_score":"node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score.js","./image/non_max_suppression_with_score_async":"node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score_async.js","./image/non_max_suppression_padded":"node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded.js","./image/non_max_suppression_padded_async":"node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded_async.js","./image/resize_bilinear":"node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js","./image/resize_nearest_neighbor":"node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js","./linalg/band_part":"node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js","./linalg/gram_schmidt":"node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js","./linalg/qr":"node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js","./losses/absolute_difference":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/absolute_difference.js","./losses/compute_weighted_loss":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js","./losses/cosine_distance":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js","./losses/hinge_loss":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js","./losses/huber_loss":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/huber_loss.js","./losses/log_loss":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js","./losses/mean_squared_error":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/mean_squared_error.js","./losses/sigmoid_cross_entropy":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/sigmoid_cross_entropy.js","./losses/softmax_cross_entropy":"node_modules/@tensorflow/tfjs-core/dist/ops/losses/softmax_cross_entropy.js"}],"node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Optimizer = void 0;

var _globals = require("../globals");

var _gradients = require("../gradients");

var _ops = require("../ops/ops");

var _serialization = require("../serialization");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */
class Optimizer extends _serialization.Serializable {
  /**
   * Executes `f()` and minimizes the scalar output of `f()` by computing
   * gradients of y with respect to the list of trainable variables provided by
   * `varList`. If no list is provided, it defaults to all trainable variables.
   *
   * @param f The function to execute and whose output to minimize.
   * @param returnCost Whether to return the scalar cost value produced by
   * executing `f()`.
   * @param varList An optional list of variables to update. If specified, only
   * the trainable variables in varList will be updated by minimize. Defaults to
   * all trainable variables.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers'}
   */
  minimize(f, returnCost = false, varList) {
    const {
      value,
      grads
    } = this.computeGradients(f, varList);

    if (varList != null) {
      const gradArray = varList.map(v => ({
        name: v.name,
        tensor: grads[v.name]
      }));
      this.applyGradients(gradArray);
    } else {
      this.applyGradients(grads);
    } // Dispose gradients.


    (0, _globals.dispose)(grads);

    if (returnCost) {
      return value;
    } else {
      value.dispose();
      return null;
    }
  }
  /**
   * The number of iterations that this optimizer instance has been invoked for.
   */


  get iterations() {
    if (this.iterations_ == null) {
      this.iterations_ = 0;
    }

    return this.iterations_;
  }

  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  /**
   * Executes f() and computes the gradient of the scalar output of f() with
   * respect to the list of trainable variables provided by `varList`. If no
   * list is provided, it defaults to all trainable variables.
   *
   * @param f The function to execute and whose output to use for computing
   * gradients with respect to variables.
   * @param varList An optional list of variables to compute gradients with
   * respect to. If specified, only the trainable variables in varList will have
   * gradients computed with respect to. Defaults to all trainable variables.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers'}
   */


  computeGradients(f, varList) {
    return (0, _gradients.variableGrads)(f, varList);
  }
  /**
   * Dispose the variables (if any) owned by this optimizer instance.
   */


  dispose() {
    if (this.iterations_ != null) {
      (0, _globals.dispose)(this.iterations_);
    }
  }

  async saveIterations() {
    if (this.iterations_ == null) {
      this.iterations_ = 0;
    }

    return {
      name: 'iter',
      // TODO(cais): Use 'int64' type when available.
      tensor: (0, _ops.scalar)(this.iterations_, 'int32')
    };
  }

  async getWeights() {
    throw new Error('getWeights() is not implemented for this optimizer yet.');
  }

  async setWeights(weightValues) {
    throw new Error(`setWeights() is not implemented for this optimizer class ` + `${this.getClassName()}`);
  }
  /**
   * Extract the first element of the weight values and set it
   * as the iterations counter variable of this instance of optimizer.
   *
   * @param weightValues
   * @returns Weight values with the first element consumed and excluded.
   */


  async extractIterations(weightValues) {
    this.iterations_ = (await weightValues[0].tensor.data())[0];
    return weightValues.slice(1);
  }

}

exports.Optimizer = Optimizer;
Object.defineProperty(Optimizer, Symbol.hasInstance, {
  value: instance => {
    return instance.minimize != null && instance.computeGradients != null && instance.applyGradients != null;
  }
});
},{"../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../gradients":"node_modules/@tensorflow/tfjs-core/dist/gradients.js","../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../serialization":"node_modules/@tensorflow/tfjs-core/dist/serialization.js"}],"node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdadeltaOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _add = require("../ops/add");

var _div = require("../ops/div");

var _mul = require("../ops/mul");

var _ops = require("../ops/ops");

var _square = require("../ops/square");

var _zeros_like = require("../ops/zeros_like");

var _serialization = require("../serialization");

var _optimizer = require("./optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** @doclink Optimizer */
class AdadeltaOptimizer extends _optimizer.Optimizer {
  constructor(learningRate, rho, epsilon = null) {
    super();
    this.learningRate = learningRate;
    this.rho = rho;
    this.epsilon = epsilon;
    this.accumulatedGrads = [];
    this.accumulatedUpdates = [];

    if (epsilon == null) {
      this.epsilon = _engine.ENGINE.backend.epsilon();
    }
  }

  applyGradients(variableGradients) {
    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);
    variableNames.forEach((name, i) => {
      const value = _engine.ENGINE.registeredVariables[name];
      const trainable = false;

      if (this.accumulatedGrads[i] == null) {
        this.accumulatedGrads[i] = {
          originalName: `${name}/accum_grad`,
          variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
        };
      }

      if (this.accumulatedUpdates[i] == null) {
        this.accumulatedUpdates[i] = {
          originalName: `${name}/accum_var`,
          variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
        };
      }

      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

      if (gradient == null) {
        return;
      }

      const accumulatedGrad = this.accumulatedGrads[i].variable;
      const accumulatedUpdate = this.accumulatedUpdates[i].variable;
      (0, _globals.tidy)(() => {
        const newAccumulatedGrad = (0, _add.add)((0, _mul.mul)(accumulatedGrad, this.rho), (0, _mul.mul)((0, _square.square)(gradient), 1 - this.rho));
        const updates = (0, _mul.mul)((0, _div.div)((0, _ops.sqrt)((0, _add.add)(accumulatedUpdate, this.epsilon)), (0, _ops.sqrt)((0, _add.add)(accumulatedGrad, this.epsilon))), gradient);
        const newAccumulatedUpdate = (0, _add.add)((0, _mul.mul)(accumulatedUpdate, this.rho), (0, _mul.mul)((0, _square.square)(updates), 1 - this.rho));
        accumulatedGrad.assign(newAccumulatedGrad);
        accumulatedUpdate.assign(newAccumulatedUpdate);
        const newValue = (0, _add.add)((0, _mul.mul)(updates, -this.learningRate), value);
        value.assign(newValue);
      });
    });
    this.incrementIterations();
  }

  dispose() {
    if (this.accumulatedUpdates != null) {
      (0, _globals.dispose)(this.accumulatedGrads.map(v => v.variable));
      (0, _globals.dispose)(this.accumulatedUpdates.map(v => v.variable));
    }
  }

  async getWeights() {
    // Order matters for Python compatibility.
    const variables = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(variables.map(v => ({
      name: v.originalName,
      tensor: v.variable
    })));
  }

  async setWeights(weightValues) {
    weightValues = await this.extractIterations(weightValues);
    const variableCount = weightValues.length / 2;
    const trainable = false;
    this.accumulatedGrads = weightValues.slice(0, variableCount).map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
    this.accumulatedUpdates = weightValues.slice(variableCount, variableCount * 2).map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
  }

  getConfig() {
    return {
      'learningRate': this.learningRate,
      'rho': this.rho,
      'epsilon': this.epsilon
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate'], config['rho'], config['epsilon']);
  }

}
/** @nocollapse */


exports.AdadeltaOptimizer = AdadeltaOptimizer;
AdadeltaOptimizer.className = 'Adadelta'; // Name matters for Python compatibility.

(0, _serialization.registerClass)(AdadeltaOptimizer);
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js","../serialization":"node_modules/@tensorflow/tfjs-core/dist/serialization.js","./optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js"}],"node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdagradOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _add = require("../ops/add");

var _div = require("../ops/div");

var _fill = require("../ops/fill");

var _mul = require("../ops/mul");

var _sqrt = require("../ops/sqrt");

var _square = require("../ops/square");

var _serialization = require("../serialization");

var _optimizer = require("./optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** @doclink Optimizer */
class AdagradOptimizer extends _optimizer.Optimizer {
  constructor(learningRate, initialAccumulatorValue = 0.1) {
    super();
    this.learningRate = learningRate;
    this.initialAccumulatorValue = initialAccumulatorValue;
    this.accumulatedGrads = [];
  }

  applyGradients(variableGradients) {
    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);
    variableNames.forEach((name, i) => {
      const value = _engine.ENGINE.registeredVariables[name];

      if (this.accumulatedGrads[i] == null) {
        const trainable = false;
        this.accumulatedGrads[i] = {
          originalName: `${name}/accumulator`,
          variable: (0, _globals.tidy)(() => (0, _fill.fill)(value.shape, this.initialAccumulatorValue).variable(trainable))
        };
      }

      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

      if (gradient == null) {
        return;
      }

      const accumulatedGrad = this.accumulatedGrads[i].variable;
      (0, _globals.tidy)(() => {
        const newAccumulatedGrad = (0, _add.add)(accumulatedGrad, (0, _square.square)(gradient));
        accumulatedGrad.assign(newAccumulatedGrad);
        const newValue = (0, _add.add)((0, _mul.mul)((0, _div.div)(gradient, (0, _sqrt.sqrt)((0, _add.add)(newAccumulatedGrad, _engine.ENGINE.backend.epsilon()))), -this.learningRate), value);
        value.assign(newValue);
      });
    });
    this.incrementIterations();
  }

  dispose() {
    if (this.accumulatedGrads != null) {
      (0, _globals.dispose)(this.accumulatedGrads.map(v => v.variable));
    }
  }

  async getWeights() {
    // Order matters for Python compatibility.
    return [await this.saveIterations()].concat(this.accumulatedGrads.map(v => ({
      name: v.originalName,
      tensor: v.variable
    })));
  }

  async setWeights(weightValues) {
    weightValues = await this.extractIterations(weightValues);
    const trainable = false;
    this.accumulatedGrads = weightValues.map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
  }

  getConfig() {
    return {
      'learningRate': this.learningRate,
      'initialAccumulatorValue': this.initialAccumulatorValue
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate'], config['initialAccumulatorValue']);
  }

}
/** @nocollapse */


exports.AdagradOptimizer = AdagradOptimizer;
AdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.

(0, _serialization.registerClass)(AdagradOptimizer);
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/fill":"node_modules/@tensorflow/tfjs-core/dist/ops/fill.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/sqrt":"node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../serialization":"node_modules/@tensorflow/tfjs-core/dist/serialization.js","./optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js"}],"node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdamOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _add = require("../ops/add");

var _div = require("../ops/div");

var _mul = require("../ops/mul");

var _pow = require("../ops/pow");

var _scalar = require("../ops/scalar");

var _sqrt = require("../ops/sqrt");

var _square = require("../ops/square");

var _sub = require("../ops/sub");

var _zeros_like = require("../ops/zeros_like");

var _serialization = require("../serialization");

var _optimizer = require("./optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AdamOptimizer extends _optimizer.Optimizer {
  constructor(learningRate, beta1, beta2, epsilon = null) {
    super();
    this.learningRate = learningRate;
    this.beta1 = beta1;
    this.beta2 = beta2;
    this.epsilon = epsilon;
    this.accumulatedFirstMoment = [];
    this.accumulatedSecondMoment = [];
    (0, _globals.tidy)(() => {
      // accB* will be updated by batch.
      this.accBeta1 = (0, _scalar.scalar)(beta1).variable();
      this.accBeta2 = (0, _scalar.scalar)(beta2).variable();
    });

    if (epsilon == null) {
      this.epsilon = _engine.ENGINE.backend.epsilon();
    }
  }

  applyGradients(variableGradients) {
    const varNames = Array.isArray(variableGradients) ? variableGradients.map(v => v.name) : Object.keys(variableGradients);
    (0, _globals.tidy)(() => {
      const oneMinusAccBeta1 = (0, _sub.sub)(1, this.accBeta1);
      const oneMinusAccBeta2 = (0, _sub.sub)(1, this.accBeta2);
      varNames.forEach((name, i) => {
        const value = _engine.ENGINE.registeredVariables[name];
        const trainable = false;

        if (this.accumulatedFirstMoment[i] == null) {
          this.accumulatedFirstMoment[i] = {
            originalName: `${name}/m`,
            variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
          };
        }

        if (this.accumulatedSecondMoment[i] == null) {
          this.accumulatedSecondMoment[i] = {
            originalName: `${name}/v`,
            variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
          };
        }

        const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

        if (gradient == null) {
          return;
        }

        const firstMoment = this.accumulatedFirstMoment[i].variable;
        const secondMoment = this.accumulatedSecondMoment[i].variable;
        const newFirstMoment = (0, _add.add)((0, _mul.mul)(firstMoment, this.beta1), (0, _mul.mul)(gradient, 1 - this.beta1));
        const newSecondMoment = (0, _add.add)((0, _mul.mul)(secondMoment, this.beta2), (0, _mul.mul)((0, _square.square)(gradient), 1 - this.beta2));
        const biasCorrectedFirstMoment = (0, _div.div)(newFirstMoment, oneMinusAccBeta1);
        const biasCorrectedSecondMoment = (0, _div.div)(newSecondMoment, oneMinusAccBeta2);
        firstMoment.assign(newFirstMoment);
        secondMoment.assign(newSecondMoment);
        const newValue = (0, _add.add)((0, _mul.mul)((0, _div.div)(biasCorrectedFirstMoment, (0, _add.add)((0, _sqrt.sqrt)(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);
        value.assign(newValue);
      });
      this.accBeta1.assign((0, _mul.mul)(this.accBeta1, this.beta1));
      this.accBeta2.assign((0, _mul.mul)(this.accBeta2, this.beta2));
    });
    this.incrementIterations();
  }

  dispose() {
    this.accBeta1.dispose();
    this.accBeta2.dispose();

    if (this.accumulatedFirstMoment != null) {
      (0, _globals.dispose)(this.accumulatedFirstMoment.map(v => v.variable));
    }

    if (this.accumulatedSecondMoment != null) {
      (0, _globals.dispose)(this.accumulatedSecondMoment.map(v => v.variable));
    }
  }

  async getWeights() {
    // Order matters for Python compatibility.
    const variables = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(variables.map(v => ({
      name: v.originalName,
      tensor: v.variable
    })));
  }

  async setWeights(weightValues) {
    weightValues = await this.extractIterations(weightValues);
    (0, _globals.tidy)(() => {
      this.accBeta1.assign((0, _pow.pow)(this.beta1, this.iterations_ + 1));
      this.accBeta2.assign((0, _pow.pow)(this.beta2, this.iterations_ + 1));
    });
    const variableCount = weightValues.length / 2;
    const trainable = false;
    this.accumulatedFirstMoment = weightValues.slice(0, variableCount).map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
    this.accumulatedSecondMoment = weightValues.slice(variableCount, variableCount * 2).map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
  }

  getConfig() {
    return {
      'learningRate': this.learningRate,
      'beta1': this.beta1,
      'beta2': this.beta2,
      'epsilon': this.epsilon
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);
  }

}
/** @nocollapse */


exports.AdamOptimizer = AdamOptimizer;
AdamOptimizer.className = 'Adam'; // Note: Name matters for Python compatibility.

(0, _serialization.registerClass)(AdamOptimizer);
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/pow":"node_modules/@tensorflow/tfjs-core/dist/ops/pow.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/sqrt":"node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js","../serialization":"node_modules/@tensorflow/tfjs-core/dist/serialization.js","./optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js"}],"node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdamaxOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _abs = require("../ops/abs");

var _add = require("../ops/add");

var _div = require("../ops/div");

var _maximum = require("../ops/maximum");

var _mul = require("../ops/mul");

var _scalar = require("../ops/scalar");

var _sub = require("../ops/sub");

var _zeros_like = require("../ops/zeros_like");

var _serialization = require("../serialization");

var _optimizer = require("./optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AdamaxOptimizer extends _optimizer.Optimizer {
  constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0) {
    super();
    this.learningRate = learningRate;
    this.beta1 = beta1;
    this.beta2 = beta2;
    this.epsilon = epsilon;
    this.decay = decay;
    this.accumulatedFirstMoment = [];
    this.accumulatedWeightedInfNorm = [];
    (0, _globals.tidy)(() => {
      this.iteration = (0, _scalar.scalar)(0).variable();
      this.accBeta1 = (0, _scalar.scalar)(beta1).variable();
    });

    if (epsilon == null) {
      this.epsilon = _engine.ENGINE.backend.epsilon();
    }
  }

  applyGradients(variableGradients) {
    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);
    (0, _globals.tidy)(() => {
      const oneMinusAccBeta1 = (0, _sub.sub)(1, this.accBeta1);
      const lr = (0, _div.div)(-this.learningRate, (0, _add.add)((0, _mul.mul)(this.iteration, this.decay), 1));
      variableNames.forEach((name, i) => {
        const value = _engine.ENGINE.registeredVariables[name];
        const trainable = false;

        if (this.accumulatedFirstMoment[i] == null) {
          this.accumulatedFirstMoment[i] = {
            originalName: `${name}/m`,
            variable: (0, _zeros_like.zerosLike)(value).variable(trainable)
          };
        }

        if (this.accumulatedWeightedInfNorm[i] == null) {
          this.accumulatedWeightedInfNorm[i] = {
            originalName: `${name}/v`,
            variable: (0, _zeros_like.zerosLike)(value).variable(trainable)
          };
        }

        const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

        if (gradient == null) {
          return;
        }

        const firstMoment = this.accumulatedFirstMoment[i].variable;
        const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;
        const newFirstMoment = (0, _add.add)((0, _mul.mul)(firstMoment, this.beta1), (0, _mul.mul)(gradient, 1 - this.beta1));
        const ut0 = (0, _mul.mul)(weightedInfNorm, this.beta2);
        const ut1 = (0, _abs.abs)(gradient);
        const newWeightedInfNorm = (0, _maximum.maximum)(ut0, ut1);
        firstMoment.assign(newFirstMoment);
        weightedInfNorm.assign(newWeightedInfNorm);
        const newValue = (0, _add.add)((0, _mul.mul)((0, _div.div)(lr, oneMinusAccBeta1), (0, _div.div)(newFirstMoment, (0, _add.add)(newWeightedInfNorm, this.epsilon))), value);
        value.assign(newValue);
      });
      this.iteration.assign((0, _add.add)(this.iteration, 1));
      this.accBeta1.assign((0, _mul.mul)(this.accBeta1, this.beta1));
    });
    this.incrementIterations();
  }

  dispose() {
    this.accBeta1.dispose();
    this.iteration.dispose();

    if (this.accumulatedFirstMoment != null) {
      (0, _globals.dispose)(this.accumulatedFirstMoment.map(v => v.variable));
    }

    if (this.accumulatedWeightedInfNorm != null) {
      (0, _globals.dispose)(this.accumulatedWeightedInfNorm.map(v => v.variable));
    }
  }

  async getWeights() {
    throw new Error('getWeights() is not implemented for Adamax yet.');
  }

  async setWeights(weightValues) {
    throw new Error('setWeights() is not implemented for Adamax yet.');
  }

  getConfig() {
    return {
      'learningRate': this.learningRate,
      'beta1': this.beta1,
      'beta2': this.beta2,
      'epsilon': this.epsilon,
      'decay': this.decay
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);
  }

}
/** @nocollapse */


exports.AdamaxOptimizer = AdamaxOptimizer;
AdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.

(0, _serialization.registerClass)(AdamaxOptimizer);
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../ops/abs":"node_modules/@tensorflow/tfjs-core/dist/ops/abs.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/maximum":"node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js","../serialization":"node_modules/@tensorflow/tfjs-core/dist/serialization.js","./optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js"}],"node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SGDOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _add = require("../ops/add");

var _mul = require("../ops/mul");

var _scalar = require("../ops/scalar");

var _serialization = require("../serialization");

var _optimizer = require("./optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** @doclink Optimizer */
class SGDOptimizer extends _optimizer.Optimizer {
  constructor(learningRate) {
    super();
    this.learningRate = learningRate;
    this.setLearningRate(learningRate);
  }

  applyGradients(variableGradients) {
    const varNames = Array.isArray(variableGradients) ? variableGradients.map(v => v.name) : Object.keys(variableGradients);
    varNames.forEach((name, i) => {
      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

      if (gradient == null) {
        return;
      }

      const value = _engine.ENGINE.registeredVariables[name];
      (0, _globals.tidy)(() => {
        const newValue = (0, _add.add)((0, _mul.mul)(this.c, gradient), value);
        value.assign(newValue);
      });
    });
    this.incrementIterations();
  }
  /**
   * Sets the learning rate of the optimizer.
   */


  setLearningRate(learningRate) {
    this.learningRate = learningRate;

    if (this.c != null) {
      this.c.dispose();
    }

    this.c = (0, _globals.keep)((0, _scalar.scalar)(-learningRate));
  }

  dispose() {
    this.c.dispose();
  }

  async getWeights() {
    return [await this.saveIterations()];
  }

  async setWeights(weightValues) {
    weightValues = await this.extractIterations(weightValues);

    if (weightValues.length !== 0) {
      throw new Error('SGD optimizer does not have settable weights.');
    }
  }

  getConfig() {
    return {
      'learningRate': this.learningRate
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate']);
  }

}
/** @nocollapse */


exports.SGDOptimizer = SGDOptimizer;
SGDOptimizer.className = 'SGD'; // Note: Name matters for Python compatibility.

(0, _serialization.registerClass)(SGDOptimizer);
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../serialization":"node_modules/@tensorflow/tfjs-core/dist/serialization.js","./optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js"}],"node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MomentumOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _add = require("../ops/add");

var _mul = require("../ops/mul");

var _scalar = require("../ops/scalar");

var _zeros_like = require("../ops/zeros_like");

var _serialization = require("../serialization");

var _sgd_optimizer = require("./sgd_optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** @doclink Optimizer */
class MomentumOptimizer extends _sgd_optimizer.SGDOptimizer {
  constructor(learningRate, momentum, useNesterov = false) {
    super(learningRate);
    this.learningRate = learningRate;
    this.momentum = momentum;
    this.useNesterov = useNesterov;
    this.accumulations = [];
    this.m = (0, _scalar.scalar)(this.momentum);
  }

  applyGradients(variableGradients) {
    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);
    variableNames.forEach((name, i) => {
      const value = _engine.ENGINE.registeredVariables[name];

      if (this.accumulations[i] == null) {
        const trainable = false;
        this.accumulations[i] = {
          originalName: `${name}/momentum`,
          variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
        };
      }

      const accumulation = this.accumulations[i].variable;
      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

      if (gradient == null) {
        return;
      }

      (0, _globals.tidy)(() => {
        let newValue;
        const newAccumulation = (0, _add.add)((0, _mul.mul)(this.m, accumulation), gradient);

        if (this.useNesterov) {
          newValue = (0, _add.add)((0, _mul.mul)(this.c, (0, _add.add)(gradient, (0, _mul.mul)(newAccumulation, this.m))), value);
        } else {
          newValue = (0, _add.add)((0, _mul.mul)(this.c, newAccumulation), value);
        }

        accumulation.assign(newAccumulation);
        value.assign(newValue);
      });
    });
    this.incrementIterations();
  }

  dispose() {
    this.m.dispose();

    if (this.accumulations != null) {
      (0, _globals.dispose)(this.accumulations.map(v => v.variable));
    }
  }
  /**
   * Sets the momentum of the optimizer.
   *
   * @param momentum
   */


  setMomentum(momentum) {
    this.momentum = momentum;
  }

  async getWeights() {
    // Order matters for Python compatibility.
    return [await this.saveIterations()].concat(this.accumulations.map(v => ({
      name: v.originalName,
      tensor: v.variable
    })));
  }

  async setWeights(weightValues) {
    weightValues = await this.extractIterations(weightValues);
    const trainable = false;
    this.accumulations = weightValues.map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
  }

  getConfig() {
    return {
      'learningRate': this.learningRate,
      'momentum': this.momentum,
      'useNesterov': this.useNesterov
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate'], config['momentum'], config['useNesterov']);
  }

}
/** @nocollapse */


exports.MomentumOptimizer = MomentumOptimizer;
MomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.

(0, _serialization.registerClass)(MomentumOptimizer);
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js","../serialization":"node_modules/@tensorflow/tfjs-core/dist/serialization.js","./sgd_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js"}],"node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RMSPropOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _add = require("../ops/add");

var _div = require("../ops/div");

var _mul = require("../ops/mul");

var _sqrt = require("../ops/sqrt");

var _square = require("../ops/square");

var _sub = require("../ops/sub");

var _zeros_like = require("../ops/zeros_like");

var _serialization = require("../serialization");

var _optimizer = require("./optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** @doclink Optimizer */
class RMSPropOptimizer extends _optimizer.Optimizer {
  constructor(learningRate, decay = 0.9, momentum = 0.0, epsilon = null, centered = false) {
    super();
    this.learningRate = learningRate;
    this.decay = decay;
    this.momentum = momentum;
    this.epsilon = epsilon;
    this.accumulatedMeanSquares = [];
    this.accumulatedMoments = [];
    this.accumulatedMeanGrads = [];
    this.centered = centered;

    if (epsilon == null) {
      this.epsilon = _engine.ENGINE.backend.epsilon();
    }

    if (learningRate == null) {
      throw new Error(`learningRate for RMSPropOptimizer must be defined.`);
    }
  }

  applyGradients(variableGradients) {
    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);
    variableNames.forEach((name, i) => {
      const value = _engine.ENGINE.registeredVariables[name];
      const trainable = false;

      if (this.accumulatedMeanSquares[i] == null) {
        this.accumulatedMeanSquares[i] = {
          originalName: `${name}/rms`,
          variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
        };
      }

      if (this.accumulatedMoments[i] == null) {
        this.accumulatedMoments[i] = {
          originalName: `${name}/momentum`,
          variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
        };
      }

      if (this.accumulatedMeanGrads[i] == null && this.centered) {
        this.accumulatedMeanGrads[i] = {
          originalName: `${name}/mg`,
          variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
        };
      }

      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

      if (gradient == null) {
        return;
      }

      const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;
      const accumulatedMoments = this.accumulatedMoments[i].variable;
      (0, _globals.tidy)(() => {
        const newAccumulatedMeanSquare = (0, _add.add)((0, _mul.mul)(accumulatedMeanSquare, this.decay), (0, _mul.mul)((0, _square.square)(gradient), 1 - this.decay));

        if (this.centered) {
          const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable; // Centered gradient

          const newAccumulatedMeanGrad = (0, _add.add)((0, _mul.mul)(accumulatedMeanGrad, this.decay), (0, _mul.mul)(gradient, 1 - this.decay));
          const gradContribution = (0, _div.div)((0, _mul.mul)(gradient, this.learningRate), (0, _sqrt.sqrt)((0, _sub.sub)(newAccumulatedMeanSquare, (0, _add.add)((0, _square.square)(newAccumulatedMeanGrad), this.epsilon))));
          const newAccumulatedMoments = (0, _add.add)((0, _mul.mul)(accumulatedMoments, this.momentum), gradContribution);
          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
          accumulatedMeanGrad.assign(newAccumulatedMeanGrad);
          accumulatedMoments.assign(newAccumulatedMoments);
          const newValue = (0, _sub.sub)(value, newAccumulatedMoments);
          value.assign(newValue);
        } else {
          // Plain gradient
          const newAccumulatedMeanSquare = (0, _add.add)((0, _mul.mul)(accumulatedMeanSquare, this.decay), (0, _mul.mul)((0, _square.square)(gradient), 1 - this.decay));
          const newAccumulatedMoments = (0, _add.add)((0, _mul.mul)(accumulatedMoments, this.momentum), (0, _div.div)((0, _mul.mul)(gradient, this.learningRate), (0, _sqrt.sqrt)((0, _add.add)(newAccumulatedMeanSquare, this.epsilon))));
          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
          accumulatedMoments.assign(newAccumulatedMoments);
          const newValue = (0, _sub.sub)(value, newAccumulatedMoments);
          value.assign(newValue);
        }
      });
    });
    this.incrementIterations();
  }

  dispose() {
    if (this.accumulatedMeanSquares != null) {
      (0, _globals.dispose)(this.accumulatedMeanSquares.map(v => v.variable));
    }

    if (this.accumulatedMeanGrads != null && this.centered) {
      (0, _globals.dispose)(this.accumulatedMeanGrads.map(v => v.variable));
    }

    if (this.accumulatedMoments != null) {
      (0, _globals.dispose)(this.accumulatedMoments.map(v => v.variable));
    }
  }

  async getWeights() {
    // Order matters for Python compatibility.
    const variables = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];

    if (this.centered) {
      variables.push(...this.accumulatedMeanGrads);
    }

    return [await this.saveIterations()].concat(variables.map(v => ({
      name: v.originalName,
      tensor: v.variable
    })));
  }

  async setWeights(weightValues) {
    weightValues = await this.extractIterations(weightValues);
    const variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;
    const trainable = false;
    this.accumulatedMeanSquares = weightValues.slice(0, variableCount).map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
    this.accumulatedMoments = weightValues.slice(variableCount, variableCount * 2).map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));

    if (this.centered) {
      this.accumulatedMeanGrads = weightValues.slice(variableCount * 2, variableCount * 3).map(v => ({
        originalName: v.name,
        variable: v.tensor.variable(trainable)
      }));
    }
  }

  getConfig() {
    return {
      'learningRate': this.learningRate,
      'decay': this.decay,
      'momentum': this.momentum,
      'epsilon': this.epsilon,
      'centered': this.centered
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);
  }

}
/** @nocollapse */


exports.RMSPropOptimizer = RMSPropOptimizer;
RMSPropOptimizer.className = 'RMSProp'; // Note: Name matters for Python compatibility.

(0, _serialization.registerClass)(RMSPropOptimizer);
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/sqrt":"node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js","../serialization":"node_modules/@tensorflow/tfjs-core/dist/serialization.js","./optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js"}],"node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptimizerConstructors = void 0;

var _adadelta_optimizer = require("./adadelta_optimizer");

var _adagrad_optimizer = require("./adagrad_optimizer");

var _adam_optimizer = require("./adam_optimizer");

var _adamax_optimizer = require("./adamax_optimizer");

var _momentum_optimizer = require("./momentum_optimizer");

var _rmsprop_optimizer = require("./rmsprop_optimizer");

var _sgd_optimizer = require("./sgd_optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OptimizerConstructors {
  /**
   * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
   *
   * ```js
   * // Fit a quadratic function by learning the coefficients a, b, c.
   * const xs = tf.tensor1d([0, 1, 2, 3]);
   * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
   *
   * const a = tf.scalar(Math.random()).variable();
   * const b = tf.scalar(Math.random()).variable();
   * const c = tf.scalar(Math.random()).variable();
   *
   * // y = a * x^2 + b * x + c.
   * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
   * const loss = (pred, label) => pred.sub(label).square().mean();
   *
   * const learningRate = 0.01;
   * const optimizer = tf.train.sgd(learningRate);
   *
   * // Train the model.
   * for (let i = 0; i < 10; i++) {
   *   optimizer.minimize(() => loss(f(xs), ys));
   * }
   *
   * // Make predictions.
   * console.log(
   *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
   * const preds = f(xs).dataSync();
   * preds.forEach((pred, i) => {
   *   console.log(`x: ${i}, pred: ${pred}`);
   * });
   * ```
   *
   * @param learningRate The learning rate to use for the SGD algorithm.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static sgd(learningRate) {
    return new _sgd_optimizer.SGDOptimizer(learningRate);
  }
  /**
   * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
   * descent.
   *
   * See
   * [http://proceedings.mlr.press/v28/sutskever13.pdf](
   * http://proceedings.mlr.press/v28/sutskever13.pdf)
   *
   * @param learningRate The learning rate to use for the Momentum gradient
   * descent algorithm.
   * @param momentum The momentum to use for the momentum gradient descent
   * algorithm.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */


  static momentum(learningRate, momentum, useNesterov = false) {
    return new _momentum_optimizer.MomentumOptimizer(learningRate, momentum, useNesterov);
  }
  /**
   * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
   * descent. This implementation uses plain momentum and is not centered
   * version of RMSProp.
   *
   * See
   * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
   * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
   *
   * @param learningRate The learning rate to use for the RMSProp gradient
   * descent algorithm.
   * @param decay The discounting factor for the history/coming gradient.
   * @param momentum The momentum to use for the RMSProp gradient descent
   * algorithm.
   * @param epsilon Small value to avoid zero denominator.
   * @param centered If true, gradients are normalized by the estimated
   * variance of the gradient.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */


  static rmsprop(learningRate, decay = .9, momentum = 0.0, epsilon = null, centered = false) {
    return new _rmsprop_optimizer.RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered);
  }
  /**
   * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
   *
   * @param learningRate The learning rate to use for the Adam gradient
   * descent algorithm.
   * @param beta1 The exponential decay rate for the 1st moment estimates.
   * @param beta2 The exponential decay rate for the 2nd moment estimates.
   * @param epsilon A small constant for numerical stability.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */


  static adam(learningRate = 0.001, beta1 = 0.9, beta2 = 0.999, epsilon = null) {
    return new _adam_optimizer.AdamOptimizer(learningRate, beta1, beta2, epsilon);
  }
  /**
   * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
   * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
   *
   * @param learningRate The learning rate to use for the Adadelta gradient
   * descent algorithm.
   * @param rho The learning rate decay over each update.
   * @param epsilon A constant epsilon used to better condition the grad
   * update.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */


  static adadelta(learningRate = .001, rho = .95, epsilon = null) {
    return new _adadelta_optimizer.AdadeltaOptimizer(learningRate, rho, epsilon);
  }
  /**
   * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
   *
   * @param learningRate The learning rate to use for the Adamax gradient
   * descent algorithm.
   * @param beta1 The exponential decay rate for the 1st moment estimates.
   * @param beta2 The exponential decay rate for the 2nd moment estimates.
   * @param epsilon A small constant for numerical stability.
   * @param decay The learning rate decay over each update.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */


  static adamax(learningRate = 0.002, beta1 = 0.9, beta2 = 0.999, epsilon = null, decay = 0.0) {
    return new _adamax_optimizer.AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay);
  }
  /**
   * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
   * See
   * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
   * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
   * or
   * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
   * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
   *
   * @param learningRate The learning rate to use for the Adagrad gradient
   * descent algorithm.
   * @param initialAccumulatorValue Starting value for the accumulators, must be
   * positive.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */


  static adagrad(learningRate, initialAccumulatorValue = 0.1) {
    return new _adagrad_optimizer.AdagradOptimizer(learningRate, initialAccumulatorValue);
  }

}

exports.OptimizerConstructors = OptimizerConstructors;
},{"./adadelta_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js","./adagrad_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js","./adam_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js","./adamax_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js","./momentum_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js","./rmsprop_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js","./sgd_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js"}],"node_modules/@tensorflow/tfjs-core/dist/train.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.train = void 0;

var _adadelta_optimizer = require("./optimizers/adadelta_optimizer");

var _adagrad_optimizer = require("./optimizers/adagrad_optimizer");

var _adam_optimizer = require("./optimizers/adam_optimizer");

var _adamax_optimizer = require("./optimizers/adamax_optimizer");

var _momentum_optimizer = require("./optimizers/momentum_optimizer");

var _optimizer_constructors = require("./optimizers/optimizer_constructors");

var _rmsprop_optimizer = require("./optimizers/rmsprop_optimizer");

var _sgd_optimizer = require("./optimizers/sgd_optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// So typings can propagate.
// tslint:disable-next-line:no-unused-expression
[_momentum_optimizer.MomentumOptimizer, _sgd_optimizer.SGDOptimizer, _adadelta_optimizer.AdadeltaOptimizer, _adagrad_optimizer.AdagradOptimizer, _rmsprop_optimizer.RMSPropOptimizer, _adamax_optimizer.AdamaxOptimizer, _adam_optimizer.AdamOptimizer];
const train = {
  sgd: _optimizer_constructors.OptimizerConstructors.sgd,
  momentum: _optimizer_constructors.OptimizerConstructors.momentum,
  adadelta: _optimizer_constructors.OptimizerConstructors.adadelta,
  adagrad: _optimizer_constructors.OptimizerConstructors.adagrad,
  rmsprop: _optimizer_constructors.OptimizerConstructors.rmsprop,
  adamax: _optimizer_constructors.OptimizerConstructors.adamax,
  adam: _optimizer_constructors.OptimizerConstructors.adam
};
exports.train = train;
},{"./optimizers/adadelta_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js","./optimizers/adagrad_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js","./optimizers/adam_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js","./optimizers/adamax_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js","./optimizers/momentum_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js","./optimizers/optimizer_constructors":"node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js","./optimizers/rmsprop_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js","./optimizers/sgd_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js"}],"node_modules/@tensorflow/tfjs-core/dist/browser_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nextFrame = nextFrame;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const delayCallback = (() => {
  if (typeof requestAnimationFrame !== 'undefined') {
    return requestAnimationFrame;
  } else if (typeof setImmediate !== 'undefined') {
    return setImmediate;
  }

  return f => f(); // no delays
})();
/**
 * Returns a promise that resolve when a requestAnimationFrame has completed.
 *
 * On Node.js this uses setImmediate instead of requestAnimationFrame.
 *
 * This is simply a sugar method so that users can do the following:
 * `await tf.nextFrame();`
 *
 * @doc {heading: 'Performance', subheading: 'Timing'}
 */


function nextFrame() {
  return new Promise(resolve => delayCallback(() => resolve()));
}
},{}],"node_modules/@tensorflow/tfjs-core/dist/ops/rotate_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageCenter = getImageCenter;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Returns the image center in pixels.
function getImageCenter(center, imageHeight, imageWidth) {
  const centerX = imageWidth * (typeof center === 'number' ? center : center[0]);
  const centerY = imageHeight * (typeof center === 'number' ? center : center[1]);
  return [centerX, centerY];
}
},{}],"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getReshaped = getReshaped;
exports.getPermuted = getPermuted;
exports.getReshapedPermuted = getReshapedPermuted;
exports.getSliceBeginCoords = getSliceBeginCoords;
exports.getSliceSize = getSliceSize;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Gets the new shape of the input Tensor after it's been reshaped
 * to:
 * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),
 * inputShape[1], ..., inputShape[N-1]]
 *
 * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */
function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {
  let reshaped = [];

  if (batchToSpace) {
    reshaped = reshaped.concat(blockShape.slice(0));
    reshaped.push(inputShape[0] / prod);
    reshaped = reshaped.concat(inputShape.slice(1));
  } else {
    reshaped = reshaped.concat(inputShape[0]);
    const spatialLength = blockShape.length;

    for (let i = 0; i < spatialLength; ++i) {
      reshaped = reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);
    }

    reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));
  }

  return reshaped;
}
/**
 * Gets the permutation that will transpose the dimensions of the
 * reshaped tensor to shape:
 *
 * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,
 * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */


function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {
  const permuted = [];

  if (batchToSpace) {
    permuted.push(blockShapeRank);

    for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {
      if (i <= 2 * blockShapeRank) {
        permuted.push(i);
        permuted.push(i - (blockShapeRank + 1));
      } else {
        permuted.push(i);
      }
    }
  } else {
    const permutedBeforeBatch = [];
    const permutedAfterBatch = [];

    for (let i = 1; i < reshapedRank; ++i) {
      if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {
        permutedAfterBatch.push(i);
      } else {
        permutedBeforeBatch.push(i);
      }
    }

    permuted.push(...permutedBeforeBatch);
    permuted.push(0);
    permuted.push(...permutedAfterBatch);
  }

  return permuted;
}
/**
 * Gets the shape of the reshaped and permuted input Tensor before any cropping
 * is applied.  The new shape will be:
 *
 * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,
 * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */


function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {
  const reshapedPermuted = [];

  if (batchToSpace) {
    reshapedPermuted.push(inputShape[0] / prod);
  } else {
    reshapedPermuted.push(inputShape[0] * prod);
  }

  for (let i = 1; i < inputShape.length; ++i) {
    if (i <= blockShape.length) {
      if (batchToSpace) {
        reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);
      } else {
        reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);
      }
    } else {
      reshapedPermuted.push(inputShape[i]);
    }
  }

  return reshapedPermuted;
}
/**
 * Converts the crops argument into the beginning coordinates of a slice
 * operation.
 */


function getSliceBeginCoords(crops, blockShape) {
  const sliceBeginCoords = [0];

  for (let i = 0; i < blockShape; ++i) {
    sliceBeginCoords.push(crops[i][0]);
  }

  return sliceBeginCoords;
}
/**
 * Converts the crops argument into the size of a slice operation.  When
 * combined with getSliceBeginCoords this function allows the reshaped and
 * permuted Tensor to be cropped to its final output shape of:
 *
 * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,
 * inputShape[M] * blockShape[M-1] -crops[M-1,0] -
 * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */


function getSliceSize(uncroppedShape, crops, blockShape) {
  const sliceSize = uncroppedShape.slice(0, 1);

  for (let i = 0; i < blockShape; ++i) {
    sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);
  }

  return sliceSize;
}
},{}],"node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SELU_SCALE = exports.SELU_SCALEALPHA = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SELU_SCALEALPHA = 1.7580993408473768599402175208123;
exports.SELU_SCALEALPHA = SELU_SCALEALPHA;
const SELU_SCALE = 1.0507009873554804934193349852946;
exports.SELU_SCALE = SELU_SCALE;
},{}],"node_modules/@tensorflow/tfjs-core/dist/ops/erf_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ERF_A5 = exports.ERF_A4 = exports.ERF_A3 = exports.ERF_A2 = exports.ERF_A1 = exports.ERF_P = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ERF_P = 0.3275911;
exports.ERF_P = ERF_P;
const ERF_A1 = 0.254829592;
exports.ERF_A1 = ERF_A1;
const ERF_A2 = -0.284496736;
exports.ERF_A2 = ERF_A2;
const ERF_A3 = 1.421413741;
exports.ERF_A3 = ERF_A3;
const ERF_A4 = -1.453152027;
exports.ERF_A4 = ERF_A4;
const ERF_A5 = 1.061405429;
exports.ERF_A5 = ERF_A5;
},{}],"node_modules/@tensorflow/tfjs-core/dist/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.warn = warn;
exports.log = log;

var _environment = require("./environment");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function warn(...msg) {
  if (!(0, _environment.env)().getBool('IS_TEST')) {
    console.warn(...msg);
  }
}

function log(...msg) {
  if (!(0, _environment.env)().getBool('IS_TEST')) {
    console.log(...msg);
  }
}
},{"./environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js"}],"node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeRealAndImagArrays = mergeRealAndImagArrays;
exports.splitRealAndImagArrays = splitRealAndImagArrays;
exports.complexWithEvenIndex = complexWithEvenIndex;
exports.complexWithOddIndex = complexWithOddIndex;
exports.getComplexWithIndex = getComplexWithIndex;
exports.assignToTypedArray = assignToTypedArray;
exports.exponents = exponents;
exports.exponent = exponent;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Merges real and imaginary Float32Arrays into a single complex Float32Array.
 *
 * The memory layout is interleaved as follows:
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 * complex: [r0, i0, r1, i1, r2, i2]
 *
 * This is the inverse of splitRealAndImagArrays.
 *
 * @param real The real values of the complex tensor values.
 * @param imag The imag values of the complex tensor values.
 * @returns A complex tensor as a Float32Array with merged values.
 */
function mergeRealAndImagArrays(real, imag) {
  if (real.length !== imag.length) {
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:` + `${real.length}, imag: ${imag.length}.`);
  }

  const result = new Float32Array(real.length * 2);

  for (let i = 0; i < result.length; i += 2) {
    result[i] = real[i / 2];
    result[i + 1] = imag[i / 2];
  }

  return result;
}
/**
 * Splits a complex Float32Array into real and imag parts.
 *
 * The memory layout is interleaved as follows:
 * complex: [r0, i0, r1, i1, r2, i2]
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 *
 * This is the inverse of mergeRealAndImagArrays.
 *
 * @param complex The complex tensor values.
 * @returns An object with real and imag Float32Array components of the complex
 *     tensor.
 */


function splitRealAndImagArrays(complex) {
  const real = new Float32Array(complex.length / 2);
  const imag = new Float32Array(complex.length / 2);

  for (let i = 0; i < complex.length; i += 2) {
    real[i / 2] = complex[i];
    imag[i / 2] = complex[i + 1];
  }

  return {
    real,
    imag
  };
}
/**
 * Extracts even indexed complex values in the given array.
 * @param complex The complex tensor values
 */


function complexWithEvenIndex(complex) {
  const len = Math.ceil(complex.length / 4);
  const real = new Float32Array(len);
  const imag = new Float32Array(len);

  for (let i = 0; i < complex.length; i += 4) {
    real[Math.floor(i / 4)] = complex[i];
    imag[Math.floor(i / 4)] = complex[i + 1];
  }

  return {
    real,
    imag
  };
}
/**
 * Extracts odd indexed comple values in the given array.
 * @param complex The complex tensor values
 */


function complexWithOddIndex(complex) {
  const len = Math.floor(complex.length / 4);
  const real = new Float32Array(len);
  const imag = new Float32Array(len);

  for (let i = 2; i < complex.length; i += 4) {
    real[Math.floor(i / 4)] = complex[i];
    imag[Math.floor(i / 4)] = complex[i + 1];
  }

  return {
    real,
    imag
  };
}
/**
 * Get the map representing a complex value in the given array.
 * @param complex The complex tensor values.
 * @param index An index of the target complex value.
 */


function getComplexWithIndex(complex, index) {
  const real = complex[index * 2];
  const imag = complex[index * 2 + 1];
  return {
    real,
    imag
  };
}
/**
 * Insert a given complex value into the TypedArray.
 * @param data The array in which the complex value is inserted.
 * @param c The complex value to be inserted.
 * @param index An index of the target complex value.
 */


function assignToTypedArray(data, real, imag, index) {
  data[index * 2] = real;
  data[index * 2 + 1] = imag;
}
/**
 * Make the list of exponent terms used by FFT.
 */


function exponents(n, inverse) {
  const real = new Float32Array(n / 2);
  const imag = new Float32Array(n / 2);

  for (let i = 0; i < Math.ceil(n / 2); i++) {
    const x = (inverse ? 2 : -2) * Math.PI * (i / n);
    real[i] = Math.cos(x);
    imag[i] = Math.sin(x);
  }

  return {
    real,
    imag
  };
}
/**
 * Make the exponent term used by FFT.
 */


function exponent(k, n, inverse) {
  const x = (inverse ? 2 : -2) * Math.PI * (k / n);
  const real = Math.cos(x);
  const imag = Math.sin(x);
  return {
    real,
    imag
  };
}
},{}],"node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  castTensor: true,
  reshapeTensor: true,
  linspaceImpl: true,
  slice_util: true,
  upcastType: true,
  segment_util: true
};
exports.castTensor = castTensor;
exports.reshapeTensor = reshapeTensor;
exports.linspaceImpl = linspaceImpl;
Object.defineProperty(exports, "upcastType", {
  enumerable: true,
  get: function () {
    return _types.upcastType;
  }
});
exports.segment_util = exports.slice_util = void 0;

var _engine = require("../engine");

var _cast = require("../ops/cast");

var _scalar = require("../ops/scalar");

var _tensor1d = require("../ops/tensor1d");

var _zeros = require("../ops/zeros");

var _util = require("../util");

var _axis_util = require("../ops/axis_util");

Object.keys(_axis_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _axis_util[key];
    }
  });
});

var _broadcast_util = require("../ops/broadcast_util");

Object.keys(_broadcast_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _broadcast_util[key];
    }
  });
});

var _concat_util = require("../ops/concat_util");

Object.keys(_concat_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _concat_util[key];
    }
  });
});

var _conv_util = require("../ops/conv_util");

Object.keys(_conv_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _conv_util[key];
    }
  });
});

var _fused_util = require("../ops/fused_util");

Object.keys(_fused_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _fused_util[key];
    }
  });
});

var _reduce_util = require("../ops/reduce_util");

Object.keys(_reduce_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _reduce_util[key];
    }
  });
});

var slice_util = _interopRequireWildcard(require("../ops/slice_util"));

exports.slice_util = slice_util;

var _types = require("../types");

var _rotate_util = require("../ops/rotate_util");

Object.keys(_rotate_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _rotate_util[key];
    }
  });
});

var _array_ops_util = require("../ops/array_ops_util");

Object.keys(_array_ops_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _array_ops_util[key];
    }
  });
});

var _gather_nd_util = require("../ops/gather_nd_util");

Object.keys(_gather_nd_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gather_nd_util[key];
    }
  });
});

var _scatter_nd_util = require("../ops/scatter_nd_util");

Object.keys(_scatter_nd_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _scatter_nd_util[key];
    }
  });
});

var _selu_util = require("../ops/selu_util");

Object.keys(_selu_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _selu_util[key];
    }
  });
});

var _erf_util = require("../ops/erf_util");

Object.keys(_erf_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _erf_util[key];
    }
  });
});

var _log = require("../log");

Object.keys(_log).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _log[key];
    }
  });
});

var _complex_util = require("../backends/complex_util");

Object.keys(_complex_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _complex_util[key];
    }
  });
});

var _split_util = require("../ops/split_util");

Object.keys(_split_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _split_util[key];
    }
  });
});

var segment_util = _interopRequireWildcard(require("../ops/segment_util"));

exports.segment_util = segment_util;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Utilities needed by backend consumers of tf-core.
function castTensor(x, dtype, backend) {
  if (dtype === 'complex64') {
    if (x.dtype === 'complex64') {
      return x.clone();
    }

    const zerosTensor = (0, _zeros.zeros)(x.shape);
    const floatX = (0, _cast.cast)(x, 'float32');
    const result = backend.complex(floatX, zerosTensor);
    zerosTensor.dispose();
    floatX.dispose();
    return result;
  }

  if (!(0, _util.hasEncodingLoss)(x.dtype, dtype)) {
    // We don't change the underlying data, since we cast to higher
    // precision.
    return _engine.ENGINE.makeTensorFromDataId(x.dataId, x.shape, dtype);
  }

  if (x.dtype === 'complex64') {
    const real = backend.real(x);
    const result = (0, _cast.cast)(real, dtype);
    real.dispose();
    return result;
  }

  if (dtype === 'int32') {
    return backend.int(x);
  } else if (dtype === 'bool') {
    const zero = (0, _scalar.scalar)(0, x.dtype);
    const result = backend.notEqual(x, zero);
    zero.dispose();
    return result;
  } else {
    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);
  }
}

function reshapeTensor(x, shape) {
  return _engine.ENGINE.makeTensorFromDataId(x.dataId, shape, x.dtype);
}

function linspaceImpl(start, stop, num) {
  const step = (stop - start) / (num - 1);
  const values = (0, _util.makeZerosTypedArray)(num, 'float32');
  values[0] = start;

  for (let i = 1; i < values.length; i++) {
    values[i] = values[i - 1] + step;
  }

  return (0, _tensor1d.tensor1d)(values, 'float32');
}
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/tensor1d":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js","../ops/zeros":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","../ops/axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","../ops/broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../ops/concat_util":"node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js","../ops/conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","../ops/fused_util":"node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js","../ops/reduce_util":"node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js","../ops/slice_util":"node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js","../types":"node_modules/@tensorflow/tfjs-core/dist/types.js","../ops/rotate_util":"node_modules/@tensorflow/tfjs-core/dist/ops/rotate_util.js","../ops/array_ops_util":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js","../ops/gather_nd_util":"node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js","../ops/scatter_nd_util":"node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js","../ops/selu_util":"node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js","../ops/erf_util":"node_modules/@tensorflow/tfjs-core/dist/ops/erf_util.js","../log":"node_modules/@tensorflow/tfjs-core/dist/log.js","../backends/complex_util":"node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js","../ops/split_util":"node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js","../ops/segment_util":"node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/backends/split_shared.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.split = split;

var _slice = require("../ops/slice");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO(annxingyuan): Use this helper in WASM Split kernel once intermediate
// kernels have been modularized in WebGL and CPU
// https://github.com/tensorflow/tfjs/issues/2822.

/** Shared implementation of the split kernel across WebGL and CPU. */
function split(x, sizeSplits, axis) {
  const begin = new Array(x.rank).fill(0);
  const size = x.shape.slice();
  return sizeSplits.map(s => {
    const sliceSize = [...size];
    sliceSize[axis] = s;
    const sliceT = (0, _slice.slice)(x, begin, sliceSize);
    begin[axis] += s;
    return sliceT;
  });
}
},{"../ops/slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js"}],"node_modules/@tensorflow/tfjs-core/dist/backends/tile_impl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tile = tile;

var _buffer = require("../ops/buffer");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * An implementation of the tile kernel shared between webgl and cpu for string
 * tensors only.
 */
function tile(xBuf, reps) {
  const newShape = new Array(xBuf.rank);

  for (let i = 0; i < newShape.length; i++) {
    newShape[i] = xBuf.shape[i] * reps[i];
  }

  const result = (0, _buffer.buffer)(newShape, xBuf.dtype);

  for (let i = 0; i < result.values.length; ++i) {
    const newLoc = result.indexToLoc(i);
    const originalLoc = new Array(xBuf.rank);

    for (let j = 0; j < originalLoc.length; j++) {
      originalLoc[j] = newLoc[j] % xBuf.shape[j];
    }

    const originalIndex = xBuf.locToIndex(originalLoc);
    result.values[i] = xBuf.values[originalIndex];
  }

  return result.toTensor();
}
},{"../ops/buffer":"node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js"}],"node_modules/@tensorflow/tfjs-core/dist/backends/topk_impl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.topkImpl = topkImpl;

var _tensor = require("../ops/tensor");

var _util = require("../util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** An implementation of the TopK kernel shared between webgl and cpu. */
function topkImpl(x, xShape, xDtype, k, sorted) {
  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.
  const lastDim = xShape[xShape.length - 1];
  const [batch, size] = [x.length / lastDim, lastDim];
  const allTopKVals = (0, _util.getTypedArrayFromDType)(xDtype, batch * k);
  const allTopKIndices = (0, _util.getTypedArrayFromDType)('int32', batch * k);

  for (let b = 0; b < batch; b++) {
    const offset = b * size;
    const vals = x.subarray(offset, offset + size);
    const valAndInd = [];

    for (let i = 0; i < vals.length; i++) {
      valAndInd.push({
        value: vals[i],
        index: i
      });
    }

    valAndInd.sort((a, b) => b.value - a.value);
    const outOffset = b * k;
    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);
    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);

    for (let i = 0; i < k; i++) {
      topKVals[i] = valAndInd[i].value;
      topKIndices[i] = valAndInd[i].index;
    }
  } // Reshape back to the original input shape, except that the last
  // dimension is k.


  const outputShape = xShape.slice();
  outputShape[outputShape.length - 1] = k;
  return [(0, _tensor.tensor)(allTopKVals, outputShape, xDtype), (0, _tensor.tensor)(allTopKIndices, outputShape, 'int32')];
}
},{"../ops/tensor":"node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "nonMaxSuppressionV3Impl", {
  enumerable: true,
  get: function () {
    return _non_max_suppression_impl.nonMaxSuppressionV3Impl;
  }
});
Object.defineProperty(exports, "nonMaxSuppressionV4Impl", {
  enumerable: true,
  get: function () {
    return _non_max_suppression_impl.nonMaxSuppressionV4Impl;
  }
});
Object.defineProperty(exports, "nonMaxSuppressionV5Impl", {
  enumerable: true,
  get: function () {
    return _non_max_suppression_impl.nonMaxSuppressionV5Impl;
  }
});
Object.defineProperty(exports, "split", {
  enumerable: true,
  get: function () {
    return _split_shared.split;
  }
});
Object.defineProperty(exports, "tile", {
  enumerable: true,
  get: function () {
    return _tile_impl.tile;
  }
});
Object.defineProperty(exports, "topkImpl", {
  enumerable: true,
  get: function () {
    return _topk_impl.topkImpl;
  }
});
Object.defineProperty(exports, "whereImpl", {
  enumerable: true,
  get: function () {
    return _where_impl.whereImpl;
  }
});

var _non_max_suppression_impl = require("./non_max_suppression_impl");

var _split_shared = require("./split_shared");

var _tile_impl = require("./tile_impl");

var _topk_impl = require("./topk_impl");

var _where_impl = require("./where_impl");
},{"./non_max_suppression_impl":"node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js","./split_shared":"node_modules/@tensorflow/tfjs-core/dist/backends/split_shared.js","./tile_impl":"node_modules/@tensorflow/tfjs-core/dist/backends/tile_impl.js","./topk_impl":"node_modules/@tensorflow/tfjs-core/dist/backends/topk_impl.js","./where_impl":"node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js"}],"node_modules/@tensorflow/tfjs-core/dist/backends/backend.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KernelBackend = exports.DataStorage = exports.EPSILON_FLOAT16 = exports.EPSILON_FLOAT32 = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EPSILON_FLOAT32 = 1e-7;
exports.EPSILON_FLOAT32 = EPSILON_FLOAT32;
const EPSILON_FLOAT16 = 1e-4;
/** Convenient class for storing tensor-related data. */

exports.EPSILON_FLOAT16 = EPSILON_FLOAT16;

class DataStorage {
  constructor(backend, dataMover) {
    this.backend = backend;
    this.dataMover = dataMover;
    this.data = new WeakMap();
    this.dataIdsCount = 0;
  }

  get(dataId) {
    if (!this.data.has(dataId)) {
      this.dataMover.moveData(this.backend, dataId);
    }

    return this.data.get(dataId);
  }

  set(dataId, value) {
    this.dataIdsCount++;
    this.data.set(dataId, value);
  }

  has(dataId) {
    return this.data.has(dataId);
  }

  delete(dataId) {
    this.dataIdsCount--;
    return this.data.delete(dataId);
  }

  numDataIds() {
    return this.dataIdsCount;
  }

}
/**
 * The interface that defines the kernels that should be implemented when
 * adding a new backend. New backends don't need to implement every one of the
 * methods, this can be done gradually (throw an error for unimplemented
 * methods).
 */


exports.DataStorage = DataStorage;

class KernelBackend {
  time(f) {
    return notYetImplemented('time');
  }

  read(dataId) {
    return notYetImplemented('read');
  }

  readSync(dataId) {
    return notYetImplemented('readSync');
  }

  numDataIds() {
    return notYetImplemented('numDataIds');
  }

  disposeData(dataId) {
    return notYetImplemented('disposeData');
  }

  write(values, shape, dtype) {
    return notYetImplemented('write');
  }

  move(dataId, values, shape, dtype) {
    return notYetImplemented('move');
  }

  memory() {
    return notYetImplemented('memory');
  }
  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */


  floatPrecision() {
    return notYetImplemented('floatPrecision');
  }
  /** Returns the smallest representable number.  */


  epsilon() {
    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
  }

  batchMatMul(a, b, transposeA, transposeB) {
    return notYetImplemented('batchMatMul');
  }

  fusedBatchMatMul({
    a,
    b,
    transposeA,
    transposeB,
    bias,
    activation,
    preluActivationWeights
  }) {
    return notYetImplemented('fusedBatchMatMul');
  }

  slice(x, begin, size) {
    return notYetImplemented('slice');
  }

  stridedSlice(x, begin, end, strides) {
    return notYetImplemented('stridedSlice');
  }

  unstack(x, axis) {
    return notYetImplemented('unstack');
  }

  reverse(a, axis) {
    return notYetImplemented('reverse');
  }

  concat(tensors, axis) {
    return notYetImplemented('concat');
  }

  neg(a) {
    return notYetImplemented('neg');
  }

  add(a, b) {
    return notYetImplemented('add');
  }

  addN(tensors) {
    return notYetImplemented('addN');
  }

  subtract(a, b) {
    return notYetImplemented('subtract');
  }

  multiply(a, b) {
    return notYetImplemented('multiply');
  }

  realDivide(a, b) {
    return notYetImplemented('realDivide');
  }

  floorDiv(a, b) {
    return notYetImplemented('floorDiv');
  }

  sum(x, axes) {
    return notYetImplemented('sum');
  }

  prod(x, axes) {
    return notYetImplemented('prod');
  }

  unsortedSegmentSum(x, segmentIds, numSegments) {
    return notYetImplemented('unsortedSegmentSum');
  }

  argMin(x, axis) {
    return notYetImplemented('argMin');
  }

  argMax(x, axis) {
    return notYetImplemented('argMax');
  }

  equal(a, b) {
    return notYetImplemented('equal');
  }

  notEqual(a, b) {
    return notYetImplemented('notEqual');
  }

  less(a, b) {
    return notYetImplemented('less');
  }

  lessEqual(a, b) {
    return notYetImplemented('lessEqual');
  }

  greater(a, b) {
    return notYetImplemented('greater');
  }

  greaterEqual(a, b) {
    return notYetImplemented('greaterEqual');
  }

  logicalNot(a) {
    return notYetImplemented('logicalNot');
  }

  logicalAnd(a, b) {
    return notYetImplemented('logicalAnd');
  }

  logicalOr(a, b) {
    return notYetImplemented('logicalOr');
  }

  where(condition) {
    return notYetImplemented('where');
  }

  select(condition, a, b) {
    return notYetImplemented('select');
  }

  topk(x, k, sorted) {
    return notYetImplemented('topk');
  }

  min(x, axes) {
    return notYetImplemented('min');
  }

  minimum(a, b) {
    return notYetImplemented('minimum');
  }

  mod(a, b) {
    return notYetImplemented('mod');
  }

  max(x, axes) {
    return notYetImplemented('max');
  }

  maximum(a, b) {
    return notYetImplemented('maximum');
  }

  all(x, axes) {
    return notYetImplemented('all');
  }

  any(x, axes) {
    return notYetImplemented('any');
  }

  squaredDifference(a, b) {
    return notYetImplemented('squaredDifference');
  }

  ceil(x) {
    return notYetImplemented('ceil');
  }

  floor(x) {
    return notYetImplemented('floor');
  }

  round(x) {
    return notYetImplemented('round');
  }

  sign(x) {
    return notYetImplemented('sign');
  }

  isNaN(x) {
    return notYetImplemented('isNaN');
  }

  isInf(x) {
    return notYetImplemented('isInf');
  }

  isFinite(x) {
    return notYetImplemented('isFinite');
  }

  pow(a, b) {
    return notYetImplemented('pow');
  }

  exp(x) {
    return notYetImplemented('exp');
  }

  expm1(x) {
    return notYetImplemented('expm1');
  }

  softmax(x, dim) {
    return notYetImplemented('softmax');
  }

  log(x) {
    return notYetImplemented('log');
  }

  log1p(x) {
    return notYetImplemented('log1p');
  }

  sqrt(x) {
    return notYetImplemented('sqrt');
  }

  rsqrt(x) {
    return notYetImplemented('rsqrt');
  }

  square(x) {
    return notYetImplemented('square');
  }

  reciprocal(x) {
    return notYetImplemented('reciprocal');
  }

  relu(x) {
    return notYetImplemented('relu');
  }

  relu6(x) {
    return notYetImplemented('relu6');
  }

  prelu(x, a) {
    return notYetImplemented('prelu');
  }

  elu(x) {
    return notYetImplemented('elu');
  }

  eluDer(dy, y) {
    return notYetImplemented('eluDer');
  }

  selu(x) {
    return notYetImplemented('selu');
  }

  int(x) {
    return notYetImplemented('int');
  }

  clip(x, min, max) {
    return notYetImplemented('clip');
  }

  abs(x) {
    return notYetImplemented('abs');
  }

  complexAbs(x) {
    return notYetImplemented('complexAbs');
  }

  sigmoid(x) {
    return notYetImplemented('sigmoid');
  }

  softplus(x) {
    return notYetImplemented('softplus');
  }

  sin(x) {
    return notYetImplemented('sin');
  }

  cos(x) {
    return notYetImplemented('cos');
  }

  tan(x) {
    return notYetImplemented('tan');
  }

  asin(x) {
    return notYetImplemented('asin');
  }

  acos(x) {
    return notYetImplemented('acos');
  }

  atan(x) {
    return notYetImplemented('atan');
  }

  atan2(a, b) {
    return notYetImplemented('atan2');
  }

  sinh(x) {
    return notYetImplemented('sinh');
  }

  cosh(x) {
    return notYetImplemented('cosh');
  }

  tanh(x) {
    return notYetImplemented('tanh');
  }

  asinh(x) {
    return notYetImplemented('asinh');
  }

  acosh(x) {
    return notYetImplemented('acosh');
  }

  atanh(x) {
    return notYetImplemented('atanh');
  }

  erf(x) {
    return notYetImplemented('erf');
  }

  step(x, alpha) {
    return notYetImplemented('step');
  }

  fusedConv2d({
    input,
    filter,
    convInfo,
    bias,
    activation,
    preluActivationWeights
  }) {
    return notYetImplemented('fusedConv2d');
  }

  conv2d(x, filter, convInfo) {
    return notYetImplemented('conv2d');
  }

  conv2dDerInput(dy, filter, convInfo) {
    return notYetImplemented('conv2dDerInput');
  }

  conv2dDerFilter(x, dY, convInfo) {
    return notYetImplemented('conv2dDerFilter');
  }

  fusedDepthwiseConv2D({
    input,
    filter,
    convInfo,
    bias,
    activation,
    preluActivationWeights
  }) {
    return notYetImplemented('fusedDepthwiseConv2D');
  }

  depthwiseConv2D(input, filter, convInfo) {
    return notYetImplemented('depthwiseConv2D');
  }

  depthwiseConv2DDerInput(dy, filter, convInfo) {
    return notYetImplemented('depthwiseConv2DDerInput');
  }

  depthwiseConv2DDerFilter(x, dY, convInfo) {
    return notYetImplemented('depthwiseConv2DDerFilter');
  }

  conv3d(x, filter, convInfo) {
    return notYetImplemented('conv3d');
  }

  conv3dDerInput(dy, filter, convInfo) {
    return notYetImplemented('conv3dDerInput');
  }

  conv3dDerFilter(x, dY, convInfo) {
    return notYetImplemented('conv3dDerFilter');
  }

  maxPool(x, convInfo) {
    return notYetImplemented('maxPool');
  }

  maxPoolBackprop(dy, x, y, convInfo) {
    return notYetImplemented('maxPoolBackprop');
  }

  avgPool(x, convInfo) {
    return notYetImplemented('avgPool');
  }

  avgPoolBackprop(dy, x, convInfo) {
    return notYetImplemented('avgPoolBackprop');
  }

  avgPool3d(x, convInfo) {
    return notYetImplemented('avgPool3d');
  }

  avgPool3dBackprop(dy, x, convInfo) {
    return notYetImplemented('avgPool3dBackprop');
  }

  maxPool3d(x, convInfo) {
    return notYetImplemented('maxPool3d');
  }

  maxPool3dBackprop(dy, x, y, convInfo) {
    return notYetImplemented('maxPool3dBackprop');
  }

  reshape(x, shape) {
    return notYetImplemented('reshape');
  }

  cast(x, dtype) {
    return notYetImplemented('cast');
  }

  tile(x, reps) {
    return notYetImplemented('tile');
  }

  pad(x, paddings, constantValue) {
    return notYetImplemented('pad');
  }

  transpose(x, perm) {
    return notYetImplemented('transpose');
  }

  gather(x, indices, axis) {
    return notYetImplemented('gather');
  }

  gatherND(x, indices) {
    return notYetImplemented('gatherND');
  }

  scatterND(indices, updates, shape) {
    return notYetImplemented('scatterND');
  }

  batchToSpaceND(x, blockShape, crops) {
    return notYetImplemented('batchToSpaceND');
  }

  spaceToBatchND(x, blockShape, paddings) {
    return notYetImplemented('spaceToBatchND');
  }

  resizeBilinear(x, newHeight, newWidth, alignCorners) {
    return notYetImplemented('resizeBilinear');
  }

  resizeBilinearBackprop(dy, x, alignCorners) {
    return notYetImplemented('resizeBilinearBackprop');
  }

  resizeNearestNeighbor(x, newHEight, newWidth, alignCorners) {
    return notYetImplemented('resizeNearestNeighbor');
  }

  resizeNearestNeighborBackprop(dy, x, alignCorners) {
    return notYetImplemented('resizeNearestNeighborBackprop');
  }

  batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {
    return notYetImplemented('batchNorm');
  }

  localResponseNormalization4D(x, radius, bias, alpha, beta) {
    return notYetImplemented('localResponseNormalization4D');
  }

  LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {
    return notYetImplemented('LRNGrad');
  }

  multinomial(logits, normalized, numSamples, seed) {
    return notYetImplemented('multinomial');
  }

  oneHot(indices, depth, onValue, offValue) {
    return notYetImplemented('oneHot');
  }

  cumsum(x, axis, exclusive, reverse) {
    return notYetImplemented('cumsum');
  }

  nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
    return notYetImplemented('nonMaxSuppression');
  }

  fft(x) {
    return notYetImplemented('fft');
  }

  ifft(x) {
    return notYetImplemented('ifft');
  }

  complex(real, imag) {
    return notYetImplemented('complex');
  }

  real(input) {
    return notYetImplemented('real');
  }

  imag(input) {
    return notYetImplemented('imag');
  }

  cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {
    return notYetImplemented('cropAndResize');
  }

  depthToSpace(x, blockSize, dataFormat) {
    return notYetImplemented('depthToSpace');
  } // Aligns with the "SplitV" kernel in TensorFlow.


  split(value, sizeSplits, axis) {
    return notYetImplemented('split');
  }

  sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {
    return notYetImplemented('sparseToDense');
  }

  diag(x) {
    return notYetImplemented('diag');
  }

  fill(shape, value, dtype) {
    return notYetImplemented('fill');
  }

  onesLike(x) {
    return notYetImplemented('onesLike');
  }

  zerosLike(x) {
    return notYetImplemented('zerosLike');
  }

  linspace(start, stop, num) {
    return notYetImplemented('linspace');
  }

  dispose() {
    return notYetImplemented('dispose');
  }

}

exports.KernelBackend = KernelBackend;

function notYetImplemented(kernelName) {
  throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` + `Did you forget to import the kernel?`);
}
},{}],"node_modules/@tensorflow/tfjs-core/dist/base.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  io: true,
  math: true,
  browser: true,
  gather_util: true,
  scatter_util: true,
  slice_util: true,
  serialization: true,
  tensor_util: true,
  test_util: true,
  util: true,
  version_core: true,
  AdadeltaOptimizer: true,
  AdagradOptimizer: true,
  AdamOptimizer: true,
  AdamaxOptimizer: true,
  MomentumOptimizer: true,
  Optimizer: true,
  RMSPropOptimizer: true,
  SGDOptimizer: true,
  Tensor: true,
  TensorBuffer: true,
  Variable: true,
  Rank: true,
  sumOutType: true,
  upcastType: true,
  Reduction: true,
  customGrad: true,
  grad: true,
  grads: true,
  valueAndGrad: true,
  valueAndGrads: true,
  variableGrads: true,
  Environment: true,
  env: true,
  ENV: true,
  nextFrame: true,
  backend_util: true,
  device_util: true,
  kernel_impls: true,
  KernelBackend: true,
  DataStorage: true
};
Object.defineProperty(exports, "version_core", {
  enumerable: true,
  get: function () {
    return _version.version;
  }
});
Object.defineProperty(exports, "AdadeltaOptimizer", {
  enumerable: true,
  get: function () {
    return _adadelta_optimizer.AdadeltaOptimizer;
  }
});
Object.defineProperty(exports, "AdagradOptimizer", {
  enumerable: true,
  get: function () {
    return _adagrad_optimizer.AdagradOptimizer;
  }
});
Object.defineProperty(exports, "AdamOptimizer", {
  enumerable: true,
  get: function () {
    return _adam_optimizer.AdamOptimizer;
  }
});
Object.defineProperty(exports, "AdamaxOptimizer", {
  enumerable: true,
  get: function () {
    return _adamax_optimizer.AdamaxOptimizer;
  }
});
Object.defineProperty(exports, "MomentumOptimizer", {
  enumerable: true,
  get: function () {
    return _momentum_optimizer.MomentumOptimizer;
  }
});
Object.defineProperty(exports, "Optimizer", {
  enumerable: true,
  get: function () {
    return _optimizer.Optimizer;
  }
});
Object.defineProperty(exports, "RMSPropOptimizer", {
  enumerable: true,
  get: function () {
    return _rmsprop_optimizer.RMSPropOptimizer;
  }
});
Object.defineProperty(exports, "SGDOptimizer", {
  enumerable: true,
  get: function () {
    return _sgd_optimizer.SGDOptimizer;
  }
});
Object.defineProperty(exports, "Tensor", {
  enumerable: true,
  get: function () {
    return _tensor.Tensor;
  }
});
Object.defineProperty(exports, "TensorBuffer", {
  enumerable: true,
  get: function () {
    return _tensor.TensorBuffer;
  }
});
Object.defineProperty(exports, "Variable", {
  enumerable: true,
  get: function () {
    return _tensor.Variable;
  }
});
Object.defineProperty(exports, "Rank", {
  enumerable: true,
  get: function () {
    return _types.Rank;
  }
});
Object.defineProperty(exports, "sumOutType", {
  enumerable: true,
  get: function () {
    return _types.sumOutType;
  }
});
Object.defineProperty(exports, "upcastType", {
  enumerable: true,
  get: function () {
    return _types.upcastType;
  }
});
Object.defineProperty(exports, "Reduction", {
  enumerable: true,
  get: function () {
    return _loss_ops_utils.Reduction;
  }
});
Object.defineProperty(exports, "customGrad", {
  enumerable: true,
  get: function () {
    return _gradients.customGrad;
  }
});
Object.defineProperty(exports, "grad", {
  enumerable: true,
  get: function () {
    return _gradients.grad;
  }
});
Object.defineProperty(exports, "grads", {
  enumerable: true,
  get: function () {
    return _gradients.grads;
  }
});
Object.defineProperty(exports, "valueAndGrad", {
  enumerable: true,
  get: function () {
    return _gradients.valueAndGrad;
  }
});
Object.defineProperty(exports, "valueAndGrads", {
  enumerable: true,
  get: function () {
    return _gradients.valueAndGrads;
  }
});
Object.defineProperty(exports, "variableGrads", {
  enumerable: true,
  get: function () {
    return _gradients.variableGrads;
  }
});
Object.defineProperty(exports, "Environment", {
  enumerable: true,
  get: function () {
    return _environment.Environment;
  }
});
Object.defineProperty(exports, "env", {
  enumerable: true,
  get: function () {
    return _environment.env;
  }
});
Object.defineProperty(exports, "ENV", {
  enumerable: true,
  get: function () {
    return _environment.ENV;
  }
});
Object.defineProperty(exports, "nextFrame", {
  enumerable: true,
  get: function () {
    return _browser_util.nextFrame;
  }
});
Object.defineProperty(exports, "KernelBackend", {
  enumerable: true,
  get: function () {
    return _backend.KernelBackend;
  }
});
Object.defineProperty(exports, "DataStorage", {
  enumerable: true,
  get: function () {
    return _backend.DataStorage;
  }
});
exports.kernel_impls = exports.device_util = exports.backend_util = exports.util = exports.test_util = exports.tensor_util = exports.serialization = exports.slice_util = exports.scatter_util = exports.gather_util = exports.browser = exports.math = exports.io = void 0;

var io = _interopRequireWildcard(require("./io/io"));

exports.io = io;

var math = _interopRequireWildcard(require("./math"));

exports.math = math;

var browser = _interopRequireWildcard(require("./ops/browser"));

exports.browser = browser;

var gather_util = _interopRequireWildcard(require("./ops/gather_nd_util"));

exports.gather_util = gather_util;

var scatter_util = _interopRequireWildcard(require("./ops/scatter_nd_util"));

exports.scatter_util = scatter_util;

var slice_util = _interopRequireWildcard(require("./ops/slice_util"));

exports.slice_util = slice_util;

var serialization = _interopRequireWildcard(require("./serialization"));

exports.serialization = serialization;

var tensor_util = _interopRequireWildcard(require("./tensor_util"));

exports.tensor_util = tensor_util;

var test_util = _interopRequireWildcard(require("./test_util"));

exports.test_util = test_util;

var util = _interopRequireWildcard(require("./util"));

exports.util = util;

var _version = require("./version");

var _adadelta_optimizer = require("./optimizers/adadelta_optimizer");

var _adagrad_optimizer = require("./optimizers/adagrad_optimizer");

var _adam_optimizer = require("./optimizers/adam_optimizer");

var _adamax_optimizer = require("./optimizers/adamax_optimizer");

var _momentum_optimizer = require("./optimizers/momentum_optimizer");

var _optimizer = require("./optimizers/optimizer");

var _rmsprop_optimizer = require("./optimizers/rmsprop_optimizer");

var _sgd_optimizer = require("./optimizers/sgd_optimizer");

var _tensor = require("./tensor");

var _types = require("./types");

var _ops = require("./ops/ops");

Object.keys(_ops).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ops[key];
    }
  });
});

var _loss_ops_utils = require("./ops/loss_ops_utils");

var _train = require("./train");

Object.keys(_train).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _train[key];
    }
  });
});

var _globals = require("./globals");

Object.keys(_globals).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _globals[key];
    }
  });
});

var _kernel_registry = require("./kernel_registry");

Object.keys(_kernel_registry).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _kernel_registry[key];
    }
  });
});

var _gradients = require("./gradients");

var _environment = require("./environment");

var _browser_util = require("./browser_util");

var backend_util = _interopRequireWildcard(require("./backends/backend_util"));

exports.backend_util = backend_util;

var device_util = _interopRequireWildcard(require("./device_util"));

exports.device_util = device_util;

var kernel_impls = _interopRequireWildcard(require("./backends/kernel_impls"));

exports.kernel_impls = kernel_impls;

var _backend = require("./backends/backend");

var _kernel_names = require("./kernel_names");

Object.keys(_kernel_names).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _kernel_names[key];
    }
  });
});

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./io/io":"node_modules/@tensorflow/tfjs-core/dist/io/io.js","./math":"node_modules/@tensorflow/tfjs-core/dist/math.js","./ops/browser":"node_modules/@tensorflow/tfjs-core/dist/ops/browser.js","./ops/gather_nd_util":"node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js","./ops/scatter_nd_util":"node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js","./ops/slice_util":"node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js","./serialization":"node_modules/@tensorflow/tfjs-core/dist/serialization.js","./tensor_util":"node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","./test_util":"node_modules/@tensorflow/tfjs-core/dist/test_util.js","./util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./version":"node_modules/@tensorflow/tfjs-core/dist/version.js","./optimizers/adadelta_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js","./optimizers/adagrad_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js","./optimizers/adam_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js","./optimizers/adamax_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js","./optimizers/momentum_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js","./optimizers/optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js","./optimizers/rmsprop_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js","./optimizers/sgd_optimizer":"node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js","./tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js","./types":"node_modules/@tensorflow/tfjs-core/dist/types.js","./ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","./ops/loss_ops_utils":"node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","./train":"node_modules/@tensorflow/tfjs-core/dist/train.js","./globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","./kernel_registry":"node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js","./gradients":"node_modules/@tensorflow/tfjs-core/dist/gradients.js","./environment":"node_modules/@tensorflow/tfjs-core/dist/environment.js","./browser_util":"node_modules/@tensorflow/tfjs-core/dist/browser_util.js","./backends/backend_util":"node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js","./device_util":"node_modules/@tensorflow/tfjs-core/dist/device_util.js","./backends/kernel_impls":"node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js","./backends/backend":"node_modules/@tensorflow/tfjs-core/dist/backends/backend.js","./kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Abs_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.absGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _mul = require("../ops/mul");

var _step = require("../ops/step");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const absGradConfig = {
  kernelName: _kernel_names.Abs,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _mul.mul)(dy, (0, _step.step)((0, _cast.cast)(x, 'float32'), -1))
    };
  }
};
exports.absGradConfig = absGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/step":"node_modules/@tensorflow/tfjs-core/dist/ops/step.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Acos_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acosGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _div = require("../ops/div");

var _neg = require("../ops/neg");

var _scalar = require("../ops/scalar");

var _sqrt = require("../ops/sqrt");

var _square = require("../ops/square");

var _sub = require("../ops/sub");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const acosGradConfig = {
  kernelName: _kernel_names.Acos,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => {
        const a = (0, _square.square)((0, _cast.cast)(x, 'float32'));
        const b = (0, _sqrt.sqrt)((0, _sub.sub)((0, _scalar.scalar)(1), a));
        return (0, _neg.neg)((0, _div.div)(dy, b));
      }
    };
  }
};
exports.acosGradConfig = acosGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/sqrt":"node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Acosh_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acoshGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _div = require("../ops/div");

var _sqrt = require("../ops/sqrt");

var _square = require("../ops/square");

var _sub = require("../ops/sub");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const acoshGradConfig = {
  kernelName: _kernel_names.Acosh,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => {
        const a = (0, _sqrt.sqrt)((0, _sub.sub)((0, _square.square)((0, _cast.cast)(x, 'float32')), 1));
        return (0, _div.div)(dy, a);
      }
    };
  }
};
exports.acoshGradConfig = acoshGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/sqrt":"node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Add_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var broadcast_util = _interopRequireWildcard(require("../ops/broadcast_util"));

var _reshape = require("../ops/reshape");

var _sum = require("../ops/sum");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const addGradConfig = {
  kernelName: _kernel_names.Add,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);

    const derA = () => {
      let res = dy;
      const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);

      if (reduceAxes.length > 0) {
        res = (0, _sum.sum)(res, reduceAxes);
      }

      return (0, _reshape.reshape)(res, a.shape);
    };

    const derB = () => {
      let res = dy;
      const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);

      if (reduceAxes.length > 0) {
        res = (0, _sum.sum)(res, reduceAxes);
      }

      return (0, _reshape.reshape)(res, b.shape);
    };

    return {
      a: derA,
      b: derB
    };
  }
};
exports.addGradConfig = addGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/AddN_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addNGradConfig = void 0;

var _kernel_names = require("../kernel_names");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const addNGradConfig = {
  kernelName: _kernel_names.AddN,
  saveAllInputs: true,
  gradFunc: (dy, saved) => {
    const ders = {};
    saved.forEach((_, i) => {
      ders[i] = () => dy.clone();
    });
    return ders;
  }
};
exports.addNGradConfig = addNGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMax_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argMaxGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const argMaxGradConfig = {
  kernelName: _kernel_names.ArgMax,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _zeros_like.zerosLike)(x)
    };
  }
};
exports.argMaxGradConfig = argMaxGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMin_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argMinGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const argMinGradConfig = {
  kernelName: _kernel_names.ArgMin,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _zeros_like.zerosLike)(x)
    };
  }
};
exports.argMinGradConfig = argMinGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Asin_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asinGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _div = require("../ops/div");

var _scalar = require("../ops/scalar");

var _sqrt = require("../ops/sqrt");

var _square = require("../ops/square");

var _sub = require("../ops/sub");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const asinGradConfig = {
  kernelName: _kernel_names.Asin,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _div.div)(dy, (0, _sqrt.sqrt)((0, _sub.sub)((0, _scalar.scalar)(1), (0, _square.square)((0, _cast.cast)(x, 'float32')))))
    };
  }
};
exports.asinGradConfig = asinGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/sqrt":"node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Asinh_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asinhGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _add = require("../ops/add");

var _cast = require("../ops/cast");

var _div = require("../ops/div");

var _scalar = require("../ops/scalar");

var _sqrt = require("../ops/sqrt");

var _square = require("../ops/square");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const asinhGradConfig = {
  kernelName: _kernel_names.Asinh,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => {
        const a = (0, _sqrt.sqrt)((0, _add.add)((0, _scalar.scalar)(1), (0, _square.square)((0, _cast.cast)(x, 'float32'))));
        return (0, _div.div)(dy, a);
      }
    };
  }
};
exports.asinhGradConfig = asinhGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/sqrt":"node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atan2GradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _add = require("../ops/add");

var _broadcast_util = require("../ops/broadcast_util");

var _div = require("../ops/div");

var _mul = require("../ops/mul");

var _neg = require("../ops/neg");

var _reshape = require("../ops/reshape");

var _square = require("../ops/square");

var _sum = require("../ops/sum");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const atan2GradConfig = {
  kernelName: _kernel_names.Atan2,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = (0, _broadcast_util.assertAndGetBroadcastShape)(a.shape, b.shape);

    const derA = () => {
      const d = (0, _add.add)((0, _square.square)(a), (0, _square.square)(b));
      let res = (0, _mul.mul)(dy, (0, _div.div)(b, d));
      const reduceAxes = (0, _broadcast_util.getReductionAxes)(a.shape, outShape);

      if (reduceAxes.length > 0) {
        res = (0, _sum.sum)(res, reduceAxes);
      }

      return (0, _reshape.reshape)(res, a.shape);
    };

    const derB = () => {
      const d = (0, _add.add)((0, _square.square)(a), (0, _square.square)(b));
      let res = (0, _neg.neg)((0, _mul.mul)(dy, (0, _div.div)(a, d)));
      const reduceAxes = (0, _broadcast_util.getReductionAxes)(b.shape, outShape);

      if (reduceAxes.length > 0) {
        res = (0, _sum.sum)(res, reduceAxes);
      }

      return (0, _reshape.reshape)(res, b.shape);
    };

    return {
      a: derA,
      b: derB
    };
  }
};
exports.atan2GradConfig = atan2GradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Atan_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atanGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _add = require("../ops/add");

var _cast = require("../ops/cast");

var _div = require("../ops/div");

var _square = require("../ops/square");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const atanGradConfig = {
  kernelName: _kernel_names.Atan,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _div.div)(dy, (0, _add.add)((0, _square.square)((0, _cast.cast)(x, 'float32')), 1))
    };
  }
};
exports.atanGradConfig = atanGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Atanh_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atanhGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _div = require("../ops/div");

var _square = require("../ops/square");

var _sub = require("../ops/sub");

var _scalar = require("../ops/scalar");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const atanhGradConfig = {
  kernelName: _kernel_names.Atanh,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _div.div)(dy, (0, _sub.sub)((0, _scalar.scalar)(1), (0, _square.square)((0, _cast.cast)(x, 'float32'))))
    };
  }
};
exports.atanhGradConfig = atanhGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d_backprop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avgPool3dBackprop = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the backprop of a 3d avg pool.
 *
 * @param dy The dy error, of rank 5 of shape
 *     [batchSize, depth, height, width, channels].
 * assumed.
 * @param input The original input image, of rank 5 or rank4 of shape
 *     [batchSize, depth, height, width, channels].
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations Deprecated, this field will be gone in v3.0.0. The dilation
 *     rates: `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
 *     rounding mode used when computing output dimensions if pad is a
 *     number. If none is provided, it will not round and error if the output
 *     is of fractional size.
 */
function avgPool3dBackprop_(dy, input, filterSize, strides, dilations = [1, 1, 1], pad, dimRoundingMode) {
  const $dy = (0, _tensor_util_env.convertToTensor)(dy, 'dy', 'avgPool3dBackprop');
  const $input = (0, _tensor_util_env.convertToTensor)(input, 'input', 'avgPool3dBackprop');
  let dy5D = $dy;
  let input5D = $input;
  let reshapedTo5D = false;

  if ($input.rank === 4) {
    reshapedTo5D = true;
    dy5D = (0, _reshape.reshape)($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);
    input5D = (0, _reshape.reshape)($input, [1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]]);
  }

  util.assert(dy5D.rank === 5, () => `Error in avgPool3dBackprop: dy must be rank 5 but got rank ` + `${dy5D.rank}.`);
  util.assert(input5D.rank === 5, () => `Error in avgPool3dBackprop: input must be rank 5 but got rank ` + `${input5D.rank}.`);
  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool3dBackprop: Either strides or dilations ' + `must be 1. Got strides ${strides} and dilations '${dilations}'`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in maxPool3dBackprop: pad must be an integer when ` + `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const forward = backend => {
    const convInfo = conv_util.computePool3DInfo(input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);
    return backend.avgPool3dBackprop(dy5D, input5D, convInfo);
  };

  const inputs = {
    dy: dy5D,
    input: input5D
  };
  const attrs = {
    filterSize,
    strides,
    dilations,
    pad,
    dimRoundingMode
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.AvgPool3DBackprop, attrs);

  if (reshapedTo5D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
  }

  return res;
}

const avgPool3dBackprop = (0, _operation.op)({
  avgPool3dBackprop_
});
exports.avgPool3dBackprop = avgPool3dBackprop;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool3D_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avgPool3DGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _avg_pool_3d_backprop = require("../ops/avg_pool_3d_backprop");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const avgPool3DGradConfig = {
  kernelName: _kernel_names.AvgPool3D,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      filterSize,
      strides,
      dilations,
      pad,
      dimRoundingMode
    } = attrs;
    const $dilations = dilations == null ? [1, 1, 1] : dilations;
    return {
      x: () => (0, _avg_pool_3d_backprop.avgPool3dBackprop)(dy, x, filterSize, strides, $dilations, pad, dimRoundingMode)
    };
  }
};
exports.avgPool3DGradConfig = avgPool3DGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/avg_pool_3d_backprop":"node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d_backprop.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_backprop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avgPoolBackprop = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the backprop of an 2D avg pool.
 *
 * @param dy The dy error, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param input The input image, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 */
function avgPoolBackprop_(dy, input, filterSize, strides, pad) {
  const $dy = (0, _tensor_util_env.convertToTensor)(dy, 'dy', 'avgPoolBackprop');
  const $input = (0, _tensor_util_env.convertToTensor)(input, 'input', 'avgPoolBackprop');
  util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);
  let input4D = $input;
  let dy4D = $dy;
  let reshapedTo4D = false;

  if ($input.rank === 3) {
    reshapedTo4D = true;
    input4D = (0, _reshape.reshape)($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);
    dy4D = (0, _reshape.reshape)($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);
  }

  util.assert(dy4D.rank === 4, () => `Error in avgPoolBackprop: dy must be rank 4 but got rank ` + `${dy4D.rank}.`);
  util.assert(input4D.rank === 4, () => `Error in avgPoolBackprop: input must be rank 4 but got rank ` + `${input4D.rank}.`);

  const forward = backend => {
    const convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, 1
    /* dilations */
    , pad);
    return backend.avgPoolBackprop(dy4D, input4D, convInfo);
  };

  const inputs = {
    dy: dy4D,
    input: input4D
  };
  const attrs = {
    filterSize,
    strides,
    pad
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null, _kernel_names.AvgPoolBackprop, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const avgPoolBackprop = (0, _operation.op)({
  avgPoolBackprop_
});
exports.avgPoolBackprop = avgPoolBackprop;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avgPoolGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _avg_pool_backprop = require("../ops/avg_pool_backprop");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const avgPoolGradConfig = {
  kernelName: _kernel_names.AvgPool,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      filterSize,
      strides,
      pad
    } = attrs;
    return {
      x: () => (0, _avg_pool_backprop.avgPoolBackprop)(dy, x, filterSize, strides, pad)
    };
  }
};
exports.avgPoolGradConfig = avgPoolGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/avg_pool_backprop":"node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_backprop.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/BatchMatMul_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchMatMulGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _mat_mul = require("../ops/mat_mul");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const batchMatMulGradConfig = {
  kernelName: _kernel_names.BatchMatMul,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved, attrs) => {
    const [a, b] = saved;
    const {
      transposeA,
      transposeB
    } = attrs;

    if (!transposeA && !transposeB) {
      return {
        a: () => (0, _mat_mul.matMul)(dy, b, false, true),
        b: () => (0, _mat_mul.matMul)(a, dy, true, false)
      };
    } else if (!transposeA && transposeB) {
      return {
        a: () => (0, _mat_mul.matMul)(dy, b, false, false),
        b: () => (0, _mat_mul.matMul)(dy, a, true, false)
      };
    } else if (transposeA && !transposeB) {
      return {
        a: () => (0, _mat_mul.matMul)(b, dy, false, true),
        b: () => (0, _mat_mul.matMul)(a, dy, false, false)
      };
    } else {
      return {
        a: () => (0, _mat_mul.matMul)(b, dy, true, true),
        b: () => (0, _mat_mul.matMul)(dy, a, true, true)
      };
    }
  }
};
exports.batchMatMulGradConfig = batchMatMulGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/mat_mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/BatchToSpaceND_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchToSpaceNDGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _space_to_batch_nd = require("../ops/space_to_batch_nd");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const batchToSpaceNDGradConfig = {
  kernelName: _kernel_names.BatchToSpaceND,
  gradFunc: (dy, saved, attrs) => {
    const {
      blockShape,
      crops
    } = attrs;
    return {
      x: () => (0, _space_to_batch_nd.spaceToBatchND)(dy, blockShape, crops)
    };
  }
};
exports.batchToSpaceNDGradConfig = batchToSpaceNDGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/space_to_batch_nd":"node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/BroadcastTo_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.broadcastToGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _sum = require("../ops/sum");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const broadcastToGradConfig = {
  kernelName: _kernel_names.BroadcastTo,
  gradFunc: (dy, saved, attrs) => {
    const broadCastToAttrs = attrs;
    const inputShape = broadCastToAttrs.inputShape;
    const outputShape = broadCastToAttrs.shape;
    const reps = Array.from(outputShape);

    for (let i = inputShape.length - 1; i >= 0; i--) {
      if (inputShape[i] === outputShape[i]) {
        reps[i] = 1;
      } else if (inputShape[i] !== 1) {
        throw new Error(`broadcastTo(): [${inputShape}] cannot be broadcast to [${outputShape}].`);
      }
    }

    const axes = [];

    for (let i = 0; i < reps.length; i++) {
      if (reps[i] > 1) {
        axes.push(i);
      }
    }

    return {
      x: () => (0, _sum.sum)(dy, axes, true
      /* keepDims */
      )
    };
  }
};
exports.broadcastToGradConfig = broadcastToGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Cast_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.castGradConfig = void 0;

var _kernel_names = require("../kernel_names");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const castGradConfig = {
  kernelName: _kernel_names.Cast,
  gradFunc: dy => {
    return {
      x: () => dy.clone()
    };
  }
};
exports.castGradConfig = castGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Ceil_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ceilGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ceilGradConfig = {
  kernelName: _kernel_names.Ceil,
  gradFunc: dy => {
    // TODO(manrajgrover): Return null for gradients when backprop supports it.
    return {
      x: () => (0, _zeros_like.zerosLike)(dy)
    };
  }
};
exports.ceilGradConfig = ceilGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/ClipByValue_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clipByValueGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _greater_equal = require("../ops/greater_equal");

var _less_equal = require("../ops/less_equal");

var _logical_and = require("../ops/logical_and");

var _where = require("../ops/where");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const clipByValueGradConfig = {
  kernelName: _kernel_names.ClipByValue,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      clipValueMin,
      clipValueMax
    } = attrs;
    return {
      x: () => (0, _where.where)((0, _logical_and.logicalAnd)((0, _greater_equal.greaterEqual)(x, clipValueMin), (0, _less_equal.lessEqual)(x, clipValueMax)), dy, (0, _zeros_like.zerosLike)(dy))
    };
  }
};
exports.clipByValueGradConfig = clipByValueGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/greater_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js","../ops/less_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js","../ops/logical_and":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js","../ops/where":"node_modules/@tensorflow/tfjs-core/dist/ops/where.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Concat_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _split = require("../ops/split");

var _util = require("../util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const concatGradConfig = {
  kernelName: _kernel_names.Concat,
  saveAllInputs: true,
  gradFunc: (dy, saved, attrs) => {
    const shapes = saved.map(t => t.shape);
    const {
      axis
    } = attrs;
    const $axis = (0, _util.parseAxisParam)(axis, saved[0].shape)[0];
    const sizeSplits = shapes.map(s => s[$axis]);
    const derTensors = (0, _split.split)(dy, sizeSplits, $axis);
    return derTensors.map(t => () => t);
  }
};
exports.concatGradConfig = concatGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/split":"node_modules/@tensorflow/tfjs-core/dist/ops/split.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2D_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2DGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _conv2d_backprop_filter = require("../ops/conv2d_backprop_filter");

var _conv2d_backprop_input = require("../ops/conv2d_backprop_input");

var conv_util = _interopRequireWildcard(require("../ops/conv_util"));

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const conv2DGradConfig = {
  kernelName: _kernel_names.Conv2D,
  inputsToSave: ['x', 'filter'],
  gradFunc: (dy, saved, attrs) => {
    const [x4D, $filter] = saved;
    const {
      dilations,
      strides,
      pad,
      dataFormat
    } = attrs;
    util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of conv2D: dilation rates greater than 1 ' + `are not yet supported in gradients. Got dilations '${dilations}'`);
    return {
      x: () => (0, _conv2d_backprop_input.conv2DBackpropInput)(x4D.shape, dy, $filter, strides, pad, dataFormat),
      filter: () => (0, _conv2d_backprop_filter.conv2DBackpropFilter)(x4D, dy, $filter.shape, strides, pad, dataFormat)
    };
  }
};
exports.conv2DGradConfig = conv2DGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/conv2d_backprop_filter":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js","../ops/conv2d_backprop_input":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js","../ops/conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2DBackpropInput_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2DBackpropInputGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _conv2d = require("../ops/conv2d");

var _conv2d_backprop_filter = require("../ops/conv2d_backprop_filter");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const conv2DBackpropInputGradConfig = {
  kernelName: _kernel_names.Conv2DBackpropInput,
  inputsToSave: ['dy', 'filter'],
  gradFunc: (ddx, saved, attrs) => {
    const [dy, filter] = saved;
    const {
      strides,
      pad,
      dataFormat,
      dimRoundingMode
    } = attrs;
    return {
      dy: () => (0, _conv2d.conv2d)(ddx, filter, strides, pad, dataFormat, 1
      /* dilations */
      , dimRoundingMode),
      filter: () => (0, _conv2d_backprop_filter.conv2DBackpropFilter)(ddx, dy, filter.shape, strides, pad, dataFormat, dimRoundingMode)
    };
  }
};
exports.conv2DBackpropInputGradConfig = conv2DBackpropInputGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js","../ops/conv2d_backprop_filter":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv3DBackpropFilter = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the derivative of the filter of a 3D convolution.
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is
 *     assumed.
 * @param dy The dy image, of rank 5 or rank 4, of shape
 *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is
 *     assumed.
 * @param filterShape The shape of the filter, length 5,
 *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideDepth, strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 */
function conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {
  let x5D = x;

  if (x.rank === 4) {
    x5D = (0, _reshape.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);
  }

  let dy5D = dy;

  if (dy5D.rank === 4) {
    dy5D = (0, _reshape.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);
  }

  util.assert(x5D.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` + `${x5D.shape}.`);
  util.assert(dy5D.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` + `${dy5D.shape}.`);
  util.assert(filterShape.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` + `${filterShape}.`);
  util.assert(x5D.shape[4] === filterShape[3], () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` + `match input depth in filter (${filterShape[3]}.`);
  util.assert(dy5D.shape[4] === filterShape[4], () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` + `match output depth for filter (${filterShape[4]}).`);

  const forward = backend => {
    const dilations = 1;
    const convInfo = conv_util.computeConv3DInfo(x5D.shape, filterShape, strides, dilations, pad);
    return backend.conv3dDerFilter(x5D, dy5D, convInfo);
  };

  const inputs = {
    x: x5D,
    y: dy5D
  };
  const attrs = {
    strides,
    pad
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null, _kernel_names.Conv3DBackpropFilterV2, attrs);
}

const conv3DBackpropFilter = (0, _operation.op)({
  conv3DBackpropFilter_
});
exports.conv3DBackpropFilter = conv3DBackpropFilter;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Conv3D_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv3DGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _conv3d_backprop_filter = require("../ops/conv3d_backprop_filter");

var _conv3d_backprop_input = require("../ops/conv3d_backprop_input");

var _conv_util = require("../ops/conv_util");

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const conv3DGradConfig = {
  kernelName: _kernel_names.Conv3D,
  inputsToSave: ['x', 'filter'],
  gradFunc: (dy, saved, attrs) => {
    const {
      dilations,
      strides,
      pad
    } = attrs;
    util.assert((0, _conv_util.tupleValuesAreOne)(dilations), () => 'Error in gradient of conv3D: dilation rates greater than 1 are ' + `not yet supported in gradients. Got dilations '${dilations}'`);
    const [x5D, $filter] = saved;
    return {
      x: () => (0, _conv3d_backprop_input.conv3DBackpropInput)(x5D.shape, dy, $filter, strides, pad),
      filter: () => (0, _conv3d_backprop_filter.conv3DBackpropFilter)(x5D, dy, $filter.shape, strides, pad)
    };
  }
};
exports.conv3DGradConfig = conv3DGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/conv3d_backprop_filter":"node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js","../ops/conv3d_backprop_input":"node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js","../ops/conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Cos_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cosGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _mul = require("../ops/mul");

var _neg = require("../ops/neg");

var _sin = require("../ops/sin");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cosGradConfig = {
  kernelName: _kernel_names.Cos,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _mul.mul)((0, _neg.neg)((0, _sin.sin)((0, _cast.cast)(x, 'float32'))), dy)
    };
  }
};
exports.cosGradConfig = cosGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../ops/sin":"node_modules/@tensorflow/tfjs-core/dist/ops/sin.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Cosh_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coshGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _mul = require("../ops/mul");

var _sinh = require("../ops/sinh");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const coshGradConfig = {
  kernelName: _kernel_names.Cosh,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _mul.mul)((0, _sinh.sinh)((0, _cast.cast)(x, 'float32')), dy)
    };
  }
};
exports.coshGradConfig = coshGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/sinh":"node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Cumsum_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cumsumGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _axis_util = require("../ops/axis_util");

var _cumsum = require("../ops/cumsum");

var _transpose = require("../ops/transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cumsumGradConfig = {
  kernelName: _kernel_names.Cumsum,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      axis,
      exclusive,
      reverse
    } = attrs;
    return {
      x: () => {
        const permutation = (0, _axis_util.getAxesPermutation)([axis], x.rank);
        let out = (0, _cumsum.cumsum)(dy, axis, exclusive, !reverse);

        if (permutation != null) {
          out = (0, _transpose.transpose)(out, permutation);
        }

        return out;
      }
    };
  }
};
exports.cumsumGradConfig = cumsumGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","../ops/cumsum":"node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js","../ops/transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthwiseConv2dNativeGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var conv_util = _interopRequireWildcard(require("../ops/conv_util"));

var _depthwise_conv2d_native_backprop_filter = require("../ops/depthwise_conv2d_native_backprop_filter");

var _depthwise_conv2d_native_backprop_input = require("../ops/depthwise_conv2d_native_backprop_input");

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const depthwiseConv2dNativeGradConfig = {
  kernelName: _kernel_names.DepthwiseConv2dNative,
  inputsToSave: ['x', 'filter'],
  gradFunc: (dy, saved, attrs) => {
    const {
      dilations,
      strides,
      pad,
      dimRoundingMode
    } = attrs;
    const $dilations = dilations == null ? [1, 1] : dilations;
    util.assert(conv_util.tupleValuesAreOne($dilations), () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' + `greater than 1 are not yet supported. Got dilations ` + `'${$dilations}'`);
    const [x, filter] = saved;
    util.assert(x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be ` + `rank 4, but got rank ${x.rank}.`);
    util.assert(filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be ` + `rank 4, but got rank ${filter.rank}.`);
    util.assert(x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input ` + `channels (${x.shape[3]}) must match the inChannels dimension ` + `in filter ${filter.shape[2]}.`);
    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in gradient of depthwiseConv2d: Either strides or ' + `dilations must be  1. Got strides ${strides} and dilations ` + `'${$dilations}'.`);

    if (dimRoundingMode != null) {
      util.assert(util.isInt(pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }

    const convInfo = conv_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true
    /* depthwise */
    );
    return {
      x: () => (0, _depthwise_conv2d_native_backprop_input.depthwiseConv2dNativeBackpropInput)(x.shape, dy, filter, convInfo),
      filter: () => (0, _depthwise_conv2d_native_backprop_filter.depthwiseConv2dNativeBackpropFilter)(x, dy, filter.shape, convInfo)
    };
  }
};
exports.depthwiseConv2dNativeGradConfig = depthwiseConv2dNativeGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","../ops/depthwise_conv2d_native_backprop_filter":"node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js","../ops/depthwise_conv2d_native_backprop_input":"node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Dilation2D_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dilation2dGradConfig = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dilation2dGradConfig = {
  kernelName: _kernel_names.Dilation2D,
  inputsToSave: ['x', 'filter'],
  gradFunc: (dy, saved, attrs) => {
    const [x, filter] = saved;
    const inputInputs = {
      x,
      filter,
      dy
    };
    const filterInputs = {
      x,
      filter,
      dy
    };
    return {
      x: () => _engine.ENGINE.runKernel(_kernel_names.Dilation2DBackpropInput, inputInputs, attrs),
      filter: () => _engine.ENGINE.runKernel(_kernel_names.Dilation2DBackpropFilter, filterInputs, attrs)
    };
  }
};
exports.dilation2dGradConfig = dilation2dGradConfig;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Div_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var broadcast_util = _interopRequireWildcard(require("../ops/broadcast_util"));

var _cast = require("../ops/cast");

var _div = require("../ops/div");

var _mul = require("../ops/mul");

var _neg = require("../ops/neg");

var _reshape = require("../ops/reshape");

var _square = require("../ops/square");

var _sum = require("../ops/sum");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const divGradConfig = {
  kernelName: _kernel_names.Div,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);

    const derA = () => {
      const res = (0, _div.div)(dy, (0, _cast.cast)(b, 'float32'));
      const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);

      if (reduceAxes.length > 0) {
        return (0, _reshape.reshape)((0, _sum.sum)(res, reduceAxes), a.shape);
      }

      return res;
    };

    const derB = () => {
      let res = (0, _mul.mul)(dy, (0, _cast.cast)(a, 'float32'));
      const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);

      if (reduceAxes.length > 0) {
        res = (0, _reshape.reshape)((0, _sum.sum)(res, reduceAxes), b.shape);
      }

      const tmp = (0, _square.square)(b);
      return (0, _neg.neg)((0, _div.div)(res, (0, _cast.cast)(tmp, 'float32')));
    };

    return {
      a: derA,
      b: derB
    };
  }
};
exports.divGradConfig = divGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Elu_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eluGradConfig = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eluGradConfig = {
  kernelName: _kernel_names.Elu,
  outputsToSave: [true],
  gradFunc: (dy, saved) => {
    const [y] = saved;

    const backPropKernelFunc = backend => {
      return backend.eluDer(dy, y);
    };

    const inputs = {
      dy,
      y
    };
    return {
      x: () => _engine.ENGINE.runKernelFunc(backPropKernelFunc, inputs, null
      /* grad */
      , _kernel_names.EluGrad)
    };
  }
};
exports.eluGradConfig = eluGradConfig;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Erf_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.erfGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _exp = require("../ops/exp");

var _mul = require("../ops/mul");

var _neg = require("../ops/neg");

var _square = require("../ops/square");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const erfGradConfig = {
  kernelName: _kernel_names.Erf,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    const a = (0, _mul.mul)((0, _exp.exp)((0, _neg.neg)((0, _square.square)(x))), 2 / Math.sqrt(Math.PI));
    return {
      x: () => (0, _mul.mul)(dy, a)
    };
  }
};
exports.erfGradConfig = erfGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/exp":"node_modules/@tensorflow/tfjs-core/dist/ops/exp.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Exp_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _mul = require("../ops/mul");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const expGradConfig = {
  kernelName: _kernel_names.Exp,
  outputsToSave: [true],
  gradFunc: (dy, saved) => {
    const [y] = saved;
    return {
      x: () => (0, _mul.mul)(dy, y)
    };
  }
};
exports.expGradConfig = expGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Expm1_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expm1GradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _exp = require("../ops/exp");

var _mul = require("../ops/mul");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const expm1GradConfig = {
  kernelName: _kernel_names.Expm1,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _mul.mul)(dy, (0, _exp.exp)(x))
    };
  }
};
exports.expm1GradConfig = expm1GradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/exp":"node_modules/@tensorflow/tfjs-core/dist/ops/exp.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Floor_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floorGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const floorGradConfig = {
  kernelName: _kernel_names.Floor,
  gradFunc: dy => {
    return {
      x: () => (0, _zeros_like.zerosLike)(dy)
    };
  }
};
exports.floorGradConfig = floorGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/FloorDiv_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floorDivGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _broadcast_util = require("../ops/broadcast_util");

var _cast = require("../ops/cast");

var _div = require("../ops/div");

var _mul = require("../ops/mul");

var _neg = require("../ops/neg");

var _reshape = require("../ops/reshape");

var _square = require("../ops/square");

var _sum = require("../ops/sum");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const floorDivGradConfig = {
  kernelName: _kernel_names.FloorDiv,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = (0, _broadcast_util.assertAndGetBroadcastShape)(a.shape, b.shape);

    const derA = () => {
      const res = (0, _div.div)(dy, (0, _cast.cast)(b, 'float32'));
      const reduceAxes = (0, _broadcast_util.getReductionAxes)(a.shape, outShape);

      if (reduceAxes.length > 0) {
        return (0, _reshape.reshape)((0, _sum.sum)(res, reduceAxes), a.shape);
      }

      return res;
    };

    const derB = () => {
      let res = (0, _mul.mul)(dy, (0, _cast.cast)(a, 'float32'));
      const reduceAxes = (0, _broadcast_util.getReductionAxes)(b.shape, outShape);

      if (reduceAxes.length > 0) {
        res = (0, _reshape.reshape)((0, _sum.sum)(res, reduceAxes), b.shape);
      }

      const tmp = (0, _square.square)(b);
      return (0, _neg.neg)((0, _div.div)(res, (0, _cast.cast)(tmp, 'float32')));
    };

    return {
      a: derA,
      b: derB
    };
  }
};
exports.floorDivGradConfig = floorDivGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fusedBatchNormGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _add = require("../ops/add");

var _broadcast_util = require("../ops/broadcast_util");

var _mul = require("../ops/mul");

var _reshape = require("../ops/reshape");

var _rsqrt = require("../ops/rsqrt");

var _scalar = require("../ops/scalar");

var _sub = require("../ops/sub");

var _sum = require("../ops/sum");

var _tile = require("../ops/tile");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fusedBatchNormGradConfig = {
  kernelName: _kernel_names.FusedBatchNorm,
  inputsToSave: ['x', 'mean', 'variance', 'scale'],
  gradFunc: (dy, saved, attrs) => {
    const {
      varianceEpsilon
    } = attrs;
    const [x, mean, variance, scale] = saved;
    const scaleValue = scale == null ? (0, _scalar.scalar)(1) : scale;
    const reductionAxes = (0, _broadcast_util.getReductionAxes)(mean.shape, x.shape);
    const tileShape = [];

    if (mean.rank === 1) {
      for (let i = 0; i < x.shape.length - 1; ++i) {
        tileShape.push(x.shape[i]);
      }

      tileShape.push(1);
    }

    const xMinusMean = (0, _sub.sub)(x, mean);
    const dyTimesScaleValue = (0, _mul.mul)(dy, scaleValue);
    const oneOverSqrtVariance = (0, _rsqrt.rsqrt)((0, _add.add)(variance, (0, _scalar.scalar)(varianceEpsilon)));
    const minusHalfRCube = (0, _mul.mul)((0, _mul.mul)((0, _mul.mul)(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), (0, _scalar.scalar)(-0.5));

    const derX = () => {
      if (mean.rank === 1) {
        return (0, _reshape.reshape)((0, _mul.mul)((0, _mul.mul)(dy, (0, _tile.tile)((0, _reshape.reshape)(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);
      } else {
        return (0, _reshape.reshape)((0, _mul.mul)((0, _mul.mul)(dy, oneOverSqrtVariance), scaleValue), x.shape);
      }
    };

    const derMean = () => {
      let meanDer = (0, _mul.mul)((0, _mul.mul)(oneOverSqrtVariance, (0, _scalar.scalar)(-1)), dyTimesScaleValue);

      if (mean.rank === 1) {
        meanDer = (0, _sum.sum)(meanDer, reductionAxes);
      }

      return (0, _reshape.reshape)(meanDer, mean.shape);
    };

    const derVariance = () => {
      let varianceDer = (0, _mul.mul)((0, _mul.mul)(minusHalfRCube, xMinusMean), dyTimesScaleValue);

      if (mean.rank === 1) {
        varianceDer = (0, _sum.sum)(varianceDer, reductionAxes);
      }

      return (0, _reshape.reshape)(varianceDer, mean.shape);
    };

    const derScale = () => {
      const xMinusMean2TimesRsqrt = (0, _mul.mul)(xMinusMean, oneOverSqrtVariance);
      let scaleDer = (0, _mul.mul)(dy, xMinusMean2TimesRsqrt);

      if (mean.rank === 1) {
        scaleDer = (0, _sum.sum)(scaleDer, reductionAxes);
      }

      return (0, _reshape.reshape)(scaleDer, mean.shape);
    };

    const derOffset = () => {
      let offsetDer = dy;

      if (mean.rank === 1) {
        offsetDer = (0, _sum.sum)(offsetDer, reductionAxes);
      }

      return (0, _reshape.reshape)(offsetDer, mean.shape);
    };

    return {
      x: derX,
      mean: derMean,
      variance: derVariance,
      scale: derScale,
      offset: derOffset
    };
  }
};
exports.fusedBatchNormGradConfig = fusedBatchNormGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../ops/rsqrt":"node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js","../ops/tile":"node_modules/@tensorflow/tfjs-core/dist/ops/tile.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/GatherV2_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gatherGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _axis_util = require("../ops/axis_util");

var _reshape = require("../ops/reshape");

var _transpose = require("../ops/transpose");

var _unsorted_segment_sum = require("../ops/unsorted_segment_sum");

var _util = require("../util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gatherGradConfig = {
  kernelName: _kernel_names.GatherV2,
  inputsToSave: ['x', 'indices'],
  gradFunc: (dy, saved, attrs) => {
    const [x, indices] = saved;
    const {
      axis
    } = attrs;
    const parsedAxis = (0, _util.parseAxisParam)(axis, x.shape)[0];

    const derX = () => {
      const paramsShape = x.shape;
      const indicesSize = indices.size;
      const outerShape = paramsShape.slice(0, parsedAxis);
      const outerDims = outerShape.length;
      const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);
      const innerDims = innerShape.length;
      const outerAxesIndices = arrayRange(0, outerDims);
      const innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);
      const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);
      const values = (0, _reshape.reshape)(dy, valuesShape);
      const reshapedIndices = (0, _reshape.reshape)(indices, [indicesSize]);
      const transposeDims = arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);
      const valuesTranspose = (0, _transpose.transpose)(values, transposeDims);
      let paramsGrad = (0, _unsorted_segment_sum.unsortedSegmentSum)(valuesTranspose, reshapedIndices, x.shape[parsedAxis]);
      const invertTransposeDims = (0, _axis_util.getUndoAxesPermutation)(transposeDims);
      paramsGrad = (0, _transpose.transpose)(paramsGrad, invertTransposeDims);
      return paramsGrad;
    };

    return {
      x: derX,
      indices: () => indices
    };
  }
};
exports.gatherGradConfig = gatherGradConfig;

function arrayRange(start, stop) {
  const result = [];

  for (let i = start; i < stop; ++i) {
    result.push(i);
  }

  return result;
}

function arrayConcat(arrays) {
  const result = [];

  for (let i = 0; i < arrays.length; ++i) {
    for (let j = 0; j < arrays[i].length; ++j) {
      result.push(arrays[i][j]);
    }
  }

  return result;
}
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../ops/transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js","../ops/unsorted_segment_sum":"node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/GreaterEqual_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.greaterEqualGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const greaterEqualGradConfig = {
  kernelName: _kernel_names.GreaterEqual,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    return {
      a: () => (0, _zeros_like.zerosLike)(a),
      b: () => (0, _zeros_like.zerosLike)(b)
    };
  }
};
exports.greaterEqualGradConfig = greaterEqualGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Identity_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.identityGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const identityGradConfig = {
  kernelName: _kernel_names.Identity,
  gradFunc: dy => {
    return {
      x: () => (0, _cast.cast)(dy, 'float32')
    };
  }
};
exports.identityGradConfig = identityGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/IsFinite_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFiniteGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const isFiniteGradConfig = {
  kernelName: _kernel_names.IsFinite,
  gradFunc: dy => {
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    return {
      x: () => (0, _zeros_like.zerosLike)(dy)
    };
  }
};
exports.isFiniteGradConfig = isFiniteGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/IsInf_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isInfGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const isInfGradConfig = {
  kernelName: _kernel_names.IsInf,
  gradFunc: dy => {
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    return {
      x: () => (0, _zeros_like.zerosLike)(dy)
    };
  }
};
exports.isInfGradConfig = isInfGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/IsNan_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNanGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const isNanGradConfig = {
  kernelName: _kernel_names.IsNan,
  gradFunc: dy => {
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    return {
      x: () => (0, _zeros_like.zerosLike)(dy)
    };
  }
};
exports.isNanGradConfig = isNanGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Log1p_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log1pGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _add = require("../ops/add");

var _div = require("../ops/div");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const log1pGradConfig = {
  kernelName: _kernel_names.Log1p,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _div.div)(dy, (0, _add.add)(x, 1))
    };
  }
};
exports.log1pGradConfig = log1pGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Log_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _div = require("../ops/div");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const logGradConfig = {
  kernelName: _kernel_names.Log,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _div.div)(dy, (0, _cast.cast)(x, 'float32'))
    };
  }
};
exports.logGradConfig = logGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/LogSoftmax_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logSoftmaxGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _exp = require("../ops/exp");

var _mul = require("../ops/mul");

var _sub = require("../ops/sub");

var _sum = require("../ops/sum");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const logSoftmaxGradConfig = {
  kernelName: _kernel_names.LogSoftmax,
  inputsToSave: [],
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const [value] = saved;
    const {
      axis
    } = attrs;
    return {
      logits: () => {
        const keepDims = true;
        const softmax = (0, _exp.exp)(value);
        return (0, _sub.sub)(dy, (0, _mul.mul)((0, _sum.sum)(dy, axis, keepDims), softmax));
      }
    };
  }
};
exports.logSoftmaxGradConfig = logSoftmaxGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/exp":"node_modules/@tensorflow/tfjs-core/dist/ops/exp.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.localResponseNormalizationBackprop = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function localResponseNormalizationBackprop_(x, y, dy, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {
  const forward = backend => backend.LRNGrad(dy, x, y, depthRadius, bias, alpha, beta);

  const inputs = {
    x,
    y,
    dy
  };
  const attrs = {
    depthRadius,
    bias,
    alpha,
    beta
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.LRNBackprop, attrs);
}

const localResponseNormalizationBackprop = (0, _operation.op)({
  localResponseNormalizationBackprop_
});
exports.localResponseNormalizationBackprop = localResponseNormalizationBackprop;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/LRN_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lrnGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _local_response_normalization_backprop = require("../ops/local_response_normalization_backprop");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lrnGradConfig = {
  kernelName: _kernel_names.LRN,
  inputsToSave: ['x'],
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const [x, y] = saved;
    const {
      depthRadius,
      bias,
      alpha,
      beta
    } = attrs;
    return {
      x: () => (0, _local_response_normalization_backprop.localResponseNormalizationBackprop)(x, y, dy, depthRadius, bias, alpha, beta)
    };
  }
};
exports.lrnGradConfig = lrnGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/local_response_normalization_backprop":"node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gradForMinAndMax = gradForMinAndMax;

var axis_util = _interopRequireWildcard(require("../ops/axis_util"));

var _cast = require("../ops/cast");

var _equal = require("../ops/equal");

var _mul = require("../ops/mul");

var _reshape = require("../ops/reshape");

var _transpose = require("../ops/transpose");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Gradient helper function for the min and max operations.
 */
function gradForMinAndMax(dy, y, xOrig, origAxes, permutedAxes) {
  if (y.rank < xOrig.rank) {
    y = (0, _reshape.reshape)(y, axis_util.expandShapeToKeepDim(y.shape, origAxes));
  }

  if (dy.rank < xOrig.rank) {
    dy = (0, _reshape.reshape)(dy, axis_util.expandShapeToKeepDim(dy.shape, origAxes));
  }

  return {
    x: () => {
      const dx = (0, _mul.mul)(dy, (0, _cast.cast)((0, _equal.equal)(xOrig, y), dy.dtype));
      return permutedAxes == null ? dx : (0, _transpose.transpose)(dx, permutedAxes);
    }
  };
}
},{"../ops/axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/equal":"node_modules/@tensorflow/tfjs-core/dist/ops/equal.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../ops/transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Max_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var axis_util = _interopRequireWildcard(require("../ops/axis_util"));

var _transpose = require("../ops/transpose");

var util = _interopRequireWildcard(require("../util"));

var _min_max_grad_util = require("./min_max_grad_util");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maxGradConfig = {
  kernelName: _kernel_names.Max,
  inputsToSave: ['x'],
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const maxAttrs = attrs;
    const {
      reductionIndices
    } = maxAttrs;
    const [x, y] = saved;
    const origAxes = util.parseAxisParam(reductionIndices, x.shape);
    const permutedAxes = axis_util.getAxesPermutation(origAxes, x.rank);
    const maxGrad = (0, _min_max_grad_util.gradForMinAndMax)(dy, y, x, origAxes, permutedAxes);
    return {
      x: () => {
        let out = maxGrad['x']();

        if (permutedAxes != null) {
          out = (0, _transpose.transpose)(out);
        }

        return out;
      }
    };
  }
};
exports.maxGradConfig = maxGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","../ops/transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./min_max_grad_util":"node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Maximum_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maximumGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _greater_equal = require("../ops/greater_equal");

var _less = require("../ops/less");

var _mul = require("../ops/mul");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maximumGradConfig = {
  kernelName: _kernel_names.Maximum,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;

    const derA = () => (0, _mul.mul)(dy, (0, _cast.cast)((0, _greater_equal.greaterEqual)(a, b), 'float32'));

    const derB = () => (0, _mul.mul)(dy, (0, _cast.cast)((0, _less.less)(a, b), 'float32'));

    return {
      a: derA,
      b: derB
    };
  }
};
exports.maximumGradConfig = maximumGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/greater_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js","../ops/less":"node_modules/@tensorflow/tfjs-core/dist/ops/less.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d_backprop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPool3dBackprop = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the backprop of a 3d max pool.
 *
 * @param dy The dy error, of rank 5 of shape
 *     [batchSize, depth, height, width, channels].
 * assumed.
 * @param input The original input image, of rank 5 or rank 4 of shape
 *     [batchSize, depth, height, width, channels].
 * @param output The original output image, of rank 5 of shape
 *     [batchSize, outDepth, outHeight, outWidth, channels].
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations Deprecated, this field will be gone in v3.0.0.
 *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
 *     rounding mode used when computing output dimensions if pad is a
 *     number. If none is provided, it will not round and error if the output
 *     is of fractional size.
 */
function maxPool3dBackprop_(dy, input, output, filterSize, strides, dilations = [1, 1, 1], pad, dimRoundingMode) {
  const $dy = (0, _tensor_util_env.convertToTensor)(dy, 'dy', 'maxPool3dBackprop');
  const $input = (0, _tensor_util_env.convertToTensor)(input, 'input', 'maxPool3dBackprop');
  const $output = (0, _tensor_util_env.convertToTensor)(output, 'output', 'maxPool3dBackprop');
  let dy5D = $dy;
  let input5D = $input;
  let output5D = $output;
  let reshapedTo5D = false;

  if ($input.rank === 4) {
    reshapedTo5D = true;
    dy5D = (0, _reshape.reshape)($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);
    input5D = (0, _reshape.reshape)($input, [1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]]);
    output5D = (0, _reshape.reshape)($output, [1, $output.shape[0], $output.shape[1], $output.shape[2], $output.shape[3]]);
  }

  util.assert(dy5D.rank === 5, () => `Error in maxPool3dBackprop: dy must be rank 5 but got rank ` + `${dy5D.rank}.`);
  util.assert(input5D.rank === 5, () => `Error in maxPool3dBackprop: input must be rank 5 but got rank ` + `${input5D.rank}.`);
  util.assert(output5D.rank === 5, () => `Error in maxPool3dBackprop: output must be rank 5 but got rank ` + `${output5D.rank}.`);
  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool3dBackprop: Either strides or dilations ' + `must be 1. Got strides ${strides} and dilations '${dilations}'`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in maxPool3dBackprop: pad must be an integer when ` + `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const forward = backend => {
    const convInfo = conv_util.computePool3DInfo(input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);
    return backend.maxPool3dBackprop(dy5D, input5D, output5D, convInfo);
  };

  const inputs = {
    dy: dy5D,
    input: input5D,
    output: output5D
  };
  const attrs = {
    filterSize,
    strides,
    dilations,
    pad,
    dimRoundingMode
  };

  const res = _engine.ENGINE.runKernelFunc(forward, inputs, null
  /* grad */
  , _kernel_names.MaxPool3DBackprop, attrs);

  if (reshapedTo5D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
  }

  return res;
}

const maxPool3dBackprop = (0, _operation.op)({
  maxPool3dBackprop_
});
exports.maxPool3dBackprop = maxPool3dBackprop;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool3D_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPool3DGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _max_pool_3d_backprop = require("../ops/max_pool_3d_backprop");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maxPool3DGradConfig = {
  kernelName: _kernel_names.MaxPool3D,
  inputsToSave: ['x'],
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const [x, y] = saved;
    const {
      filterSize,
      strides,
      dilations,
      pad,
      dimRoundingMode
    } = attrs;
    const $dilations = dilations == null ? [1, 1, 1] : dilations;
    return {
      x: () => (0, _max_pool_3d_backprop.maxPool3dBackprop)(dy, x, y, filterSize, strides, $dilations, pad, dimRoundingMode)
    };
  }
};
exports.maxPool3DGradConfig = maxPool3DGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/max_pool_3d_backprop":"node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d_backprop.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_backprop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPoolBackprop = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the backprop of a 2D max pool.
 *
 * @param dy The dy error, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param input The original input image, of rank 4, of shape
 *     [batchSize, height, width, channels].
 * @param output The original output image, of rank 4, of shape
 *     [batchSize, outHeight, outWidth, channels].
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
 *     rounding mode used when computing output dimensions if pad is a
 *     number. If none is provided, it will not round and error if the output
 *     is of fractional size.
 */
function maxPoolBackprop_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {
  const $dy = (0, _tensor_util_env.convertToTensor)(dy, 'dy', 'maxPoolBackprop');
  const $input = (0, _tensor_util_env.convertToTensor)(input, 'input', 'maxPoolBackprop');
  const $output = (0, _tensor_util_env.convertToTensor)(output, 'output', 'maxPoolBackprop');
  util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy ` + `(${$dy.rank})`);
  util.assert($dy.rank === 4, () => `Error in maxPoolBackprop: dy must be rank 4 but got rank ` + `${$dy.rank}.`);
  util.assert($input.rank === 4, () => `Error in maxPoolBackprop: input must be rank 4 but got rank ` + `${$input.rank}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in maxPoolBackprop: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const forward = backend => {
    const convInfo = conv_util.computePool2DInfo($input.shape, filterSize, strides, 1
    /* dilations */
    , pad, dimRoundingMode);
    return backend.maxPoolBackprop($dy, $input, $output, convInfo);
  };

  const inputs = {
    dy: $dy,
    input: $input,
    output: $output
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  };
  return _engine.ENGINE.runKernelFunc(forward, inputs, null, _kernel_names.MaxPoolBackprop, attrs);
}

const maxPoolBackprop = (0, _operation.op)({
  maxPoolBackprop_
});
exports.maxPoolBackprop = maxPoolBackprop;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../tensor_util_env":"node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./conv_util":"node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./operation":"node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPoolGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _max_pool_backprop = require("../ops/max_pool_backprop");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maxPoolGradConfig = {
  kernelName: _kernel_names.MaxPool,
  inputsToSave: ['x'],
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const [x, y] = saved;
    const {
      filterSize,
      strides,
      pad
    } = attrs;
    return {
      x: () => (0, _max_pool_backprop.maxPoolBackprop)(dy, x, y, filterSize, strides, pad)
    };
  }
};
exports.maxPoolGradConfig = maxPoolGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/max_pool_backprop":"node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_backprop.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Min_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var axis_util = _interopRequireWildcard(require("../ops/axis_util"));

var _transpose = require("../ops/transpose");

var util = _interopRequireWildcard(require("../util"));

var _min_max_grad_util = require("./min_max_grad_util");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const minGradConfig = {
  kernelName: _kernel_names.Min,
  inputsToSave: ['x'],
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const minAttrs = attrs;
    const {
      axis
    } = minAttrs;
    const [x, y] = saved;
    const origAxes = util.parseAxisParam(axis, x.shape);
    const permutedAxes = axis_util.getAxesPermutation(origAxes, x.rank);
    const minGrad = (0, _min_max_grad_util.gradForMinAndMax)(dy, y, x, origAxes, permutedAxes);
    return {
      x: () => {
        let out = minGrad['x']();

        if (permutedAxes != null) {
          out = (0, _transpose.transpose)(out);
        }

        return out;
      }
    };
  }
};
exports.minGradConfig = minGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","../ops/transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js","./min_max_grad_util":"node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Minimum_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minimumGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _greater = require("../ops/greater");

var _less_equal = require("../ops/less_equal");

var _mul = require("../ops/mul");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const minimumGradConfig = {
  kernelName: _kernel_names.Minimum,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;

    const derA = () => (0, _mul.mul)(dy, (0, _cast.cast)((0, _less_equal.lessEqual)(a, b), 'float32'));

    const derB = () => (0, _mul.mul)(dy, (0, _cast.cast)((0, _greater.greater)(a, b), 'float32'));

    return {
      a: derA,
      b: derB
    };
  }
};
exports.minimumGradConfig = minimumGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/greater":"node_modules/@tensorflow/tfjs-core/dist/ops/greater.js","../ops/less_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.modGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _broadcast_util = require("../ops/broadcast_util");

var _div = require("../ops/div");

var _floor = require("../ops/floor");

var _mul = require("../ops/mul");

var _neg = require("../ops/neg");

var _reshape = require("../ops/reshape");

var _sum = require("../ops/sum");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const modGradConfig = {
  kernelName: _kernel_names.Mod,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = (0, _broadcast_util.assertAndGetBroadcastShape)(a.shape, b.shape);

    const derA = () => {
      const reduceAxes = (0, _broadcast_util.getReductionAxes)(a.shape, outShape);

      if (reduceAxes.length > 0) {
        return (0, _reshape.reshape)((0, _sum.sum)(dy, reduceAxes), a.shape);
      }

      return dy;
    };

    const derB = () => {
      const res = (0, _mul.mul)(dy, (0, _neg.neg)((0, _floor.floor)((0, _div.div)(a, b))));
      const reduceAxes = (0, _broadcast_util.getReductionAxes)(b.shape, outShape);

      if (reduceAxes.length > 0) {
        return (0, _reshape.reshape)((0, _sum.sum)(res, reduceAxes), b.shape);
      }

      return res;
    };

    return {
      a: derA,
      b: derB
    };
  }
};
exports.modGradConfig = modGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/floor":"node_modules/@tensorflow/tfjs-core/dist/ops/floor.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Multiply_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiplyGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _broadcast_util = require("../ops/broadcast_util");

var _cast = require("../ops/cast");

var _mul = require("../ops/mul");

var _reshape = require("../ops/reshape");

var _sum = require("../ops/sum");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const multiplyGradConfig = {
  kernelName: _kernel_names.Multiply,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = (0, _broadcast_util.assertAndGetBroadcastShape)(a.shape, b.shape);

    const derA = () => {
      const res = (0, _mul.mul)(dy, (0, _cast.cast)(b, 'float32'));
      const reduceAxes = (0, _broadcast_util.getReductionAxes)(a.shape, outShape);

      if (reduceAxes.length > 0) {
        return (0, _reshape.reshape)((0, _sum.sum)(res, reduceAxes), a.shape);
      }

      return res;
    };

    const derB = () => {
      const res = (0, _mul.mul)(dy, (0, _cast.cast)(a, 'float32'));
      const reduceAxes = (0, _broadcast_util.getReductionAxes)(b.shape, outShape);

      if (reduceAxes.length > 0) {
        return (0, _reshape.reshape)((0, _sum.sum)(res, reduceAxes), b.shape);
      }

      return res;
    };

    return {
      a: derA,
      b: derB
    };
  }
};
exports.multiplyGradConfig = multiplyGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Negate_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.negateGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _neg = require("../ops/neg");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const negateGradConfig = {
  kernelName: _kernel_names.Negate,
  gradFunc: dy => {
    return {
      x: () => (0, _neg.neg)(dy)
    };
  }
};
exports.negateGradConfig = negateGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/OneHot_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.oneHotGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros = require("../ops/zeros");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oneHotGradConfig = {
  kernelName: _kernel_names.OneHot,
  inputsToSave: ['indices'],
  gradFunc: (dy, saved) => {
    const indices = saved[0];
    return {
      indices: () => (0, _zeros.zeros)(indices.shape, 'float32')
    };
  }
};
exports.oneHotGradConfig = oneHotGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/OnesLike_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onesLikeGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const onesLikeGradConfig = {
  kernelName: _kernel_names.OnesLike,
  gradFunc: dy => {
    return {
      x: () => (0, _zeros_like.zerosLike)(dy)
    };
  }
};
exports.onesLikeGradConfig = onesLikeGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/PadV2_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.padV2GradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _slice = require("../ops/slice");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const padV2GradConfig = {
  kernelName: _kernel_names.PadV2,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    // Pad introduces values around the original tensor, so the gradient
    // slices the original shape out of the gradient.
    const x = saved[0];
    const {
      paddings
    } = attrs;
    const begin = paddings.map(p => p[0]);
    return {
      x: () => (0, _slice.slice)(dy, begin, x.shape)
    };
  }
};
exports.padV2GradConfig = padV2GradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Pow_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.powGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var broadcast_util = _interopRequireWildcard(require("../ops/broadcast_util"));

var _cast = require("../ops/cast");

var _greater = require("../ops/greater");

var _log = require("../ops/log");

var _mul = require("../ops/mul");

var _pow = require("../ops/pow");

var _reshape = require("../ops/reshape");

var _scalar = require("../ops/scalar");

var _sub = require("../ops/sub");

var _sum = require("../ops/sum");

var _where = require("../ops/where");

var _zeros_like = require("../ops/zeros_like");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const powGradConfig = {
  kernelName: _kernel_names.Pow,
  inputsToSave: ['a', 'b'],
  outputsToSave: [true],
  gradFunc: (dy, saved) => {
    const [a, b, y] = saved;
    const base = a;
    const exp = b;
    const outShape = broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);

    const derBase = () => {
      const expFloat = (0, _cast.cast)(exp, 'float32');
      let res = (0, _mul.mul)(dy, (0, _mul.mul)(expFloat, (0, _pow.pow)(base, (0, _sub.sub)(expFloat, (0, _scalar.scalar)(1)))));
      const reduceAxes = broadcast_util.getReductionAxes(base.shape, outShape);

      if (reduceAxes.length > 0) {
        res = (0, _sum.sum)(res, reduceAxes);
      }

      return (0, _reshape.reshape)(res, base.shape);
    };

    const derExp = () => {
      const condition = (0, _greater.greater)(base, 0);
      const logBase = (0, _where.where)(condition, (0, _log.log)(base), (0, _zeros_like.zerosLike)(base));
      let res = (0, _mul.mul)(dy, (0, _mul.mul)(y, logBase));
      const reduceAxes = broadcast_util.getReductionAxes(exp.shape, outShape);

      if (reduceAxes.length > 0) {
        res = (0, _sum.sum)(res, reduceAxes);
      }

      return (0, _reshape.reshape)(res, exp.shape);
    };

    return {
      a: derBase,
      b: derExp
    };
  }
};
exports.powGradConfig = powGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/greater":"node_modules/@tensorflow/tfjs-core/dist/ops/greater.js","../ops/log":"node_modules/@tensorflow/tfjs-core/dist/ops/log.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/pow":"node_modules/@tensorflow/tfjs-core/dist/ops/pow.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js","../ops/where":"node_modules/@tensorflow/tfjs-core/dist/ops/where.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Prelu_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preluGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _broadcast_util = require("../ops/broadcast_util");

var _greater = require("../ops/greater");

var _mul = require("../ops/mul");

var _reshape = require("../ops/reshape");

var _sum = require("../ops/sum");

var _where = require("../ops/where");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const preluGradConfig = {
  kernelName: _kernel_names.Prelu,
  inputsToSave: ['x', 'alpha'],
  gradFunc: (dy, saved) => {
    const [x, alpha] = saved;
    const mask = (0, _greater.greater)(x, 0);
    return {
      x: () => (0, _where.where)(mask, dy, (0, _mul.mul)(dy, alpha)),
      alpha: () => {
        let res = (0, _where.where)(mask, (0, _zeros_like.zerosLike)(dy), (0, _mul.mul)(dy, x));
        const reduceAxes = (0, _broadcast_util.getReductionAxes)(alpha.shape, dy.shape);

        if (reduceAxes.length > 0) {
          res = (0, _sum.sum)(res, reduceAxes);
        }

        return (0, _reshape.reshape)(res, alpha.shape);
      }
    };
  }
};
exports.preluGradConfig = preluGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../ops/greater":"node_modules/@tensorflow/tfjs-core/dist/ops/greater.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js","../ops/where":"node_modules/@tensorflow/tfjs-core/dist/ops/where.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Reciprocal_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reciprocalGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _div = require("../ops/div");

var _neg = require("../ops/neg");

var _square = require("../ops/square");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const reciprocalGradConfig = {
  kernelName: _kernel_names.Reciprocal,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _div.div)(dy, (0, _neg.neg)((0, _square.square)(x)))
    };
  }
};
exports.reciprocalGradConfig = reciprocalGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Relu6_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.relu6GradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _less_equal = require("../ops/less_equal");

var _mul = require("../ops/mul");

var _step = require("../ops/step");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const relu6GradConfig = {
  kernelName: _kernel_names.Relu6,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    const mask = (0, _mul.mul)((0, _less_equal.lessEqual)(x, 6), (0, _step.step)(x));
    return {
      x: () => (0, _mul.mul)(dy, (0, _cast.cast)(mask, 'float32'))
    };
  }
};
exports.relu6GradConfig = relu6GradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/less_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/step":"node_modules/@tensorflow/tfjs-core/dist/ops/step.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Relu_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reluGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _mul = require("../ops/mul");

var _step = require("../ops/step");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const reluGradConfig = {
  kernelName: _kernel_names.Relu,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _mul.mul)(dy, (0, _cast.cast)((0, _step.step)(x), 'float32'))
    };
  }
};
exports.reluGradConfig = reluGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/step":"node_modules/@tensorflow/tfjs-core/dist/ops/step.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Reshape_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reshapeGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _reshape = require("../ops/reshape");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const reshapeGradConfig = {
  kernelName: _kernel_names.Reshape,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _reshape.reshape)(dy, x.shape)
    };
  }
};
exports.reshapeGradConfig = reshapeGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeBilinear_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeBilinearGradConfig = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const resizeBilinearGradConfig = {
  kernelName: _kernel_names.ResizeBilinear,
  inputsToSave: ['images'],
  gradFunc: (dy, saved, attrs) => {
    const [images] = saved;

    const backPropKernelFunc = backend => {
      const {
        alignCorners
      } = attrs;
      return backend.resizeBilinearBackprop(dy, images, alignCorners);
    };

    const inputs = {
      images
    };

    const imagesDer = () => _engine.ENGINE.runKernelFunc(backPropKernelFunc, inputs, null
    /* gradient */
    , _kernel_names.ResizeBilinearGrad, attrs);

    return {
      images: imagesDer
    };
  }
};
exports.resizeBilinearGradConfig = resizeBilinearGradConfig;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeNearestNeighbor_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeNearestNeighborGradConfig = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const resizeNearestNeighborGradConfig = {
  kernelName: _kernel_names.ResizeNearestNeighbor,
  inputsToSave: ['images'],
  gradFunc: (dy, saved, attrs) => {
    const [images] = saved;

    const backPropKernelFunc = backend => {
      const {
        alignCorners
      } = attrs;
      return backend.resizeNearestNeighborBackprop(dy, images, alignCorners);
    };

    const inputs = {
      images
    };

    const imagesDer = () => _engine.ENGINE.runKernelFunc(backPropKernelFunc, inputs, null
    /* gradient */
    , _kernel_names.ResizeNearestNeighborGrad, attrs);

    return {
      images: imagesDer
    };
  }
};
exports.resizeNearestNeighborGradConfig = resizeNearestNeighborGradConfig;
},{"../engine":"node_modules/@tensorflow/tfjs-core/dist/engine.js","../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Reverse_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverseGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _reverse = require("../ops/reverse");

var _util = require("../util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const reverseGradConfig = {
  kernelName: _kernel_names.Reverse,
  gradFunc: (dy, saved, attrs) => {
    const {
      dims
    } = attrs;
    const axes = (0, _util.parseAxisParam)(dims, dy.shape);
    return {
      x: () => (0, _reverse.reverse)(dy, axes)
    };
  }
};
exports.reverseGradConfig = reverseGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/reverse":"node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Round_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.roundGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const roundGradConfig = {
  kernelName: _kernel_names.Round,
  gradFunc: dy => {
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    return {
      x: () => (0, _zeros_like.zerosLike)(dy)
    };
  }
};
exports.roundGradConfig = roundGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Rsqrt_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rsqrtGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _div = require("../ops/div");

var _mul = require("../ops/mul");

var _neg = require("../ops/neg");

var _pow = require("../ops/pow");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rsqrtGradConfig = {
  kernelName: _kernel_names.Rsqrt,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _neg.neg)((0, _div.div)(dy, (0, _mul.mul)((0, _pow.pow)(x, 1.5), 2)))
    };
  }
};
exports.rsqrtGradConfig = rsqrtGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../ops/pow":"node_modules/@tensorflow/tfjs-core/dist/ops/pow.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/SelectV2_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectV2PoolGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _logical_not = require("../ops/logical_not");

var _mul = require("../ops/mul");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const selectV2PoolGradConfig = {
  kernelName: _kernel_names.SelectV2,
  inputsToSave: ['condition'],
  gradFunc: (dy, saved) => {
    const [condition] = saved;
    return {
      // TODO(julianoks): Return null for condition gradient
      // when backprop supports it.
      condition: () => (0, _cast.cast)((0, _zeros_like.zerosLike)(condition), 'float32'),
      t: () => (0, _mul.mul)(dy, (0, _cast.cast)(condition, dy.dtype)),
      e: () => (0, _mul.mul)(dy, (0, _cast.cast)((0, _logical_not.logicalNot)(condition), dy.dtype))
    };
  }
};
exports.selectV2PoolGradConfig = selectV2PoolGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/logical_not":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Selu_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seluGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _exp = require("../ops/exp");

var _greater = require("../ops/greater");

var _mul = require("../ops/mul");

var _scalar = require("../ops/scalar");

var _selu_util = require("../ops/selu_util");

var _where = require("../ops/where");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const seluGradConfig = {
  kernelName: _kernel_names.Selu,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => {
        const mask = (0, _greater.greater)(x, (0, _scalar.scalar)(0));
        const scaleAlpha = (0, _scalar.scalar)(_selu_util.SELU_SCALEALPHA);
        const scale = (0, _scalar.scalar)(_selu_util.SELU_SCALE);
        const greaterThanZeroDer = (0, _mul.mul)(dy, scale);
        const lessEqualZeroDer = (0, _mul.mul)((0, _mul.mul)(dy, scaleAlpha), (0, _exp.exp)((0, _cast.cast)(x, 'float32')));
        return (0, _where.where)(mask, greaterThanZeroDer, lessEqualZeroDer);
      }
    };
  }
};
exports.seluGradConfig = seluGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/exp":"node_modules/@tensorflow/tfjs-core/dist/ops/exp.js","../ops/greater":"node_modules/@tensorflow/tfjs-core/dist/ops/greater.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/selu_util":"node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js","../ops/where":"node_modules/@tensorflow/tfjs-core/dist/ops/where.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Sigmoid_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sigmoidGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _mul = require("../ops/mul");

var _scalar = require("../ops/scalar");

var _sub = require("../ops/sub");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sigmoidGradConfig = {
  kernelName: _kernel_names.Sigmoid,
  outputsToSave: [true],
  gradFunc: (dy, saved) => {
    const [y] = saved;
    return {
      x: () => (0, _mul.mul)(dy, (0, _mul.mul)(y, (0, _sub.sub)((0, _scalar.scalar)(1), y)))
    };
  }
};
exports.sigmoidGradConfig = sigmoidGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Sign_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const signGradConfig = {
  kernelName: _kernel_names.Sign,
  gradFunc: dy => {
    return {
      x: () => (0, _zeros_like.zerosLike)(dy)
    };
  }
};
exports.signGradConfig = signGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Sin_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _cos = require("../ops/cos");

var _mul = require("../ops/mul");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sinGradConfig = {
  kernelName: _kernel_names.Sin,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _mul.mul)((0, _cos.cos)((0, _cast.cast)(x, 'float32')), dy)
    };
  }
};
exports.sinGradConfig = sinGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/cos":"node_modules/@tensorflow/tfjs-core/dist/ops/cos.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Sinh_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinhGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _cosh = require("../ops/cosh");

var _mul = require("../ops/mul");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sinhGradConfig = {
  kernelName: _kernel_names.Sinh,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _mul.mul)((0, _cosh.cosh)((0, _cast.cast)(x, 'float32')), dy)
    };
  }
};
exports.sinhGradConfig = sinhGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/cosh":"node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Slice_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sliceGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _pad = require("../ops/pad");

var _slice_util = require("../ops/slice_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sliceGradConfig = {
  kernelName: _kernel_names.Slice,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      begin,
      size
    } = attrs;
    const inputShape = x.shape;
    const [begin_, size_] = (0, _slice_util.parseSliceParams)(x, begin, size); // Create an Nx2 padding where the first column represents how many
    // zeros are prepended (at start) for each dimension, and the second
    // column indicates how many zeros are appended (at end).
    // The number of zeros to append is the shape of the input
    // elementwise-subtracted by both the begin vector and sizes vector.

    const paddings = [];

    for (let i = 0; i < dy.rank; i++) {
      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);
    }

    return {
      x: () => (0, _pad.pad)(dy, paddings)
    };
  }
};
exports.sliceGradConfig = sliceGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/pad":"node_modules/@tensorflow/tfjs-core/dist/ops/pad.js","../ops/slice_util":"node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Softmax_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.softmaxGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _mul = require("../ops/mul");

var _sub = require("../ops/sub");

var _sum = require("../ops/sum");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const softmaxGradConfig = {
  kernelName: _kernel_names.Softmax,
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const [y] = saved;
    const {
      dim
    } = attrs;
    const keepDims = true;
    const dyTimesY = (0, _mul.mul)(dy, y);
    return {
      logits: () => (0, _sub.sub)(dyTimesY, (0, _mul.mul)((0, _sum.sum)(dyTimesY, [dim], keepDims), y))
    };
  }
};
exports.softmaxGradConfig = softmaxGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Softplus_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.softplusGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _mul = require("../ops/mul");

var _sigmoid = require("../ops/sigmoid");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const softplusGradConfig = {
  kernelName: _kernel_names.Softplus,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _mul.mul)(dy, (0, _sigmoid.sigmoid)(x))
    };
  }
};
exports.softplusGradConfig = softplusGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/sigmoid":"node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/SpaceToBatchND_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spaceToBatchNDGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _batch_to_space_nd = require("../ops/batch_to_space_nd");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const spaceToBatchNDGradConfig = {
  kernelName: _kernel_names.SpaceToBatchND,
  gradFunc: (dy, saved, attrs) => {
    const {
      blockShape,
      paddings
    } = attrs;
    return {
      x: () => (0, _batch_to_space_nd.batchToSpaceND)(dy, blockShape, paddings)
    };
  }
};
exports.spaceToBatchNDGradConfig = spaceToBatchNDGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/batch_to_space_nd":"node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/SplitV_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitVGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _concat = require("../ops/concat");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const splitVGradConfig = {
  kernelName: _kernel_names.SplitV,
  gradFunc: (dy, saved, attrs) => {
    const {
      axis
    } = attrs;
    return {
      x: () => (0, _concat.concat)(dy, axis)
    };
  }
};
exports.splitVGradConfig = splitVGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Sqrt_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sqrtGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _div = require("../ops/div");

var _mul = require("../ops/mul");

var _sqrt = require("../ops/sqrt");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sqrtGradConfig = {
  kernelName: _kernel_names.Sqrt,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _div.div)(dy, (0, _mul.mul)((0, _sqrt.sqrt)((0, _cast.cast)(x, 'float32')), 2))
    };
  }
};
exports.sqrtGradConfig = sqrtGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/sqrt":"node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Square_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squareGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cast = require("../ops/cast");

var _mul = require("../ops/mul");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const squareGradConfig = {
  kernelName: _kernel_names.Square,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _mul.mul)(dy, (0, _mul.mul)((0, _cast.cast)(x, 'float32'), 2))
    };
  }
};
exports.squareGradConfig = squareGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cast":"node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/SquaredDifference_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squaredDifferenceGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _mul = require("../ops/mul");

var _scalar = require("../ops/scalar");

var _sub = require("../ops/sub");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const squaredDifferenceGradConfig = {
  kernelName: _kernel_names.SquaredDifference,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const two = (0, _scalar.scalar)(2);

    const derA = () => (0, _mul.mul)(dy, (0, _mul.mul)(two, (0, _sub.sub)(a, b)));

    const derB = () => (0, _mul.mul)(dy, (0, _mul.mul)(two, (0, _sub.sub)(b, a)));

    return {
      a: derA,
      b: derB
    };
  }
};
exports.squaredDifferenceGradConfig = squaredDifferenceGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Step_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stepGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const stepGradConfig = {
  kernelName: _kernel_names.Step,
  gradFunc: dy => {
    // TODO(manrajgrover): Return null for gradients when backprop supports
    // it.
    return {
      x: () => (0, _zeros_like.zerosLike)(dy)
    };
  }
};
exports.stepGradConfig = stepGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Sub_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var broadcast_util = _interopRequireWildcard(require("../ops/broadcast_util"));

var _neg = require("../ops/neg");

var _reshape = require("../ops/reshape");

var _sum = require("../ops/sum");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const subGradConfig = {
  kernelName: _kernel_names.Sub,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);

    const derA = () => {
      let res = dy;
      const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);

      if (reduceAxes.length > 0) {
        res = (0, _sum.sum)(res, reduceAxes);
      }

      return (0, _reshape.reshape)(res, a.shape);
    };

    const derB = () => {
      let res = dy;
      const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);

      if (reduceAxes.length > 0) {
        res = (0, _sum.sum)(res, reduceAxes);
      }

      return (0, _reshape.reshape)((0, _neg.neg)(res), b.shape);
    };

    return {
      a: derA,
      b: derB
    };
  }
};
exports.subGradConfig = subGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/broadcast_util":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../ops/neg":"node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Sum_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sumGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _mul = require("../ops/mul");

var _ones = require("../ops/ones");

var _reshape = require("../ops/reshape");

var _util = require("../util");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sumGradConfig = {
  kernelName: _kernel_names.Sum,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const expandedDyShape = x.shape.slice();
    const {
      axis
    } = attrs;
    const axes = (0, _util.parseAxisParam)(axis, x.shape);
    axes.forEach(axis => {
      expandedDyShape[axis] = 1;
    });
    const expandedDy = (0, _reshape.reshape)(dy, expandedDyShape);
    const derX = (0, _mul.mul)(expandedDy, (0, _ones.ones)(x.shape, 'float32'));
    return {
      x: () => derX
    };
  }
};
exports.sumGradConfig = sumGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/ones":"node_modules/@tensorflow/tfjs-core/dist/ops/ones.js","../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Tan_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tanGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _cos = require("../ops/cos");

var _div = require("../ops/div");

var _square = require("../ops/square");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tanGradConfig = {
  kernelName: _kernel_names.Tan,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0, _div.div)(dy, (0, _square.square)((0, _cos.cos)(x)))
    };
  }
};
exports.tanGradConfig = tanGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/cos":"node_modules/@tensorflow/tfjs-core/dist/ops/cos.js","../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Tanh_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tanhGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _mul = require("../ops/mul");

var _scalar = require("../ops/scalar");

var _square = require("../ops/square");

var _sub = require("../ops/sub");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tanhGradConfig = {
  kernelName: _kernel_names.Tanh,
  outputsToSave: [true],
  gradFunc: (dy, saved) => {
    const [y] = saved;
    return {
      x: () => (0, _mul.mul)((0, _sub.sub)((0, _scalar.scalar)(1), (0, _square.square)(y)), dy)
    };
  }
};
exports.tanhGradConfig = tanhGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/square":"node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Tile_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tileGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _add = require("../ops/add");

var _slice = require("../ops/slice");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tileGradConfig = {
  kernelName: _kernel_names.Tile,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      reps
    } = attrs;

    const derX = () => {
      let xGrad = (0, _zeros_like.zerosLike)(x); // TODO(cais): Maybe reduce memory footprint by avoiding repeated
      // slicing.

      if (x.rank === 1) {
        for (let i = 0; i < reps[0]; ++i) {
          xGrad = (0, _add.add)(xGrad, (0, _slice.slice)(dy, [i * x.shape[0]], [x.shape[0]]));
        }
      } else if (x.rank === 2) {
        for (let i = 0; i < reps[0]; ++i) {
          for (let j = 0; j < reps[1]; ++j) {
            xGrad = (0, _add.add)(xGrad, (0, _slice.slice)(dy, [i * x.shape[0], j * x.shape[1]], [x.shape[0], x.shape[1]]));
          }
        }
      } else if (x.rank === 3) {
        for (let i = 0; i < reps[0]; ++i) {
          for (let j = 0; j < reps[1]; ++j) {
            for (let k = 0; k < reps[2]; ++k) {
              xGrad = (0, _add.add)(xGrad, (0, _slice.slice)(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));
            }
          }
        }
      } else if (x.rank === 4) {
        for (let i = 0; i < reps[0]; ++i) {
          for (let j = 0; j < reps[1]; ++j) {
            for (let k = 0; k < reps[2]; ++k) {
              for (let l = 0; l < reps[3]; ++l) {
                xGrad = (0, _add.add)(xGrad, (0, _slice.slice)(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2], l * x.shape[3]], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));
              }
            }
          }
        }
      } else {
        throw new Error(`Gradient for tile operation is not implemented for rank-` + `${x.rank} tensors yet.`);
      }

      return xGrad;
    };

    return {
      x: derX
    };
  }
};
exports.tileGradConfig = tileGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../ops/slice":"node_modules/@tensorflow/tfjs-core/dist/ops/slice.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Transpose_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transposeGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var axis_util = _interopRequireWildcard(require("../ops/axis_util"));

var _transpose = require("../ops/transpose");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const transposeGradConfig = {
  kernelName: _kernel_names.Transpose,
  gradFunc: (dy, saved, attrs) => {
    const transposeAttrs = attrs;
    const {
      perm
    } = transposeAttrs;
    const undoPerm = axis_util.getUndoAxesPermutation(perm);
    return {
      x: () => (0, _transpose.transpose)(dy, undoPerm)
    };
  }
};
exports.transposeGradConfig = transposeGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/axis_util":"node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","../ops/transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/Unpack_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unpackGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _stack = require("../ops/stack");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const unpackGradConfig = {
  kernelName: _kernel_names.Unpack,
  gradFunc: (dy, saved, attrs) => {
    const unpackAttrs = attrs;
    const {
      axis
    } = unpackAttrs;
    return {
      value: () => (0, _stack.stack)(dy, axis)
    };
  }
};
exports.unpackGradConfig = unpackGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/stack":"node_modules/@tensorflow/tfjs-core/dist/ops/stack.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/UnsortedSegmentSum_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unsortedSegmentSumGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _expand_dims = require("../ops/expand_dims");

var _gather = require("../ops/gather");

var _greater_equal = require("../ops/greater_equal");

var _logical_and = require("../ops/logical_and");

var _maximum = require("../ops/maximum");

var _ones = require("../ops/ones");

var _scalar = require("../ops/scalar");

var _where = require("../ops/where");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const unsortedSegmentSumGradConfig = {
  kernelName: _kernel_names.UnsortedSegmentSum,
  inputsToSave: ['segmentIds'],
  gradFunc: (dy, saved) => {
    const [segmentIds] = saved;

    const derX = () => {
      return gatherDropNegatives(dy, segmentIds);
    };

    return {
      x: derX
    };
  }
};
exports.unsortedSegmentSumGradConfig = unsortedSegmentSumGradConfig;

function gatherDropNegatives(x, indices) {
  // Helper function for unsorted segment ops. Gathers params for
  // positive segment ids and gathers 0 for inputs with negative segment id.
  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py
  const zeroClippedIndices = (0, _maximum.maximum)(indices, (0, _zeros_like.zerosLike)(indices));
  const gathered = (0, _gather.gather)(x, zeroClippedIndices);
  let isPositive = (0, _greater_equal.greaterEqual)(indices, (0, _scalar.scalar)(0, 'int32'));
  const numIters = gathered.rank - isPositive.rank;

  for (let i = 0; i < numIters; ++i) {
    isPositive = (0, _expand_dims.expandDims)(isPositive, i + 1);
  }

  isPositive = (0, _logical_and.logicalAnd)(isPositive, (0, _ones.ones)(gathered.shape, 'bool'));
  const zeroSlice = (0, _zeros_like.zerosLike)(gathered);
  return (0, _where.where)(isPositive, gathered, zeroSlice);
}
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/expand_dims":"node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js","../ops/gather":"node_modules/@tensorflow/tfjs-core/dist/ops/gather.js","../ops/greater_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js","../ops/logical_and":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js","../ops/maximum":"node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js","../ops/ones":"node_modules/@tensorflow/tfjs-core/dist/ops/ones.js","../ops/scalar":"node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../ops/where":"node_modules/@tensorflow/tfjs-core/dist/ops/where.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/gradients/ZerosLike_grad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zerosLikeGradConfig = void 0;

var _kernel_names = require("../kernel_names");

var _zeros_like = require("../ops/zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zerosLikeGradConfig = {
  kernelName: _kernel_names.ZerosLike,
  gradFunc: dy => {
    return {
      x: () => (0, _zeros_like.zerosLike)(dy)
    };
  }
};
exports.zerosLikeGradConfig = zerosLikeGradConfig;
},{"../kernel_names":"node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../ops/zeros_like":"node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/register_all_gradients.js":[function(require,module,exports) {
"use strict";

var _Abs_grad = require("./gradients/Abs_grad");

var _Acos_grad = require("./gradients/Acos_grad");

var _Acosh_grad = require("./gradients/Acosh_grad");

var _Add_grad = require("./gradients/Add_grad");

var _AddN_grad = require("./gradients/AddN_grad");

var _ArgMax_grad = require("./gradients/ArgMax_grad");

var _ArgMin_grad = require("./gradients/ArgMin_grad");

var _Asin_grad = require("./gradients/Asin_grad");

var _Asinh_grad = require("./gradients/Asinh_grad");

var _Atan2_grad = require("./gradients/Atan2_grad");

var _Atan_grad = require("./gradients/Atan_grad");

var _Atanh_grad = require("./gradients/Atanh_grad");

var _AvgPool3D_grad = require("./gradients/AvgPool3D_grad");

var _AvgPool_grad = require("./gradients/AvgPool_grad");

var _BatchMatMul_grad = require("./gradients/BatchMatMul_grad");

var _BatchToSpaceND_grad = require("./gradients/BatchToSpaceND_grad");

var _BroadcastTo_grad = require("./gradients/BroadcastTo_grad");

var _Cast_grad = require("./gradients/Cast_grad");

var _Ceil_grad = require("./gradients/Ceil_grad");

var _ClipByValue_grad = require("./gradients/ClipByValue_grad");

var _Concat_grad = require("./gradients/Concat_grad");

var _Conv2D_grad = require("./gradients/Conv2D_grad");

var _Conv2DBackpropInput_grad = require("./gradients/Conv2DBackpropInput_grad");

var _Conv3D_grad = require("./gradients/Conv3D_grad");

var _Cos_grad = require("./gradients/Cos_grad");

var _Cosh_grad = require("./gradients/Cosh_grad");

var _Cumsum_grad = require("./gradients/Cumsum_grad");

var _DepthwiseConv2dNative_grad = require("./gradients/DepthwiseConv2dNative_grad");

var _Dilation2D_grad = require("./gradients/Dilation2D_grad");

var _Div_grad = require("./gradients/Div_grad");

var _Elu_grad = require("./gradients/Elu_grad");

var _Erf_grad = require("./gradients/Erf_grad");

var _Exp_grad = require("./gradients/Exp_grad");

var _Expm1_grad = require("./gradients/Expm1_grad");

var _Floor_grad = require("./gradients/Floor_grad");

var _FloorDiv_grad = require("./gradients/FloorDiv_grad");

var _FusedBatchNorm_grad = require("./gradients/FusedBatchNorm_grad");

var _GatherV2_grad = require("./gradients/GatherV2_grad");

var _GreaterEqual_grad = require("./gradients/GreaterEqual_grad");

var _Identity_grad = require("./gradients/Identity_grad");

var _IsFinite_grad = require("./gradients/IsFinite_grad");

var _IsInf_grad = require("./gradients/IsInf_grad");

var _IsNan_grad = require("./gradients/IsNan_grad");

var _Log1p_grad = require("./gradients/Log1p_grad");

var _Log_grad = require("./gradients/Log_grad");

var _LogSoftmax_grad = require("./gradients/LogSoftmax_grad");

var _LRN_grad = require("./gradients/LRN_grad");

var _Max_grad = require("./gradients/Max_grad");

var _Maximum_grad = require("./gradients/Maximum_grad");

var _MaxPool3D_grad = require("./gradients/MaxPool3D_grad");

var _MaxPool_grad = require("./gradients/MaxPool_grad");

var _Min_grad = require("./gradients/Min_grad");

var _Minimum_grad = require("./gradients/Minimum_grad");

var _Mod_grad = require("./gradients/Mod_grad");

var _Multiply_grad = require("./gradients/Multiply_grad");

var _Negate_grad = require("./gradients/Negate_grad");

var _OneHot_grad = require("./gradients/OneHot_grad");

var _OnesLike_grad = require("./gradients/OnesLike_grad");

var _PadV2_grad = require("./gradients/PadV2_grad");

var _Pow_grad = require("./gradients/Pow_grad");

var _Prelu_grad = require("./gradients/Prelu_grad");

var _Reciprocal_grad = require("./gradients/Reciprocal_grad");

var _Relu6_grad = require("./gradients/Relu6_grad");

var _Relu_grad = require("./gradients/Relu_grad");

var _Reshape_grad = require("./gradients/Reshape_grad");

var _ResizeBilinear_grad = require("./gradients/ResizeBilinear_grad");

var _ResizeNearestNeighbor_grad = require("./gradients/ResizeNearestNeighbor_grad");

var _Reverse_grad = require("./gradients/Reverse_grad");

var _Round_grad = require("./gradients/Round_grad");

var _Rsqrt_grad = require("./gradients/Rsqrt_grad");

var _SelectV2_grad = require("./gradients/SelectV2_grad");

var _Selu_grad = require("./gradients/Selu_grad");

var _Sigmoid_grad = require("./gradients/Sigmoid_grad");

var _Sign_grad = require("./gradients/Sign_grad");

var _Sin_grad = require("./gradients/Sin_grad");

var _Sinh_grad = require("./gradients/Sinh_grad");

var _Slice_grad = require("./gradients/Slice_grad");

var _Softmax_grad = require("./gradients/Softmax_grad");

var _Softplus_grad = require("./gradients/Softplus_grad");

var _SpaceToBatchND_grad = require("./gradients/SpaceToBatchND_grad");

var _SplitV_grad = require("./gradients/SplitV_grad");

var _Sqrt_grad = require("./gradients/Sqrt_grad");

var _Square_grad = require("./gradients/Square_grad");

var _SquaredDifference_grad = require("./gradients/SquaredDifference_grad");

var _Step_grad = require("./gradients/Step_grad");

var _Sub_grad = require("./gradients/Sub_grad");

var _Sum_grad = require("./gradients/Sum_grad");

var _Tan_grad = require("./gradients/Tan_grad");

var _Tanh_grad = require("./gradients/Tanh_grad");

var _Tile_grad = require("./gradients/Tile_grad");

var _Transpose_grad = require("./gradients/Transpose_grad");

var _Unpack_grad = require("./gradients/Unpack_grad");

var _UnsortedSegmentSum_grad = require("./gradients/UnsortedSegmentSum_grad");

var _ZerosLike_grad = require("./gradients/ZerosLike_grad");

var _kernel_registry = require("./kernel_registry");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Export all kernel configs here so that the package can auto register them
const gradConfigs = [_Abs_grad.absGradConfig, _Acos_grad.acosGradConfig, _Acosh_grad.acoshGradConfig, _Add_grad.addGradConfig, _AddN_grad.addNGradConfig, _ArgMax_grad.argMaxGradConfig, _ArgMin_grad.argMinGradConfig, _Asin_grad.asinGradConfig, _Asinh_grad.asinhGradConfig, _Atan2_grad.atan2GradConfig, _Atan_grad.atanGradConfig, _Atanh_grad.atanhGradConfig, _AvgPool3D_grad.avgPool3DGradConfig, _AvgPool_grad.avgPoolGradConfig, _BatchMatMul_grad.batchMatMulGradConfig, _BatchToSpaceND_grad.batchToSpaceNDGradConfig, _BroadcastTo_grad.broadcastToGradConfig, _Cast_grad.castGradConfig, _Ceil_grad.ceilGradConfig, _ClipByValue_grad.clipByValueGradConfig, _Concat_grad.concatGradConfig, _Conv2DBackpropInput_grad.conv2DBackpropInputGradConfig, _Conv2D_grad.conv2DGradConfig, _Conv3D_grad.conv3DGradConfig, _Cos_grad.cosGradConfig, _Cosh_grad.coshGradConfig, _Cumsum_grad.cumsumGradConfig, _DepthwiseConv2dNative_grad.depthwiseConv2dNativeGradConfig, _Dilation2D_grad.dilation2dGradConfig, _Div_grad.divGradConfig, _Elu_grad.eluGradConfig, _Erf_grad.erfGradConfig, _Exp_grad.expGradConfig, _Expm1_grad.expm1GradConfig, _FloorDiv_grad.floorDivGradConfig, _Floor_grad.floorGradConfig, _FusedBatchNorm_grad.fusedBatchNormGradConfig, _GatherV2_grad.gatherGradConfig, _GreaterEqual_grad.greaterEqualGradConfig, _Identity_grad.identityGradConfig, _IsFinite_grad.isFiniteGradConfig, _IsInf_grad.isInfGradConfig, _IsNan_grad.isNanGradConfig, _Log1p_grad.log1pGradConfig, _Log_grad.logGradConfig, _LogSoftmax_grad.logSoftmaxGradConfig, _LRN_grad.lrnGradConfig, _Max_grad.maxGradConfig, _Max_grad.maxGradConfig, _Maximum_grad.maximumGradConfig, _MaxPool3D_grad.maxPool3DGradConfig, _MaxPool_grad.maxPoolGradConfig, _Min_grad.minGradConfig, _Minimum_grad.minimumGradConfig, _Mod_grad.modGradConfig, _Multiply_grad.multiplyGradConfig, _Negate_grad.negateGradConfig, _OneHot_grad.oneHotGradConfig, _OnesLike_grad.onesLikeGradConfig, _PadV2_grad.padV2GradConfig, _PadV2_grad.padV2GradConfig, _Pow_grad.powGradConfig, _Prelu_grad.preluGradConfig, _Reciprocal_grad.reciprocalGradConfig, _Relu6_grad.relu6GradConfig, _Relu_grad.reluGradConfig, _Reshape_grad.reshapeGradConfig, _ResizeBilinear_grad.resizeBilinearGradConfig, _ResizeNearestNeighbor_grad.resizeNearestNeighborGradConfig, _Reverse_grad.reverseGradConfig, _Round_grad.roundGradConfig, _Rsqrt_grad.rsqrtGradConfig, _SelectV2_grad.selectV2PoolGradConfig, _Selu_grad.seluGradConfig, _Sigmoid_grad.sigmoidGradConfig, _Sign_grad.signGradConfig, _Sin_grad.sinGradConfig, _Sinh_grad.sinhGradConfig, _Slice_grad.sliceGradConfig, _Softmax_grad.softmaxGradConfig, _Softplus_grad.softplusGradConfig, _SpaceToBatchND_grad.spaceToBatchNDGradConfig, _SpaceToBatchND_grad.spaceToBatchNDGradConfig, _SplitV_grad.splitVGradConfig, _SplitV_grad.splitVGradConfig, _Sqrt_grad.sqrtGradConfig, _SquaredDifference_grad.squaredDifferenceGradConfig, _Square_grad.squareGradConfig, _Step_grad.stepGradConfig, _Sub_grad.subGradConfig, _Sum_grad.sumGradConfig, _Tan_grad.tanGradConfig, _Tanh_grad.tanhGradConfig, _Tile_grad.tileGradConfig, _Transpose_grad.transposeGradConfig, _Unpack_grad.unpackGradConfig, _UnsortedSegmentSum_grad.unsortedSegmentSumGradConfig, _ZerosLike_grad.zerosLikeGradConfig];

for (const gradientConfig of gradConfigs) {
  (0, _kernel_registry.registerGradient)(gradientConfig);
}
},{"./gradients/Abs_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Abs_grad.js","./gradients/Acos_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Acos_grad.js","./gradients/Acosh_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Acosh_grad.js","./gradients/Add_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Add_grad.js","./gradients/AddN_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/AddN_grad.js","./gradients/ArgMax_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMax_grad.js","./gradients/ArgMin_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMin_grad.js","./gradients/Asin_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Asin_grad.js","./gradients/Asinh_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Asinh_grad.js","./gradients/Atan2_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js","./gradients/Atan_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Atan_grad.js","./gradients/Atanh_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Atanh_grad.js","./gradients/AvgPool3D_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool3D_grad.js","./gradients/AvgPool_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool_grad.js","./gradients/BatchMatMul_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/BatchMatMul_grad.js","./gradients/BatchToSpaceND_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/BatchToSpaceND_grad.js","./gradients/BroadcastTo_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/BroadcastTo_grad.js","./gradients/Cast_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Cast_grad.js","./gradients/Ceil_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Ceil_grad.js","./gradients/ClipByValue_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/ClipByValue_grad.js","./gradients/Concat_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Concat_grad.js","./gradients/Conv2D_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2D_grad.js","./gradients/Conv2DBackpropInput_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2DBackpropInput_grad.js","./gradients/Conv3D_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Conv3D_grad.js","./gradients/Cos_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Cos_grad.js","./gradients/Cosh_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Cosh_grad.js","./gradients/Cumsum_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Cumsum_grad.js","./gradients/DepthwiseConv2dNative_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js","./gradients/Dilation2D_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Dilation2D_grad.js","./gradients/Div_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Div_grad.js","./gradients/Elu_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Elu_grad.js","./gradients/Erf_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Erf_grad.js","./gradients/Exp_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Exp_grad.js","./gradients/Expm1_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Expm1_grad.js","./gradients/Floor_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Floor_grad.js","./gradients/FloorDiv_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/FloorDiv_grad.js","./gradients/FusedBatchNorm_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js","./gradients/GatherV2_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/GatherV2_grad.js","./gradients/GreaterEqual_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/GreaterEqual_grad.js","./gradients/Identity_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Identity_grad.js","./gradients/IsFinite_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/IsFinite_grad.js","./gradients/IsInf_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/IsInf_grad.js","./gradients/IsNan_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/IsNan_grad.js","./gradients/Log1p_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Log1p_grad.js","./gradients/Log_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Log_grad.js","./gradients/LogSoftmax_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/LogSoftmax_grad.js","./gradients/LRN_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/LRN_grad.js","./gradients/Max_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Max_grad.js","./gradients/Maximum_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Maximum_grad.js","./gradients/MaxPool3D_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool3D_grad.js","./gradients/MaxPool_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool_grad.js","./gradients/Min_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Min_grad.js","./gradients/Minimum_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Minimum_grad.js","./gradients/Mod_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js","./gradients/Multiply_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Multiply_grad.js","./gradients/Negate_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Negate_grad.js","./gradients/OneHot_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/OneHot_grad.js","./gradients/OnesLike_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/OnesLike_grad.js","./gradients/PadV2_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/PadV2_grad.js","./gradients/Pow_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Pow_grad.js","./gradients/Prelu_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Prelu_grad.js","./gradients/Reciprocal_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Reciprocal_grad.js","./gradients/Relu6_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Relu6_grad.js","./gradients/Relu_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Relu_grad.js","./gradients/Reshape_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Reshape_grad.js","./gradients/ResizeBilinear_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeBilinear_grad.js","./gradients/ResizeNearestNeighbor_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeNearestNeighbor_grad.js","./gradients/Reverse_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Reverse_grad.js","./gradients/Round_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Round_grad.js","./gradients/Rsqrt_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Rsqrt_grad.js","./gradients/SelectV2_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/SelectV2_grad.js","./gradients/Selu_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Selu_grad.js","./gradients/Sigmoid_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Sigmoid_grad.js","./gradients/Sign_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Sign_grad.js","./gradients/Sin_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Sin_grad.js","./gradients/Sinh_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Sinh_grad.js","./gradients/Slice_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Slice_grad.js","./gradients/Softmax_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Softmax_grad.js","./gradients/Softplus_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Softplus_grad.js","./gradients/SpaceToBatchND_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/SpaceToBatchND_grad.js","./gradients/SplitV_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/SplitV_grad.js","./gradients/Sqrt_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Sqrt_grad.js","./gradients/Square_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Square_grad.js","./gradients/SquaredDifference_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/SquaredDifference_grad.js","./gradients/Step_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Step_grad.js","./gradients/Sub_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Sub_grad.js","./gradients/Sum_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Sum_grad.js","./gradients/Tan_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Tan_grad.js","./gradients/Tanh_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Tanh_grad.js","./gradients/Tile_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Tile_grad.js","./gradients/Transpose_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Transpose_grad.js","./gradients/Unpack_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/Unpack_grad.js","./gradients/UnsortedSegmentSum_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/UnsortedSegmentSum_grad.js","./gradients/ZerosLike_grad":"node_modules/@tensorflow/tfjs-core/dist/gradients/ZerosLike_grad.js","./kernel_registry":"node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/abs.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.abs = function () {
  this.throwIfDisposed();
  return (0, _ops.abs)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acos.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.acos = function () {
  this.throwIfDisposed();
  return (0, _ops.acos)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acosh.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.acosh = function () {
  this.throwIfDisposed();
  return (0, _ops.acosh)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.addStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.addStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add.js":[function(require,module,exports) {
"use strict";

var _add = require("../../ops/add");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.add = function (b) {
  this.throwIfDisposed();
  return (0, _add.add)(this, b);
};
},{"../../ops/add":"node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/all.js":[function(require,module,exports) {
"use strict";

var _all = require("../../ops/all");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.all = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0, _all.all)(this, axis, keepDims);
};
},{"../../ops/all":"node_modules/@tensorflow/tfjs-core/dist/ops/all.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/any.js":[function(require,module,exports) {
"use strict";

var _any = require("../../ops/any");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.any = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0, _any.any)(this, axis, keepDims);
};
},{"../../ops/any":"node_modules/@tensorflow/tfjs-core/dist/ops/any.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_max.js":[function(require,module,exports) {
"use strict";

var _arg_max = require("../../ops/arg_max");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.argMax = function (axis) {
  this.throwIfDisposed();
  return (0, _arg_max.argMax)(this, axis);
};
},{"../../ops/arg_max":"node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_min.js":[function(require,module,exports) {
"use strict";

var _arg_min = require("../../ops/arg_min");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.argMin = function (axis) {
  this.throwIfDisposed();
  return (0, _arg_min.argMin)(this, axis);
};
},{"../../ops/arg_min":"node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_scalar.js":[function(require,module,exports) {
"use strict";

var _reshape = require("../../ops/reshape");

var _tensor = require("../../tensor");

var _util = require("../../util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** Converts a size-1 `tf.Tensor` to a `tf.Scalar`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor.Tensor.prototype.asScalar = function () {
  this.throwIfDisposed();
  (0, _util.assert)(this.size === 1, () => 'The array must have only 1 element.');
  return (0, _reshape.reshape)(this, []);
};
},{"../../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js","../../util":"node_modules/@tensorflow/tfjs-core/dist/util.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_type.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * Casts a `tf.Tensor` to a specified dtype.
 *
 * @param dtype Data-type to cast the tensor to.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor.Tensor.prototype.asType = function (dtype) {
  this.throwIfDisposed();
  return (0, _ops.cast)(this, dtype);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as1d.js":[function(require,module,exports) {
"use strict";

var _reshape = require("../../ops/reshape");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** Converts a `tf.Tensor` to a `tf.Tensor1D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor.Tensor.prototype.as1D = function () {
  this.throwIfDisposed();
  return (0, _reshape.reshape)(this, [this.size]);
};
},{"../../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as2d.js":[function(require,module,exports) {
"use strict";

var _reshape = require("../../ops/reshape");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Converts a `tf.Tensor` to a `tf.Tensor2D`.
 *
 * @param rows Number of rows in `tf.Tensor2D`.
 * @param columns Number of columns in `tf.Tensor2D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor.Tensor.prototype.as2D = function (rows, columns) {
  this.throwIfDisposed();
  return (0, _reshape.reshape)(this, [rows, columns]);
};
},{"../../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as3d.js":[function(require,module,exports) {
"use strict";

var _reshape = require("../../ops/reshape");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Converts a `tf.Tensor` to a `tf.Tensor3D`.
 *
 * @param rows Number of rows in `tf.Tensor3D`.
 * @param columns Number of columns in `tf.Tensor3D`.
 * @param depth Depth of `tf.Tensor3D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor.Tensor.prototype.as3D = function (rows, columns, depth) {
  this.throwIfDisposed();
  return (0, _reshape.reshape)(this, [rows, columns, depth]);
};
},{"../../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as4d.js":[function(require,module,exports) {
"use strict";

var _reshape = require("../../ops/reshape");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Converts a `tf.Tensor` to a `tf.Tensor4D`.
 *
 * @param rows Number of rows in `tf.Tensor4D`.
 * @param columns Number of columns in `tf.Tensor4D`.
 * @param depth Depth of `tf.Tensor4D`.
 * @param depth2 4th dimension of `tf.Tensor4D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor.Tensor.prototype.as4D = function (rows, columns, depth, depth2) {
  this.throwIfDisposed();
  return (0, _reshape.reshape)(this, [rows, columns, depth, depth2]);
};
},{"../../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as5d.js":[function(require,module,exports) {
"use strict";

var _reshape = require("../../ops/reshape");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Converts a `tf.Tensor` to a `tf.Tensor5D`.
 *
 * @param rows Number of rows in `tf.Tensor5D`.
 * @param columns Number of columns in `tf.Tensor5D`.
 * @param depth Depth of `tf.Tensor5D`.
 * @param depth2 4th dimension of `tf.Tensor5D`.
 * @param depth3 5th dimension of 'tf.Tensor5D'
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor.Tensor.prototype.as5D = function (rows, columns, depth, depth2, depth3) {
  this.throwIfDisposed();
  return (0, _reshape.reshape)(this, [rows, columns, depth, depth2, depth3]);
};
},{"../../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asin.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.asin = function () {
  this.throwIfDisposed();
  return (0, _ops.asin)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asinh.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.asinh = function () {
  this.throwIfDisposed();
  return (0, _ops.asinh)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.atan = function () {
  this.throwIfDisposed();
  return (0, _ops.atan)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan2.js":[function(require,module,exports) {
"use strict";

var _atan = require("../../ops/atan2");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.atan2 = function (b) {
  this.throwIfDisposed();
  return (0, _atan.atan2)(this, b);
};
},{"../../ops/atan2":"node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atanh.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.atanh = function () {
  this.throwIfDisposed();
  return (0, _ops.atanh)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/avg_pool.js":[function(require,module,exports) {
"use strict";

var _avg_pool = require("../../ops/avg_pool");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.avgPool = function (filterSize, strides, pad, dimRoundingMode) {
  this.throwIfDisposed();
  return (0, _avg_pool.avgPool)(this, filterSize, strides, pad, dimRoundingMode);
};
},{"../../ops/avg_pool":"node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batch_to_space_nd.js":[function(require,module,exports) {
"use strict";

var _batch_to_space_nd = require("../../ops/batch_to_space_nd");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.batchToSpaceND = function (blockShape, crops) {
  this.throwIfDisposed();
  return (0, _batch_to_space_nd.batchToSpaceND)(this, blockShape, crops);
};
},{"../../ops/batch_to_space_nd":"node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batchnorm.js":[function(require,module,exports) {
"use strict";

var _batchnorm = require("../../ops/batchnorm");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.batchNorm = function (mean, variance, offset, scale, varianceEpsilon) {
  this.throwIfDisposed();
  return (0, _batchnorm.batchNorm)(this, mean, variance, offset, scale, varianceEpsilon);
};
},{"../../ops/batchnorm":"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/broadcast_to.js":[function(require,module,exports) {
"use strict";

var _broadcast_to = require("../../ops/broadcast_to");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.broadcastTo = function (shape) {
  this.throwIfDisposed();
  return (0, _broadcast_to.broadcastTo)(this, shape);
};
},{"../../ops/broadcast_to":"node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cast.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.cast = function (dtype) {
  this.throwIfDisposed();
  return (0, _ops.cast)(this, dtype);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ceil.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.ceil = function () {
  this.throwIfDisposed();
  return (0, _ops.ceil)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/clip_by_value.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.clipByValue = function (min, max) {
  this.throwIfDisposed();
  return (0, _ops.clipByValue)(this, min, max);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/concat.js":[function(require,module,exports) {
"use strict";

var _concat = require("../../ops/concat");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.concat = function (x, axis) {
  this.throwIfDisposed();

  if (x instanceof _tensor.Tensor) {
    x = [x];
  }

  return (0, _concat.concat)([this, ...x], axis);
};
},{"../../ops/concat":"node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv1d.js":[function(require,module,exports) {
"use strict";

var _conv1d = require("../../ops/conv1d");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.conv1d = function (filter, stride, pad, dataFormat, dilation, dimRoundingMode) {
  this.throwIfDisposed();
  return (0, _conv1d.conv1d)(this, filter, stride, pad, dataFormat, dilation, dimRoundingMode);
};
},{"../../ops/conv1d":"node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d_transpose.js":[function(require,module,exports) {
"use strict";

var _conv2d_transpose = require("../../ops/conv2d_transpose");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.conv2dTranspose = function (filter, outputShape, strides, pad, dimRoundingMode) {
  this.throwIfDisposed();
  return (0, _conv2d_transpose.conv2dTranspose)(this, filter, outputShape, strides, pad, dimRoundingMode);
};
},{"../../ops/conv2d_transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d.js":[function(require,module,exports) {
"use strict";

var _conv2d = require("../../ops/conv2d");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.conv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
  this.throwIfDisposed();
  return (0, _conv2d.conv2d)(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};
},{"../../ops/conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cos.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.cos = function () {
  this.throwIfDisposed();
  return (0, _ops.cos)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cosh.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.cosh = function () {
  this.throwIfDisposed();
  return (0, _ops.cosh)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumsum.js":[function(require,module,exports) {
"use strict";

var _cumsum = require("../../ops/cumsum");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.cumsum = function (axis, exclusive, reverse) {
  this.throwIfDisposed();
  return (0, _cumsum.cumsum)(this, axis, exclusive, reverse);
};
},{"../../ops/cumsum":"node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depth_to_space.js":[function(require,module,exports) {
"use strict";

var _depth_to_space = require("../../ops/depth_to_space");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.depthToSpace = function (blockSize, dataFormat) {
  this.throwIfDisposed();
  return (0, _depth_to_space.depthToSpace)(this, blockSize, dataFormat);
};
},{"../../ops/depth_to_space":"node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2D_deprecated.js":[function(require,module,exports) {
"use strict";

var _globals = require("../../globals");

var _depthwise_conv2d = require("../../ops/depthwise_conv2d");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * @deprecated Use `depthwiseConv2d` instead.
 */
_tensor.Tensor.prototype.depthwiseConv2D = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
  (0, _globals.deprecationWarn)('depthwiseConv2D is deprecated, use depthwiseConv2d instead');
  this.throwIfDisposed();
  return (0, _depthwise_conv2d.depthwiseConv2d)(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};
},{"../../globals":"node_modules/@tensorflow/tfjs-core/dist/globals.js","../../ops/depthwise_conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2d.js":[function(require,module,exports) {
"use strict";

var _depthwise_conv2d = require("../../ops/depthwise_conv2d");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.depthwiseConv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
  this.throwIfDisposed();
  return (0, _depthwise_conv2d.depthwiseConv2d)(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};
},{"../../ops/depthwise_conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dilation2d.js":[function(require,module,exports) {
"use strict";

var _dilation2d = require("../../ops/dilation2d");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.dilation2d = function (filter, strides, pad, dilations, dataFormat) {
  this.throwIfDisposed();
  return (0, _dilation2d.dilation2d)(this, filter, strides, pad, dilations, dataFormat);
};
},{"../../ops/dilation2d":"node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_no_nan.js":[function(require,module,exports) {
"use strict";

var _div_no_nan = require("../../ops/div_no_nan");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.divNoNan = function (b) {
  this.throwIfDisposed();
  return (0, _div_no_nan.divNoNan)(this, b);
};
},{"../../ops/div_no_nan":"node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.divStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.divStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div.js":[function(require,module,exports) {
"use strict";

var _div = require("../../ops/div");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.div = function (b) {
  this.throwIfDisposed();
  return (0, _div.div)(this, b);
};
},{"../../ops/div":"node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dot.js":[function(require,module,exports) {
"use strict";

var _dot = require("../../ops/dot");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.dot = function (b) {
  this.throwIfDisposed();
  return (0, _dot.dot)(this, b);
};
},{"../../ops/dot":"node_modules/@tensorflow/tfjs-core/dist/ops/dot.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/elu.js":[function(require,module,exports) {
"use strict";

var _elu = require("../../ops/elu");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.elu = function () {
  this.throwIfDisposed();
  return (0, _elu.elu)(this);
};
},{"../../ops/elu":"node_modules/@tensorflow/tfjs-core/dist/ops/elu.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.equalStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.equalStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal.js":[function(require,module,exports) {
"use strict";

var _equal = require("../../ops/equal");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.equal = function (b) {
  this.throwIfDisposed();
  return (0, _equal.equal)(this, b);
};
},{"../../ops/equal":"node_modules/@tensorflow/tfjs-core/dist/ops/equal.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/erf.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.erf = function () {
  this.throwIfDisposed();
  return (0, _ops.erf)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/exp.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.exp = function () {
  this.throwIfDisposed();
  return (0, _ops.exp)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expand_dims.js":[function(require,module,exports) {
"use strict";

var _expand_dims = require("../../ops/expand_dims");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.expandDims = function (axis) {
  this.throwIfDisposed();
  return (0, _expand_dims.expandDims)(this, axis);
};
},{"../../ops/expand_dims":"node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expm1.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.expm1 = function () {
  this.throwIfDisposed();
  return (0, _ops.expm1)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/fft.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.fft = function () {
  this.throwIfDisposed();
  return (0, _ops.fft)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/flatten.js":[function(require,module,exports) {
"use strict";

var _reshape = require("../../ops/reshape");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** Flatten a Tensor to a 1D array.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor.Tensor.prototype.flatten = function () {
  this.throwIfDisposed();
  return (0, _reshape.reshape)(this, [this.size]);
};
},{"../../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floor.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.floor = function () {
  this.throwIfDisposed();
  return (0, _ops.floor)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floorDiv.js":[function(require,module,exports) {
"use strict";

var _floorDiv = require("../../ops/floorDiv");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.floorDiv = function (b) {
  this.throwIfDisposed();
  return (0, _floorDiv.floorDiv)(this, b);
};
},{"../../ops/floorDiv":"node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/gather.js":[function(require,module,exports) {
"use strict";

var _gather = require("../../ops/gather");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.gather = function (indices, axis) {
  this.throwIfDisposed();
  return (0, _gather.gather)(this, indices, axis);
};
},{"../../ops/gather":"node_modules/@tensorflow/tfjs-core/dist/ops/gather.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.greaterEqualStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.greaterEqualStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal.js":[function(require,module,exports) {
"use strict";

var _greater_equal = require("../../ops/greater_equal");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.greaterEqual = function (b) {
  this.throwIfDisposed();
  return (0, _greater_equal.greaterEqual)(this, b);
};
},{"../../ops/greater_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.greaterStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.greaterStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater.js":[function(require,module,exports) {
"use strict";

var _greater = require("../../ops/greater");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.greater = function (b) {
  this.throwIfDisposed();
  return (0, _greater.greater)(this, b);
};
},{"../../ops/greater":"node_modules/@tensorflow/tfjs-core/dist/ops/greater.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ifft.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.ifft = function () {
  this.throwIfDisposed();
  return (0, _ops.ifft)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/irfft.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.irfft = function () {
  this.throwIfDisposed();
  return (0, _ops.irfft)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_finite.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.isFinite = function () {
  this.throwIfDisposed();
  return (0, _ops.isFinite)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_inf.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.isInf = function () {
  this.throwIfDisposed();
  return (0, _ops.isInf)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_nan.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.isNaN = function () {
  this.throwIfDisposed();
  return (0, _ops.isNaN)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/leaky_relu.js":[function(require,module,exports) {
"use strict";

var _leaky_relu = require("../../ops/leaky_relu");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.leakyRelu = function (alpha) {
  this.throwIfDisposed();
  return (0, _leaky_relu.leakyRelu)(this, alpha);
};
},{"../../ops/leaky_relu":"node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.lessEqualStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.lessEqualStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal.js":[function(require,module,exports) {
"use strict";

var _less_equal = require("../../ops/less_equal");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.lessEqual = function (b) {
  this.throwIfDisposed();
  return (0, _less_equal.lessEqual)(this, b);
};
},{"../../ops/less_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.lessStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.lessStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less.js":[function(require,module,exports) {
"use strict";

var _less = require("../../ops/less");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.less = function (b) {
  this.throwIfDisposed();
  return (0, _less.less)(this, b);
};
},{"../../ops/less":"node_modules/@tensorflow/tfjs-core/dist/ops/less.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/local_response_normalization.js":[function(require,module,exports) {
"use strict";

var _local_response_normalization = require("../../ops/local_response_normalization");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.localResponseNormalization = function (depthRadius, bias, alpha, beta) {
  this.throwIfDisposed();
  return (0, _local_response_normalization.localResponseNormalization)(this, depthRadius, bias, alpha, beta);
};
},{"../../ops/local_response_normalization":"node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sigmoid.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.logSigmoid = function () {
  this.throwIfDisposed();
  return (0, _ops.logSigmoid)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_softmax.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.logSoftmax = function (axis) {
  this.throwIfDisposed();
  return (0, _ops.logSoftmax)(this, axis);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sum_exp.js":[function(require,module,exports) {
"use strict";

var _log_sum_exp = require("../../ops/log_sum_exp");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.logSumExp = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0, _log_sum_exp.logSumExp)(this, axis, keepDims);
};
},{"../../ops/log_sum_exp":"node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.log = function () {
  this.throwIfDisposed();
  return (0, _ops.log)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log1p.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.log1p = function () {
  this.throwIfDisposed();
  return (0, _ops.log1p)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_and.js":[function(require,module,exports) {
"use strict";

var _logical_and = require("../../ops/logical_and");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.logicalAnd = function (b) {
  this.throwIfDisposed();
  return (0, _logical_and.logicalAnd)(this, b);
};
},{"../../ops/logical_and":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_not.js":[function(require,module,exports) {
"use strict";

var _logical_not = require("../../ops/logical_not");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.logicalNot = function () {
  this.throwIfDisposed();
  return (0, _logical_not.logicalNot)(this);
};
},{"../../ops/logical_not":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_or.js":[function(require,module,exports) {
"use strict";

var _logical_or = require("../../ops/logical_or");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.logicalOr = function (b) {
  this.throwIfDisposed();
  return (0, _logical_or.logicalOr)(this, b);
};
},{"../../ops/logical_or":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_xor.js":[function(require,module,exports) {
"use strict";

var _logical_xor = require("../../ops/logical_xor");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.logicalXor = function (b) {
  this.throwIfDisposed();
  return (0, _logical_xor.logicalXor)(this, b);
};
},{"../../ops/logical_xor":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul.js":[function(require,module,exports) {
"use strict";

var _mat_mul = require("../../ops/mat_mul");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.matMul = function (b, transposeA, transposeB) {
  this.throwIfDisposed();
  return (0, _mat_mul.matMul)(this, b, transposeA, transposeB);
};
},{"../../ops/mat_mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max_pool.js":[function(require,module,exports) {
"use strict";

var _max_pool = require("../../ops/max_pool");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.maxPool = function (filterSize, strides, pad, dimRoundingMode) {
  this.throwIfDisposed();
  return (0, _max_pool.maxPool)(this, filterSize, strides, pad, dimRoundingMode);
};
},{"../../ops/max_pool":"node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max.js":[function(require,module,exports) {
"use strict";

var _max = require("../../ops/max");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.max = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0, _max.max)(this, axis, keepDims);
};
},{"../../ops/max":"node_modules/@tensorflow/tfjs-core/dist/ops/max.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.maximumStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.maximumStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum.js":[function(require,module,exports) {
"use strict";

var _maximum = require("../../ops/maximum");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.maximum = function (b) {
  this.throwIfDisposed();
  return (0, _maximum.maximum)(this, b);
};
},{"../../ops/maximum":"node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mean.js":[function(require,module,exports) {
"use strict";

var _mean = require("../../ops/mean");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.mean = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0, _mean.mean)(this, axis, keepDims);
};
},{"../../ops/mean":"node_modules/@tensorflow/tfjs-core/dist/ops/mean.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/min.js":[function(require,module,exports) {
"use strict";

var _min = require("../../ops/min");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.min = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0, _min.min)(this, axis, keepDims);
};
},{"../../ops/min":"node_modules/@tensorflow/tfjs-core/dist/ops/min.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.minimumStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.minimumStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum.js":[function(require,module,exports) {
"use strict";

var _minimum = require("../../ops/minimum");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.minimum = function (b) {
  this.throwIfDisposed();
  return (0, _minimum.minimum)(this, b);
};
},{"../../ops/minimum":"node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.modStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.modStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod.js":[function(require,module,exports) {
"use strict";

var _mod = require("../../ops/mod");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.mod = function (b) {
  this.throwIfDisposed();
  return (0, _mod.mod)(this, b);
};
},{"../../ops/mod":"node_modules/@tensorflow/tfjs-core/dist/ops/mod.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.mulStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.mulStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul.js":[function(require,module,exports) {
"use strict";

var _mul = require("../../ops/mul");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.mul = function (b) {
  this.throwIfDisposed();
  return (0, _mul.mul)(this, b);
};
},{"../../ops/mul":"node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/neg.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.neg = function () {
  this.throwIfDisposed();
  return (0, _ops.neg)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/norm.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.norm = function (ord, axis, keepDims) {
  this.throwIfDisposed();
  return (0, _ops.norm)(this, ord, axis, keepDims);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.notEqualStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.notEqualStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal.js":[function(require,module,exports) {
"use strict";

var _not_equal = require("../../ops/not_equal");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.notEqual = function (b) {
  this.throwIfDisposed();
  return (0, _not_equal.notEqual)(this, b);
};
},{"../../ops/not_equal":"node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/one_hot.js":[function(require,module,exports) {
"use strict";

var _one_hot = require("../../ops/one_hot");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.oneHot = function (depth, onValue = 1, offValue = 0) {
  this.throwIfDisposed();
  return (0, _one_hot.oneHot)(this, depth, onValue, offValue);
};
},{"../../ops/one_hot":"node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ones_like.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.onesLike = function () {
  this.throwIfDisposed();
  return (0, _ops.onesLike)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pad.js":[function(require,module,exports) {
"use strict";

var _pad = require("../../ops/pad");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.pad = function (paddings, constantValue) {
  this.throwIfDisposed();
  return (0, _pad.pad)(this, paddings, constantValue);
};
},{"../../ops/pad":"node_modules/@tensorflow/tfjs-core/dist/ops/pad.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pool.js":[function(require,module,exports) {
"use strict";

var _pool = require("../../ops/pool");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.pool = function (windowShape, poolingType, padding, dilationRate, strides) {
  this.throwIfDisposed();
  return (0, _pool.pool)(this, windowShape, poolingType, padding, dilationRate, strides);
};
},{"../../ops/pool":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.powStrict = function (exp) {
  this.throwIfDisposed();
  return (0, _ops.powStrict)(this, exp);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow.js":[function(require,module,exports) {
"use strict";

var _pow = require("../../ops/pow");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.pow = function (exp) {
  this.throwIfDisposed();
  return (0, _pow.pow)(this, exp);
};
},{"../../ops/pow":"node_modules/@tensorflow/tfjs-core/dist/ops/pow.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prelu.js":[function(require,module,exports) {
"use strict";

var _prelu = require("../../ops/prelu");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.prelu = function (alpha) {
  this.throwIfDisposed();
  return (0, _prelu.prelu)(this, alpha);
};
},{"../../ops/prelu":"node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prod.js":[function(require,module,exports) {
"use strict";

var _prod = require("../../ops/prod");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.prod = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0, _prod.prod)(this, axis, keepDims);
};
},{"../../ops/prod":"node_modules/@tensorflow/tfjs-core/dist/ops/prod.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reciprocal.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.reciprocal = function () {
  this.throwIfDisposed();
  return (0, _ops.reciprocal)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu.js":[function(require,module,exports) {
"use strict";

var _relu = require("../../ops/relu");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.relu = function () {
  this.throwIfDisposed();
  return (0, _relu.relu)(this);
};
},{"../../ops/relu":"node_modules/@tensorflow/tfjs-core/dist/ops/relu.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu6.js":[function(require,module,exports) {
"use strict";

var _relu = require("../../ops/relu6");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.relu6 = function () {
  this.throwIfDisposed();
  return (0, _relu.relu6)(this);
};
},{"../../ops/relu6":"node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape_as.js":[function(require,module,exports) {
"use strict";

var _reshape = require("../../ops/reshape");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reshapes the tensor into the shape of the provided tensor.
 *
 * @param x The tensor of required shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor.Tensor.prototype.reshapeAs = function (x) {
  this.throwIfDisposed();
  return (0, _reshape.reshape)(this, x.shape);
};
},{"../../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape.js":[function(require,module,exports) {
"use strict";

var _reshape = require("../../ops/reshape");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.reshape = function (shape) {
  this.throwIfDisposed();
  return (0, _reshape.reshape)(this, shape);
};
},{"../../ops/reshape":"node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_bilinear.js":[function(require,module,exports) {
"use strict";

var _resize_bilinear = require("../../ops/image/resize_bilinear");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.resizeBilinear = function (newShape2D, alignCorners) {
  this.throwIfDisposed();
  return (0, _resize_bilinear.resizeBilinear)(this, newShape2D, alignCorners);
};
},{"../../ops/image/resize_bilinear":"node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_nearest_neighbor.js":[function(require,module,exports) {
"use strict";

var _resize_nearest_neighbor = require("../../ops/image/resize_nearest_neighbor");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.resizeNearestNeighbor = function (newShape2D, alignCorners) {
  this.throwIfDisposed();
  return (0, _resize_nearest_neighbor.resizeNearestNeighbor)(this, newShape2D, alignCorners);
};
},{"../../ops/image/resize_nearest_neighbor":"node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reverse.js":[function(require,module,exports) {
"use strict";

var _reverse = require("../../ops/reverse");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.reverse = function (axis) {
  this.throwIfDisposed();
  return (0, _reverse.reverse)(this, axis);
};
},{"../../ops/reverse":"node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rfft.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.rfft = function () {
  this.throwIfDisposed();
  return (0, _ops.rfft)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/round.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.round = function () {
  this.throwIfDisposed();
  return (0, _ops.round)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rsqrt.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.rsqrt = function () {
  this.throwIfDisposed();
  return (0, _ops.rsqrt)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/selu.js":[function(require,module,exports) {
"use strict";

var _selu = require("../../ops/selu");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.selu = function () {
  this.throwIfDisposed();
  return (0, _selu.selu)(this);
};
},{"../../ops/selu":"node_modules/@tensorflow/tfjs-core/dist/ops/selu.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/separable_conv2d.js":[function(require,module,exports) {
"use strict";

var _separable_conv2d = require("../../ops/separable_conv2d");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.separableConv2d = function (depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat) {
  this.throwIfDisposed();
  return (0, _separable_conv2d.separableConv2d)(this, depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat);
};
},{"../../ops/separable_conv2d":"node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sigmoid.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.sigmoid = function () {
  this.throwIfDisposed();
  return (0, _ops.sigmoid)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sign.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.sign = function () {
  this.throwIfDisposed();
  return (0, _ops.sign)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sin.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.sin = function () {
  this.throwIfDisposed();
  return (0, _ops.sin)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sinh.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.sinh = function () {
  this.throwIfDisposed();
  return (0, _ops.sinh)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/slice.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.slice = function (begin, size) {
  this.throwIfDisposed();
  return (0, _ops.slice)(this, begin, size);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softmax.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.softmax = function (dim) {
  this.throwIfDisposed();
  return (0, _ops.softmax)(this, dim);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softplus.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.softplus = function () {
  this.throwIfDisposed();
  return (0, _ops.softplus)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/space_to_batch_nd.js":[function(require,module,exports) {
"use strict";

var _space_to_batch_nd = require("../../ops/space_to_batch_nd");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.spaceToBatchND = function (blockShape, paddings) {
  this.throwIfDisposed();
  return (0, _space_to_batch_nd.spaceToBatchND)(this, blockShape, paddings);
};
},{"../../ops/space_to_batch_nd":"node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/split.js":[function(require,module,exports) {
"use strict";

var _split = require("../../ops/split");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.split = function (numOrSizeSplits, axis) {
  this.throwIfDisposed();
  return (0, _split.split)(this, numOrSizeSplits, axis);
};
},{"../../ops/split":"node_modules/@tensorflow/tfjs-core/dist/ops/split.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sqrt.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.sqrt = function () {
  this.throwIfDisposed();
  return (0, _ops.sqrt)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/square.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.square = function () {
  this.throwIfDisposed();
  return (0, _ops.square)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference.js":[function(require,module,exports) {
"use strict";

var _squared_difference = require("../../ops/squared_difference");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.squaredDifference = function (b) {
  this.throwIfDisposed();
  return (0, _squared_difference.squaredDifference)(this, b);
};
},{"../../ops/squared_difference":"node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.squaredDifferenceStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.squaredDifferenceStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squeeze.js":[function(require,module,exports) {
"use strict";

var _squeeze = require("../../ops/squeeze");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.squeeze = function (axis) {
  this.throwIfDisposed();
  return (0, _squeeze.squeeze)(this, axis);
};
},{"../../ops/squeeze":"node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/stack.js":[function(require,module,exports) {
"use strict";

var _stack = require("../../ops/stack");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.stack = function (x, axis) {
  this.throwIfDisposed();
  const tensorsToBeStacked = x instanceof _tensor.Tensor ? [this, x] : [this, ...x];
  return (0, _stack.stack)(tensorsToBeStacked, axis);
};
},{"../../ops/stack":"node_modules/@tensorflow/tfjs-core/dist/ops/stack.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/step.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.step = function (alpha) {
  this.throwIfDisposed();
  return (0, _ops.step)(this, alpha);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/strided_slice.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.stridedSlice = function (begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {
  this.throwIfDisposed();
  return (0, _ops.stridedSlice)(this, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub_strict.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor.Tensor.prototype.subStrict = function (x) {
  this.throwIfDisposed();
  return (0, _ops.subStrict)(this, x);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub.js":[function(require,module,exports) {
"use strict";

var _sub = require("../../ops/sub");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.sub = function (b) {
  this.throwIfDisposed();
  return (0, _sub.sub)(this, b);
};
},{"../../ops/sub":"node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sum.js":[function(require,module,exports) {
"use strict";

var _sum = require("../../ops/sum");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.sum = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0, _sum.sum)(this, axis, keepDims);
};
},{"../../ops/sum":"node_modules/@tensorflow/tfjs-core/dist/ops/sum.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tan.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.tan = function () {
  this.throwIfDisposed();
  return (0, _ops.tan)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tanh.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.tanh = function () {
  this.throwIfDisposed();
  return (0, _ops.tanh)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tile.js":[function(require,module,exports) {
"use strict";

var _tile = require("../../ops/tile");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.tile = function (reps) {
  this.throwIfDisposed();
  return (0, _tile.tile)(this, reps);
};
},{"../../ops/tile":"node_modules/@tensorflow/tfjs-core/dist/ops/tile.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_bool.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/** Casts the array to type `bool`
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor.Tensor.prototype.toBool = function () {
  this.throwIfDisposed();
  return (0, _ops.cast)(this, 'bool');
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_float.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/** Casts the array to type `float32`
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor.Tensor.prototype.toFloat = function () {
  this.throwIfDisposed();
  return (0, _ops.cast)(this, 'float32');
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_int.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.

/** Casts the array to type `int32`
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor.Tensor.prototype.toInt = function () {
  this.throwIfDisposed();
  return (0, _ops.cast)(this, 'int32');
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/topk.js":[function(require,module,exports) {
"use strict";

var _topk = require("../../ops/topk");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.topk = function (k, sorted) {
  this.throwIfDisposed();
  return (0, _topk.topk)(this, k, sorted);
};
},{"../../ops/topk":"node_modules/@tensorflow/tfjs-core/dist/ops/topk.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/transpose.js":[function(require,module,exports) {
"use strict";

var _transpose = require("../../ops/transpose");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.transpose = function (perm) {
  this.throwIfDisposed();
  return (0, _transpose.transpose)(this, perm);
};
},{"../../ops/transpose":"node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unsorted_segment_sum.js":[function(require,module,exports) {
"use strict";

var _unsorted_segment_sum = require("../../ops/unsorted_segment_sum");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.unsortedSegmentSum = function (segmentIds, numSegments) {
  this.throwIfDisposed();
  return (0, _unsorted_segment_sum.unsortedSegmentSum)(this, segmentIds, numSegments);
};
},{"../../ops/unsorted_segment_sum":"node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unstack.js":[function(require,module,exports) {
"use strict";

var _unstack = require("../../ops/unstack");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.unstack = function (axis) {
  this.throwIfDisposed();
  return (0, _unstack.unstack)(this, axis);
};
},{"../../ops/unstack":"node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/where.js":[function(require,module,exports) {
"use strict";

var _where = require("../../ops/where");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
_tensor.Tensor.prototype.where = function (condition, x) {
  this.throwIfDisposed();
  return (0, _where.where)(condition, this, x);
};
},{"../../ops/where":"node_modules/@tensorflow/tfjs-core/dist/ops/where.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/zeros_like.js":[function(require,module,exports) {
"use strict";

var _ops = require("../../ops/ops");

var _tensor = require("../../tensor");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
_tensor.Tensor.prototype.zerosLike = function () {
  this.throwIfDisposed();
  return (0, _ops.zerosLike)(this);
};
},{"../../ops/ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../../tensor":"node_modules/@tensorflow/tfjs-core/dist/tensor.js"}],"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops.js":[function(require,module,exports) {
"use strict";

require("./abs");

require("./acos");

require("./acosh");

require("./add_strict");

require("./add");

require("./all");

require("./any");

require("./arg_max");

require("./arg_min");

require("./as_scalar");

require("./as_type");

require("./as1d");

require("./as2d");

require("./as3d");

require("./as4d");

require("./as5d");

require("./asin");

require("./asinh");

require("./atan");

require("./atan2");

require("./atanh");

require("./avg_pool");

require("./batch_to_space_nd");

require("./batchnorm");

require("./broadcast_to");

require("./cast");

require("./ceil");

require("./clip_by_value");

require("./concat");

require("./conv1d");

require("./conv2d_transpose");

require("./conv2d");

require("./cos");

require("./cosh");

require("./cumsum");

require("./depth_to_space");

require("./depthwise_conv2D_deprecated");

require("./depthwise_conv2d");

require("./dilation2d");

require("./div_no_nan");

require("./div_strict");

require("./div");

require("./dot");

require("./elu");

require("./equal_strict");

require("./equal");

require("./erf");

require("./exp");

require("./expand_dims");

require("./expm1");

require("./fft");

require("./flatten");

require("./floor");

require("./floorDiv");

require("./gather");

require("./greater_equal_strict");

require("./greater_equal");

require("./greater_strict");

require("./greater");

require("./ifft");

require("./irfft");

require("./is_finite");

require("./is_inf");

require("./is_nan");

require("./leaky_relu");

require("./less_equal_strict");

require("./less_equal");

require("./less_strict");

require("./less");

require("./local_response_normalization");

require("./log_sigmoid");

require("./log_softmax");

require("./log_sum_exp");

require("./log");

require("./log1p");

require("./logical_and");

require("./logical_not");

require("./logical_or");

require("./logical_xor");

require("./mat_mul");

require("./max_pool");

require("./max");

require("./maximum_strict");

require("./maximum");

require("./mean");

require("./min");

require("./minimum_strict");

require("./minimum");

require("./mod_strict");

require("./mod");

require("./mul_strict");

require("./mul");

require("./neg");

require("./norm");

require("./not_equal_strict");

require("./not_equal");

require("./one_hot");

require("./ones_like");

require("./pad");

require("./pool");

require("./pow_strict");

require("./pow");

require("./prelu");

require("./prod");

require("./reciprocal");

require("./relu");

require("./relu6");

require("./reshape_as");

require("./reshape");

require("./resize_bilinear");

require("./resize_nearest_neighbor");

require("./reverse");

require("./rfft");

require("./round");

require("./rsqrt");

require("./selu");

require("./separable_conv2d");

require("./sigmoid");

require("./sign");

require("./sin");

require("./sinh");

require("./slice");

require("./softmax");

require("./softplus");

require("./space_to_batch_nd");

require("./split");

require("./sqrt");

require("./square");

require("./squared_difference");

require("./squared_difference_strict");

require("./squeeze");

require("./stack");

require("./step");

require("./strided_slice");

require("./sub_strict");

require("./sub");

require("./sum");

require("./tan");

require("./tanh");

require("./tile");

require("./to_bool");

require("./to_float");

require("./to_int");

require("./topk");

require("./transpose");

require("./unsorted_segment_sum");

require("./unstack");

require("./where");

require("./zeros_like");
},{"./abs":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/abs.js","./acos":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acos.js","./acosh":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acosh.js","./add_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add_strict.js","./add":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add.js","./all":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/all.js","./any":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/any.js","./arg_max":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_max.js","./arg_min":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_min.js","./as_scalar":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_scalar.js","./as_type":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_type.js","./as1d":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as1d.js","./as2d":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as2d.js","./as3d":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as3d.js","./as4d":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as4d.js","./as5d":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as5d.js","./asin":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asin.js","./asinh":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asinh.js","./atan":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan.js","./atan2":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan2.js","./atanh":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atanh.js","./avg_pool":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/avg_pool.js","./batch_to_space_nd":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batch_to_space_nd.js","./batchnorm":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batchnorm.js","./broadcast_to":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/broadcast_to.js","./cast":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cast.js","./ceil":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ceil.js","./clip_by_value":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/clip_by_value.js","./concat":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/concat.js","./conv1d":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv1d.js","./conv2d_transpose":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d_transpose.js","./conv2d":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d.js","./cos":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cos.js","./cosh":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cosh.js","./cumsum":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumsum.js","./depth_to_space":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depth_to_space.js","./depthwise_conv2D_deprecated":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2D_deprecated.js","./depthwise_conv2d":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2d.js","./dilation2d":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dilation2d.js","./div_no_nan":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_no_nan.js","./div_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_strict.js","./div":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div.js","./dot":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dot.js","./elu":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/elu.js","./equal_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal_strict.js","./equal":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal.js","./erf":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/erf.js","./exp":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/exp.js","./expand_dims":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expand_dims.js","./expm1":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expm1.js","./fft":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/fft.js","./flatten":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/flatten.js","./floor":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floor.js","./floorDiv":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floorDiv.js","./gather":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/gather.js","./greater_equal_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal_strict.js","./greater_equal":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal.js","./greater_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_strict.js","./greater":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater.js","./ifft":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ifft.js","./irfft":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/irfft.js","./is_finite":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_finite.js","./is_inf":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_inf.js","./is_nan":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_nan.js","./leaky_relu":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/leaky_relu.js","./less_equal_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal_strict.js","./less_equal":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal.js","./less_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_strict.js","./less":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less.js","./local_response_normalization":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/local_response_normalization.js","./log_sigmoid":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sigmoid.js","./log_softmax":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_softmax.js","./log_sum_exp":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sum_exp.js","./log":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log.js","./log1p":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log1p.js","./logical_and":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_and.js","./logical_not":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_not.js","./logical_or":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_or.js","./logical_xor":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_xor.js","./mat_mul":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul.js","./max_pool":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max_pool.js","./max":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max.js","./maximum_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum_strict.js","./maximum":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum.js","./mean":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mean.js","./min":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/min.js","./minimum_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum_strict.js","./minimum":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum.js","./mod_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod_strict.js","./mod":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod.js","./mul_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul_strict.js","./mul":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul.js","./neg":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/neg.js","./norm":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/norm.js","./not_equal_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal_strict.js","./not_equal":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal.js","./one_hot":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/one_hot.js","./ones_like":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ones_like.js","./pad":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pad.js","./pool":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pool.js","./pow_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow_strict.js","./pow":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow.js","./prelu":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prelu.js","./prod":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prod.js","./reciprocal":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reciprocal.js","./relu":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu.js","./relu6":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu6.js","./reshape_as":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape_as.js","./reshape":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape.js","./resize_bilinear":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_bilinear.js","./resize_nearest_neighbor":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_nearest_neighbor.js","./reverse":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reverse.js","./rfft":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rfft.js","./round":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/round.js","./rsqrt":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rsqrt.js","./selu":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/selu.js","./separable_conv2d":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/separable_conv2d.js","./sigmoid":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sigmoid.js","./sign":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sign.js","./sin":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sin.js","./sinh":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sinh.js","./slice":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/slice.js","./softmax":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softmax.js","./softplus":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softplus.js","./space_to_batch_nd":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/space_to_batch_nd.js","./split":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/split.js","./sqrt":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sqrt.js","./square":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/square.js","./squared_difference":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference.js","./squared_difference_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference_strict.js","./squeeze":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squeeze.js","./stack":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/stack.js","./step":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/step.js","./strided_slice":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/strided_slice.js","./sub_strict":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub_strict.js","./sub":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub.js","./sum":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sum.js","./tan":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tan.js","./tanh":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tanh.js","./tile":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tile.js","./to_bool":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_bool.js","./to_float":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_float.js","./to_int":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_int.js","./topk":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/topk.js","./transpose":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/transpose.js","./unsorted_segment_sum":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unsorted_segment_sum.js","./unstack":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unstack.js","./where":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/where.js","./zeros_like":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/zeros_like.js"}],"node_modules/@tensorflow/tfjs-core/dist/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("./base_side_effects");

var _base = require("./base");

Object.keys(_base).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _base[key];
    }
  });
});

require("./register_all_gradients");

require("./public/chained_ops/register_all_chained_ops");
},{"./base_side_effects":"node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js","./base":"node_modules/@tensorflow/tfjs-core/dist/base.js","./register_all_gradients":"node_modules/@tensorflow/tfjs-core/dist/register_all_gradients.js","./public/chained_ops/register_all_chained_ops":"node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops.js"}],"node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SaverDef = exports.DataType = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */

/** DataType enum. */
var DataType;
exports.DataType = DataType;

(function (DataType) {
  DataType[DataType["DT_INVALID"] = 0] = "DT_INVALID";
  DataType[DataType["DT_FLOAT"] = 1] = "DT_FLOAT";
  DataType[DataType["DT_DOUBLE"] = 2] = "DT_DOUBLE";
  DataType[DataType["DT_INT32"] = 3] = "DT_INT32";
  DataType[DataType["DT_UINT8"] = 4] = "DT_UINT8";
  DataType[DataType["DT_INT16"] = 5] = "DT_INT16";
  DataType[DataType["DT_INT8"] = 6] = "DT_INT8";
  DataType[DataType["DT_STRING"] = 7] = "DT_STRING";
  DataType[DataType["DT_COMPLEX64"] = 8] = "DT_COMPLEX64";
  DataType[DataType["DT_INT64"] = 9] = "DT_INT64";
  DataType[DataType["DT_BOOL"] = 10] = "DT_BOOL";
  DataType[DataType["DT_QINT8"] = 11] = "DT_QINT8";
  DataType[DataType["DT_QUINT8"] = 12] = "DT_QUINT8";
  DataType[DataType["DT_QINT32"] = 13] = "DT_QINT32";
  DataType[DataType["DT_BFLOAT16"] = 14] = "DT_BFLOAT16";
  DataType[DataType["DT_FLOAT_REF"] = 101] = "DT_FLOAT_REF";
  DataType[DataType["DT_DOUBLE_REF"] = 102] = "DT_DOUBLE_REF";
  DataType[DataType["DT_INT32_REF"] = 103] = "DT_INT32_REF";
  DataType[DataType["DT_UINT8_REF"] = 104] = "DT_UINT8_REF";
  DataType[DataType["DT_INT16_REF"] = 105] = "DT_INT16_REF";
  DataType[DataType["DT_INT8_REF"] = 106] = "DT_INT8_REF";
  DataType[DataType["DT_STRING_REF"] = 107] = "DT_STRING_REF";
  DataType[DataType["DT_COMPLEX64_REF"] = 108] = "DT_COMPLEX64_REF";
  DataType[DataType["DT_INT64_REF"] = 109] = "DT_INT64_REF";
  DataType[DataType["DT_BOOL_REF"] = 110] = "DT_BOOL_REF";
  DataType[DataType["DT_QINT8_REF"] = 111] = "DT_QINT8_REF";
  DataType[DataType["DT_QUINT8_REF"] = 112] = "DT_QUINT8_REF";
  DataType[DataType["DT_QINT32_REF"] = 113] = "DT_QINT32_REF";
  DataType[DataType["DT_BFLOAT16_REF"] = 114] = "DT_BFLOAT16_REF";
})(DataType || (exports.DataType = DataType = {}));

var SaverDef;
exports.SaverDef = SaverDef;

(function (SaverDef) {
  /** CheckpointFormatVersion enum. */
  let CheckpointFormatVersion;

  (function (CheckpointFormatVersion) {
    CheckpointFormatVersion[CheckpointFormatVersion["LEGACY"] = 0] = "LEGACY";
    CheckpointFormatVersion[CheckpointFormatVersion["V1"] = 1] = "V1";
    CheckpointFormatVersion[CheckpointFormatVersion["V2"] = 2] = "V2";
  })(CheckpointFormatVersion = SaverDef.CheckpointFormatVersion || (SaverDef.CheckpointFormatVersion = {}));
})(SaverDef || (exports.SaverDef = SaverDef = {}));
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerOp = registerOp;
exports.getRegisteredOp = getRegisteredOp;
exports.deregisterOp = deregisterOp;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CUSTOM_OPS = {};
/**
 * Register an Op for graph model executor. This allow you to register
 * TensorFlow custom op or override existing op.
 *
 * Here is an example of registering a new MatMul Op.
 * ```js
 * const customMatmul = (node) =>
 *    tf.matMul(
 *        node.inputs[0], node.inputs[1],
 *        node.attrs['transpose_a'], node.attrs['transpose_b']);
 *
 * tf.registerOp('MatMul', customMatmul);
 * ```
 * The inputs and attrs of the node object is based on the TensorFlow op
 * registry.
 *
 * @param name The Tensorflow Op name.
 * @param opFunc An op function which is called with the current graph node
 * during execution and needs to return a tensor or a list of tensors. The node
 * has the following attributes:
 *    - attr: A map from attribute name to its value
 *    - inputs: A list of input tensors
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */

function registerOp(name, opFunc) {
  const opMapper = {
    tfOpName: name,
    category: 'custom',
    inputs: [],
    attrs: [],
    customExecutor: opFunc
  };
  CUSTOM_OPS[name] = opMapper;
}
/**
 * Retrieve the OpMapper object for the registered op.
 *
 * @param name The Tensorflow Op name.
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */


function getRegisteredOp(name) {
  return CUSTOM_OPS[name];
}
/**
 * Deregister the Op for graph model executor.
 *
 * @param name The Tensorflow Op name.
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */


function deregisterOp(name) {
  delete CUSTOM_OPS[name];
}
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getParamValue = getParamValue;
exports.getTensor = getTensor;
exports.getTensorsForCurrentContenxt = getTensorsForCurrentContenxt;
exports.getNodeNameAndIndex = getNodeNameAndIndex;
exports.parseNodeName = parseNodeName;
exports.split = split;
exports.getPadding = getPadding;
exports.cloneTensor = cloneTensor;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getParamValue(paramName, node, tensorMap, context) {
  const inputParam = node.inputParams[paramName];

  if (inputParam && inputParam.inputIndexStart !== undefined) {
    const start = inputParam.inputIndexStart;
    const end = inputParam.inputIndexEnd === 0 ? undefined : inputParam.inputIndexEnd === undefined ? start + 1 : inputParam.inputIndexEnd;

    if (inputParam.type === 'tensor') {
      return getTensor(node.inputNames[inputParam.inputIndexStart], tensorMap, context);
    }

    if (inputParam.type === 'tensors') {
      const inputs = node.inputNames.slice(start, end);
      return inputs.map(name => getTensor(name, tensorMap, context));
    }

    const tensor = getTensor(node.inputNames.slice(start)[0], tensorMap, context);
    const data = tensor.dataSync();
    return inputParam.type === 'number' ? data[0] : _tfjsCore.util.toNestedArray(tensor.shape, data);
  }

  const attrParam = node.attrParams[paramName];
  return attrParam && attrParam.value;
}
/**
 * Retrieve the tensor based on input name by extracting the node name and
 * output index information.
 * @param name Node input name
 * @param tensorsMap Tensors map keyed by the node
 */


function getTensor(name, tensorsMap, context) {
  const [nodeName, index] = parseNodeName(name);
  const contextId = context.currentContextIds.find(contextId => {
    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];
  });
  return contextId !== undefined ? tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] : undefined;
}
/**
 * Retrieve the tensors based on input name for current context.
 * @param name Node input name
 * @param tensorsMap Tensors map keyed by the node
 */


function getTensorsForCurrentContenxt(name, tensorsMap, context) {
  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];
}
/**
 * Returns the node name and index from the Node input name.
 * @param inputName The input name of the node, in format of
 * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is
 * default to 0.
 */


function getNodeNameAndIndex(inputName, context) {
  const [nodeName, index] = parseNodeName(inputName);
  return [getNodeNameWithContextId(nodeName, context && context.currentContextId), index];
}

function getNodeNameWithContextId(name, contextId) {
  return !!contextId ? `${name}-${contextId}` : name;
}

function parseNodeName(name) {
  const parts = name.split(':');

  if (parts.length === 1) {
    return [name, 0];
  }

  const nodeName = parts[0];
  return [nodeName, Number(parts[parts.length - 1])];
}

function split(arr, size) {
  const res = [];

  for (let i = 0; i < arr.length; i += size) {
    res.push(arr.slice(i, i + size));
  }

  return res;
}

function getPadding(node, tensorMap, context) {
  let pad = getParamValue('pad', node, tensorMap, context);

  if (pad === 'explicit') {
    // This is 1d array, we need to convert it to 2d array
    pad = getParamValue('explicitPaddings', node, tensorMap, context);
    const explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];

    for (let i = 0; i < 4; i++) {
      explicitPadding[i][0] = pad[i * 2];
      explicitPadding[i][1] = pad[i * 2 + 1];
    }

    return explicitPadding;
  }

  return pad;
}
/**
 *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to
 *  avoid disposal. This is important for TensorArray and TensorList ops, since
 *  internally they use a tensor as the id for TensorArray and TensorList, and
 * to simplify lookup, they also use Tensor.id as the key to the internal map.
 * These id tensors have been marked as kept in the backend, we need avoid clone
 * them in order to create new Tensor.id.
 * @param tensor
 */


function cloneTensor(tensor) {
  return tensor.kept ? tensor : (0, _tfjsCore.clone)(tensor);
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Add',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'AddV2',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'AddN',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }]
}, {
  'tfOpName': 'BiasAdd',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sub',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'RealDiv',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Div',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'DivNoNan',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'FloorDiv',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Mul',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Maximum',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Minimum',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Pow',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'SquaredDifference',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Mod',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'FloorMod',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Abs',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Acos',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Asin',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Atan',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Atan2',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'y',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Ceil',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ClipByValue',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'clip_value_min',
    'name': 'clipValueMin',
    'type': 'number'
  }, {
    'tfName': 'clip_value_max',
    'name': 'clipValueMax',
    'type': 'number'
  }]
}, {
  'tfOpName': 'Complex',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'real',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'imag',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ComplexAbs',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Cos',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Cosh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Elu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Exp',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Floor',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Log',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Imag',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'outputType',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Neg',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Real',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'outputType',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Prelu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'alpha',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Relu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Relu6',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'clipValueMin',
    'name': 'clipValueMin',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'clipValueMax',
    'name': 'clipValueMax',
    'type': 'number',
    'defaultValue': 6
  }]
}, {
  'tfOpName': 'Selu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sigmoid',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sin',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sinh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sqrt',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Rsqrt',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Square',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Tan',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Tanh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sign',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Round',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Expm1',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Log1p',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Reciprocal',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Softplus',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Asinh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Acosh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Atanh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Erf',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Prod',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axes',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool',
    'notSupported': true
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LeakyRelu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'alpha',
    'name': 'alpha',
    'type': 'number',
    'defaultValue': 0.2
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'LoopCond',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'pred',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Switch',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'data',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'pred',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Merge',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }]
}, {
  'tfOpName': 'Enter',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'frame_name',
    'name': 'frameName',
    'type': 'string'
  }, {
    'tfName': 'is_constant',
    'name': 'isConstant',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Exit',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'NextIteration',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorArrayV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'size',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'element_shape',
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'tfName': 'dynamic_size',
    'name': 'dynamicSize',
    'type': 'bool'
  }, {
    'tfName': 'clear_after_read',
    'name': 'clearAfterRead',
    'type': 'bool'
  }, {
    'tfName': 'identical_element_shapes',
    'name': 'identicalElementShapes',
    'type': 'bool'
  }, {
    'tfName': 'tensor_array_name',
    'name': 'name',
    'type': 'string'
  }]
}, {
  'tfOpName': 'TensorArrayWriteV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'index',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorArrayReadV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'index',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorArrayGatherV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'element_shape',
    'name': 'elementShape',
    'type': 'shape'
  }]
}, {
  'tfOpName': 'TensorArrayScatterV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorArrayConcatV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'element_shape_except0',
    'name': 'elementShapeExcept0',
    'type': 'shape',
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorArraySplitV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'lengths',
    'type': 'number[]'
  }, {
    'start': 3,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorArraySizeV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'flowIn',
    'type': 'number'
  }]
}, {
  'tfOpName': 'TensorArrayCloseV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'StatelessIf',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'cond',
    'type': 'tensor'
  }, {
    'start': 1,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'then_branch',
    'name': 'thenBranch',
    'type': 'func'
  }, {
    'tfName': 'else_branch',
    'name': 'elseBranch',
    'type': 'func'
  }]
}, {
  'tfOpName': 'If',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'cond',
    'type': 'tensor'
  }, {
    'start': 1,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'then_branch',
    'name': 'thenBranch',
    'type': 'func'
  }, {
    'tfName': 'else_branch',
    'name': 'elseBranch',
    'type': 'func'
  }]
}, {
  'tfOpName': 'StatelessWhile',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'cond',
    'name': 'cond',
    'type': 'func'
  }, {
    'tfName': 'body',
    'name': 'body',
    'type': 'func'
  }]
}, {
  'tfOpName': 'While',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'cond',
    'name': 'cond',
    'type': 'func'
  }, {
    'tfName': 'body',
    'name': 'body',
    'type': 'func'
  }]
}, {
  'tfOpName': 'TensorListScatter',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListScatterV2',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'start': 3,
    'name': 'numElements',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListGather',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListGetItem',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'index',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListSetItem',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'index',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListReserve',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'start': 1,
    'name': 'numElements',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListFromTensor',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListStack',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }, {
    'tfName': 'num_elements',
    'name': 'numElements',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListSplit',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'start': 2,
    'name': 'lengths',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListConcat',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'element_shape',
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListPopBack',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListPushBack',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'AvgPool',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'MaxPool',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'MaxPoolWithArgmax',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'include_batch_in_index',
    'name': 'includeBatchInIndex',
    'type': 'bool'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'AvgPool3D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'MaxPool3D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Conv1D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'stride',
    'name': 'stride',
    'type': 'number'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NWC'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'dilation',
    'name': 'dilation',
    'type': 'number',
    'defaultValue': 1
  }]
}, {
  'tfOpName': 'Conv2D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'useCudnnOnGpu',
    'name': 'useCudnnOnGpu',
    'type': 'bool'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]'
  }]
}, {
  'tfOpName': '_FusedConv2D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }, {
    'start': 2,
    end: 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'num_args',
    'name': 'numArgs',
    'type': 'number'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'use_cudnn_on_gpu',
    'name': 'useCudnnOnGpu',
    'type': 'bool',
    'defaultValue': true
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]',
    'defaultValue': [1, 1, 1, 1]
  }, {
    'tfName': 'fused_ops',
    'name': 'fusedOps',
    'type': 'string[]',
    'defaultValue': []
  }, {
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.0001
  }]
}, {
  'tfOpName': 'Conv2DBackpropInput',
  'category': 'convolution',
  'inputs': [{
    'start': 2,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }, {
    'start': 0,
    'name': 'outputShape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }]
}, {
  'tfOpName': 'DepthwiseConv2d',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'input',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'DepthwiseConv2dNative',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'input',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'FusedDepthwiseConv2dNative',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }, {
    'start': 2,
    end: 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'num_args',
    'name': 'numArgs',
    'type': 'number'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]',
    'defaultValue': [1, 1, 1, 1]
  }, {
    'tfName': 'fused_ops',
    'name': 'fusedOps',
    'type': 'string[]',
    'defaultValue': []
  }]
}, {
  'tfOpName': 'Conv3D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'Dilation2D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'rates',
    'name': 'dilations',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Fill',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }, {
    'start': 1,
    'name': 'value',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'LinSpace',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'start',
    'type': 'number'
  }, {
    'start': 1,
    'name': 'stop',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'num',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'OneHot',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'depth',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'onValue',
    'type': 'number',
    'defaultValue': 1
  }, {
    'start': 3,
    'name': 'offValue',
    'type': 'number',
    'defaultValue': 0
  }],
  'attrs': [{
    'tfName': 'axis',
    'name': 'axis',
    'type': 'number',
    'notSupported': true
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Ones',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'OnesLike',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'RandomUniform',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'minval',
    'name': 'minval',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'maxval',
    'name': 'maxval',
    'type': 'number',
    'defaultValue': 1
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'seed',
    'name': 'seed',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'seed2',
    'name': 'seed2',
    'type': 'number',
    'defaultValue': 0,
    'notSupported': true
  }, {
    'tfName': 'T',
    'name': 'T',
    'type': 'number',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Range',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'start',
    'type': 'number'
  }, {
    'start': 1,
    'name': 'stop',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'step',
    'type': 'number',
    'defaultValue': 0
  }],
  'attrs': [{
    'tfName': 'Tidx',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TruncatedNormal',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'means',
    'name': 'mean',
    'type': 'number',
    'defaultValue': 0.0
  }, {
    'tfName': 'stddev',
    'name': 'stdDev',
    'type': 'number',
    'defaultValue': 1.0
  }, {
    'tfName': 'seed',
    'name': 'seed',
    'type': 'number'
  }, {
    'tfName': 'seed2',
    'name': 'seed2',
    'type': 'number',
    'defaultValue': 0,
    'notSupported': true
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'T',
    'name': 'T',
    'type': 'number',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Zeros',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'ZerosLike',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'Multinomial',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'logits',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'numSamples',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'seed',
    'name': 'seed',
    'type': 'number'
  }, {
    'tfName': 'seed2',
    'name': 'seed2',
    'type': 'number'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'output_dtype',
    'name': 'output_dtype',
    'type': 'dtype'
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'NonMaxSuppressionV2',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scores',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'maxOutputSize',
    'type': 'number'
  }, {
    'start': 3,
    'name': 'iouThreshold',
    'type': 'number'
  }]
}, {
  'tfOpName': 'NonMaxSuppressionV3',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scores',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'maxOutputSize',
    'type': 'number'
  }, {
    'start': 3,
    'name': 'iouThreshold',
    'type': 'number'
  }, {
    'start': 4,
    'name': 'scoreThreshold',
    'type': 'number'
  }]
}, {
  'tfOpName': 'NonMaxSuppressionV4',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scores',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'maxOutputSize',
    'type': 'number'
  }, {
    'start': 3,
    'name': 'iouThreshold',
    'type': 'number'
  }, {
    'start': 4,
    'name': 'scoreThreshold',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'T_threshold',
    'name': 'threshold',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'pad_to_max_output_size',
    'name': 'padToMaxOutputSize',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'NonMaxSuppressionV5',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scores',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'maxOutputSize',
    'type': 'number'
  }, {
    'start': 3,
    'name': 'iouThreshold',
    'type': 'number'
  }, {
    'start': 4,
    'name': 'scoreThreshold',
    'type': 'number'
  }, {
    'start': 5,
    'name': 'softNmsSigma',
    'type': 'number'
  }]
}, {
  'tfOpName': 'Where',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'condition',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ListDiff',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'y',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'TopKV2',
  'category': 'evaluation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'k',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'sorted',
    'name': 'sorted',
    'type': 'bool'
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'PlaceholderWithDefault',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'default',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'shape',
    'name': 'shape',
    'type': 'shape'
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'Placeholder',
  'category': 'graph',
  'attrs': [{
    'tfName': 'shape',
    'name': 'shape',
    'type': 'shape'
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'Const',
  'category': 'graph'
}, {
  'tfOpName': 'Identity',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'IdentityN',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'x',
    'type': 'tensors'
  }]
}, {
  'tfOpName': 'Snapshot',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Rank',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Size',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Shape',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'ShapeN',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'x',
    'type': 'tensors'
  }]
}, {
  'tfOpName': 'Print',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'data',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'message',
    'name': 'message',
    'type': 'string'
  }, {
    'tfName': 'first_n',
    'name': 'firstN',
    'type': 'number',
    'notSupported': true
  }, {
    'tfName': 'summarize',
    'name': 'summarize',
    'type': 'number',
    'defaultValue': 3
  }]
}, {
  'tfOpName': 'NoOp',
  'category': 'graph',
  'inputs': []
}, {
  'tfOpName': 'StopGradient',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'FakeQuantWithMinMaxVars',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'min',
    'name': 'min',
    'type': 'number'
  }, {
    'tfName': 'max',
    'name': 'max',
    'type': 'number'
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'ResizeBilinear',
  'category': 'image',
  'inputs': [{
    'start': 0,
    'name': 'images',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'size',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'align_corners',
    'name': 'alignCorners',
    'type': 'bool'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ResizeNearestNeighbor',
  'category': 'image',
  'inputs': [{
    'start': 0,
    'name': 'images',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'size',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'align_corners',
    'name': 'alignCorners',
    'type': 'bool'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'CropAndResize',
  'category': 'image',
  'inputs': [{
    'start': 0,
    'name': 'image',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'boxInd',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'cropSize',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'method',
    'name': 'method',
    'type': 'string'
  }, {
    'tfName': 'extrapolation_value',
    'name': 'extrapolationValue',
    'type': 'number'
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Equal',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'NotEqual',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Greater',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'GreaterEqual',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Less',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LessEqual',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LogicalAnd',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LogicalNot',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LogicalOr',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Select',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'condition',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'SelectV2',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'condition',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': '_FusedMatMul',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }, {
    'start': 2,
    end: 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'num_args',
    'name': 'numArgs',
    'type': 'number'
  }, {
    'tfName': 'fused_ops',
    'name': 'fusedOps',
    'type': 'string[]',
    'defaultValue': []
  }, {
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.0001
  }, {
    'tfName': 'transpose_a',
    'name': 'transposeA',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'transpose_b',
    'name': 'transposeB',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'MatMul',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'transpose_a',
    'name': 'transposeA',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'transpose_b',
    'name': 'transposeB',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'BatchMatMul',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'adj_x',
    'name': 'transposeA',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'adj_y',
    'name': 'transposeB',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'BatchMatMulV2',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'adj_x',
    'name': 'transposeA',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'adj_y',
    'name': 'transposeB',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Transpose',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'perm',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'FusedBatchNorm',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scale',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'offset',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'mean',
    'type': 'tensor'
  }, {
    'start': 4,
    'name': 'variance',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.001
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }]
}, {
  'tfOpName': 'FusedBatchNormV2',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scale',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'offset',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'mean',
    'type': 'tensor'
  }, {
    'start': 4,
    'name': 'variance',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.001
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }]
}, {
  'tfOpName': 'FusedBatchNormV3',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scale',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'offset',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'mean',
    'type': 'tensor'
  }, {
    'start': 4,
    'name': 'variance',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.001
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LRN',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'depth_radius',
    'name': 'radius',
    'type': 'number',
    'defaultValue': 5
  }, {
    'tfName': 'bias',
    'name': 'bias',
    'type': 'number',
    'defaultValue': 1.0
  }, {
    'tfName': 'alpha',
    'name': 'alpha',
    'type': 'number',
    'defaultValue': 1.0
  }, {
    'tfName': 'beta',
    'name': 'beta',
    'type': 'number',
    'defaultValue': 0.5
  }]
}, {
  'tfOpName': 'Softmax',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'LogSoftmax',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'SparseToDense',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'sparseIndices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'outputShape',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'sparseValues',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'defaultValue',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'validate_indices',
    'name': 'validateIndices',
    'type': 'bool',
    'defaultValue': true,
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Max',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Mean',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Min',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Sum',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'All',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Any',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'ArgMax',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }]
}, {
  'tfOpName': 'ArgMin',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }]
}, {
  'tfOpName': 'Prod',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Cumsum',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'exclusive',
    'name': 'exclusive',
    'type': 'bool'
  }, {
    'tfName': 'reverse',
    'name': 'reverse',
    'type': 'bool'
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'ConcatV2',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'end': -1,
    'name': 'tensors',
    'type': 'tensors'
  }, {
    'start': -1,
    'name': 'axis',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'N',
    'name': 'n',
    'type': 'number',
    'defaultValue': 2
  }]
}, {
  'tfOpName': 'Concat',
  'category': 'slice_join',
  'inputs': [{
    'start': 1,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }, {
    'start': 0,
    'name': 'axis',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'N',
    'name': 'n',
    'type': 'number',
    'defaultValue': 2
  }]
}, {
  'tfOpName': 'GatherV2',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'Gather',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'axis',
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'validate_indices',
    'name': 'validateIndices',
    'type': 'bool',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Reverse',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'dims',
    'type': 'bool',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ReverseV2',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'Slice',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'begin',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'size',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'StridedSlice',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'begin',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'end',
    'type': 'number[]'
  }, {
    'start': 3,
    'name': 'strides',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'begin_mask',
    'name': 'beginMask',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'end_mask',
    'name': 'endMask',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'new_axis_mask',
    'name': 'newAxisMask',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'ellipsis_mask',
    'name': 'ellipsisMask',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'shrink_axis_mask',
    'name': 'shrinkAxisMask',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'Pack',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'axis',
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'Unpack',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'axis',
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'num',
    'name': 'num',
    'type': 'number',
    'defaultValue': 0,
    'notSupported': true
  }]
}, {
  'tfOpName': 'Tile',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'reps',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'Split',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }, {
    'start': 1,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'num_split',
    'name': 'numOrSizeSplits',
    'type': 'number',
    'defaultValue': 1
  }]
}, {
  'tfOpName': 'SplitV',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'numOrSizeSplits',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'ScatterNd',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'values',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'shape',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'GatherNd',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'SparseToDense',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'sparseIndices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'outputShape',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'sparseValues',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'defaultValue',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'validate_indices',
    'name': 'validateIndices',
    'type': 'bool',
    'defaultValue': false,
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'FFT',
  'category': 'spectral',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'IFFT',
  'category': 'spectral',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'RFFT',
  'category': 'spectral',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'fft_length',
    'type': 'number',
    'notSupported': true
  }]
}, {
  'tfOpName': 'IRFFT',
  'category': 'spectral',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'fft_length',
    'type': 'number',
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Cast',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'SrcT',
    'name': 'sdtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'DstT',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'ExpandDims',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }]
}, {
  'tfOpName': 'Pad',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'padding',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'constant_value',
    'name': 'constantValue',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'PadV2',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'padding',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'constantValue',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'Reshape',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'shape',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'Squeeze',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'axis',
    'tfDeprecatedName': 'squeeze_dims',
    'name': 'axis',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'SpaceToBatchND',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'blockShape',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'paddings',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'BatchToSpaceND',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'blockShape',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'crops',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'DepthToSpace',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'block_size',
    'name': 'blockSize',
    'type': 'number'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string'
  }]
}, {
  'tfOpName': 'BroadcastTo',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': []
}];
exports.json = json;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("buffer").Buffer;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeBase64 = decodeBase64;
exports.parseStringParam = parseStringParam;
exports.getStringParam = getStringParam;
exports.getBoolParam = getBoolParam;
exports.getNumberParam = getNumberParam;
exports.parseDtypeParam = parseDtypeParam;
exports.getFuncParam = getFuncParam;
exports.getDtypeParam = getDtypeParam;
exports.getDtypeArrayParam = getDtypeArrayParam;
exports.parseTensorShapeParam = parseTensorShapeParam;
exports.getTensorShapeParam = getTensorShapeParam;
exports.getNumericArrayParam = getNumericArrayParam;
exports.getStringArrayParam = getStringArrayParam;
exports.getTensorShapeArrayParam = getTensorShapeArrayParam;
exports.getBoolArrayParam = getBoolArrayParam;
exports.OperationMapper = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var tensorflow = _interopRequireWildcard(require("../data/compiled_api"));

var _register = require("./custom_op/register");

var _utils = require("./executors/utils");

var arithmetic = _interopRequireWildcard(require("./op_list/arithmetic"));

var basicMath = _interopRequireWildcard(require("./op_list/basic_math"));

var control = _interopRequireWildcard(require("./op_list/control"));

var convolution = _interopRequireWildcard(require("./op_list/convolution"));

var creation = _interopRequireWildcard(require("./op_list/creation"));

var dynamic = _interopRequireWildcard(require("./op_list/dynamic"));

var evaluation = _interopRequireWildcard(require("./op_list/evaluation"));

var graph = _interopRequireWildcard(require("./op_list/graph"));

var image = _interopRequireWildcard(require("./op_list/image"));

var logical = _interopRequireWildcard(require("./op_list/logical"));

var matrices = _interopRequireWildcard(require("./op_list/matrices"));

var normalization = _interopRequireWildcard(require("./op_list/normalization"));

var reduction = _interopRequireWildcard(require("./op_list/reduction"));

var sliceJoin = _interopRequireWildcard(require("./op_list/slice_join"));

var spectral = _interopRequireWildcard(require("./op_list/spectral"));

var transformation = _interopRequireWildcard(require("./op_list/transformation"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OperationMapper {
  // Singleton instance for the mapper
  static get Instance() {
    return this._instance || (this._instance = new this());
  } // Loads the op mapping from the JSON file.


  constructor() {
    const ops = [arithmetic, basicMath, control, convolution, creation, dynamic, evaluation, logical, image, graph, matrices, normalization, reduction, sliceJoin, spectral, transformation];
    const mappersJson = [].concat(...ops.map(op => op.json));
    this.opMappers = mappersJson.reduce((map, mapper) => {
      map[mapper.tfOpName] = mapper;
      return map;
    }, {});
  } // Converts the model from Tensorflow GraphDef to local representation for
  // TensorFlow.js API


  transformGraph(graph, signature = {}) {
    const tfNodes = graph.node;
    const placeholders = [];
    const weights = [];
    const nodes = tfNodes.reduce((map, node) => {
      map[node.name] = this.mapNode(node);

      if (node.op.startsWith('Placeholder')) {
        placeholders.push(map[node.name]);
      }

      if (node.op === 'Const') {
        weights.push(map[node.name]);
      }

      return map;
    }, {});
    let inputs = [];
    const outputs = [];
    let inputNodeNameToKey = {};
    let outputNodeNameToKey = {};

    if (signature != null) {
      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);
      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);
    }

    const allNodes = Object.keys(nodes);
    allNodes.forEach(key => {
      const node = nodes[key];
      node.inputNames.forEach(name => {
        const [nodeName] = (0, _utils.getNodeNameAndIndex)(name);
        node.inputs.push(nodes[nodeName]);
        nodes[nodeName].children.push(node);
      });
    }); // if signature has not outputs set, add any node that does not have
    // outputs.

    if (Object.keys(outputNodeNameToKey).length === 0) {
      allNodes.forEach(key => {
        const node = nodes[key];

        if (node.children.length === 0) {
          outputs.push(node);
        }
      });
    } else {
      Object.keys(outputNodeNameToKey).forEach(name => {
        const [nodeName] = (0, _utils.getNodeNameAndIndex)(name);
        const node = nodes[nodeName];

        if (node != null) {
          node.signatureKey = outputNodeNameToKey[name];
          outputs.push(node);
        }
      });
    }

    if (Object.keys(inputNodeNameToKey).length > 0) {
      Object.keys(inputNodeNameToKey).forEach(name => {
        const [nodeName] = (0, _utils.getNodeNameAndIndex)(name);
        const node = nodes[nodeName];

        if (node) {
          node.signatureKey = inputNodeNameToKey[name];
          inputs.push(node);
        }
      });
    } else {
      inputs = placeholders;
    }

    let functions = {};

    if (graph.library != null && graph.library.function != null) {
      functions = graph.library.function.reduce((functions, func) => {
        functions[func.signature.name] = this.mapFunction(func);
        return functions;
      }, {});
    }

    return {
      nodes,
      inputs,
      outputs,
      weights,
      placeholders,
      signature,
      functions
    };
  }

  mapSignatureEntries(entries) {
    return Object.keys(entries || {}).reduce((prev, curr) => {
      prev[entries[curr].name] = curr;
      return prev;
    }, {});
  }

  mapNode(node) {
    // Unsupported ops will cause an error at run-time (not parse time), since
    // they may not be used by the actual execution subgraph.
    const mapper = (0, _register.getRegisteredOp)(node.op) || this.opMappers[node.op] || {};

    if (node.attr == null) {
      node.attr = {};
    }

    const newNode = {
      name: node.name,
      op: node.op,
      category: mapper.category,
      inputNames: (node.input || []).map(input => input.startsWith('^') ? input.substr(1) : input),
      inputs: [],
      children: [],
      inputParams: {},
      attrParams: {},
      rawAttrs: node.attr
    };

    if (mapper.inputs != null) {
      newNode.inputParams = mapper.inputs.reduce((map, param) => {
        map[param.name] = {
          type: param.type,
          inputIndexStart: param.start,
          inputIndexEnd: param.end
        };
        return map;
      }, {});
    }

    if (mapper.attrs != null) {
      newNode.attrParams = mapper.attrs.reduce((map, param) => {
        const type = param.type;
        let value = undefined;

        switch (param.type) {
          case 'string':
            value = getStringParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'string[]':
            value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'number':
            value = getNumberParam(node.attr, param.tfName, param.defaultValue || 0);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'number[]':
            value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'bool':
            value = getBoolParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'bool[]':
            value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'shape':
            value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'shape[]':
            value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'dtype':
            value = getDtypeParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'dtype[]':
            value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'func':
            value = getFuncParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'tensor':
          case 'tensors':
            break;

          default:
            throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);
        }

        map[param.name] = {
          value,
          type
        };
        return map;
      }, {});
    }

    return newNode;
  } // map the TFunctionDef to TFJS graph object


  mapFunction(functionDef) {
    const tfNodes = functionDef.nodeDef;
    const placeholders = [];
    const weights = [];
    let nodes = {};

    if (tfNodes != null) {
      nodes = tfNodes.reduce((map, node) => {
        map[node.name] = this.mapNode(node);

        if (node.op === 'Const') {
          weights.push(map[node.name]);
        }

        return map;
      }, {});
    }

    const inputs = [];
    const outputs = [];
    functionDef.signature.inputArg.forEach(arg => {
      const [nodeName] = (0, _utils.getNodeNameAndIndex)(arg.name);
      const node = {
        name: nodeName,
        op: 'Placeholder',
        inputs: [],
        inputNames: [],
        category: 'graph',
        inputParams: {},
        attrParams: {
          dtype: {
            value: parseDtypeParam(arg.type),
            type: 'dtype'
          }
        },
        children: []
      };
      node.signatureKey = arg.name;
      inputs.push(node);
      nodes[nodeName] = node;
    });
    const allNodes = Object.keys(nodes);
    allNodes.forEach(key => {
      const node = nodes[key];
      node.inputNames.forEach(name => {
        const [nodeName] = (0, _utils.getNodeNameAndIndex)(name);
        node.inputs.push(nodes[nodeName]);
        nodes[nodeName].children.push(node);
      });
    });
    const returnNodeMap = functionDef.ret;
    functionDef.signature.outputArg.forEach(output => {
      const [nodeName, index] = (0, _utils.getNodeNameAndIndex)(returnNodeMap[output.name]);
      const node = nodes[nodeName];

      if (node != null) {
        node.defaultOutput = index;
        outputs.push(node);
      }
    });
    const signature = this.mapArgsToSignature(functionDef);
    return {
      nodes,
      inputs,
      outputs,
      weights,
      placeholders,
      signature
    };
  }

  mapArgsToSignature(functionDef) {
    return {
      methodName: functionDef.signature.name,
      inputs: functionDef.signature.inputArg.reduce((map, arg) => {
        map[arg.name] = this.mapArgToTensorInfo(arg);
        return map;
      }, {}),
      outputs: functionDef.signature.outputArg.reduce((map, arg) => {
        map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);
        return map;
      }, {})
    };
  }

  mapArgToTensorInfo(arg, nameMap) {
    let name = arg.name;

    if (nameMap != null) {
      name = nameMap[name];
    }

    return {
      name,
      dtype: arg.type
    };
  }

}

exports.OperationMapper = OperationMapper;

function decodeBase64(text) {
  const global = (0, _tfjsCore.env)().global;

  if (typeof global.atob !== 'undefined') {
    return global.atob(text);
  } else if (typeof Buffer !== 'undefined') {
    return new Buffer(text, 'base64').toString();
  } else {
    throw new Error('Unable to decode base64 in this environment. ' + 'Missing built-in atob() or Buffer()');
  }
}

function parseStringParam(s, keepCase) {
  const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);
  return keepCase ? value : value.toLowerCase();
}

function getStringParam(attrs, name, def, keepCase = false) {
  const param = attrs[name];

  if (param != null) {
    return parseStringParam(param.s, keepCase);
  }

  return def;
}

function getBoolParam(attrs, name, def) {
  const param = attrs[name];
  return param ? param.b : def;
}

function getNumberParam(attrs, name, def) {
  const param = attrs[name] || {};
  const value = param['i'] != null ? param['i'] : param['f'] != null ? param['f'] : def;
  return typeof value === 'number' ? value : parseInt(value, 10);
}

function parseDtypeParam(value) {
  if (typeof value === 'string') {
    // tslint:disable-next-line:no-any
    value = tensorflow.DataType[value];
  }

  switch (value) {
    case tensorflow.DataType.DT_FLOAT:
      return 'float32';

    case tensorflow.DataType.DT_INT32:
    case tensorflow.DataType.DT_INT64:
    case tensorflow.DataType.DT_INT8:
    case tensorflow.DataType.DT_UINT8:
      return 'int32';

    case tensorflow.DataType.DT_BOOL:
      return 'bool';

    case tensorflow.DataType.DT_DOUBLE:
      return 'float32';

    case tensorflow.DataType.DT_STRING:
      return 'string';

    default:
      // Unknown dtype error will happen at runtime (instead of parse time),
      // since these nodes might not be used by the actual subgraph execution.
      return null;
  }
}

function getFuncParam(attrs, name, def) {
  const param = attrs[name];

  if (param && param.func) {
    return param.func.name;
  }

  return def;
}

function getDtypeParam(attrs, name, def) {
  const param = attrs[name];

  if (param && param.type) {
    return parseDtypeParam(param.type);
  }

  return def;
}

function getDtypeArrayParam(attrs, name, def) {
  const param = attrs[name];

  if (param && param.list && param.list.type) {
    return param.list.type.map(v => parseDtypeParam(v));
  }

  return def;
}

function parseTensorShapeParam(shape) {
  if (shape.unknownRank) {
    return undefined;
  }

  if (shape.dim != null) {
    return shape.dim.map(dim => typeof dim.size === 'number' ? dim.size : parseInt(dim.size, 10));
  }

  return [];
}

function getTensorShapeParam(attrs, name, def) {
  const param = attrs[name];

  if (param && param.shape) {
    return parseTensorShapeParam(param.shape);
  }

  return def;
}

function getNumericArrayParam(attrs, name, def) {
  const param = attrs[name];

  if (param) {
    return ((param.list.f && param.list.f.length ? param.list.f : param.list.i) || []).map(v => typeof v === 'number' ? v : parseInt(v, 10));
  }

  return def;
}

function getStringArrayParam(attrs, name, def, keepCase = false) {
  const param = attrs[name];

  if (param && param.list && param.list.s) {
    return param.list.s.map(v => {
      return parseStringParam(v, keepCase);
    });
  }

  return def;
}

function getTensorShapeArrayParam(attrs, name, def) {
  const param = attrs[name];

  if (param && param.list && param.list.shape) {
    return param.list.shape.map(v => {
      return parseTensorShapeParam(v);
    });
  }

  return def;
}

function getBoolArrayParam(attrs, name, def) {
  const param = attrs[name];

  if (param && param.list && param.list.b) {
    return param.list.b;
  }

  return def;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../data/compiled_api":"node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js","./custom_op/register":"node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js","./executors/utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js","./op_list/arithmetic":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js","./op_list/basic_math":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js","./op_list/control":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js","./op_list/convolution":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js","./op_list/creation":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js","./op_list/dynamic":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js","./op_list/evaluation":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js","./op_list/graph":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js","./op_list/image":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js","./op_list/logical":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js","./op_list/matrices":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js","./op_list/normalization":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js","./op_list/reduction":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js","./op_list/slice_join":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js","./op_list/spectral":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js","./op_list/transformation":"node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js","buffer":"node_modules/buffer/index.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodeValueImpl = void 0;

var _utils = require("../executors/utils");

var _operation_mapper = require("../operation_mapper");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Helper class for lookup inputs and params for nodes in the model graph.
 */
class NodeValueImpl {
  constructor(node, tensorMap, context) {
    this.node = node;
    this.tensorMap = tensorMap;
    this.context = context;
    this.inputs = [];
    this.attrs = {};
    this.inputs = node.inputNames.map(name => this.getInput(name));

    if (node.rawAttrs != null) {
      this.attrs = Object.keys(node.rawAttrs).reduce((attrs, key) => {
        attrs[key] = this.getAttr(key);
        return attrs;
      }, {});
    }
  }
  /**
   * Return the value of the attribute or input param.
   * @param name String: name of attribute or input param.
   */


  getInput(name) {
    return (0, _utils.getTensor)(name, this.tensorMap, this.context);
  }
  /**
   * Return the value of the attribute or input param.
   * @param name String: name of attribute or input param.
   */


  getAttr(name, defaultValue) {
    const value = this.node.rawAttrs[name];

    if (value.tensor != null) {
      return (0, _utils.getTensor)(name, this.tensorMap, this.context);
    }

    if (value.i != null || value.f != null) {
      return (0, _operation_mapper.getNumberParam)(this.node.rawAttrs, name, defaultValue);
    }

    if (value.s != null) {
      return (0, _operation_mapper.getStringParam)(this.node.rawAttrs, name, defaultValue);
    }

    if (value.b != null) {
      return (0, _operation_mapper.getBoolParam)(this.node.rawAttrs, name, defaultValue);
    }

    if (value.shape != null) {
      return (0, _operation_mapper.getTensorShapeParam)(this.node.rawAttrs, name, defaultValue);
    }

    if (value.type != null) {
      return (0, _operation_mapper.getDtypeParam)(this.node.rawAttrs, name, defaultValue);
    }

    if (value.list != null) {
      if (value.list.i != null || value.list.f != null) {
        return (0, _operation_mapper.getNumericArrayParam)(this.node.rawAttrs, name, defaultValue);
      }

      if (value.list.s != null) {
        return (0, _operation_mapper.getStringArrayParam)(this.node.rawAttrs, name, defaultValue);
      }

      if (value.list.shape != null) {
        return (0, _operation_mapper.getTensorShapeArrayParam)(this.node.rawAttrs, name, defaultValue);
      }

      if (value.list.b != null) {
        return (0, _operation_mapper.getBoolArrayParam)(this.node.rawAttrs, name, defaultValue);
      }

      if (value.list.type != null) {
        return (0, _operation_mapper.getDtypeArrayParam)(this.node.rawAttrs, name, defaultValue);
      }
    }

    return defaultValue;
  }

}

exports.NodeValueImpl = NodeValueImpl;
},{"../executors/utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js","../operation_mapper":"node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js"}],"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ops = require("./ops");

Object.keys(_ops).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ops[key];
    }
  });
});
},{"./ops":"node_modules/@tensorflow/tfjs-core/dist/ops/ops.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'BiasAdd':
    case 'AddV2':
    case 'Add':
      {
        return [tfOps.add((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'AddN':
      {
        return [tfOps.addN((0, _utils.getParamValue)('tensors', node, tensorMap, context))];
      }

    case 'FloorMod':
    case 'Mod':
      return [tfOps.mod((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];

    case 'Mul':
      return [tfOps.mul((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];

    case 'RealDiv':
    case 'Div':
      {
        return [tfOps.div((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'DivNoNan':
      {
        return [tfOps.divNoNan((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'FloorDiv':
      {
        return [tfOps.floorDiv((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Sub':
      {
        return [tfOps.sub((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Minimum':
      {
        return [tfOps.minimum((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Maximum':
      {
        return [tfOps.maximum((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Pow':
      {
        return [tfOps.pow((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'SquaredDifference':
      {
        return [tfOps.squaredDifference((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'arithmetic';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Abs':
    case 'ComplexAbs':
      return [tfOps.abs((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Acos':
      return [tfOps.acos((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Acosh':
      return [tfOps.acosh((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Asin':
      return [tfOps.asin((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Asinh':
      return [tfOps.asinh((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Atan':
      return [tfOps.atan((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Atan2':
      return [tfOps.atan2((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('y', node, tensorMap, context))];

    case 'Atanh':
      return [tfOps.atanh((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Ceil':
      return [tfOps.ceil((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Complex':
      return [tfOps.complex((0, _utils.getParamValue)('real', node, tensorMap, context), (0, _utils.getParamValue)('imag', node, tensorMap, context))];

    case 'Cos':
      return [tfOps.cos((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Cosh':
      return [tfOps.cosh((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Elu':
      return [tfOps.elu((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Erf':
      return [tfOps.erf((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Exp':
      return [tfOps.exp((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Expm1':
      {
        return [tfOps.expm1((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Floor':
      return [tfOps.floor((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Log':
      return [tfOps.log((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Log1p':
      {
        return [tfOps.log1p((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Imag':
      return [tfOps.imag((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Neg':
      return [tfOps.neg((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Reciprocal':
      {
        return [tfOps.reciprocal((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Real':
      return [tfOps.real((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Relu':
      return [tfOps.relu((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Round':
      {
        return [tfOps.round((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Selu':
      return [tfOps.selu((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Sigmoid':
      return [tfOps.sigmoid((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Sin':
      return [tfOps.sin((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Sign':
      {
        return [tfOps.sign((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Sinh':
      {
        return [tfOps.sinh((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Softplus':
      {
        return [tfOps.softplus((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Sqrt':
      {
        return [tfOps.sqrt((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Square':
      {
        return [tfOps.square((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Tanh':
      {
        return [tfOps.tanh((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Tan':
      return [tfOps.tan((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Relu6':
    case 'ClipByValue':
      return [tfOps.clipByValue((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('clipValueMin', node, tensorMap, context), (0, _utils.getParamValue)('clipValueMax', node, tensorMap, context))];

    case 'Rsqrt':
      return [tfOps.rsqrt((0, _utils.getTensor)(node.inputNames[0], tensorMap, context))];

    case 'Prod':
      return [tfOps.prod((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('axes', node, tensorMap, context))];

    case 'LeakyRelu':
      return [tfOps.leakyRelu((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('alpha', node, tensorMap, context))];

    case 'Prelu':
      return [tfOps.prelu((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('alpha', node, tensorMap, context))];

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'basic_math';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertShapesMatchAllowUndefinedSize = assertShapesMatchAllowUndefinedSize;
exports.shapesEqualAllowUndefinedSize = shapesEqualAllowUndefinedSize;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * This differs from util.assertShapesMatch in that it allows values of
 * negative one, an undefined size of a dimensinon, in a shape to match
 * anything.
 */
function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {
  _tfjsCore.util.assert(shapesEqualAllowUndefinedSize(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
}

function shapesEqualAllowUndefinedSize(n1, n2) {
  if (n1.length !== n2.length) {
    return false;
  }

  for (let i = 0; i < n1.length; i++) {
    if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {
      return false;
    }
  }

  return true;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TensorArray = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tensor_utils = require("./tensor_utils");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * The TensorArray object keeps an array of Tensors.  It
 * allows reading from the array and writing to the array.
 */
class TensorArray {
  constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {
    this.name = name;
    this.dtype = dtype;
    this.maxSize = maxSize;
    this.elementShape = elementShape;
    this.identicalElementShapes = identicalElementShapes;
    this.dynamicSize = dynamicSize;
    this.clearAfterRead = clearAfterRead;
    this.tensors = [];
    this.closed_ = false;
    this.idTensor = (0, _tfjsCore.scalar)(0);
    (0, _tfjsCore.keep)(this.idTensor);
  }

  get id() {
    return this.idTensor.id;
  }

  get closed() {
    return this.closed_;
  }
  /**
   * Dispose the tensors and idTensor and mark the TensoryArray as closed.
   */


  clearAndClose(keepIds) {
    this.tensors.forEach(tensor => {
      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {
        tensor.tensor.dispose();
      }
    });
    this.tensors = [];
    this.closed_ = true;
    this.idTensor.dispose();
  }

  size() {
    return this.tensors.length;
  }
  /**
   * Read the value at location index in the TensorArray.
   * @param index Number the index to read from.
   */


  read(index) {
    if (this.closed_) {
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    }

    if (index < 0 || index >= this.size()) {
      throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);
    }

    const tensorWithState = this.tensors[index];

    if (tensorWithState.cleared) {
      throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` + `(perhaps try setting clear_after_read = false?).`);
    }

    if (this.clearAfterRead) {
      tensorWithState.cleared = true;
    }

    tensorWithState.read = true;
    return tensorWithState.tensor;
  }
  /**
   * Helper method to read multiple tensors from the specified indices.
   */


  readMany(indices) {
    return indices.map(index => this.read(index));
  }
  /**
   * Write value into the index of the TensorArray.
   * @param index number the index to write to.
   * @param tensor
   */


  write(index, tensor) {
    if (this.closed_) {
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    }

    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {
      throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);
    }

    const t = this.tensors[index] || {};

    if (tensor.dtype !== this.dtype) {
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},
          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);
    } // Set the shape for the first time write to unknow shape tensor array


    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0)) {
      this.elementShape = tensor.shape;
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);

    if (t.read) {
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);
    }

    if (t.written) {
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);
    }

    t.tensor = tensor;
    (0, _tfjsCore.keep)(tensor);
    t.written = true;
    this.tensors[index] = t;
  }
  /**
   * Helper method to write multiple tensors to the specified indices.
   */


  writeMany(indices, tensors) {
    if (indices.length !== tensors.length) {
      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` + `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);
    }

    indices.forEach((i, index) => this.write(i, tensors[index]));
  }
  /**
   * Return selected values in the TensorArray as a packed Tensor. All of
   * selected values must have been written and their shapes must all match.
   * @param [indices] number[] Optional. Taking values in [0, max_value). If the
   *    TensorArray is not dynamic, max_value=size(). If not specified returns
   *    all tensors in the original order.
   * @param [dtype]
   */


  gather(indices, dtype) {
    if (!!dtype && dtype !== this.dtype) {
      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);
    }

    if (!indices) {
      indices = [];

      for (let i = 0; i < this.size(); i++) {
        indices.push(i);
      }
    } else {
      indices = indices.slice(0, this.size());
    }

    if (indices.length === 0) {
      return (0, _tfjsCore.tensor)([], [0].concat(this.elementShape));
    } // Read all the PersistentTensors into a vector to keep track of
    // their memory.


    const tensors = this.readMany(indices);
    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');
    return (0, _tfjsCore.stack)(tensors, 0);
  }
  /**
   * Return the values in the TensorArray as a concatenated Tensor.
   */


  concat(dtype) {
    if (!!dtype && dtype !== this.dtype) {
      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);
    }

    if (this.size() === 0) {
      return (0, _tfjsCore.tensor)([], [0].concat(this.elementShape));
    }

    const indices = [];

    for (let i = 0; i < this.size(); i++) {
      indices.push(i);
    } // Collect all the tensors from the tensors array.


    const tensors = this.readMany(indices);
    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);
    return (0, _tfjsCore.concat)(tensors, 0);
  }
  /**
   * Scatter the values of a Tensor in specific indices of a TensorArray.
   * @param indices nummber[] values in [0, max_value). If the
   *    TensorArray is not dynamic, max_value=size().
   * @param tensor Tensor input tensor.
   */


  scatter(indices, tensor) {
    if (tensor.dtype !== this.dtype) {
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);
    }

    if (indices.length !== tensor.shape[0]) {
      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);
    }

    const maxIndex = Math.max(...indices);

    if (!this.dynamicSize && maxIndex >= this.maxSize) {
      throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);
    }

    this.writeMany(indices, (0, _tfjsCore.unstack)(tensor, 0));
  }
  /**
   * Split the values of a Tensor into the TensorArray.
   * @param length number[] with the lengths to use when splitting value along
   *    its first dimension.
   * @param tensor Tensor, the tensor to split.
   */


  split(length, tensor) {
    if (tensor.dtype !== this.dtype) {
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);
    }

    let totalLength = 0;
    const cumulativeLengths = length.map(len => {
      totalLength += len;
      return totalLength;
    });

    if (totalLength !== tensor.shape[0]) {
      throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${totalLength}, and tensor's shape is: ${tensor.shape}`);
    }

    if (!this.dynamicSize && length.length !== this.maxSize) {
      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` + 'and the TensorArray is not marked as dynamically resizeable');
    }

    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
    const tensors = [];
    (0, _tfjsCore.tidy)(() => {
      tensor = (0, _tfjsCore.reshape)(tensor, [1, totalLength, elementPerRow]);

      for (let i = 0; i < length.length; ++i) {
        const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];
        const indices = [0, previousLength, 0];
        const sizes = [1, length[i], elementPerRow];
        tensors[i] = (0, _tfjsCore.reshape)((0, _tfjsCore.slice)(tensor, indices, sizes), this.elementShape);
      }

      return tensors;
    });
    const indices = [];

    for (let i = 0; i < length.length; i++) {
      indices[i] = i;
    }

    this.writeMany(indices, tensors);
  }

}

exports.TensorArray = TensorArray;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./tensor_utils":"node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromTensor = fromTensor;
exports.reserve = reserve;
exports.scatter = scatter;
exports.split = split;
exports.TensorList = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tensor_utils = require("./tensor_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * TensorList stores a container of `tf.Tensor` objects, which are accessible
 * via tensors field.
 *
 * In order to get a copy of the underlying list, use the copy method:
 * ```
 *    TensorList b = a.copy();
 *    b.tensors().pushBack(t);  // This does not modify a.tensors().
 * ```
 *
 * Note that this is not a deep copy: the memory locations of the underlying
 * tensors will still point to the same locations of the corresponding tensors
 * in the original.
 */
class TensorList {
  /**
   *
   * @param tensors list of tensors
   * @param elementShape shape of each tensor
   * @param elementDtype data type of each tensor
   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1
   *   meaning that the size of `tensors` is unbounded.
   */
  constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {
    this.tensors = tensors;
    this.elementShape = elementShape;
    this.elementDtype = elementDtype;

    if (tensors != null) {
      tensors.forEach(tensor => {
        if (elementDtype !== tensor.dtype) {
          throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);
        }

        (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(elementShape, tensor.shape, 'TensorList shape mismatch: ');
        (0, _tfjsCore.keep)(tensor);
      });
    }

    this.idTensor = (0, _tfjsCore.scalar)(0);
    this.maxNumElements = maxNumElements;
    (0, _tfjsCore.keep)(this.idTensor);
  }

  get id() {
    return this.idTensor.id;
  }
  /**
   * Get a new TensorList containing a copy of the underlying tensor container.
   */


  copy() {
    return new TensorList([...this.tensors], this.elementShape, this.elementDtype);
  }
  /**
   * Dispose the tensors and idTensor and clear the tensor list.
   */


  clearAndClose(keepIds) {
    this.tensors.forEach(tensor => {
      if (keepIds == null || !keepIds.has(tensor.id)) {
        tensor.dispose();
      }
    });
    this.tensors.length = 0;
    this.idTensor.dispose();
  }
  /**
   * The size of the tensors in the tensor list.
   */


  size() {
    return this.tensors.length;
  }
  /**
   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)
   * tf.Tensor.
   * @param elementShape shape of each tensor
   * @param elementDtype data type of each tensor
   * @param numElements the number of elements to stack
   */


  stack(elementShape, elementDtype, numElements = -1) {
    if (elementDtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
    }

    if (numElements !== -1 && this.tensors.length !== numElements) {
      throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(elementShape, this.elementShape, 'TensorList shape mismatch: ');
    return (0, _tfjsCore.tidy)(() => {
      const reshapedTensors = this.tensors.map(tensor => (0, _tfjsCore.reshape)(tensor, elementShape));
      return (0, _tfjsCore.stack)(reshapedTensors, 0);
    });
  }
  /**
   * Pop a tensor from the end of the list.
   * @param elementShape shape of the tensor
   * @param elementDtype data type of the tensor
   */


  popBack(elementShape, elementDtype) {
    if (elementDtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
    }

    if (this.size() === 0) {
      throw new Error('Trying to pop from an empty list.');
    }

    const tensor = this.tensors.pop();
    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(tensor.shape, elementShape, 'TensorList shape mismatch: ');
    return (0, _tfjsCore.reshape)(tensor, elementShape);
  }
  /**
   * Push a tensor to the end of the list.
   * @param tensor Tensor to be pushed.
   */


  pushBack(tensor) {
    if (tensor.dtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');

    if (this.maxNumElements === this.size()) {
      throw new Error(`Trying to push element into a full list.`);
    }

    (0, _tfjsCore.keep)(tensor);
    this.tensors.push(tensor);
  }
  /**
   * Update the size of the list.
   * @param size the new size of the list.
   */


  resize(size) {
    if (size < 0) {
      throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);
    }

    if (this.maxNumElements !== -1 && size > this.maxNumElements) {
      throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);
    }

    this.tensors.length = size;
  }
  /**
   * Retrieve the element at the provided index
   * @param elementShape shape of the tensor
   * @param elementDtype dtype of the tensor
   * @param elementIndex index of the tensor
   */


  getItem(elementIndex, elementShape, elementDtype) {
    if (elementDtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
    }

    if (elementIndex < 0 || elementIndex > this.tensors.length) {
      throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);
    }

    if (this.tensors[elementIndex] == null) {
      throw new Error(`element at index ${elementIndex} is null.`);
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');
    return this.tensors[elementIndex];
  }
  /**
   * Set the tensor at the index
   * @param elementIndex index of the tensor
   * @param tensor the tensor to be inserted into the list
   */


  setItem(elementIndex, tensor) {
    if (tensor.dtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);
    }

    if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {
      throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');
    (0, _tfjsCore.keep)(tensor);
    this.tensors[elementIndex] = tensor;
  }
  /**
   * Return selected values in the TensorList as a stacked Tensor. All of
   * selected values must have been written and their shapes must all match.
   * @param indices indices of tensors to gather
   * @param elementDtype output tensor dtype
   * @param elementShape output tensor element shape
   */


  gather(indices, elementDtype, elementShape) {
    if (elementDtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.elementShape, elementShape, 'TensorList shape mismatch: '); // When indices is greater than the size of the list, indices beyond the
    // size of the list are ignored.

    indices = indices.slice(0, this.size());

    if (indices.length === 0) {
      return (0, _tfjsCore.tensor)([], [0].concat(this.elementShape));
    }

    return (0, _tfjsCore.tidy)(() => {
      const tensors = indices.map(i => (0, _tfjsCore.reshape)(this.tensors[i], elementShape));
      return (0, _tfjsCore.stack)(tensors, 0);
    });
  }
  /**
   * Return the values in the TensorList as a concatenated Tensor.
   * @param elementDtype output tensor dtype
   * @param elementShape output tensor element shape
   */


  concat(elementDtype, elementShape) {
    if (!!elementDtype && elementDtype !== this.elementDtype) {
      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.elementShape, elementShape, 'TensorList shape mismatch: ');

    if (this.size() === 0) {
      return (0, _tfjsCore.tensor)([], [0].concat(this.elementShape));
    }

    return (0, _tfjsCore.tidy)(() => {
      const tensors = this.tensors.map(t => (0, _tfjsCore.reshape)(t, elementShape));
      return (0, _tfjsCore.concat)(tensors, 0);
    });
  }

}
/**
 * Creates a TensorList which, when stacked, has the value of tensor.
 * @param tensor from tensor
 * @param elementShape output tensor element shape
 */


exports.TensorList = TensorList;

function fromTensor(tensor, elementShape, elementDtype) {
  const dtype = tensor.dtype;

  if (tensor.shape.length < 1) {
    throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);
  }

  if (tensor.dtype !== elementDtype) {
    throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);
  }

  const outputShape = tensor.shape.slice(1);
  (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(outputShape, elementShape, 'TensorList shape mismatch: ');
  const tensorList = (0, _tfjsCore.unstack)(tensor);
  return new TensorList(tensorList, elementShape, dtype);
}
/**
 * Return a TensorList of the given size with empty elements.
 * @param elementShape the shape of the future elements of the list
 * @param elementDtype the desired type of elements in the list
 * @param numElements the number of elements to reserve
 */


function reserve(elementShape, elementDtype, numElements) {
  return new TensorList([], elementShape, elementDtype, numElements);
}
/**
 * Put tensors at specific indices of a stacked tensor into a TensorList.
 * @param indices list of indices on how to scatter the tensor.
 * @param tensor input tensor.
 * @param elementShape the shape of the future elements of the list
 * @param numElements the number of elements to scatter
 */


function scatter(tensor, indices, elementShape, numElements) {
  if (indices.length !== tensor.shape[0]) {
    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);
  }

  const maxIndex = Math.max(...indices);

  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {
    throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);
  }

  const list = new TensorList([], elementShape, tensor.dtype, numElements);
  const tensors = (0, _tfjsCore.unstack)(tensor, 0);
  indices.forEach((value, index) => {
    list.setItem(value, tensors[index]);
  });
  return list;
}
/**
 * Split the values of a Tensor into a TensorList.
 * @param length the lengths to use when splitting value along
 *    its first dimension.
 * @param tensor the tensor to split.
 * @param elementShape the shape of the future elements of the list
 */


function split(tensor, length, elementShape) {
  let totalLength = 0;
  const cumulativeLengths = length.map(len => {
    totalLength += len;
    return totalLength;
  });

  if (totalLength !== tensor.shape[0]) {
    throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${totalLength}, and tensor's shape is: ${tensor.shape}`);
  }

  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
  const tensors = (0, _tfjsCore.tidy)(() => {
    const tensors = [];
    tensor = (0, _tfjsCore.reshape)(tensor, [1, totalLength, elementPerRow]);

    for (let i = 0; i < length.length; ++i) {
      const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];
      const indices = [0, previousLength, 0];
      const sizes = [1, length[i], elementPerRow];
      tensors[i] = (0, _tfjsCore.reshape)((0, _tfjsCore.slice)(tensor, indices, sizes), elementShape);
    }

    tensor.dispose();
    return tensors;
  });
  const list = new TensorList([], elementShape, tensor.dtype, length.length);

  for (let i = 0; i < tensors.length; i++) {
    list.setItem(i, tensors[i]);
  }

  return list;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./tensor_utils":"node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tensor_array = require("../../executor/tensor_array");

var _tensor_list = require("../../executor/tensor_list");

var _utils = require("./utils");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp = async (node, tensorMap, context) => {
  switch (node.op) {
    case 'If':
    case 'StatelessIf':
      {
        const thenFunc = (0, _utils.getParamValue)('thenBranch', node, tensorMap, context);
        const elseFunc = (0, _utils.getParamValue)('elseBranch', node, tensorMap, context);
        const cond = (0, _utils.getParamValue)('cond', node, tensorMap, context);
        const args = (0, _utils.getParamValue)('args', node, tensorMap, context);
        const condValue = await cond.data();

        if (condValue[0]) {
          return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
        } else {
          return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
        }
      }

    case 'While':
    case 'StatelessWhile':
      {
        const bodyFunc = (0, _utils.getParamValue)('body', node, tensorMap, context);
        const condFunc = (0, _utils.getParamValue)('cond', node, tensorMap, context);
        const args = (0, _utils.getParamValue)('args', node, tensorMap, context); // Calculate the condition of the loop

        const condResult = await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
        const argIds = args.map(tensor => tensor.id);
        let condValue = await condResult[0].data(); // Dispose the intermediate tensors for condition function

        condResult.forEach(tensor => {
          if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {
            tensor.dispose();
          }
        });
        let result = args;

        while (condValue[0]) {
          // Record the previous result for intermediate tensor tracking
          const origResult = result; // Execution the body of the loop

          result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);
          const resultIds = result.map(tensor => tensor.id); // Dispose the intermediate tensor for body function that is not global
          // kept, not input/output of the body function

          origResult.forEach(tensor => {
            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {
              tensor.dispose();
            }
          }); // Recalcuate the condition of the loop using the latest results.

          const condResult = await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);
          condValue = await condResult[0].data(); // Dispose the intermediate tensors for condition function

          condResult.forEach(tensor => {
            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {
              tensor.dispose();
            }
          });
        }

        return result;
      }

    case 'LoopCond':
      {
        const pred = (0, _utils.getParamValue)('pred', node, tensorMap, context);
        return [(0, _utils.cloneTensor)(pred)];
      }

    case 'Switch':
      {
        const pred = (0, _utils.getParamValue)('pred', node, tensorMap, context);
        let data = (0, _utils.getParamValue)('data', node, tensorMap, context);

        if (!data.kept) {
          data = (0, _utils.cloneTensor)(data);
        } // Outputs nodes :0 => false, :1 => true


        return (await pred.data())[0] ? [undefined, data] : [data, undefined];
      }

    case 'Merge':
      {
        const inputName = node.inputNames.find(name => (0, _utils.getTensor)(name, tensorMap, context) !== undefined);

        if (inputName) {
          const data = (0, _utils.getTensor)(inputName, tensorMap, context);
          return [(0, _utils.cloneTensor)(data)];
        }

        return undefined;
      }

    case 'Enter':
      {
        const frameId = (0, _utils.getParamValue)('frameName', node, tensorMap, context);
        const data = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        context.enterFrame(frameId);
        return [(0, _utils.cloneTensor)(data)];
      }

    case 'Exit':
      {
        const data = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        context.exitFrame();
        return [(0, _utils.cloneTensor)(data)];
      }

    case 'NextIteration':
      {
        const data = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        context.nextIteration();
        return [(0, _utils.cloneTensor)(data)];
      }

    case 'TensorArrayV3':
      {
        const size = (0, _utils.getParamValue)('size', node, tensorMap, context);
        const dtype = (0, _utils.getParamValue)('dtype', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const dynamicSize = (0, _utils.getParamValue)('dynamicSize', node, tensorMap, context);
        const clearAfterRead = (0, _utils.getParamValue)('clearAfterRead', node, tensorMap, context);
        const identicalElementShapes = (0, _utils.getParamValue)('identicalElementShapes', node, tensorMap, context);
        const name = (0, _utils.getParamValue)('name', node, tensorMap, context);
        const tensorArray = new _tensor_array.TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);
        context.addTensorArray(tensorArray);
        return [tensorArray.idTensor, (0, _tfjsCore.scalar)(1.0)];
      }

    case 'TensorArrayWriteV3':
      {
        const id = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const index = (0, _utils.getParamValue)('index', node, tensorMap, context);
        const writeTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const writeTensorArray = context.getTensorArray(id.id);
        writeTensorArray.write(index, writeTensor);
        return [writeTensorArray.idTensor];
      }

    case 'TensorArrayReadV3':
      {
        const readId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const readIndex = (0, _utils.getParamValue)('index', node, tensorMap, context);
        const readTensorArray = context.getTensorArray(readId.id);
        return [readTensorArray.read(readIndex)];
      }

    case 'TensorArrayGatherV3':
      {
        const gatherId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const gatherIndices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        const gatherDtype = (0, _utils.getParamValue)('dtype', node, tensorMap, context);
        const gatherTensorArray = context.getTensorArray(gatherId.id);
        return [gatherTensorArray.gather(gatherIndices, gatherDtype)];
      }

    case 'TensorArrayScatterV3':
      {
        const scatterId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const scatterIndices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        const scatterTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const scatterTensorArray = context.getTensorArray(scatterId.id);
        scatterTensorArray.scatter(scatterIndices, scatterTensor);
        return [scatterTensorArray.idTensor];
      }

    case 'TensorArrayConcatV3':
      {
        const concatId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const concatTensorArray = context.getTensorArray(concatId.id);
        const concatDtype = (0, _utils.getParamValue)('dtype', node, tensorMap, context);
        return [concatTensorArray.concat(concatDtype)];
      }

    case 'TensorArraySplitV3':
      {
        const splitId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const splitTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const lengths = (0, _utils.getParamValue)('lengths', node, tensorMap, context);
        const splitTensorArray = context.getTensorArray(splitId.id);
        splitTensorArray.split(lengths, splitTensor);
        return [splitTensorArray.idTensor];
      }

    case 'TensorArraySizeV3':
      {
        const sizeId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const sizeTensorArray = context.getTensorArray(sizeId.id);
        return [(0, _tfjsCore.scalar)(sizeTensorArray.size(), 'int32')];
      }

    case 'TensorArrayCloseV3':
      {
        const closeId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const closeTensorArray = context.getTensorArray(closeId.id);
        closeTensorArray.clearAndClose();
        return [closeTensorArray.idTensor];
      }

    case 'TensorListSetItem':
      {
        const idTensor = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const index = (0, _utils.getParamValue)('index', node, tensorMap, context);
        const writeTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const tensorList = context.getTensorList(idTensor.id);
        tensorList.setItem(index, writeTensor);
        return [tensorList.idTensor];
      }

    case 'TensorListGetItem':
      {
        const idTensor = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const readIndex = (0, _utils.getParamValue)('index', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const elementDType = (0, _utils.getParamValue)('elementDType', node, tensorMap, context);
        const tensorList = context.getTensorList(idTensor.id);
        return [tensorList.getItem(readIndex, elementShape, elementDType)];
      }

    case 'TensorListScatterV2':
    case 'TensorListScatter':
      {
        const scatterIndices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        const scatterTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const numElements = (0, _utils.getParamValue)('numElements', node, tensorMap, context);
        const tensorList = (0, _tensor_list.scatter)(scatterTensor, scatterIndices, elementShape, numElements);
        context.addTensorList(tensorList);
        return [tensorList.idTensor];
      }

    case 'TensorListReserve':
      {
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const elementDtype = (0, _utils.getParamValue)('elementDType', node, tensorMap, context);
        const numElements = (0, _utils.getParamValue)('numElements', node, tensorMap, context);
        const tensorList = (0, _tensor_list.reserve)(elementShape, elementDtype, numElements);
        context.addTensorList(tensorList);
        return [tensorList.idTensor];
      }

    case 'TensorListGather':
      {
        const gatherId = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const gatherIndices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const elementDtype = (0, _utils.getParamValue)('elementDType', node, tensorMap, context);
        const tensorList = context.getTensorList(gatherId.id);
        return [tensorList.gather(gatherIndices, elementDtype, elementShape)];
      }

    case 'TensorListStack':
      {
        const idTensor = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const elementDtype = (0, _utils.getParamValue)('elementDType', node, tensorMap, context);
        const numElements = (0, _utils.getParamValue)('numElements', node, tensorMap, context);
        const tensorList = context.getTensorList(idTensor.id);
        return [tensorList.stack(elementShape, elementDtype, numElements)];
      }

    case 'TensorListFromTensor':
      {
        const tensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const elementDtype = (0, _utils.getParamValue)('elementDType', node, tensorMap, context);
        const tensorList = (0, _tensor_list.fromTensor)(tensor, elementShape, elementDtype);
        context.addTensorList(tensorList);
        return [tensorList.idTensor];
      }

    case 'TensorListConcat':
      {
        const concatId = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const tensorList = context.getTensorList(concatId.id);
        const concatDtype = (0, _utils.getParamValue)('dtype', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        return [tensorList.concat(concatDtype, elementShape)];
      }

    case 'TensorListPushBack':
      {
        const idTensor = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const writeTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const tensorList = context.getTensorList(idTensor.id);
        tensorList.pushBack(writeTensor);
        return [tensorList.idTensor];
      }

    case 'TensorListPopBack':
      {
        const idTensor = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const elementDType = (0, _utils.getParamValue)('elementDType', node, tensorMap, context);
        const tensorList = context.getTensorList(idTensor.id);
        return [tensorList.popBack(elementShape, elementDType)];
      }

    case 'TensorListSplit':
      {
        const splitTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const lengths = (0, _utils.getParamValue)('lengths', node, tensorMap, context);
        const tensorList = (0, _tensor_list.split)(splitTensor, lengths, elementShape);
        context.addTensorList(tensorList);
        return [tensorList.idTensor];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'control';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../../executor/tensor_array":"node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js","../../executor/tensor_list":"node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
function fusedConvAndDepthWiseParams(node, tensorMap, context) {
  const [extraOp, activationFunc] = (0, _utils.getParamValue)('fusedOps', node, tensorMap, context);
  const isBiasAdd = extraOp === 'biasadd';
  const isPrelu = activationFunc === 'prelu';
  const isBatchNorm = extraOp === 'fusedbatchnorm';
  const numArgs = (0, _utils.getParamValue)('numArgs', node, tensorMap, context);

  if (isBiasAdd) {
    if (isPrelu && numArgs !== 2) {
      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' + 'must have two extra arguments: bias and alpha.');
    }

    if (!isPrelu && numArgs !== 1) {
      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' + 'one extra argument: bias.');
    }
  }

  if (isBatchNorm) {
    throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');
  }

  const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
  const pad = (0, _utils.getPadding)(node, tensorMap, context);
  const dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
  const dilations = (0, _utils.getParamValue)('dilations', node, tensorMap, context);
  const [biasArg, preluArg] = (0, _utils.getParamValue)('args', node, tensorMap, context);
  return {
    stride,
    pad,
    dataFormat,
    dilations,
    biasArg,
    preluArg,
    activationFunc
  };
}

const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Conv1D':
      {
        const stride = (0, _utils.getParamValue)('stride', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        const dilation = (0, _utils.getParamValue)('dilation', node, tensorMap, context);
        return [tfOps.conv1d((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];
      }

    case 'Conv2D':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getPadding)(node, tensorMap, context);
        const dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        const dilations = (0, _utils.getParamValue)('dilations', node, tensorMap, context);
        return [tfOps.conv2d((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];
      }

    case '_FusedConv2D':
      {
        const {
          stride,
          pad,
          dataFormat,
          dilations,
          biasArg,
          preluArg,
          activationFunc
        } = fusedConvAndDepthWiseParams(node, tensorMap, context);
        return [tfOps.fused.conv2d({
          x: (0, _utils.getParamValue)('x', node, tensorMap, context),
          filter: (0, _utils.getParamValue)('filter', node, tensorMap, context),
          strides: [stride[1], stride[2]],
          pad: pad,
          dataFormat: dataFormat,
          dilations: [dilations[1], dilations[2]],
          bias: biasArg,
          activation: activationFunc,
          preluActivationWeights: preluArg
        })];
      }

    case 'FusedDepthwiseConv2dNative':
      {
        const {
          stride,
          pad,
          dataFormat,
          dilations,
          biasArg,
          preluArg,
          activationFunc
        } = fusedConvAndDepthWiseParams(node, tensorMap, context);
        return [tfOps.fused.depthwiseConv2d({
          x: (0, _utils.getParamValue)('x', node, tensorMap, context),
          filter: (0, _utils.getParamValue)('filter', node, tensorMap, context),
          strides: [stride[1], stride[2]],
          pad: pad,
          dataFormat: dataFormat,
          dilations: [dilations[1], dilations[2]],
          bias: biasArg,
          activation: activationFunc,
          preluActivationWeights: preluArg
        })];
      }

    case 'Conv2DBackpropInput':
    case 'Conv2dTranspose':
      {
        const shape = (0, _utils.getParamValue)('outputShape', node, tensorMap, context);
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getPadding)(node, tensorMap, context);
        return [tfOps.conv2dTranspose((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];
      }

    case 'DepthwiseConv2dNative':
    case 'DepthwiseConv2d':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getPadding)(node, tensorMap, context);
        const dilations = (0, _utils.getParamValue)('dilations', node, tensorMap, context);
        const dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        return [tfOps.depthwiseConv2d((0, _utils.getParamValue)('input', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];
      }

    case 'Conv3D':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        const dilations = (0, _utils.getParamValue)('dilations', node, tensorMap, context);
        return [tfOps.conv3d((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];
      }

    case 'AvgPool':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0, _utils.getParamValue)('kernelSize', node, tensorMap, context);
        return [tfOps.avgPool((0, _utils.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
      }

    case 'MaxPool':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0, _utils.getParamValue)('kernelSize', node, tensorMap, context);
        return [tfOps.maxPool((0, _utils.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
      }

    case 'MaxPoolWithArgmax':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0, _utils.getParamValue)('kernelSize', node, tensorMap, context);
        const includeBatchInIndex = (0, _utils.getParamValue)('includeBatchInIndex', node, tensorMap, context);
        const {
          result,
          indexes
        } = tfOps.maxPoolWithArgmax((0, _utils.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);
        return [result, indexes];
      }

    case 'AvgPool3D':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0, _utils.getParamValue)('kernelSize', node, tensorMap, context);
        return [tfOps.avgPool3d((0, _utils.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];
      }

    case 'MaxPool3D':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0, _utils.getParamValue)('kernelSize', node, tensorMap, context);
        return [tfOps.maxPool3d((0, _utils.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];
      }

    case 'Dilation2D':
      {
        const strides = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const dilations = (0, _utils.getParamValue)('dilations', node, tensorMap, context); // strides: [1, stride_height, stride_width, 1].

        const strideHeight = strides[1];
        const strideWidth = strides[2]; // dilations: [1, dilation_height, dilation_width, 1].

        const dilationHeight = dilations[1];
        const dilationWidth = dilations[2];
        return [tfOps.dilation2d((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC'
        /* dataFormat */
        )];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'convolution';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Fill':
      {
        const shape = (0, _utils.getParamValue)('shape', node, tensorMap, context);
        const dtype = (0, _utils.getParamValue)('dtype', node, tensorMap, context);
        const value = (0, _utils.getParamValue)('value', node, tensorMap, context);
        return [tfOps.fill(shape, value, dtype)];
      }

    case 'LinSpace':
      {
        const start = (0, _utils.getParamValue)('start', node, tensorMap, context);
        const stop = (0, _utils.getParamValue)('stop', node, tensorMap, context);
        const num = (0, _utils.getParamValue)('num', node, tensorMap, context);
        return [tfOps.linspace(start, stop, num)];
      }

    case 'Multinomial':
      {
        const logits = (0, _utils.getParamValue)('logits', node, tensorMap, context);
        const numSamples = (0, _utils.getParamValue)('numSamples', node, tensorMap, context);
        const seed = (0, _utils.getParamValue)('seed', node, tensorMap, context);
        return [tfOps.multinomial(logits, numSamples, seed)];
      }

    case 'OneHot':
      {
        const indices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        const depth = (0, _utils.getParamValue)('depth', node, tensorMap, context);
        const onValue = (0, _utils.getParamValue)('onValue', node, tensorMap, context);
        const offValue = (0, _utils.getParamValue)('offValue', node, tensorMap, context);
        return [tfOps.oneHot(indices, depth, onValue, offValue)];
      }

    case 'Ones':
      {
        return [tfOps.ones((0, _utils.getParamValue)('shape', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
      }

    case 'OnesLike':
      {
        return [tfOps.onesLike((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'RandomUniform':
      {
        return [tfOps.randomUniform( // tslint:disable-next-line:no-any
        (0, _utils.getParamValue)('shape', node, tensorMap, context), (0, _utils.getParamValue)('minval', node, tensorMap, context), (0, _utils.getParamValue)('maxval', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
      }

    case 'Range':
      {
        const start = (0, _utils.getParamValue)('start', node, tensorMap, context);
        const stop = (0, _utils.getParamValue)('stop', node, tensorMap, context);
        const step = (0, _utils.getParamValue)('step', node, tensorMap, context);
        return [tfOps.range(start, stop, step, (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
      }

    case 'TruncatedNormal':
      {
        const shape = (0, _utils.getParamValue)('shape', node, tensorMap, context);
        const mean = (0, _utils.getParamValue)('mean', node, tensorMap, context);
        const stdDev = (0, _utils.getParamValue)('stdDev', node, tensorMap, context);
        const seed = (0, _utils.getParamValue)('seed', node, tensorMap, context);
        return [tfOps.truncatedNormal(shape, mean, stdDev, (0, _utils.getParamValue)('dtype', node, tensorMap, context), seed)];
      }

    case 'Zeros':
      {
        return [tfOps.zeros((0, _utils.getParamValue)('shape', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
      }

    case 'ZerosLike':
      {
        return [tfOps.zerosLike((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'creation';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
function nmsParams(node, tensorMap, context) {
  const boxes = (0, _utils.getParamValue)('boxes', node, tensorMap, context);
  const scores = (0, _utils.getParamValue)('scores', node, tensorMap, context);
  const maxOutputSize = (0, _utils.getParamValue)('maxOutputSize', node, tensorMap, context);
  const iouThreshold = (0, _utils.getParamValue)('iouThreshold', node, tensorMap, context);
  const scoreThreshold = (0, _utils.getParamValue)('scoreThreshold', node, tensorMap, context);
  const softNmsSigma = (0, _utils.getParamValue)('softNmsSigma', node, tensorMap, context);
  return {
    boxes,
    scores,
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    softNmsSigma
  };
}

const executeOp = async (node, tensorMap, context) => {
  switch (node.op) {
    case 'NonMaxSuppressionV5':
      {
        const {
          boxes,
          scores,
          maxOutputSize,
          iouThreshold,
          scoreThreshold,
          softNmsSigma
        } = nmsParams(node, tensorMap, context);
        const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
        return [result.selectedIndices, result.selectedScores];
      }

    case 'NonMaxSuppressionV4':
      {
        const {
          boxes,
          scores,
          maxOutputSize,
          iouThreshold,
          scoreThreshold
        } = nmsParams(node, tensorMap, context);
        const padToMaxOutputSize = (0, _utils.getParamValue)('padToMaxOutputSize', node, tensorMap, context);
        const result = await tfOps.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
        return [result.selectedIndices, result.validOutputs];
      }

    case 'NonMaxSuppressionV3':
    case 'NonMaxSuppressionV2':
      {
        const {
          boxes,
          scores,
          maxOutputSize,
          iouThreshold,
          scoreThreshold
        } = nmsParams(node, tensorMap, context);
        return [await tfOps.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];
      }

    case 'Where':
      {
        const condition = tfOps.cast((0, _utils.getParamValue)('condition', node, tensorMap, context), 'bool');
        const result = [await tfOps.whereAsync(condition)];
        condition.dispose();
        return result;
      }

    case 'ListDiff':
      {
        return tfOps.setdiff1dAsync((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('y', node, tensorMap, context));
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'dynamic';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'TopKV2':
      {
        const x = (0, _utils.getParamValue)('x', node, tensorMap, context);
        const k = (0, _utils.getParamValue)('k', node, tensorMap, context);
        const sorted = (0, _utils.getParamValue)('sorted', node, tensorMap, context);
        const result = tfOps.topk(x, k, sorted);
        return [result.values, result.indices];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'evaluation';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Const':
      {
        return tensorMap[node.name];
      }

    case 'PlaceholderWithDefault':
      const def = (0, _utils.getParamValue)('default', node, tensorMap, context);
      return [(0, _utils.getTensor)(node.name, tensorMap, context) || def];

    case 'Placeholder':
      return [(0, _utils.getTensor)(node.name, tensorMap, context)];

    case 'Identity':
    case 'StopGradient':
    case 'FakeQuantWithMinMaxVars':
      {
        // This op is currently ignored.
        const data = (0, _utils.getParamValue)('x', node, tensorMap, context);
        return [(0, _utils.cloneTensor)(data)];
      }

    case 'IdentityN':
      return (0, _utils.getParamValue)('x', node, tensorMap, context).map(t => (0, _utils.cloneTensor)(t));

    case 'Snapshot':
      const snapshot = (0, _utils.getParamValue)('x', node, tensorMap, context);
      return [(0, _utils.cloneTensor)(snapshot)];

    case 'Shape':
      return [tfOps.tensor1d((0, _utils.getParamValue)('x', node, tensorMap, context).shape, 'int32')];

    case 'ShapeN':
      return (0, _utils.getParamValue)('x', node, tensorMap, context).map(t => tfOps.tensor1d(t.shape));

    case 'Size':
      return [tfOps.scalar((0, _utils.getParamValue)('x', node, tensorMap, context).size, 'int32')];

    case 'Rank':
      return [tfOps.scalar((0, _utils.getParamValue)('x', node, tensorMap, context).rank, 'int32')];

    case 'NoOp':
      return [tfOps.scalar(1)];

    case 'Print':
      const input = (0, _utils.getParamValue)('x', node, tensorMap, context);
      const data = (0, _utils.getParamValue)('data', node, tensorMap, context);
      const message = (0, _utils.getParamValue)('message', node, tensorMap, context);
      const summarize = (0, _utils.getParamValue)('summarize', node, tensorMap, context);
      console.warn('The graph has a tf.print() operation,' + 'usually used for debugging, which slows down performance.');
      console.log(message);

      for (let i = 0; i < data.length; i++) {
        console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));
      }

      return [input];

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'graph';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'ResizeBilinear':
      {
        const images = (0, _utils.getParamValue)('images', node, tensorMap, context);
        const size = (0, _utils.getParamValue)('size', node, tensorMap, context);
        const alignCorners = (0, _utils.getParamValue)('alignCorners', node, tensorMap, context);
        return [tfOps.image.resizeBilinear(images, [size[0], size[1]], alignCorners)];
      }

    case 'ResizeNearestNeighbor':
      {
        const images = (0, _utils.getParamValue)('images', node, tensorMap, context);
        const size = (0, _utils.getParamValue)('size', node, tensorMap, context);
        const alignCorners = (0, _utils.getParamValue)('alignCorners', node, tensorMap, context);
        return [tfOps.image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners)];
      }

    case 'CropAndResize':
      {
        const image = (0, _utils.getParamValue)('image', node, tensorMap, context);
        const boxes = (0, _utils.getParamValue)('boxes', node, tensorMap, context);
        const boxInd = (0, _utils.getParamValue)('boxInd', node, tensorMap, context);
        const cropSize = (0, _utils.getParamValue)('cropSize', node, tensorMap, context);
        const method = (0, _utils.getParamValue)('method', node, tensorMap, context);
        const extrapolationValue = (0, _utils.getParamValue)('extrapolationValue', node, tensorMap, context);
        return [tfOps.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'image';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Equal':
      {
        return [tfOps.equal((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'NotEqual':
      {
        return [tfOps.notEqual((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Greater':
      {
        return [tfOps.greater((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'GreaterEqual':
      {
        return [tfOps.greaterEqual((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Less':
      {
        return [tfOps.less((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'LessEqual':
      {
        return [tfOps.lessEqual((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'LogicalAnd':
      {
        return [tfOps.logicalAnd((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'LogicalNot':
      {
        return [tfOps.logicalNot((0, _utils.getParamValue)('a', node, tensorMap, context))];
      }

    case 'LogicalOr':
      {
        return [tfOps.logicalOr((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Select':
    case 'SelectV2':
      {
        return [tfOps.where((0, _utils.getParamValue)('condition', node, tensorMap, context), (0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'logical';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'BatchMatMul':
    case 'BatchMatMulV2':
    case 'MatMul':
      return [tfOps.matMul((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context), (0, _utils.getParamValue)('transposeA', node, tensorMap, context), (0, _utils.getParamValue)('transposeB', node, tensorMap, context))];

    case 'Transpose':
      return [tfOps.transpose((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('perm', node, tensorMap, context))];

    case '_FusedMatMul':
      const [extraOp, activationFunc] = (0, _utils.getParamValue)('fusedOps', node, tensorMap, context);
      const isBiasAdd = extraOp === 'biasadd';
      const isPrelu = activationFunc === 'prelu';
      const numArgs = (0, _utils.getParamValue)('numArgs', node, tensorMap, context);

      if (isBiasAdd) {
        if (isPrelu && numArgs !== 2) {
          throw new Error('Fused MatMul with BiasAdd and Prelu must have two ' + 'extra arguments: bias and alpha.');
        }

        if (!isPrelu && numArgs !== 1) {
          throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');
        }
      }

      const [biasArg, preluArg] = (0, _utils.getParamValue)('args', node, tensorMap, context);
      return [tfOps.fused.matMul({
        a: (0, _utils.getParamValue)('a', node, tensorMap, context),
        b: (0, _utils.getParamValue)('b', node, tensorMap, context),
        transposeA: (0, _utils.getParamValue)('transposeA', node, tensorMap, context),
        transposeB: (0, _utils.getParamValue)('transposeB', node, tensorMap, context),
        bias: biasArg,
        activation: activationFunc,
        preluActivationWeights: preluArg
      })];

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'matrices';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'FusedBatchNorm':
    case 'FusedBatchNormV2':
      {
        return [tfOps.batchNorm((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('mean', node, tensorMap, context), (0, _utils.getParamValue)('variance', node, tensorMap, context), (0, _utils.getParamValue)('offset', node, tensorMap, context), (0, _utils.getParamValue)('scale', node, tensorMap, context), (0, _utils.getParamValue)('epsilon', node, tensorMap, context))];
      }

    case 'FusedBatchNormV3':
      {
        return [tfOps.batchNorm((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('mean', node, tensorMap, context), (0, _utils.getParamValue)('variance', node, tensorMap, context), (0, _utils.getParamValue)('offset', node, tensorMap, context), (0, _utils.getParamValue)('scale', node, tensorMap, context), (0, _utils.getParamValue)('epsilon', node, tensorMap, context))];
      }

    case 'LRN':
      {
        return [tfOps.localResponseNormalization((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('radius', node, tensorMap, context), (0, _utils.getParamValue)('bias', node, tensorMap, context), (0, _utils.getParamValue)('alpha', node, tensorMap, context), (0, _utils.getParamValue)('beta', node, tensorMap, context))];
      }

    case 'Softmax':
      {
        return [tfOps.softmax((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'LogSoftmax':
      {
        return [tfOps.logSoftmax((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'SparseToDense':
      {
        return [tfOps.sparseToDense((0, _utils.getParamValue)('sparseIndices', node, tensorMap, context), (0, _utils.getParamValue)('outputShape', node, tensorMap, context), (0, _utils.getParamValue)('sparseValues', node, tensorMap, context), (0, _utils.getParamValue)('defaultValue', node, tensorMap, context))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'normalization';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Max':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.max((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'Mean':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.mean((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'Min':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.min((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'Sum':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.sum((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'All':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.all((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'Any':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.any((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'ArgMax':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        return [tfOps.argMax((0, _utils.getParamValue)('x', node, tensorMap, context), axis)];
      }

    case 'ArgMin':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        return [tfOps.argMin((0, _utils.getParamValue)('x', node, tensorMap, context), axis)];
      }

    case 'Prod':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.prod((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'Cumsum':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const exclusive = (0, _utils.getParamValue)('exclusive', node, tensorMap, context);
        const reverse = (0, _utils.getParamValue)('reverse', node, tensorMap, context);
        return [tfOps.cumsum((0, _utils.getParamValue)('x', node, tensorMap, context), axis, exclusive, reverse)];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'reduction';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'ConcatV2':
    case 'Concat':
      {
        const n = (0, _utils.getParamValue)('n', node, tensorMap, context);
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        let inputs = (0, _utils.getParamValue)('tensors', node, tensorMap, context);
        inputs = inputs.slice(0, n);
        return [tfOps.concat(inputs, axis)];
      }

    case 'GatherV2':
    case 'Gather':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const input = (0, _utils.getParamValue)('x', node, tensorMap, context);
        const indices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        return [tfOps.gather(input, tfOps.cast(indices, 'int32'), axis)];
      }

    case 'ReverseV2':
    case 'Reverse':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const input = (0, _utils.getParamValue)('x', node, tensorMap, context);
        return [tfOps.reverse(input, axis)];
      }

    case 'Slice':
      {
        // tslint:disable-next-line:no-any
        const begin = (0, _utils.getParamValue)('begin', node, tensorMap, context); // tslint:disable-next-line:no-any

        const size = (0, _utils.getParamValue)('size', node, tensorMap, context);
        return [tfOps.slice((0, _utils.getParamValue)('x', node, tensorMap, context), begin, size)];
      }

    case 'StridedSlice':
      {
        const begin = (0, _utils.getParamValue)('begin', node, tensorMap, context);
        const end = (0, _utils.getParamValue)('end', node, tensorMap, context);
        const strides = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const beginMask = (0, _utils.getParamValue)('beginMask', node, tensorMap, context);
        const endMask = (0, _utils.getParamValue)('endMask', node, tensorMap, context);
        const ellipsisMask = (0, _utils.getParamValue)('ellipsisMask', node, tensorMap, context);
        const newAxisMask = (0, _utils.getParamValue)('newAxisMask', node, tensorMap, context);
        const shrinkAxisMask = (0, _utils.getParamValue)('shrinkAxisMask', node, tensorMap, context);
        const tensor = (0, _utils.getParamValue)('x', node, tensorMap, context);
        return [tfOps.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];
      }

    case 'Pack':
      {
        return (0, _tfjsCore.tidy)(() => {
          const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
          const tensors = (0, _utils.getParamValue)('tensors', node, tensorMap, context); // Reshape the tensors to the first tensor's shape if they don't
          // match.

          const shape = tensors[0].shape;
          const squeezedShape = tfOps.squeeze(tensors[0]).shape;
          const mapped = tensors.map(tensor => {
            const sameShape = _tfjsCore.util.arraysEqual(tensor.shape, shape);

            if (!sameShape && !_tfjsCore.util.arraysEqual(tfOps.squeeze(tensor).shape, squeezedShape)) {
              throw new Error('the input tensors shape does not match');
            }

            return sameShape ? tensor : tfOps.reshape(tensor, shape);
          });
          return [tfOps.stack(mapped, axis)];
        });
      }

    case 'Unpack':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const tensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        return tfOps.unstack(tensor, axis);
      }

    case 'Tile':
      {
        const reps = (0, _utils.getParamValue)('reps', node, tensorMap, context);
        return [tfOps.tile((0, _utils.getParamValue)('x', node, tensorMap, context), reps)];
      }

    case 'Split':
    case 'SplitV':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const numOrSizeSplits = (0, _utils.getParamValue)('numOrSizeSplits', node, tensorMap, context);
        const tensor = (0, _utils.getParamValue)('x', node, tensorMap, context);
        return tfOps.split(tensor, numOrSizeSplits, axis);
      }

    case 'ScatterNd':
      {
        const indices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        const values = (0, _utils.getParamValue)('values', node, tensorMap, context);
        const shape = (0, _utils.getParamValue)('shape', node, tensorMap, context);
        return [tfOps.scatterND(indices, values, shape)];
      }

    case 'GatherNd':
      {
        const x = (0, _utils.getParamValue)('x', node, tensorMap, context);
        const indices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        return [tfOps.gatherND(x, indices)];
      }

    case 'SparseToDense':
      {
        const indices = (0, _utils.getParamValue)('sparseIndices', node, tensorMap, context);
        const shape = (0, _utils.getParamValue)('outputShape', node, tensorMap, context);
        const sparseValues = (0, _utils.getParamValue)('sparseValues', node, tensorMap, context);
        const defaultValue = (0, _utils.getParamValue)('defaultValue', node, tensorMap, context);
        return [tfOps.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ? defaultValue : tfOps.cast(defaultValue, sparseValues.dtype))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'slice_join';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'FFT':
      {
        return [tfOps.fft((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'IFFT':
      {
        return [tfOps.ifft((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'RFFT':
      {
        return [tfOps.rfft((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'IRFFT':
      {
        return [tfOps.irfft((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'spectral';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Cast':
      {
        return [tfOps.cast((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
      }

    case 'ExpandDims':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        return [tfOps.expandDims((0, _utils.getParamValue)('x', node, tensorMap, context), axis)];
      }

    case 'Squeeze':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        return [tfOps.squeeze((0, _utils.getParamValue)('x', node, tensorMap, context), axis)];
      }

    case 'Reshape':
      {
        return [tfOps.reshape((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('shape', node, tensorMap, context))];
      }

    case 'PadV2':
    case 'Pad':
      {
        return [tfOps.pad((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('padding', node, tensorMap, context), (0, _utils.getParamValue)('constantValue', node, tensorMap, context))];
      }

    case 'SpaceToBatchND':
      {
        const blockShape = (0, _utils.getParamValue)('blockShape', node, tensorMap, context);
        const paddings = (0, _utils.getParamValue)('paddings', node, tensorMap, context);
        return [tfOps.spaceToBatchND((0, _utils.getParamValue)('x', node, tensorMap, context), blockShape, paddings)];
      }

    case 'BatchToSpaceND':
      {
        const blockShape = (0, _utils.getParamValue)('blockShape', node, tensorMap, context);
        const crops = (0, _utils.getParamValue)('crops', node, tensorMap, context);
        return [tfOps.batchToSpaceND((0, _utils.getParamValue)('x', node, tensorMap, context), blockShape, crops)];
      }

    case 'DepthToSpace':
      {
        const blockSize = (0, _utils.getParamValue)('blockSize', node, tensorMap, context);
        const dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        return [tfOps.depthToSpace((0, _utils.getParamValue)('x', node, tensorMap, context), blockSize, dataFormat)];
      }

    case 'BroadcastTo':
      {
        return [tfOps.broadcastTo((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('shape', node, tensorMap, context))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'transformation';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js","./utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.executeOp = executeOp;

var tfc = _interopRequireWildcard(require("@tensorflow/tfjs-core"));

var _node_value_impl = require("./custom_op/node_value_impl");

var _register = require("./custom_op/register");

var arithmetic = _interopRequireWildcard(require("./executors/arithmetic_executor"));

var basicMath = _interopRequireWildcard(require("./executors/basic_math_executor"));

var control = _interopRequireWildcard(require("./executors/control_executor"));

var convolution = _interopRequireWildcard(require("./executors/convolution_executor"));

var creation = _interopRequireWildcard(require("./executors/creation_executor"));

var dynamic = _interopRequireWildcard(require("./executors/dynamic_executor"));

var evaluation = _interopRequireWildcard(require("./executors/evaluation_executor"));

var graph = _interopRequireWildcard(require("./executors/graph_executor"));

var image = _interopRequireWildcard(require("./executors/image_executor"));

var logical = _interopRequireWildcard(require("./executors/logical_executor"));

var matrices = _interopRequireWildcard(require("./executors/matrices_executor"));

var normalization = _interopRequireWildcard(require("./executors/normalization_executor"));

var reduction = _interopRequireWildcard(require("./executors/reduction_executor"));

var sliceJoin = _interopRequireWildcard(require("./executors/slice_join_executor"));

var spectral = _interopRequireWildcard(require("./executors/spectral_executor"));

var transformation = _interopRequireWildcard(require("./executors/transformation_executor"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Executes the op defined by the node object.
 * @param node
 * @param tensorMap contains tensors for executed nodes and weights
 */
function executeOp(node, tensorMap, context) {
  const value = ((node, tensorMap, context) => {
    switch (node.category) {
      case 'arithmetic':
        return tfc.tidy(() => arithmetic.executeOp(node, tensorMap, context));

      case 'basic_math':
        return tfc.tidy(() => basicMath.executeOp(node, tensorMap, context));

      case 'control':
        return control.executeOp(node, tensorMap, context);

      case 'convolution':
        return tfc.tidy(() => convolution.executeOp(node, tensorMap, context));

      case 'creation':
        return tfc.tidy(() => creation.executeOp(node, tensorMap, context));

      case 'dynamic':
        return dynamic.executeOp(node, tensorMap, context);

      case 'evaluation':
        return tfc.tidy(() => evaluation.executeOp(node, tensorMap, context));

      case 'image':
        return tfc.tidy(() => image.executeOp(node, tensorMap, context));

      case 'graph':
        return tfc.tidy(() => graph.executeOp(node, tensorMap, context));

      case 'logical':
        return tfc.tidy(() => logical.executeOp(node, tensorMap, context));

      case 'matrices':
        return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));

      case 'normalization':
        return tfc.tidy(() => normalization.executeOp(node, tensorMap, context));

      case 'reduction':
        return tfc.tidy(() => reduction.executeOp(node, tensorMap, context));

      case 'slice_join':
        return tfc.tidy(() => sliceJoin.executeOp(node, tensorMap, context));

      case 'spectral':
        return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));

      case 'transformation':
        return tfc.tidy(() => transformation.executeOp(node, tensorMap, context));

      case 'custom':
        const opMapper = (0, _register.getRegisteredOp)(node.op);

        if (opMapper && opMapper.customExecutor) {
          return opMapper.customExecutor(new _node_value_impl.NodeValueImpl(node, tensorMap, context));
        } else {
          throw TypeError(`Custom op ${node.op} is not registered.`);
        }

      default:
        throw TypeError(`Unknown op '${node.op}'. File an issue at ` + `https://github.com/tensorflow/tfjs/issues so we can add it` + `, or register a custom execution with tf.registerOp()`);
    }
  })(node, tensorMap, context);

  if (value instanceof Promise) {
    return value.then(data => [].concat(data));
  }

  return [].concat(value);
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./custom_op/node_value_impl":"node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js","./custom_op/register":"node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js","./executors/arithmetic_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js","./executors/basic_math_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js","./executors/control_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js","./executors/convolution_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","./executors/creation_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","./executors/dynamic_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js","./executors/evaluation_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js","./executors/graph_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js","./executors/image_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js","./executors/logical_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js","./executors/matrices_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js","./executors/normalization_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","./executors/reduction_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js","./executors/slice_join_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","./executors/spectral_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js","./executors/transformation_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js"}],"node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExecutionContext = void 0;

/**
 * ExecutionContext captures the runtime environment of the node. It keeps
 * track of the current frame and iteration for the control flow ops.
 *
 * For example, typical Dynamic RNN model may contain loops, for which
 * TensorFlow will generate graphs with Enter/Exit nodes to control the
 * current execution frame, and NextIteration Nodes for iteration id increment.
 * For model with branch logic, TensorFLow will generate Switch/Merge ops.
 */
class ExecutionContext {
  constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}) {
    this.weightMap = weightMap;
    this.tensorArrayMap = tensorArrayMap;
    this.tensorListMap = tensorListMap;
    this.functionMap = functionMap;
    this.rootContext = {
      id: 0,
      frameName: '',
      iterationId: 0
    };
    this.contexts = [this.rootContext];
    this.lastId = 0;
    this.generateCurrentContextIds();
  }

  newFrame(id, frameName) {
    return {
      id,
      frameName,
      iterationId: 0
    };
  }
  /**
   * Set the current context
   * @param contexts: ExecutionContextInfo[] the current path of execution
   * frames
   */


  set currentContext(contexts) {
    if (this.contexts !== contexts) {
      this.contexts = contexts;
      this.generateCurrentContextIds();
    }
  }

  get currentContext() {
    return this.contexts;
  }
  /**
   * Returns the current context in string format.
   */


  get currentContextId() {
    return this._currentContextIds[0];
  }
  /**
   * Returns the current context and all parent contexts in string format.
   * This allow access to the nodes in the current and parent frames.
   */


  get currentContextIds() {
    return this._currentContextIds;
  }

  generateCurrentContextIds() {
    const names = [];

    for (let i = 0; i < this.contexts.length - 1; i++) {
      const contexts = this.contexts.slice(0, this.contexts.length - i);
      names.push(this.contextIdforContexts(contexts));
    }

    names.push('');
    this._currentContextIds = names;
  }

  contextIdforContexts(contexts) {
    return contexts ? contexts.map(context => context.id === 0 && context.iterationId === 0 ? '' : `${context.frameName}-${context.iterationId}`).join('/') : '';
  }
  /**
   * Enter a new frame, a new context is pushed on the current context list.
   * @param frameId new frame id
   */


  enterFrame(frameId) {
    if (this.contexts) {
      this.lastId++;
      this.contexts = this.contexts.slice();
      this.contexts.push(this.newFrame(this.lastId, frameId));

      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));
    }
  }
  /**
   * Exit the current frame, the last context is removed from the current
   * context list.
   */


  exitFrame() {
    if (this.contexts && this.contexts.length > 1) {
      this.contexts = this.contexts.slice();
      this.contexts.splice(-1);
      this.currentContextIds.shift();
    } else {
      throw new Error('Cannot exit frame, the context is empty');
    }
  }
  /**
   * Enter the next iteration of a loop, the iteration id of last context is
   * increased.
   */


  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice();
      this.lastId++;
      const context = Object.assign({}, this.contexts[this.contexts.length - 1]);
      context.iterationId += 1;
      context.id = this.lastId;
      this.contexts.splice(-1, 1, context);

      this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else {
      throw new Error('Cannot increase frame iteration, the context is empty');
    }
  }

  getWeight(name) {
    return this.weightMap[name];
  }

  addTensorArray(tensorArray) {
    this.tensorArrayMap[tensorArray.id] = tensorArray;
  }

  getTensorArray(id) {
    return this.tensorArrayMap[id];
  }

  addTensorList(tensorList) {
    this.tensorListMap[tensorList.id] = tensorList;
  }

  getTensorList(id) {
    return this.tensorListMap[id];
  }

  dispose(keepIds) {
    for (const key in this.tensorArrayMap) {
      this.tensorArrayMap[key].clearAndClose(keepIds);
    }

    for (const key in this.tensorListMap) {
      this.tensorListMap[key].clearAndClose(keepIds);
    }
  }

}

exports.ExecutionContext = ExecutionContext;
},{}],"node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExecutionSubgraph = getExecutionSubgraph;
exports.getNodesInTopologicalOrder = getNodesInTopologicalOrder;
exports.isControlFlow = isControlFlow;
exports.isDynamicShape = isDynamicShape;

var _utils = require("../operations/executors/utils");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Given graph inputs and desired outputs, find the minimal set of nodes
 * to execute in order to compute the outputs. In addition return other useful
 * info such:
 * - Missing inputs needed to compute the output.
 * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).
 * - Alternative inputs in order to avoid async (dynamic op) execution.
 */
function getExecutionSubgraph(inputs, outputs, weightMap) {
  const usedNodes = new Set();
  const missingInputs = [];
  let dynamicNode = null;
  let syncInputs = null; // Start with the outputs, going backwards and find all the nodes that are
  // needed to compute those outputs.

  const seen = new Set();
  const inputNodeNames = Object.keys(inputs).map(name => (0, _utils.parseNodeName)(name)[0]);
  const frontier = [...outputs];

  while (frontier.length > 0) {
    const node = frontier.pop();

    if (isControlFlow(node) || isDynamicShape(node)) {
      if (dynamicNode == null) {
        dynamicNode = node;
        syncInputs = dynamicNode.children.map(child => child.name).filter(name => usedNodes.has(name));
      }
    }

    usedNodes.add(node.name); // Weights are dead end since we already have their values.

    if (weightMap[node.name] != null) {
      continue;
    } // This node is a dead end since it's one of the user-provided inputs.


    if (inputNodeNames.indexOf(node.name) !== -1) {
      continue;
    }

    if (node.inputs.length === 0) {
      missingInputs.push(node.name);
      continue;
    }

    node.inputs.forEach(input => {
      // Don't add to the frontier if it is already there.
      if (seen.has(input.name)) {
        return;
      }

      seen.add(input.name);
      frontier.push(input);
    });
  }

  return {
    inputs,
    outputs,
    usedNodes,
    missingInputs,
    dynamicNode,
    syncInputs
  };
}
/**
 * Given the execution info, return a list of nodes in topological order that
 * need to be executed to compute the output.
 */


function getNodesInTopologicalOrder(graph, weightMap, executionInfo) {
  const {
    usedNodes,
    inputs
  } = executionInfo;
  const frontier = [];
  const inputNodes = Object.keys(inputs).map(name => (0, _utils.parseNodeName)(name)[0]).map(name => graph.nodes[name]);
  inputNodes.forEach(input => {
    if (usedNodes.has(input.name)) {
      frontier.push(input);
    }
  });
  graph.weights.forEach(weight => {
    if (usedNodes.has(weight.name)) {
      frontier.push(weight);
    }
  });
  const seen = new Set();
  const orderedNodes = [];

  while (frontier.length > 0) {
    const node = frontier.pop();
    seen.add(node.name);

    if (!weightMap[node.name]) {
      orderedNodes.push(node);
    }

    node.children.forEach(child => {
      if (!seen.has(child.name) && usedNodes.has(child.name) && child.inputs.every(input => seen.has(input.name))) {
        frontier.push(child);
      }
    });
  }

  return orderedNodes;
}

const CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf', 'StatelessWhile', 'if', 'While'];
const DYNAMIC_SHAPE_OPS = ['NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'];

function isControlFlow(node) {
  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;
}

function isDynamicShape(node) {
  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;
}
},{"../operations/executors/utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"}],"node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphExecutor = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _utils = require("../operations/executors/utils");

var _operation_executor = require("../operations/operation_executor");

var _execution_context = require("./execution_context");

var _model_analysis = require("./model_analysis");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class GraphExecutor {
  /**
   *
   * @param graph Graph the model or function graph to be executed.
   * @param parent When building function exector you need to set the parent
   * executor. Since the weights and function executor maps are set at parant
   * level, that function executor can access the function maps and weight maps
   * through the parent.
   */
  constructor(graph, parent) {
    this.graph = graph;
    this.parent = parent;
    this.compiledMap = new Map();
    this._weightMap = {};
    this.SEPERATOR = ',';
    this._functions = {};
    this._functionExecutorMap = {};
    this._outputs = graph.outputs;
    this._inputs = graph.inputs;
    this._signature = graph.signature;
    this._functions = graph.functions; // create sub-graph executors

    if (graph.functions != null) {
      Object.keys(graph.functions).forEach(name => {
        this._functionExecutorMap[name] = new GraphExecutor(graph.functions[name], this);
      });
    }
  }

  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }

  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }

  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }

  set weightMap(weightMap) {
    const weightIds = Object.keys(weightMap).map(key => weightMap[key].map(tensor => tensor.id));
    this._weightIds = [].concat(...weightIds);
    this._weightMap = weightMap;
  }

  get inputs() {
    return this._inputs.map(node => {
      return {
        name: node.name,
        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,
        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined
      };
    });
  }

  get outputs() {
    return this._outputs.map(node => {
      return {
        name: node.name,
        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,
        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined
      };
    });
  }

  get inputNodes() {
    return this._inputs.map(node => node.signatureKey || node.name);
  }

  get outputNodes() {
    return this._outputs.map(node => {
      const name = node.signatureKey || node.name;
      return node.defaultOutput ? `${name}:${node.defaultOutput}` : name;
    });
  }

  get functions() {
    return Object.keys(this._functions).reduce((map, key) => {
      map[key] = this._functions[key].signature;
      return map;
    }, {});
  }

  getCompilationKey(inputs, outputs) {
    const sortedInputs = inputs.map(node => node.name).sort();
    const sortedOutputs = outputs.map(node => node.name).sort();
    return sortedInputs.join(this.SEPERATOR) + '--' + sortedOutputs.join(this.SEPERATOR);
  }
  /**
   * Compiles the inference graph and returns the minimal set of nodes that are
   * required for execution, in the correct execution order.
   */


  compile(inputs, outputs) {
    const executionInfo = (0, _model_analysis.getExecutionSubgraph)(inputs, outputs, this.weightMap);
    const {
      missingInputs,
      dynamicNode,
      syncInputs
    } = executionInfo;

    if (dynamicNode != null) {
      throw new Error(`This execution contains the node '${dynamicNode.name}', which has ` + `the dynamic op '${dynamicNode.op}'. Please use ` + `model.executeAsync() instead. Alternatively, to avoid the ` + `dynamic ops, specify the inputs [${syncInputs}]`);
    }

    if (missingInputs.length > 0) {
      const outNames = outputs.map(n => n.name);
      const inNames = Object.keys(inputs);
      throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs ` + `[${inNames}]. Missing the following inputs: [${missingInputs}]`);
    }

    return (0, _model_analysis.getNodesInTopologicalOrder)(this.graph, this.weightMap, executionInfo);
  }
  /**
   * Executes the inference for given input tensors.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs output node name from the Tensorflow model, if no outputs
   * are specified, the default outputs of the model would be used. You can
   * inspect intermediate nodes of the model by adding them to the outputs
   * array.
   */


  execute(inputs, outputs) {
    inputs = this.mapInputs(inputs);
    const names = Object.keys(inputs).sort();
    this.checkInputs(inputs);
    this.checkInputShapeAndType(inputs);
    outputs = this.mapOutputs(outputs);
    this.checkOutputs(outputs);
    const inputNodes = names.map(name => this.graph.nodes[(0, _utils.parseNodeName)(name)[0]]);
    const outputNodes = outputs.map(name => this.graph.nodes[(0, _utils.parseNodeName)(name)[0]]);
    const compilationKey = this.getCompilationKey(inputNodes, outputNodes); // Do nothing if the compiled graph cache contains the input.

    let orderedNodes = this.compiledMap.get(compilationKey);

    if (orderedNodes == null) {
      orderedNodes = this.compile(inputs, outputNodes);
      this.compiledMap.set(compilationKey, orderedNodes);
    }

    const tensorArrayMap = {};
    const tensorListMap = {};
    return (0, _tfjsCore.tidy)(() => {
      const context = new _execution_context.ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);
      const tensorsMap = Object.assign({}, this.weightMap);
      Object.keys(inputs).forEach(name => {
        const [nodeName, index] = (0, _utils.parseNodeName)(name);
        const tensors = [];
        tensors[index] = inputs[name];
        tensorsMap[nodeName] = tensors;
      });
      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);
      const intermediateTensorConsumerCount = {};

      for (let i = 0; i < orderedNodes.length; i++) {
        const node = orderedNodes[i];

        if (!tensorsMap[node.name]) {
          const tensors = (0, _operation_executor.executeOp)(node, tensorsMap, context);

          if (tensors instanceof Promise) {
            throw new Error(`The execution of the op '${node.op}' returned a promise. ` + `Please use model.executeAsync() instead.`);
          }

          tensorsMap[node.name] = tensors;
          this.checkTensorForDisposal(node.name, node, tensorsMap, context, tensorsToKeep, outputs, intermediateTensorConsumerCount);
        }
      } // dispose the context for the root executor


      if (this.parent == null) {
        context.dispose(tensorsToKeep);
      }

      return outputs.map(name => (0, _utils.getTensor)(name, tensorsMap, context));
    });
  }

  getFrozenTensorIds(tensorMap) {
    const ids = [].concat.apply([], Object.keys(tensorMap).map(key => tensorMap[key]).map(tensors => tensors.map(tensor => tensor.id)));
    return new Set(ids);
  }

  checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount) {
    // Skip output nodes and any control flow nodes, since its dependency is
    // tricky to track correctly.
    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {
      return;
    }

    tensorMap[nodeName].forEach(tensor => {
      if (tensor != null) {
        intermediateTensorConsumerCount[tensor.id] = (intermediateTensorConsumerCount[tensor.id] || 0) + node.children.length;
      }
    });
    node.inputs.forEach(input => {
      // Skip any control flow nodes, since its dependency is tricky to track
      // correctly.
      if (input.category !== 'control') {
        const tensors = (0, _utils.getTensorsForCurrentContenxt)(input.name, tensorMap, context);

        if (tensors != null) {
          tensors.forEach(tensor => {
            if (tensor && !tensorsToKeep.has(tensor.id)) {
              const count = intermediateTensorConsumerCount[tensor.id];

              if (count === 1) {
                tensor.dispose();
                delete intermediateTensorConsumerCount[tensor.id];
              } else if (count != null) {
                // only intermediate nodes has count set, inputs and weights are
                // not.
                intermediateTensorConsumerCount[tensor.id]--;
              }
            }
          });
        }
      }
    });
  }
  /**
   * Executes the inference for given input tensors in Async fashion.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs output node name from the Tensorflow model, if no outputs
   * are specified, the default outputs of the model would be used. You can
   * inspect intermediate nodes of the model by adding them to the outputs
   * array.
   */


  async executeAsync(inputs, outputs) {
    return this._executeAsync(inputs, outputs);
  }
  /**
   * Executes the inference for given input tensors in Async fashion.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs output node name from the Tensorflow model, if no outputs
   * are specified, the default outputs of the model would be used. You can
   * inspect intermediate nodes of the model by adding them to the outputs
   * array.
   * @param isFunctionExecution Flag for executing a function.
   * @param tensorArrayMap Optional, global TensorArray map by id. Used for
   * function execution.
   * @param tensorArrayMap Optinal global TensorList map by id. Used for
   * function execution.
   */


  async _executeAsync(inputs, outputs, isFunctionExecution = false, tensorArrayMap = {}, tensorListMap = {}) {
    if (!isFunctionExecution) {
      inputs = this.mapInputs(inputs);
      this.checkInputs(inputs);
      this.checkInputShapeAndType(inputs);
      outputs = this.mapOutputs(outputs);
      this.checkOutputs(outputs);
    }

    const context = new _execution_context.ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap); // Graph with control flow op requires runtime evaluation of the execution
    // order, while without control flow the execution order is pre-determined
    // in the compile method.

    const tensorMap = await this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);
    const results = outputs.map(name => (0, _utils.getTensor)(name, tensorMap, context)); // dispose all the intermediate tensors

    const outputIds = results.map(t => t.id);
    const inputIds = Object.keys(inputs).map(name => inputs[name].id);
    const keepIds = new Set([...outputIds, ...inputIds, ...this.weightIds]);
    Object.keys(tensorMap).forEach(key => {
      const tensorArray = tensorMap[key];
      tensorArray.forEach(tensor => {
        if (tensor && !tensor.isDisposed && !keepIds.has(tensor.id)) {
          tensor.dispose();
        }
      });
    }); // dispose the context for the root executor

    if (this.parent == null) {
      context.dispose(keepIds);
    }

    return results;
  }

  async executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {
    const mappedInputs = inputs.reduce((map, tensor, index) => {
      map[this.inputs[index].name] = tensor;
      return map;
    }, {});
    return this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);
  }
  /**
   * When there are control flow nodes in the graph, the graph execution use
   * ExecutionContext to keep track of the frames and loop iterators.
   * @param inputs placeholder tensors for the graph.
   * @param context the execution context object for current execution.
   * @param isFunctionExecution Flag for executing a function.
   */


  async executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {
    const names = Object.keys(inputs);
    const inputNodes = names.map(name => this.graph.nodes[(0, _utils.parseNodeName)(name)[0]]);
    const outputNodes = outputNames.map(name => this.graph.nodes[(0, _utils.parseNodeName)(name)[0]]);
    const {
      usedNodes,
      missingInputs,
      dynamicNode,
      syncInputs
    } = (0, _model_analysis.getExecutionSubgraph)(inputs, outputNodes, this.weightMap);
    const stack = [...inputNodes, ...this.graph.weights].map(node => {
      return {
        node,
        contexts: context.currentContext
      };
    });
    const tensorsMap = Object.assign({}, this.weightMap);
    Object.keys(inputs).forEach(name => {
      const [nodeName, index] = (0, _utils.parseNodeName)(name);
      const tensors = [];
      tensors[index] = inputs[name];
      tensorsMap[nodeName] = tensors;
    });
    const intermediateTensorConsumerCount = {};
    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);
    const added = {};

    while (stack.length > 0) {
      const promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes);
      await Promise.all(promises);
    }

    if (dynamicNode == null && !isFunctionExecution) {
      console.warn(`This model execution did not contain any nodes with control flow ` + `or dynamic output shapes. You can use model.execute() instead.`);
    }

    const missingOutputs = outputNodes.filter(node => !(0, _model_analysis.isControlFlow)(node) && !(0, _utils.getTensor)(node.name, tensorsMap, context)).map(node => node.name);

    if (missingOutputs.length > 0) {
      let alternativeMsg = '';

      if (dynamicNode != null) {
        alternativeMsg = `Alternatively, to avoid the dynamic ops, use model.execute() ` + `and specify the inputs [${syncInputs}]`;
      }

      throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided ` + `inputs [${names}]. Consider providing the following inputs: ` + `[${missingInputs}]. ${alternativeMsg}`);
    }

    return tensorsMap;
  }

  processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes) {
    const promises = [];

    while (stack.length > 0) {
      const item = stack.pop();
      context.currentContext = item.contexts;
      let nodeName = ''; // The tensor of the Enter op with isConstant set should be set
      // in the parent scope, so it will be available as constant for the
      // whole loop.

      if (item.node.op === 'Enter' && (0, _utils.getParamValue)('isConstant', item.node, tensorMap, context)) {
        [nodeName] = (0, _utils.getNodeNameAndIndex)(item.node.name, context);
      } // only process nodes that are not provided as input nodes.


      if (inputNodes.indexOf(item.node) === -1) {
        const tensors = (0, _operation_executor.executeOp)(item.node, tensorMap, context);

        if (!nodeName) {
          [nodeName] = (0, _utils.getNodeNameAndIndex)(item.node.name, context);
        }

        const currentContext = context.currentContext;

        if (tensors instanceof Promise) {
          promises.push(tensors.then(t => {
            tensorMap[nodeName] = t;
            context.currentContext = currentContext;
            this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);
            this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
            return t;
          }));
        } else {
          tensorMap[nodeName] = tensors;
          this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);
          this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
        }
      } else {
        this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
      }
    }

    return promises;
  }

  processChildNodes(node, stack, context, tensorMap, added, usedNodes) {
    node.children.forEach(childNode => {
      const [nodeName] = (0, _utils.getNodeNameAndIndex)(childNode.name, context);

      if (added[nodeName] || !usedNodes.has(childNode.name)) {
        return;
      } // Merge op can be pushed if any of its inputs has value.


      if (childNode.op === 'Merge') {
        if (childNode.inputNames.some(name => {
          return !!(0, _utils.getTensor)(name, tensorMap, context);
        })) {
          added[nodeName] = true;
          stack.push({
            contexts: context.currentContext,
            node: childNode
          });
        }
      } else // Otherwise all inputs must to have value.
        if (childNode.inputNames.every(name => {
          return !!(0, _utils.getTensor)(name, tensorMap, context);
        })) {
          added[nodeName] = true;
          stack.push({
            contexts: context.currentContext,
            node: childNode
          });
        }
    });
  }
  /**
   * Releases the memory used by the weight tensors.
   */


  dispose() {
    Object.keys(this.weightMap).forEach(key => this.weightMap[key].forEach(tensor => tensor.dispose()));
  }

  checkInputShapeAndType(inputs) {
    Object.keys(inputs).forEach(name => {
      const input = inputs[name];
      const [nodeName] = (0, _utils.parseNodeName)(name);
      const node = this.graph.nodes[nodeName];

      if (node.attrParams['shape'] && node.attrParams['shape'].value) {
        const shape = node.attrParams['shape'].value;
        const match = shape.length === input.shape.length && input.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);

        _tfjsCore.util.assert(match, () => `The shape of dict['${node.name}'] provided in ` + `model.execute(dict) must be [${shape}], but was ` + `[${input.shape}]`);
      }

      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {
        _tfjsCore.util.assert(input.dtype === node.attrParams['dtype'].value, () => `The dtype of dict['${node.name}'] provided in ` + `model.execute(dict) must be ` + `${node.attrParams['dtype'].value}, but was ${input.dtype}`);
      }
    });
  }

  mapInputs(inputs) {
    const result = {};

    for (const inputName in inputs) {
      if (this._signature != null && this._signature.inputs != null && this._signature.inputs[inputName] != null) {
        const tensor = this._signature.inputs[inputName];
        result[tensor.name] = inputs[inputName];
      } else {
        result[inputName] = inputs[inputName];
      }
    }

    return result;
  }

  checkInputs(inputs) {
    const notInGraph = Object.keys(inputs).filter(name => {
      const [nodeName] = (0, _utils.parseNodeName)(name);
      return this.graph.nodes[nodeName] == null;
    });

    if (notInGraph.length > 0) {
      throw new Error(`The dict provided in model.execute(dict) has ` + `keys: [${notInGraph}] that are not part of graph`);
    }
  }

  mapOutputs(outputs) {
    return outputs.map(name => {
      if (this._signature != null && this._signature.outputs != null && this._signature.outputs[name] != null) {
        const tensor = this._signature.outputs[name];
        return tensor.name;
      }

      return name;
    }, {});
  }

  checkOutputs(outputs) {
    outputs.forEach(name => {
      const [normalizedName] = (0, _utils.parseNodeName)(name);

      if (!this.graph.nodes[normalizedName]) {
        throw new Error(`The output '${name}' is not found in the graph`);
      }
    });
  }

}

exports.GraphExecutor = GraphExecutor;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../operations/executors/utils":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js","../operations/operation_executor":"node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js","./execution_context":"node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js","./model_analysis":"node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js"}],"node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadGraphModel = loadGraphModel;
exports.GraphModel = exports.DEFAULT_MODEL_NAME = exports.TFHUB_SEARCH_PARAM = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _operation_mapper = require("../operations/operation_mapper");

var _graph_executor = require("./graph_executor");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TFHUB_SEARCH_PARAM = '?tfjs-format=file';
exports.TFHUB_SEARCH_PARAM = TFHUB_SEARCH_PARAM;
const DEFAULT_MODEL_NAME = 'model.json';
/**
 * A `tf.GraphModel` is a directed, acyclic graph built from a
 * SavedModel GraphDef and allows inference execution.
 *
 * A `tf.GraphModel` can only be created by loading from a model converted from
 * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using
 * the command line converter tool and loaded via `tf.loadGraphModel`.
 *
 * @doc {heading: 'Models', subheading: 'Classes'}
 */

exports.DEFAULT_MODEL_NAME = DEFAULT_MODEL_NAME;

class GraphModel {
  /**
   * @param modelUrl url for the model, or an `io.IOHandler`.
   * @param weightManifestUrl url for the weight file generated by
   * scripts/convert.py script.
   * @param requestOption options for Request, which allows to send credentials
   * and custom headers.
   * @param onProgress Optional, progress callback function, fired periodically
   * before the load is completed.
   */
  constructor(modelUrl, loadOptions = {}) {
    this.modelUrl = modelUrl;
    this.loadOptions = loadOptions;
    this.version = 'n/a';

    if (loadOptions == null) {
      this.loadOptions = {};
    }
  } // Returns the version information for the tensorflow model GraphDef.


  get modelVersion() {
    return this.version;
  }

  get inputNodes() {
    return this.executor.inputNodes;
  }

  get outputNodes() {
    return this.executor.outputNodes;
  }

  get inputs() {
    return this.executor.inputs;
  }

  get outputs() {
    return this.executor.outputs;
  }

  get weights() {
    return this.executor.weightMap;
  }

  findIOHandler() {
    const path = this.modelUrl;

    if (path.load != null) {
      // Path is an IO Handler.
      this.handler = path;
    } else if (this.loadOptions.requestInit != null) {
      this.handler = _tfjsCore.io.browserHTTPRequest(path, this.loadOptions);
    } else {
      const handlers = _tfjsCore.io.getLoadHandlers(path, this.loadOptions);

      if (handlers.length === 0) {
        // For backward compatibility: if no load handler can be found,
        // assume it is a relative http path.
        handlers.push(_tfjsCore.io.browserHTTPRequest(path, this.loadOptions));
      } else if (handlers.length > 1) {
        throw new Error(`Found more than one (${handlers.length}) load handlers for ` + `URL '${[path]}'`);
      }

      this.handler = handlers[0];
    }
  }
  /**
   * Loads the model and weight files, construct the in memory weight map and
   * compile the inference graph.
   */


  async load() {
    this.findIOHandler();

    if (this.handler.load == null) {
      throw new Error('Cannot proceed with model loading because the IOHandler provided ' + 'does not have the `load` method implemented.');
    }

    const artifacts = await this.handler.load();
    return this.loadSync(artifacts);
  }
  /**
   * Synchronously construct the in memory weight map and
   * compile the inference graph.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */


  loadSync(artifacts) {
    this.artifacts = artifacts;
    const graph = this.artifacts.modelTopology;
    let signature = {};

    if (this.artifacts.userDefinedMetadata != null) {
      signature = // tslint:disable-next-line:no-any
      this.artifacts.userDefinedMetadata.signature;
    }

    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;

    const weightMap = _tfjsCore.io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);

    this.executor = new _graph_executor.GraphExecutor(_operation_mapper.OperationMapper.Instance.transformGraph(graph, signature));
    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);
    return true;
  }
  /**
   * Save the configuration and/or weights of the GraphModel.
   *
   * An `IOHandler` is an object that has a `save` method of the proper
   * signature defined. The `save` method manages the storing or
   * transmission of serialized data ("artifacts") that represent the
   * model's topology and weights onto or via a specific medium, such as
   * file downloads, local storage, IndexedDB in the web browser and HTTP
   * requests to a server. TensorFlow.js provides `IOHandler`
   * implementations for a number of frequently used saving mediums, such as
   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
   * for more details.
   *
   * This method also allows you to refer to certain types of `IOHandler`s
   * as URL-like string shortcuts, such as 'localstorage://' and
   * 'indexeddb://'.
   *
   * Example 1: Save `model`'s topology and weights to browser [local
   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
   * then load it back.
   *
   * ```js
   * const modelUrl =
   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
   * const model = await tf.loadGraphModel(modelUrl);
   * const zeros = tf.zeros([1, 224, 224, 3]);
   * model.predict(zeros).print();
   *
   * const saveResults = await model.save('localstorage://my-model-1');
   *
   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');
   * console.log('Prediction from loaded model:');
   * model.predict(zeros).print();
   * ```
   *
   * @param handlerOrURL An instance of `IOHandler` or a URL-like,
   * scheme-based string shortcut for `IOHandler`.
   * @param config Options for saving the model.
   * @returns A `Promise` of `SaveResult`, which summarizes the result of
   * the saving, such as byte sizes of the saved artifacts for the model's
   *   topology and weight values.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */


  async save(handlerOrURL, config) {
    if (typeof handlerOrURL === 'string') {
      const handlers = _tfjsCore.io.getSaveHandlers(handlerOrURL);

      if (handlers.length === 0) {
        throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);
      } else if (handlers.length > 1) {
        throw new Error(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);
      }

      handlerOrURL = handlers[0];
    }

    if (handlerOrURL.save == null) {
      throw new Error('GraphModel.save() cannot proceed because the IOHandler ' + 'provided does not have the `save` attribute defined.');
    }

    return handlerOrURL.save(this.artifacts);
  }
  /**
   * Execute the inference for the input tensors.
   *
   * @param input The input tensors, when there is single input for the model,
   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,
   * inputs params should be in either `tf.Tensor`[] if the input order is
   * fixed, or otherwise NamedTensorMap format.
   *
   * For model with multiple inputs, we recommend you use NamedTensorMap as the
   * input type, if you use `tf.Tensor`[], the order of the array needs to
   * follow the
   * order of inputNodes array. @see {@link GraphModel.inputNodes}
   *
   * You can also feed any intermediate nodes using the NamedTensorMap as the
   * input type. For example, given the graph
   *    InputNode => Intermediate => OutputNode,
   * you can execute the subgraph Intermediate => OutputNode by calling
   *    model.execute('IntermediateNode' : tf.tensor(...));
   *
   * This is useful for models that uses tf.dynamic_rnn, where the intermediate
   * state needs to be fed manually.
   *
   * For batch inference execution, the tensors for each input need to be
   * concatenated together. For example with mobilenet, the required input shape
   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].
   * If we are provide a batched data of 100 images, the input tensor should be
   * in the shape of [100, 244, 244, 3].
   *
   * @param config Prediction configuration for specifying the batch size and
   * output node names. Currently the batch size option is ignored for graph
   * model.
   *
   * @returns Inference result tensors. The output would be single `tf.Tensor`
   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]
   * will be returned for model with multiple outputs.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */


  predict(inputs, config) {
    return this.execute(inputs, this.outputNodes);
  }

  normalizeInputs(inputs) {
    if (!(inputs instanceof _tfjsCore.Tensor) && !Array.isArray(inputs)) {
      // The input is already a NamedTensorMap.
      return inputs;
    }

    inputs = Array.isArray(inputs) ? inputs : [inputs];

    if (inputs.length !== this.inputNodes.length) {
      throw new Error('Input tensor count mismatch,' + `the graph model has ${this.inputNodes.length} placeholders, ` + `while there are ${inputs.length} input tensors.`);
    }

    return this.inputNodes.reduce((map, inputName, i) => {
      map[inputName] = inputs[i];
      return map;
    }, {});
  }

  normalizeOutputs(outputs) {
    outputs = outputs || this.outputNodes;
    return !Array.isArray(outputs) ? [outputs] : outputs;
  }
  /**
   * Executes inference for the model for given input tensors.
   * @param inputs tensor, tensor array or tensor map of the inputs for the
   * model, keyed by the input node names.
   * @param outputs output node name from the Tensorflow model, if no
   * outputs are specified, the default outputs of the model would be used.
   * You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   *
   * @returns A single tensor if provided with a single output or no outputs
   * are provided and there is only one default output, otherwise return a
   * tensor array. The order of the tensor array is the same as the outputs
   * if provided, otherwise the order of outputNodes attribute of the model.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */


  execute(inputs, outputs) {
    inputs = this.normalizeInputs(inputs);
    outputs = this.normalizeOutputs(outputs);
    const result = this.executor.execute(inputs, outputs);
    return result.length > 1 ? result : result[0];
  }
  /**
   * Executes inference for the model for given input tensors in async
   * fashion, use this method when your model contains control flow ops.
   * @param inputs tensor, tensor array or tensor map of the inputs for the
   * model, keyed by the input node names.
   * @param outputs output node name from the Tensorflow model, if no outputs
   * are specified, the default outputs of the model would be used. You can
   * inspect intermediate nodes of the model by adding them to the outputs
   * array.
   *
   * @returns A Promise of single tensor if provided with a single output or
   * no outputs are provided and there is only one default output, otherwise
   * return a tensor map.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */


  async executeAsync(inputs, outputs) {
    inputs = this.normalizeInputs(inputs);
    outputs = this.normalizeOutputs(outputs);
    const result = await this.executor.executeAsync(inputs, outputs);
    return result.length > 1 ? result : result[0];
  }

  convertTensorMapToTensorsMap(map) {
    return Object.keys(map).reduce((newMap, key) => {
      newMap[key] = [map[key]];
      return newMap;
    }, {});
  }
  /**
   * Releases the memory used by the weight tensors.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */


  dispose() {
    this.executor.dispose();
  }

}
/**
 * Load a graph model given a URL to the model definition.
 *
 * Example of loading MobileNetV2 from a URL and making a prediction with a
 * zeros input:
 *
 * ```js
 * const modelUrl =
 *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
 * const model = await tf.loadGraphModel(modelUrl);
 * const zeros = tf.zeros([1, 224, 224, 3]);
 * model.predict(zeros).print();
 * ```
 *
 * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with
 * a zeros input:
 *
 * ```js
 * const modelUrl =
 *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';
 * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});
 * const zeros = tf.zeros([1, 224, 224, 3]);
 * model.predict(zeros).print();
 * ```
 * @param modelUrl The url or an `io.IOHandler` that loads the model.
 * @param options Options for the HTTP request, which allows to send credentials
 *    and custom headers.
 *
 * @doc {heading: 'Models', subheading: 'Loading'}
 */


exports.GraphModel = GraphModel;

async function loadGraphModel(modelUrl, options = {}) {
  if (modelUrl == null) {
    throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' + 'or an IOHandler that loads the model');
  }

  if (options == null) {
    options = {};
  }

  if (options.fromTFHub) {
    if (modelUrl.load == null) {
      if (!modelUrl.endsWith('/')) {
        modelUrl = modelUrl + '/';
      }

      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;
    }
  }

  const model = new GraphModel(modelUrl, options);
  await model.load();
  return model;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../operations/operation_mapper":"node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js","./graph_executor":"node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js"}],"node_modules/@tensorflow/tfjs-converter/dist/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "GraphModel", {
  enumerable: true,
  get: function () {
    return _graph_model.GraphModel;
  }
});
Object.defineProperty(exports, "loadGraphModel", {
  enumerable: true,
  get: function () {
    return _graph_model.loadGraphModel;
  }
});
Object.defineProperty(exports, "deregisterOp", {
  enumerable: true,
  get: function () {
    return _register.deregisterOp;
  }
});
Object.defineProperty(exports, "registerOp", {
  enumerable: true,
  get: function () {
    return _register.registerOp;
  }
});
Object.defineProperty(exports, "version_converter", {
  enumerable: true,
  get: function () {
    return _version.version;
  }
});

var _graph_model = require("./executor/graph_model");

var _register = require("./operations/custom_op/register");

var _version = require("./version");
},{"./executor/graph_model":"node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js","./operations/custom_op/register":"node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js","./version":"node_modules/@tensorflow/tfjs-core/dist/version.js"}],"node_modules/@tensorflow-models/handpose/dist/handpose.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.load = F;
exports.HandPose = void 0;

var _tfjsConverter = require("@tensorflow/tfjs-converter");

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
    * @license
    * Copyright 2020 Google LLC. All Rights Reserved.
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    * =============================================================================
    */
function g(t, n, e, r) {
  return new (e || (e = Promise))(function (o, i) {
    function s(t) {
      try {
        u(r.next(t));
      } catch (t) {
        i(t);
      }
    }

    function a(t) {
      try {
        u(r.throw(t));
      } catch (t) {
        i(t);
      }
    }

    function u(t) {
      var n;
      t.done ? o(t.value) : (n = t.value, n instanceof e ? n : new e(function (t) {
        t(n);
      })).then(s, a);
    }

    u((r = r.apply(t, n || [])).next());
  });
}

function b(t, n) {
  var e,
      r,
      o,
      i,
      s = {
    label: 0,
    sent: function () {
      if (1 & o[0]) throw o[1];
      return o[1];
    },
    trys: [],
    ops: []
  };
  return i = {
    next: a(0),
    throw: a(1),
    return: a(2)
  }, "function" == typeof Symbol && (i[Symbol.iterator] = function () {
    return this;
  }), i;

  function a(i) {
    return function (a) {
      return function (i) {
        if (e) throw new TypeError("Generator is already executing.");

        for (; s;) try {
          if (e = 1, r && (o = 2 & i[0] ? r.return : i[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, i[1])).done) return o;

          switch (r = 0, o && (i = [2 & i[0], o.value]), i[0]) {
            case 0:
            case 1:
              o = i;
              break;

            case 4:
              return s.label++, {
                value: i[1],
                done: !1
              };

            case 5:
              s.label++, r = i[1], i = [0];
              continue;

            case 7:
              i = s.ops.pop(), s.trys.pop();
              continue;

            default:
              if (!(o = s.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {
                s = 0;
                continue;
              }

              if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
                s.label = i[1];
                break;
              }

              if (6 === i[0] && s.label < o[1]) {
                s.label = o[1], o = i;
                break;
              }

              if (o && s.label < o[2]) {
                s.label = o[2], s.ops.push(i);
                break;
              }

              o[2] && s.ops.pop(), s.trys.pop();
              continue;
          }

          i = n.call(t, s);
        } catch (t) {
          i = [6, t], r = 0;
        } finally {
          e = o = 0;
        }

        if (5 & i[0]) throw i[1];
        return {
          value: i[0] ? i[1] : void 0,
          done: !0
        };
      }([i, a]);
    };
  }
}

function k(t) {
  return [Math.abs(t.endPoint[0] - t.startPoint[0]), Math.abs(t.endPoint[1] - t.startPoint[1])];
}

function x(t) {
  return [t.startPoint[0] + (t.endPoint[0] - t.startPoint[0]) / 2, t.startPoint[1] + (t.endPoint[1] - t.startPoint[1]) / 2];
}

function y(t, n) {
  void 0 === n && (n = 1.5);
  var e = x(t),
      r = k(t),
      o = [n * r[0] / 2, n * r[1] / 2];
  return {
    startPoint: [e[0] - o[0], e[1] - o[1]],
    endPoint: [e[0] + o[0], e[1] + o[1]],
    palmLandmarks: t.palmLandmarks
  };
}

function w(t) {
  var n = x(t),
      e = k(t),
      r = Math.max.apply(Math, e) / 2;
  return {
    startPoint: [n[0] - r, n[1] - r],
    endPoint: [n[0] + r, n[1] + r],
    palmLandmarks: t.palmLandmarks
  };
}

function L(t, n) {
  var e = [t.endPoint[0] - t.startPoint[0], t.endPoint[1] - t.startPoint[1]],
      r = [e[0] * n[0], e[1] * n[1]];
  return {
    startPoint: [t.startPoint[0] + r[0], t.startPoint[1] + r[1]],
    endPoint: [t.endPoint[0] + r[0], t.endPoint[1] + r[1]],
    palmLandmarks: t.palmLandmarks
  };
}

var B = function () {
  function t(t, n, o, i, s, a) {
    this.model = t, this.width = n, this.height = o, this.iouThreshold = s, this.scoreThreshold = a, this.anchors = i.map(function (t) {
      return [t.x_center, t.y_center];
    }), this.anchorsTensor = (0, _tfjsCore.tensor2d)(this.anchors), this.inputSizeTensor = (0, _tfjsCore.tensor1d)([n, o]), this.doubleInputSizeTensor = (0, _tfjsCore.tensor1d)([2 * n, 2 * o]);
  }

  return t.prototype.normalizeBoxes = function (t) {
    var n = this;
    return (0, _tfjsCore.tidy)(function () {
      var e = (0, _tfjsCore.slice)(t, [0, 0], [-1, 2]),
          r = (0, _tfjsCore.slice)(t, [0, 2], [-1, 2]),
          o = (0, _tfjsCore.add)((0, _tfjsCore.div)(e, n.inputSizeTensor), n.anchorsTensor),
          c = (0, _tfjsCore.div)(r, n.doubleInputSizeTensor),
          f = (0, _tfjsCore.mul)((0, _tfjsCore.sub)(o, c), n.inputSizeTensor),
          l = (0, _tfjsCore.mul)((0, _tfjsCore.add)(o, c), n.inputSizeTensor);
      return (0, _tfjsCore.concat2d)([f, l], 1);
    });
  }, t.prototype.normalizeLandmarks = function (t, n) {
    var e = this;
    return (0, _tfjsCore.tidy)(function () {
      var r = (0, _tfjsCore.add)((0, _tfjsCore.div)(t.reshape([-1, 7, 2]), e.inputSizeTensor), e.anchors[n]);
      return (0, _tfjsCore.mul)(r, e.inputSizeTensor);
    });
  }, t.prototype.getBoundingBoxes = function (t) {
    return g(this, void 0, void 0, function () {
      var e,
          r,
          s,
          a,
          d,
          p,
          m,
          v,
          P,
          g,
          k,
          x,
          y,
          w,
          L,
          B = this;
      return b(this, function (b) {
        switch (b.label) {
          case 0:
            return e = (0, _tfjsCore.tidy)(function () {
              return (0, _tfjsCore.mul)((0, _tfjsCore.sub)(t, .5), 2);
            }), "webgl" === (0, _tfjsCore.getBackend)() ? (s = (0, _tfjsCore.env)().get("WEBGL_PACK_DEPTHWISECONV"), (0, _tfjsCore.env)().set("WEBGL_PACK_DEPTHWISECONV", !0), r = this.model.predict(e), (0, _tfjsCore.env)().set("WEBGL_PACK_DEPTHWISECONV", s)) : r = this.model.predict(e), a = r.squeeze(), d = (0, _tfjsCore.tidy)(function () {
              return (0, _tfjsCore.sigmoid)((0, _tfjsCore.slice)(a, [0, 0], [-1, 1])).squeeze();
            }), p = (0, _tfjsCore.slice)(a, [0, 1], [-1, 4]), m = this.normalizeBoxes(p), v = console.warn, console.warn = function () {}, P = _tfjsCore.image.nonMaxSuppression(m, d, 1, this.iouThreshold, this.scoreThreshold), console.warn = v, [4, P.array()];

          case 1:
            return g = b.sent(), k = [e, r, P, a, m, p, d], 0 === g.length ? (k.forEach(function (t) {
              return t.dispose();
            }), [2, null]) : (x = g[0], y = (0, _tfjsCore.slice)(m, [x, 0], [1, -1]), w = (0, _tfjsCore.slice)(a, [x, 5], [1, 14]), L = (0, _tfjsCore.tidy)(function () {
              return B.normalizeLandmarks(w, x).reshape([-1, 2]);
            }), k.push(w), k.forEach(function (t) {
              return t.dispose();
            }), [2, {
              boxes: y,
              palmLandmarks: L
            }]);
        }
      });
    });
  }, t.prototype.estimateHandBounds = function (t) {
    return g(this, void 0, void 0, function () {
      var n,
          e,
          r,
          i,
          s,
          a,
          u,
          h,
          d = this;
      return b(this, function (c) {
        switch (c.label) {
          case 0:
            return n = t.shape[1], e = t.shape[2], r = (0, _tfjsCore.tidy)(function () {
              return t.resizeBilinear([d.width, d.height]).div(255);
            }), [4, this.getBoundingBoxes(r)];

          case 1:
            return null === (i = c.sent()) ? (r.dispose(), [2, null]) : (s = i.boxes.arraySync(), a = s[0].slice(0, 2), u = s[0].slice(2, 4), h = i.palmLandmarks.arraySync(), r.dispose(), i.boxes.dispose(), i.palmLandmarks.dispose(), [2, (f = {
              startPoint: a,
              endPoint: u,
              palmLandmarks: h
            }, l = [e / this.width, n / this.height], {
              startPoint: [f.startPoint[0] * l[0], f.startPoint[1] * l[1]],
              endPoint: [f.endPoint[0] * l[0], f.endPoint[1] * l[1]],
              palmLandmarks: f.palmLandmarks.map(function (t) {
                return [t[0] * l[0], t[1] * l[1]];
              })
            })]);
        }

        var f, l;
      });
    });
  }, t;
}(),
    I = {
  thumb: [1, 2, 3, 4],
  indexFinger: [5, 6, 7, 8],
  middleFinger: [9, 10, 11, 12],
  ringFinger: [13, 14, 15, 16],
  pinky: [17, 18, 19, 20],
  palmBase: [0]
};

function C(t, n) {
  var e,
      r = Math.PI / 2 - Math.atan2(-(n[1] - t[1]), n[0] - t[0]);
  return (e = r) - 2 * Math.PI * Math.floor((e + Math.PI) / (2 * Math.PI));
}

var H = function (t, n) {
  return [[1, 0, t], [0, 1, n], [0, 0, 1]];
};

function M(t, n) {
  for (var e = 0, r = 0; r < t.length; r++) e += t[r] * n[r];

  return e;
}

function T(t, n) {
  for (var e = [], r = 0; r < t.length; r++) e.push(t[r][n]);

  return e;
}

function E(t, n) {
  for (var e = [], r = t.length, o = 0; o < r; o++) {
    e.push([]);

    for (var i = 0; i < r; i++) e[o].push(M(t[o], T(n, i)));
  }

  return e;
}

function O(t, n) {
  var e = Math.cos(t),
      r = Math.sin(t),
      o = [[e, -r, 0], [r, e, 0], [0, 0, 1]],
      i = E(H(n[0], n[1]), o);
  return E(i, H(-n[0], -n[1]));
}

function S(t, n) {
  return [M(t, n[0]), M(t, n[1])];
}

var W = [0, -.4],
    z = [0, -.1],
    D = [0, 5, 9, 13, 17, 1, 2],
    _ = function () {
  function t(t, n, e, r, o, i) {
    this.regionsOfInterest = [], this.runsWithoutHandDetector = 0, this.boundingBoxDetector = t, this.meshDetector = n, this.maxContinuousChecks = o, this.detectionConfidence = i, this.meshWidth = e, this.meshHeight = r, this.maxHandsNumber = 1;
  }

  return t.prototype.getBoxForPalmLandmarks = function (t, n) {
    var e = t.map(function (t) {
      return S(t.concat([1]), n);
    });
    return y(w(L(this.calculateLandmarksBoundingBox(e), W)), 3);
  }, t.prototype.getBoxForHandLandmarks = function (t) {
    for (var n = y(w(L(this.calculateLandmarksBoundingBox(t), z)), 1.65), e = [], r = 0; r < D.length; r++) e.push(t[D[r]].slice(0, 2));

    return n.palmLandmarks = e, n;
  }, t.prototype.transformRawCoords = function (t, n, e, r) {
    var o,
        i,
        s,
        a,
        u = this,
        h = k(n),
        d = [h[0] / this.meshWidth, h[1] / this.meshHeight],
        c = t.map(function (t) {
      return [d[0] * (t[0] - u.meshWidth / 2), d[1] * (t[1] - u.meshHeight / 2), t[2]];
    }),
        f = O(e, [0, 0]),
        l = c.map(function (t) {
      return S(t, f).concat([t[2]]);
    }),
        p = (i = [[(o = r)[0][0], o[1][0]], [o[0][1], o[1][1]]], s = [o[0][2], o[1][2]], a = [-M(i[0], s), -M(i[1], s)], [i[0].concat(a[0]), i[1].concat(a[1]), [0, 0, 1]]),
        m = x(n).concat([1]),
        v = [M(m, p[0]), M(m, p[1])];
    return l.map(function (t) {
      return [t[0] + v[0], t[1] + v[1], t[2]];
    });
  }, t.prototype.estimateHand = function (t) {
    return g(this, void 0, void 0, function () {
      var e, r, o, i, s, a, u, h, d, l, m, v, P, g, k, y, w, L, B, I;
      return b(this, function (b) {
        switch (b.label) {
          case 0:
            return !0 !== (e = this.shouldUpdateRegionsOfInterest()) ? [3, 2] : [4, this.boundingBoxDetector.estimateHandBounds(t)];

          case 1:
            return null === (r = b.sent()) ? (t.dispose(), this.regionsOfInterest = [], [2, null]) : (this.updateRegionsOfInterest(r, !0), this.runsWithoutHandDetector = 0, [3, 3]);

          case 2:
            this.runsWithoutHandDetector++, b.label = 3;

          case 3:
            return o = this.regionsOfInterest[0], i = C(o.palmLandmarks[0], o.palmLandmarks[2]), s = x(o), a = [s[0] / t.shape[2], s[1] / t.shape[1]], u = _tfjsCore.image.rotateWithOffset(t, i, 0, a), h = O(-i, s), d = !0 === e ? this.getBoxForPalmLandmarks(o.palmLandmarks, h) : o, l = function (t, e, r) {
              var o = e.shape[1],
                  i = e.shape[2],
                  s = [[t.startPoint[1] / o, t.startPoint[0] / i, t.endPoint[1] / o, t.endPoint[0] / i]];
              return _tfjsCore.image.cropAndResize(e, s, [0], r);
            }(d, u, [this.meshWidth, this.meshHeight]), m = l.div(255), l.dispose(), u.dispose(), "webgl" === (0, _tfjsCore.getBackend)() ? (P = (0, _tfjsCore.env)().get("WEBGL_PACK_DEPTHWISECONV"), (0, _tfjsCore.env)().set("WEBGL_PACK_DEPTHWISECONV", !0), v = this.meshDetector.predict(m), (0, _tfjsCore.env)().set("WEBGL_PACK_DEPTHWISECONV", P)) : v = this.meshDetector.predict(m), g = v[0], k = v[1], m.dispose(), y = g.dataSync()[0], g.dispose(), y < this.detectionConfidence ? (k.dispose(), this.regionsOfInterest = [], [2, null]) : (w = (0, _tfjsCore.reshape)(k, [-1, 3]), L = w.arraySync(), k.dispose(), w.dispose(), B = this.transformRawCoords(L, d, i, h), I = this.getBoxForHandLandmarks(B), this.updateRegionsOfInterest(I, !1), [2, {
              landmarks: B,
              handInViewConfidence: y,
              boundingBox: {
                topLeft: I.startPoint,
                bottomRight: I.endPoint
              }
            }]);
        }
      });
    });
  }, t.prototype.calculateLandmarksBoundingBox = function (t) {
    var n = t.map(function (t) {
      return t[0];
    }),
        e = t.map(function (t) {
      return t[1];
    });
    return {
      startPoint: [Math.min.apply(Math, n), Math.min.apply(Math, e)],
      endPoint: [Math.max.apply(Math, n), Math.max.apply(Math, e)]
    };
  }, t.prototype.updateRegionsOfInterest = function (t, n) {
    if (n) this.regionsOfInterest = [t];else {
      var e = this.regionsOfInterest[0],
          r = 0;

      if (null != e && null != e.startPoint) {
        var o = t.startPoint,
            i = o[0],
            s = o[1],
            a = t.endPoint,
            u = a[0],
            h = a[1],
            d = e.startPoint,
            c = d[0],
            f = d[1],
            l = e.endPoint,
            p = l[0],
            m = l[1],
            v = Math.max(i, c),
            P = Math.max(s, f),
            g = (Math.min(u, p) - v) * (Math.min(h, m) - P);
        r = g / ((u - i) * (h - s) + (p - c) * (m - s) - g);
      }

      this.regionsOfInterest[0] = r > .8 ? e : t;
    }
  }, t.prototype.shouldUpdateRegionsOfInterest = function () {
    return this.regionsOfInterest.length !== this.maxHandsNumber || this.runsWithoutHandDetector >= this.maxContinuousChecks;
  }, t;
}();

function R() {
  return g(this, void 0, void 0, function () {
    return b(this, function (n) {
      return "https://tfhub.dev/mediapipe/tfjs-model/handdetector/1/default/1", [2, (0, _tfjsConverter.loadGraphModel)("https://tfhub.dev/mediapipe/tfjs-model/handdetector/1/default/1", {
        fromTFHub: !0
      })];
    });
  });
}

function j() {
  return g(this, void 0, void 0, function () {
    return b(this, function (n) {
      return "https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1", [2, (0, _tfjsConverter.loadGraphModel)("https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1", {
        fromTFHub: !0
      })];
    });
  });
}

function V() {
  return g(this, void 0, void 0, function () {
    return b(this, function (t) {
      return [2, _tfjsCore.util.fetch("https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1/anchors.json?tfjs-format=file").then(function (t) {
        return t.json();
      })];
    });
  });
}

function F(t) {
  var n = void 0 === t ? {} : t,
      e = n.maxContinuousChecks,
      r = void 0 === e ? 1 / 0 : e,
      o = n.detectionConfidence,
      i = void 0 === o ? .8 : o,
      s = n.iouThreshold,
      a = void 0 === s ? .3 : s,
      u = n.scoreThreshold,
      h = void 0 === u ? .5 : u;
  return g(this, void 0, void 0, function () {
    var t, n, e, o, s, u;
    return b(this, function (d) {
      switch (d.label) {
        case 0:
          return [4, Promise.all([V(), R(), j()])];

        case 1:
          return t = d.sent(), n = t[0], e = t[1], o = t[2], s = new B(e, 256, 256, n, a, h), u = new _(s, o, 256, 256, r, i), [2, new A(u)];
      }
    });
  });
}

var A = function () {
  function t(t) {
    this.pipeline = t;
  }

  return t.getAnnotations = function () {
    return I;
  }, t.prototype.estimateHands = function (t, n) {
    return void 0 === n && (n = !1), g(this, void 0, void 0, function () {
      var e, r, i, s, a, u, h, d, c;
      return b(this, function (f) {
        switch (f.label) {
          case 0:
            return e = function (t) {
              return t instanceof _tfjsCore.Tensor ? [t.shape[0], t.shape[1]] : [t.height, t.width];
            }(t), r = e[1], i = (0, _tfjsCore.tidy)(function () {
              return t instanceof _tfjsCore.Tensor || (t = _tfjsCore.browser.fromPixels(t)), t.toFloat().expandDims(0);
            }), [4, this.pipeline.estimateHand(i)];

          case 1:
            if (s = f.sent(), i.dispose(), null === s) return [2, []];

            for (a = s, !0 === n && (a = function (t, n) {
              var e = t.handInViewConfidence,
                  r = t.landmarks,
                  o = t.boundingBox;
              return {
                handInViewConfidence: e,
                landmarks: r.map(function (t) {
                  return [n - 1 - t[0], t[1], t[2]];
                }),
                boundingBox: {
                  topLeft: [n - 1 - o.topLeft[0], o.topLeft[1]],
                  bottomRight: [n - 1 - o.bottomRight[0], o.bottomRight[1]]
                }
              };
            }(s, r)), u = {}, h = 0, d = Object.keys(I); h < d.length; h++) c = d[h], u[c] = I[c].map(function (t) {
              return a.landmarks[t];
            });

            return [2, [{
              handInViewConfidence: a.handInViewConfidence,
              boundingBox: a.boundingBox,
              landmarks: a.landmarks,
              annotations: u
            }]];
        }
      });
    });
  }, t;
}();

exports.HandPose = A;
},{"@tensorflow/tfjs-converter":"node_modules/@tensorflow/tfjs-converter/dist/index.js","@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-wasm/dist/tf-backend-wasm.esm.js":[function(require,module,exports) {
var __filename = "/home/aiden/Desktop/project/tfjs-models/handpose/demo/node_modules/@tensorflow/tfjs-backend-wasm/dist/tf-backend-wasm.esm.js";
var process = require("process");
var __dirname = "/home/aiden/Desktop/project/tfjs-models/handpose/demo/node_modules/@tensorflow/tfjs-backend-wasm/dist";
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setWasmPath = $e;
exports.version_wasm = exports.BackendWasm = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var En, Dn;
let On;
!function (n) {
  n[n.float32 = 0] = "float32", n[n.int32 = 1] = "int32", n[n.bool = 2] = "bool", n[n.string = 3] = "string", n[n.complex64 = 4] = "complex64";
}(En || (En = {})), function (n) {
  n[n.linear = 0] = "linear", n[n.relu = 1] = "relu", n[n.relu6 = 2] = "relu6", n[n.prelu = 3] = "prelu";
}(Dn || (Dn = {}));
const Pn = {
  kernelName: _tfjsCore._FusedMatMul,
  backendName: "wasm",
  setupFunc: function (e) {
    On = e.wasm.cwrap(_tfjsCore._FusedMatMul, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: e,
      backend: t,
      attrs: a
    } = n,
          {
      a: r,
      b: u,
      bias: s,
      preluActivationWeights: i
    } = e;
    if ("float32" !== r.dtype || "float32" !== u.dtype) throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");
    const {
      transposeA: o,
      transposeB: l,
      activation: p
    } = a,
          d = t.dataIdMap.get(r.dataId).id,
          c = t.dataIdMap.get(u.dataId).id;
    let m = 0;

    if (null != s) {
      const n = t.dataIdMap.get(s.dataId);
      if (1 !== n.shape.length) throw new Error("_FusedMatMul only supports rank-1 bias but got " + `rank ${n.shape.length}.`);
      m = n.id;
    }

    const f = null == i ? 0 : t.dataIdMap.get(i.dataId).id,
          b = Dn[p];
    if (null == b) throw new Error(`${p} activation not yet supported for FusedConv2D ` + "in the wasm backend.");

    const h = o ? r.shape[2] : r.shape[1],
          y = l ? u.shape[1] : u.shape[2],
          g = r.shape[0],
          w = t.makeOutput([g, h, y], r.dtype),
          I = t.dataIdMap.get(w.dataId).id,
          _ = new Uint8Array(new Int32Array(r.shape).buffer),
          k = new Uint8Array(new Int32Array(u.shape).buffer);

    return On(d, _, r.shape.length, c, k, u.shape.length, o, l, b, m, f, I), w;
  }
};

function Wn(n) {
  let t;
  return {
    kernelName: n,
    backendName: "wasm",
    setupFunc: function (e) {
      t = e.wasm.cwrap(n, null, ["number", "number"]);
    },
    kernelFunc: function (n) {
      const {
        backend: a,
        inputs: {
          x: r
        }
      } = n,
            u = a.dataIdMap.get(r.dataId).id,
            s = a.makeOutput(r.shape, r.dtype),
            i = a.dataIdMap.get(s.dataId).id;
      return 0 === _tfjsCore.util.sizeFromShape(s.shape) ? s : (t(u, i), s);
    }
  };
}

const zn = Wn(_tfjsCore.Abs);

function Hn(n, t, r) {
  let u;
  return {
    kernelName: n,
    backendName: "wasm",
    setupFunc: function (e) {
      u = e.wasm.cwrap(n, null, ["number", "array", "number", "number", "array", "number", "number", "number"]);
    },
    kernelFunc: function (s) {
      const {
        backend: i,
        inputs: o
      } = s,
            {
        a: l,
        b: p
      } = o,
            d = i.dataIdMap.get(l.dataId).id,
            c = i.dataIdMap.get(p.dataId).id,
            m = null != r ? r : l.dtype,
            f = _tfjsCore.backend_util.assertAndGetBroadcastShape(l.shape, p.shape),
            b = i.makeOutput(f, m);

      if (0 === _tfjsCore.util.sizeFromShape(f)) return b;

      const h = new Uint8Array(new Int32Array(l.shape).buffer),
            y = new Uint8Array(new Int32Array(p.shape).buffer),
            g = i.dataIdMap.get(b.dataId).id,
            w = () => u(d, h, l.shape.length, c, y, p.shape.length, En[l.dtype], g);

      if (t && "float32" === l.dtype) return w(), b;

      const I = _tfjsCore.backend_util.getBroadcastDims(l.shape, f),
            _ = _tfjsCore.backend_util.getBroadcastDims(p.shape, f),
            k = I.every((n, e) => n === e),
            v = _.every((n, e) => n === e);

      if (k && v) return w(), b;
      throw new Error("Broadcasting along outer dims is not yet " + `supported for ${l.dtype} ${n}.`);
    }
  };
}

const Tn = Hn(_tfjsCore.Add, !0);
let Un;
const Bn = {
  kernelName: _tfjsCore.AddN,
  backendName: "wasm",
  setupFunc: function (n) {
    Un = n.wasm.cwrap(_tfjsCore.AddN, null, ["array", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: t,
      backend: a
    } = n,
          r = a.makeOutput(t[0].shape, t[0].dtype);
    if (0 === _tfjsCore.util.sizeFromShape(r.shape)) return r;
    const u = t.map(n => a.dataIdMap.get(n.dataId).id),
          s = new Uint8Array(new Int32Array(u).buffer),
          i = a.dataIdMap.get(r.dataId).id;
    return Un(s, u.length, En[r.dtype], i), r;
  }
};

function qn(n) {
  const {
    inputs: {
      x: e
    },
    backend: t
  } = n,
        a = t.makeOutput(e.shape, e.dtype),
        r = t.typedArrayFromHeap(e);
  return t.typedArrayFromHeap(a).set(r), a;
}

const Ln = {
  kernelName: _tfjsCore.Identity,
  backendName: "wasm",
  kernelFunc: qn
};
let Vn;

function jn(n) {
  const {
    inputs: e,
    backend: t,
    attrs: a
  } = n,
        [r, u] = function (n, e) {
    const t = [],
          a = [];

    for (let r = 0; r < n.length; ++r) 1 !== n[r] && t.push(n[r]), 1 !== n[e[r]] && a.push(e[r]);

    for (let n = 0; n < a.length; ++n) {
      let e = -1;

      for (let t = 0; t < a.length; ++t) a[t] >= n && (-1 === e || a[e] > a[t]) && (e = t);

      a[e] = n;
    }

    return [t, a];
  }(e.x.shape, a.perm);

  let s = !0;

  for (let n = 0; n < u.length; n++) u[n] !== n && (s = !1);

  const i = function (n, e) {
    const t = new Array(n.length);

    for (let a = 0; a < t.length; a++) t[a] = n[e[a]];

    return t;
  }(e.x.shape, a.perm),
        o = {
    dataId: e.x.dataId,
    shape: r,
    dtype: e.x.dtype
  };

  if (s) {
    const n = qn({
      inputs: e,
      backend: t
    });
    return n.shape = i, n;
  }

  const l = t.makeOutput(i, o.dtype),
        p = t.dataIdMap.get(o.dataId).id,
        d = t.dataIdMap.get(l.dataId).id,
        c = new Uint8Array(new Int32Array(u).buffer),
        m = new Uint8Array(new Int32Array(o.shape).buffer);
  return Vn(p, m, o.shape.length, En[o.dtype], d, c, u.length), l;
}

const Gn = {
  kernelName: _tfjsCore.Transpose,
  backendName: "wasm",
  kernelFunc: jn,
  setupFunc: function (n) {
    Vn = n.wasm.cwrap(_tfjsCore.Transpose, null, ["number", "array", "number", "number", "number", "array", "number"]);
  }
};

function $n(n, t, r) {
  const u = n.shape,
        s = n.shape.length,
        i = _tfjsCore.util.parseAxisParam(t, u);

  let o = i;

  const l = _tfjsCore.backend_util.getAxesPermutation(o, s);

  let p = null,
      d = !1;

  if (null != l) {
    const e = new Array(s);

    for (let n = 0; n < e.length; n++) e[n] = u[l[n]];

    o = _tfjsCore.backend_util.getInnerMostAxes(o.length, s), p = jn({
      inputs: {
        x: n
      },
      attrs: {
        perm: l
      },
      backend: r
    });
    const t = r.dataIdMap.get(n.dataId).id;
    r.dataIdMap.get(p.dataId).id !== t && (d = !0);
  }

  return {
    transposed: p,
    originalAxes: i,
    axes: o,
    inputWasTransposed: d
  };
}

let Xn;
const Kn = {
  kernelName: _tfjsCore.ArgMax,
  backendName: "wasm",
  kernelFunc: function (n) {
    const {
      backend: t,
      inputs: a,
      attrs: r
    } = n,
          {
      axis: u
    } = r,
          {
      x: s
    } = a,
          i = t.dataIdMap.get(s.dataId).id;
    let o = i,
        l = s;
    const {
      transposed: p,
      axes: d,
      inputWasTransposed: c
    } = $n(s, u, t);

    if (c) {
      const n = t.dataIdMap.get(p.dataId).id;
      n !== i && (l = p, o = n);
    }

    const m = l.shape.slice(0, -1),
          f = t.makeOutput(m, "int32"),
          b = t.dataIdMap.get(f.dataId).id,
          h = _tfjsCore.util.sizeFromShape(f.shape),
          y = l.shape[d[0]];

    return Xn(o, En[l.dtype], h, y, b), c && t.disposeData(p.dataId), f;
  },
  setupFunc: function (n) {
    Xn = n.wasm.cwrap(_tfjsCore.ArgMax, null, ["number", "number", "number", "number", "number"]);
  }
};
let Yn;
const Jn = {
  kernelName: _tfjsCore.AvgPool,
  backendName: "wasm",
  setupFunc: function (n) {
    Yn = n.wasm.cwrap(_tfjsCore.AvgPool, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: e,
      attrs: t,
      backend: r
    } = n,
          u = e.x,
          s = r.dataIdMap.get(u.dataId).id,
          {
      filterSize: i,
      strides: o,
      pad: l,
      dimRoundingMode: p
    } = t,
          d = _tfjsCore.backend_util.computePool2DInfo(u.shape, i, o, 1, l, p),
          c = d.filterHeight,
          m = d.filterWidth,
          f = d.padInfo.top,
          b = d.padInfo.right,
          h = d.padInfo.bottom,
          y = d.padInfo.left,
          g = d.strideHeight,
          w = d.strideWidth,
          I = d.inChannels;

    if ("channelsLast" !== d.dataFormat) throw new Error("wasm backend does not support dataFormat:'" + `${d.dataFormat}'. Please use 'channelsLast'.`);
    if (1 !== d.dilationWidth || 1 !== d.dilationHeight) throw new Error("was backend only supports average pooling with dilation = [1, 1], " + `got [${d.dilationHeight}, ${d.dilationWidth}].`);

    const _ = r.makeOutput(d.outShape, "float32"),
          k = r.dataIdMap.get(_.dataId).id;

    return Yn(s, u.shape[0], u.shape[1], u.shape[2], c, m, f, b, h, y, g, w, I, k), _;
  }
};
let Qn;
const Zn = {
  kernelName: _tfjsCore.BatchMatMul,
  backendName: "wasm",
  setupFunc: function (n) {
    Qn = n.wasm.cwrap(_tfjsCore.BatchMatMul, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: e,
      backend: t,
      attrs: a
    } = n,
          {
      a: r,
      b: u
    } = e;
    if ("float32" !== r.dtype || "float32" !== u.dtype) throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");
    const {
      transposeA: s,
      transposeB: i
    } = a,
          o = t.dataIdMap.get(r.dataId).id,
          l = t.dataIdMap.get(u.dataId).id,
          p = s ? r.shape[2] : r.shape[1],
          d = i ? u.shape[1] : u.shape[2],
          c = r.shape[0],
          m = t.makeOutput([c, p, d], r.dtype),
          f = t.dataIdMap.get(m.dataId).id,
          b = new Uint8Array(new Int32Array(r.shape).buffer),
          h = new Uint8Array(new Int32Array(u.shape).buffer);
    return Qn(o, b, r.shape.length, l, h, u.shape.length, s, i, f), m;
  }
};

function ne(n) {
  const {
    inputs: {
      x: e
    },
    attrs: {
      dtype: t
    },
    backend: a
  } = n,
        r = a.makeOutput(e.shape, t),
        u = a.typedArrayFromHeap(e);
  return a.typedArrayFromHeap(r).set(u), r;
}

const ee = {
  kernelName: _tfjsCore.Cast,
  backendName: "wasm",
  kernelFunc: ne
};
let te;
const ae = {
  kernelName: _tfjsCore.ClipByValue,
  backendName: "wasm",
  setupFunc: function (n) {
    te = n.wasm.cwrap(_tfjsCore.ClipByValue, null, ["number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: e,
      backend: t,
      attrs: a
    } = n,
          {
      x: r
    } = e,
          {
      clipValueMin: u,
      clipValueMax: s
    } = a,
          i = t.dataIdMap.get(r.dataId).id,
          o = t.makeOutput(r.shape, "float32"),
          l = t.dataIdMap.get(o.dataId).id;
    return te(i, u, s, l), o;
  }
};
const re = {
  kernelName: _tfjsCore.Concat,
  backendName: "wasm",
  kernelFunc: function (n) {
    const {
      inputs: t,
      backend: r
    } = n,
          u = _tfjsCore.util.parseAxisParam(n.attrs.axis, t[0].shape)[0],
          s = _tfjsCore.backend_util.computeOutShape(t.map(n => n.shape), u),
          i = r.makeOutput(s, t[0].dtype),
          o = _tfjsCore.util.sizeFromShape(t[0].shape.slice(0, u));

    let l = 0;
    const p = t.map(n => {
      const t = _tfjsCore.util.sizeFromShape(n.shape.slice(u));

      return l += t, t;
    }),
          d = t.map(n => r.typedArrayFromHeap(n)),
          c = r.typedArrayFromHeap(i);

    for (let n = 0; n < o; n++) {
      let e = n * l;

      for (let t = 0; t < d.length; t++) {
        const a = p[t],
              r = n * a,
              u = d[t].subarray(r, r + a);
        c.set(u, e), e += a;
      }
    }

    return i;
  }
};
let ue;
const se = {
  kernelName: _tfjsCore.Conv2D,
  backendName: "wasm",
  setupFunc: function (n) {
    ue = n.wasm.cwrap(_tfjsCore.Conv2D, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: e,
      attrs: t,
      backend: r
    } = n,
          {
      x: u,
      filter: s
    } = e,
          i = r.dataIdMap.get(u.dataId).id,
          o = r.dataIdMap.get(s.dataId).id,
          {
      strides: l,
      dilations: p,
      pad: d,
      dimRoundingMode: c,
      dataFormat: m
    } = t,
          f = _tfjsCore.backend_util.convertConv2DDataFormat(m),
          b = _tfjsCore.backend_util.computeConv2DInfo(u.shape, s.shape, l, p, d, c, !1, f),
          h = b.filterHeight,
          y = b.filterWidth,
          g = b.padInfo.top,
          w = b.padInfo.right,
          I = b.padInfo.bottom,
          _ = b.padInfo.left,
          k = b.dilationHeight,
          v = b.dilationWidth,
          M = b.strideHeight,
          A = b.strideWidth,
          S = b.inChannels,
          F = b.outChannels,
          x = "SAME" === b.padInfo.type ? 1 : 0;

    if ("channelsLast" !== b.dataFormat) throw new Error("wasm backend Conv2D does not support dataFormat:'" + `${b.dataFormat}'. Please use 'channelsLast'.`);
    const N = r.makeOutput(b.outShape, "float32"),
          C = r.dataIdMap.get(N.dataId).id;
    return ue(i, u.shape[0], u.shape[1], u.shape[2], o, h, y, g, w, I, _, x, k, v, M, A, S, F, C), N;
  }
};
let ie;
const oe = {
  kernelName: _tfjsCore.Conv2DBackpropInput,
  backendName: "wasm",
  setupFunc: function (n) {
    ie = n.wasm.cwrap(_tfjsCore.Conv2DBackpropInput, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: t,
      inputs: r,
      attrs: u
    } = n,
          {
      dy: s,
      filter: i
    } = r,
          {
      strides: o,
      pad: l,
      dataFormat: p,
      dimRoundingMode: d,
      inputShape: c
    } = u,
          m = _tfjsCore.backend_util.convertConv2DDataFormat(p),
          f = _tfjsCore.backend_util.computeConv2DInfo(c, i.shape, o, 1, l, d, !1, m),
          {
      batchSize: b,
      filterHeight: h,
      filterWidth: y,
      inChannels: g,
      inHeight: w,
      inWidth: I,
      outChannels: _,
      outHeight: k,
      outWidth: v,
      strideHeight: M,
      strideWidth: A
    } = f,
          S = h - 1 - f.padInfo.top,
          F = y - 1 - f.padInfo.left,
          x = "channelsLast" === f.dataFormat,
          N = _tfjsCore.util.computeStrides(f.inShape),
          C = _tfjsCore.util.computeStrides(s.shape),
          [R, E, D] = _tfjsCore.util.computeStrides(i.shape),
          O = N[0],
          P = x ? N[1] : N[2],
          W = x ? N[2] : 1,
          z = x ? 1 : N[1],
          H = C[0],
          T = x ? C[1] : C[2],
          U = x ? C[2] : 1,
          B = x ? 1 : C[1],
          q = t.makeOutput(f.inShape, "float32"),
          L = t.dataIdMap.get(q.dataId).id,
          V = t.dataIdMap.get(s.dataId).id,
          j = t.dataIdMap.get(i.dataId).id;

    return ie(V, j, b, h, y, w, I, g, k, v, _, M, A, S, F, R, E, D, O, P, W, z, H, T, U, B, L), q;
  }
},
      le = Wn(_tfjsCore.Cos);
var pe;
let de;
let ce;
!function (n) {
  n[n.bilinear = 0] = "bilinear", n[n.nearest = 1] = "nearest";
}(pe || (pe = {}));
let me;
let fe;
let be;
let he;
let ye;
let ge;
let we;
let Ie;

function _e(n, e) {
  const t = new Int32Array(n.wasm.HEAPU8.buffer, e, 4),
        a = t[0],
        r = t[1],
        u = t[2],
        s = t[3];
  return n.wasm._free(e), {
    pSelectedIndices: a,
    selectedSize: r,
    pSelectedScores: u,
    pValidOutputs: s
  };
}

let ke;
let ve;
let Me;
let Ae;
let Se;
let Fe;

function xe(n) {
  const {
    inputs: e,
    attrs: t
  } = n,
        {
    x: a
  } = e,
        {
    shape: r
  } = t;
  return {
    dataId: a.dataId,
    shape: r,
    dtype: a.dtype
  };
}

let Ne;
let Ce;
let Re;
let Ee;
let De;
let Oe;

function Pe(n) {
  const {
    inputs: {
      x: t
    },
    attrs: {
      begin: a,
      size: r
    },
    backend: u
  } = n,
        [s, i] = _tfjsCore.slice_util.parseSliceParams(t, a, r),
        o = _tfjsCore.slice_util.isSliceContinous(t.shape, s, i),
        l = u.typedArrayFromHeap(t),
        p = u.makeOutput(i, t.dtype),
        d = u.typedArrayFromHeap(p),
        c = _tfjsCore.util.computeStrides(t.shape);

  if (o) {
    const n = _tfjsCore.slice_util.computeFlatOffset(s, c);

    return d.set(l.subarray(n, n + _tfjsCore.util.sizeFromShape(i))), p;
  }

  const m = t.shape.length;
  return 2 === m ? function (n, e, t, a, r) {
    let u = 0;
    const s = a[0],
          i = a[1],
          o = s + r[0];

    for (let a = s; a < o; a++) {
      const s = a * e + i;
      t.set(n.subarray(s, s + r[1]), u), u += r[1];
    }
  }(l, c[0], d, s, i) : 3 === m ? function (n, e, t, a, r, u) {
    let s = 0;
    const i = r[0],
          o = r[1],
          l = r[2],
          p = i + u[0],
          d = o + u[1];

    for (let r = i; r < p; r++) for (let i = o; i < d; i++) {
      const o = r * e + i * t + l;
      a.set(n.subarray(o, o + u[2]), s), s += u[2];
    }
  }(l, c[0], c[1], d, s, i) : 4 === m ? function (n, e, t, a, r, u, s) {
    let i = 0;
    const o = u[0],
          l = u[1],
          p = u[2],
          d = o + s[0],
          c = l + s[1],
          m = p + s[2],
          f = u[3];

    for (let u = o; u < d; u++) for (let o = l; o < c; o++) for (let l = p; l < m; l++) {
      const p = u * e + o * t + l * a + f;
      r.set(n.subarray(p, p + s[3]), i), i += s[3];
    }
  }(l, c[0], c[1], c[2], d, s, i) : function (n, e, t, a, r) {
    const u = (0, _tfjsCore.buffer)(r, e.dtype, t),
          s = (0, _tfjsCore.buffer)(e.shape, e.dtype, n);

    for (let n = 0; n < u.size; ++n) {
      const e = u.indexToLoc(n).map((n, e) => n + a[e]);
      t[n] = s.get(...e);
    }
  }(l, t, d, s, i), p;
}

let We;
let ze;
let He;
const Te = [zn, Tn, Bn, Kn, Jn, Zn, ee, ae, re, se, oe, le, {
  kernelName: _tfjsCore.CropAndResize,
  backendName: "wasm",
  setupFunc: function (n) {
    de = n.wasm.cwrap(_tfjsCore.CropAndResize, null, ["number", "number", "number", "number", "array", "number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: e,
      inputs: t,
      attrs: a
    } = n,
          {
      method: r,
      extrapolationValue: u,
      cropSize: s
    } = a,
          {
      image: i,
      boxes: o,
      boxInd: l
    } = t,
          p = o.shape[0],
          [d, c] = s,
          m = [p, d, c, i.shape[3]];
    let f,
        b = e.dataIdMap.get(i.dataId);
    "float32" !== i.dtype && (f = ne({
      backend: e,
      inputs: {
        x: i
      },
      attrs: {
        dtype: "float32"
      }
    }), b = e.dataIdMap.get(f.dataId));

    const h = b.id,
          y = e.dataIdMap.get(o.dataId).id,
          g = e.dataIdMap.get(l.dataId).id,
          w = e.makeOutput(m, "float32"),
          I = e.dataIdMap.get(w.dataId).id,
          _ = new Uint8Array(new Int32Array(i.shape).buffer);

    return de(h, y, g, p, _, d, c, pe[r], u, I), null != f && e.disposeData(f.dataId), w;
  }
}, {
  kernelName: _tfjsCore.DepthwiseConv2dNative,
  backendName: "wasm",
  setupFunc: function (n) {
    ce = n.wasm.cwrap(_tfjsCore.DepthwiseConv2dNative, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: e,
      attrs: t,
      backend: r
    } = n,
          {
      x: u,
      filter: s
    } = e,
          i = r.dataIdMap.get(u.dataId).id,
          o = r.dataIdMap.get(s.dataId).id,
          {
      strides: l,
      dilations: p,
      pad: d,
      dimRoundingMode: c
    } = t,
          m = null == p ? [1, 1] : p,
          f = _tfjsCore.backend_util.computeConv2DInfo(u.shape, s.shape, l, m, d, c, !0),
          b = f.filterHeight,
          h = f.filterWidth,
          y = f.padInfo.top,
          g = f.padInfo.right,
          w = f.padInfo.bottom,
          I = f.padInfo.left,
          _ = f.dilationHeight,
          k = f.dilationWidth,
          v = f.strideHeight,
          M = f.strideWidth,
          A = f.inChannels,
          S = f.outChannels,
          F = "SAME" === f.padInfo.type ? 1 : 0;

    if ("channelsLast" !== f.dataFormat) throw new Error("wasm backend DepthwiseConv2dNative does not support dataFormat:'" + `${f.dataFormat}'. Please use 'channelsLast'.`);
    const x = r.makeOutput(f.outShape, "float32"),
          N = r.dataIdMap.get(x.dataId).id;
    return ce(i, u.shape[0], u.shape[1], u.shape[2], o, b, h, y, g, w, I, F, _, k, v, M, A, S, N), x;
  }
}, Hn(_tfjsCore.Div, !0), Hn(_tfjsCore.Equal, !1, "bool"), Wn(_tfjsCore.Exp), {
  kernelName: _tfjsCore.Fill,
  backendName: "wasm",
  kernelFunc: function (n) {
    const {
      attrs: {
        shape: e,
        value: t,
        dtype: a
      },
      backend: r
    } = n,
          u = r.makeOutput(e, a);
    return r.typedArrayFromHeap(u).fill(t), u;
  }
}, Hn(_tfjsCore.FloorDiv, !1), Pn, {
  kernelName: _tfjsCore.FusedBatchNorm,
  backendName: "wasm",
  setupFunc: function (n) {
    me = n.wasm.cwrap(_tfjsCore.FusedBatchNorm, null, ["number", "number", "number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: t,
      inputs: a,
      attrs: r
    } = n,
          {
      varianceEpsilon: u
    } = r,
          {
      x: s,
      mean: i,
      variance: o,
      offset: l,
      scale: p
    } = a,
          d = t.dataIdMap.get(s.dataId).id,
          c = t.dataIdMap.get(i.dataId).id,
          m = t.dataIdMap.get(o.dataId).id,
          f = null != l ? t.dataIdMap.get(l.dataId).id : 0,
          b = null != p ? t.dataIdMap.get(p.dataId).id : 0,
          h = t.makeOutput(s.shape, s.dtype);
    if (0 === _tfjsCore.util.sizeFromShape(s.shape)) return h;
    const y = t.dataIdMap.get(h.dataId).id;
    return me(d, c, m, f, b, u, y), h;
  }
}, {
  kernelName: _tfjsCore.FusedConv2D,
  backendName: "wasm",
  setupFunc: function (n) {
    fe = n.wasm.cwrap(_tfjsCore.FusedConv2D, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: e,
      attrs: t,
      backend: r
    } = n,
          {
      x: u,
      filter: s,
      bias: i,
      preluActivationWeights: o
    } = e,
          {
      strides: l,
      pad: p,
      dilations: d,
      dataFormat: c,
      dimRoundingMode: m,
      activation: f
    } = t,
          b = _tfjsCore.backend_util.computeConv2DInfo(u.shape, s.shape, l, d, p, m),
          h = Dn[f];

    if (null == h) throw new Error(`${f} activation not yet supported for FusedConv2D ` + "in the wasm backend.");
    const y = r.dataIdMap.get(u.dataId).id,
          g = r.dataIdMap.get(s.dataId).id,
          w = b.outChannels;
    let I = 0;

    if (null != i) {
      const n = r.dataIdMap.get(i.dataId);
      if (1 !== n.shape.length) throw new Error("FusedConv2D only supports rank-1 bias but got " + `rank ${n.shape.length}.`);
      if (n.shape[0] !== w) throw new Error(`FusedConv2D bias shape (${n.shape}) does not ` + `match the number of output channels (${w})`);
      I = n.id;
    }

    const _ = b.filterHeight,
          k = b.filterWidth,
          v = b.padInfo.top,
          M = b.padInfo.right,
          A = b.padInfo.bottom,
          S = b.padInfo.left,
          F = b.dilationHeight,
          x = b.dilationWidth,
          N = b.strideHeight,
          C = b.strideWidth,
          R = b.inChannels,
          E = "SAME" === b.padInfo.type ? 1 : 0,
          D = b.batchSize,
          O = b.inHeight,
          P = b.inWidth;
    if ("NHWC" !== c) throw new Error("wasm backend FusedConv2D does not support dataFormat:'" + `${c}'. Please use 'NHWC'.`);
    const W = r.makeOutput(b.outShape, "float32"),
          z = r.dataIdMap.get(W.dataId).id,
          H = null == o ? 0 : r.dataIdMap.get(o.dataId).id;
    return fe(y, D, O, P, g, _, k, I, v, M, A, S, E, F, x, N, C, R, w, h, H, z), W;
  }
}, {
  kernelName: _tfjsCore.FusedDepthwiseConv2D,
  backendName: "wasm",
  setupFunc: function (n) {
    be = n.wasm.cwrap(_tfjsCore.FusedDepthwiseConv2D, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: e,
      attrs: t,
      backend: r
    } = n,
          {
      x: u,
      filter: s,
      bias: i,
      preluActivationWeights: o
    } = e,
          {
      strides: l,
      pad: p,
      dilations: d,
      dataFormat: c,
      dimRoundingMode: m,
      activation: f
    } = t,
          b = _tfjsCore.backend_util.computeConv2DInfo(u.shape, s.shape, l, d, p, m, !0),
          h = Dn[f];

    if (null == h) throw new Error(`${f} activation not yet supported for FusedDepthwiseConv2D ` + "in the wasm backend.");
    const y = r.dataIdMap.get(u.dataId).id,
          g = r.dataIdMap.get(s.dataId).id,
          w = b.outChannels;
    let I = 0;

    if (null != i) {
      const n = r.dataIdMap.get(i.dataId);
      if (1 !== n.shape.length) throw new Error("FusedDepthwiseConv2D only supports rank-1 bias but got " + `rank ${n.shape.length}.`);
      if (n.shape[0] !== w) throw new Error(`FusedDepthwiseConv2D bias shape (${n.shape}) does not ` + `match the number of output channels (${w})`);
      I = n.id;
    }

    const _ = b.filterHeight,
          k = b.filterWidth,
          v = b.padInfo.top,
          M = b.padInfo.right,
          A = b.padInfo.bottom,
          S = b.padInfo.left,
          F = b.dilationHeight,
          x = b.dilationWidth,
          N = b.strideHeight,
          C = b.strideWidth,
          R = b.inChannels,
          E = "SAME" === b.padInfo.type ? 1 : 0,
          D = b.batchSize,
          O = b.inHeight,
          P = b.inWidth;
    if ("NHWC" !== c) throw new Error("wasm backend FusedDepthwiseConv2D does not support dataFormat:'" + `${c}'. Please use 'NHWC'.`);
    const W = r.makeOutput(b.outShape, "float32"),
          z = r.dataIdMap.get(W.dataId).id,
          H = null == o ? 0 : r.dataIdMap.get(o.dataId).id;
    return be(y, D, O, P, g, _, k, I, v, M, A, S, E, F, x, N, C, R, w, h, H, z), W;
  }
}, {
  kernelName: _tfjsCore.GatherNd,
  backendName: "wasm",
  setupFunc: function (n) {
    he = n.wasm.cwrap(_tfjsCore.GatherNd, null, ["number", "number", "number", "number", "number", "number", "array", "number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: e,
      inputs: t
    } = n,
          {
      params: a,
      indices: r
    } = t,
          [u, s, i, o] = _tfjsCore.gather_util.prepareAndValidate(a, r),
          l = e.makeOutput(u, a.dtype);

    if (0 === s) return l;
    const p = r.shape,
          d = p[p.length - 1],
          c = e.dataIdMap.get(a.dataId).id,
          m = e.dataIdMap.get(r.dataId).id,
          f = new Uint8Array(new Int32Array(o).buffer),
          b = e.dataIdMap.get(l.dataId).id;
    return he(c, En[a.dtype], m, s, d, i, f, b), l;
  }
}, {
  kernelName: _tfjsCore.GatherV2,
  backendName: "wasm",
  setupFunc: function (n) {
    ye = n.wasm.cwrap("Gather", null, ["number", "number", "array", "number", "number", "number", "array", "number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: t,
      inputs: r,
      attrs: u
    } = n,
          {
      x: s,
      indices: i
    } = r,
          {
      axis: o
    } = u,
          l = s.shape.slice();
    l[o] = _tfjsCore.util.sizeFromShape(i.shape);
    const p = s.shape.length - 1,
          d = t.makeOutput(l, s.dtype);
    if (0 === _tfjsCore.util.sizeFromShape(s.shape)) return d;
    const c = t.dataIdMap.get(s.dataId).id,
          m = t.dataIdMap.get(i.dataId).id,
          f = t.dataIdMap.get(d.dataId).id,
          b = new Uint8Array(new Int32Array(_tfjsCore.util.computeStrides(s.shape)).buffer),
          h = new Uint8Array(new Int32Array(_tfjsCore.util.computeStrides(l)).buffer);
    ye(c, En[s.dtype], b, p, m, o, h, f);

    const y = _tfjsCore.util.parseAxisParam(o, s.shape)[0],
          g = _tfjsCore.backend_util.segment_util.collectGatherOpShapeInfo(s, i, y);

    return d.shape = g.outputShape, d;
  }
}, Hn(_tfjsCore.Greater, !1, "bool"), Hn(_tfjsCore.GreaterEqual, !1, "bool"), Ln, Hn(_tfjsCore.Less, !1, "bool"), Hn(_tfjsCore.LessEqual, !1, "bool"), Wn(_tfjsCore.Log), Hn(_tfjsCore.LogicalAnd, !1, "bool"), {
  kernelName: _tfjsCore.Max,
  backendName: "wasm",
  setupFunc: function (n) {
    ge = n.wasm.cwrap(_tfjsCore.Max, null, ["number, number, number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: t,
      inputs: r,
      attrs: u
    } = n,
          {
      reductionIndices: s,
      keepDims: i
    } = u,
          {
      x: o
    } = r;
    let l = t.dataIdMap.get(o.dataId).id,
        p = o;
    const {
      transposed: d,
      axes: c,
      originalAxes: m,
      inputWasTransposed: f
    } = $n(o, s, t);

    if (f) {
      p = d, l = t.dataIdMap.get(d.dataId).id;
    }

    const b = p.shape.length;

    _tfjsCore.backend_util.assertAxesAreInnerMostDims("max", c, b);

    const [h, y] = _tfjsCore.backend_util.computeOutAndReduceShapes(p.shape, c),
          g = _tfjsCore.util.sizeFromShape(y),
          w = t.makeOutput(h, o.dtype);

    if (0 !== _tfjsCore.util.sizeFromShape(p.shape)) {
      const n = t.dataIdMap.get(w.dataId).id;
      ge(l, g, n);
    }

    if (f && t.disposeData(d.dataId), i) {
      const n = _tfjsCore.backend_util.expandShapeToKeepDim(w.shape, m);

      w.shape = n;
    }

    return w;
  }
}, Hn(_tfjsCore.Maximum, !1), {
  kernelName: _tfjsCore.MaxPool,
  backendName: "wasm",
  setupFunc: function (n) {
    we = n.wasm.cwrap(_tfjsCore.MaxPool, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: e,
      attrs: t,
      backend: r
    } = n,
          u = e.x,
          s = r.dataIdMap.get(u.dataId).id,
          {
      filterSize: i,
      strides: o,
      pad: l,
      dimRoundingMode: p
    } = t,
          d = _tfjsCore.backend_util.computePool2DInfo(u.shape, i, o, 1, l, p),
          c = d.filterHeight,
          m = d.filterWidth,
          f = d.padInfo.top,
          b = d.padInfo.right,
          h = d.padInfo.bottom,
          y = d.padInfo.left,
          g = d.dilationHeight,
          w = d.dilationWidth,
          I = d.strideHeight,
          _ = d.strideWidth,
          k = d.inChannels,
          v = d.outChannels;

    if ("channelsLast" !== d.dataFormat) throw new Error("wasm backend does not support dataFormat:'" + `${d.dataFormat}'. Please use 'channelsLast'.`);
    const M = r.makeOutput(d.outShape, "float32"),
          A = r.dataIdMap.get(M.dataId).id;
    return we(s, u.shape[0], u.shape[1], u.shape[2], c, m, f, b, h, y, g, w, I, _, k, v, A), M;
  }
}, {
  kernelName: _tfjsCore.Min,
  backendName: "wasm",
  setupFunc: function (n) {
    Ie = n.wasm.cwrap(_tfjsCore.Min, null, ["number, number, number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: t,
      inputs: r,
      attrs: u
    } = n,
          {
      axis: s,
      keepDims: i
    } = u,
          {
      x: o
    } = r,
          l = t.dataIdMap.get(o.dataId).id;
    let p = l,
        d = o;
    const {
      transposed: c,
      axes: m,
      originalAxes: f,
      inputWasTransposed: b
    } = $n(o, s, t);

    if (b) {
      const n = t.dataIdMap.get(c.dataId).id;
      n !== l && (d = c, p = n);
    }

    const h = d.shape.length;

    _tfjsCore.backend_util.assertAxesAreInnerMostDims("min", m, h);

    const [y, g] = _tfjsCore.backend_util.computeOutAndReduceShapes(d.shape, m),
          w = _tfjsCore.util.sizeFromShape(g),
          I = t.makeOutput(y, d.dtype);

    if (0 !== _tfjsCore.util.sizeFromShape(d.shape)) {
      const n = t.dataIdMap.get(I.dataId).id;
      Ie(p, w, n);
    }

    if (b && t.disposeData(c.dataId), i) {
      const n = _tfjsCore.backend_util.expandShapeToKeepDim(I.shape, f);

      I.shape = n;
    }

    return I;
  }
}, Hn(_tfjsCore.Minimum, !1), Hn(_tfjsCore.Multiply, !0), Wn(_tfjsCore.Negate), {
  kernelName: _tfjsCore.NonMaxSuppressionV3,
  backendName: "wasm",
  setupFunc: function (n) {
    ke = n.wasm.cwrap(_tfjsCore.NonMaxSuppressionV3, "number", ["number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: e,
      inputs: t,
      attrs: a
    } = n,
          {
      iouThreshold: r,
      maxOutputSize: u,
      scoreThreshold: s
    } = a,
          {
      boxes: i,
      scores: o
    } = t,
          l = e.dataIdMap.get(i.dataId).id,
          p = e.dataIdMap.get(o.dataId).id,
          d = ke(l, p, u, r, s),
          {
      pSelectedIndices: c,
      selectedSize: m,
      pSelectedScores: f,
      pValidOutputs: b
    } = _e(e, d);

    return e.wasm._free(f), e.wasm._free(b), e.makeOutput([m], "int32", c);
  }
}, {
  kernelName: _tfjsCore.NonMaxSuppressionV4,
  backendName: "wasm",
  setupFunc: function (n) {
    ve = n.wasm.cwrap(_tfjsCore.NonMaxSuppressionV4, "number", ["number", "number", "number", "number", "number", "bool"]);
  },
  kernelFunc: function (n) {
    const {
      backend: e,
      inputs: t,
      attrs: a
    } = n,
          {
      iouThreshold: r,
      maxOutputSize: u,
      scoreThreshold: s,
      padToMaxOutputSize: i
    } = a,
          {
      boxes: o,
      scores: l
    } = t,
          p = e.dataIdMap.get(o.dataId).id,
          d = e.dataIdMap.get(l.dataId).id,
          c = ve(p, d, u, r, s, i),
          {
      pSelectedIndices: m,
      selectedSize: f,
      pSelectedScores: b,
      pValidOutputs: h
    } = _e(e, c);

    return e.wasm._free(b), [e.makeOutput([f], "int32", m), e.makeOutput([], "int32", h)];
  }
}, {
  kernelName: _tfjsCore.NonMaxSuppressionV5,
  backendName: "wasm",
  setupFunc: function (n) {
    Me = n.wasm.cwrap(_tfjsCore.NonMaxSuppressionV5, "number", ["number", "number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: e,
      inputs: t,
      attrs: a
    } = n,
          {
      iouThreshold: r,
      maxOutputSize: u,
      scoreThreshold: s,
      softNmsSigma: i
    } = a,
          {
      boxes: o,
      scores: l
    } = t,
          p = e.dataIdMap.get(o.dataId).id,
          d = e.dataIdMap.get(l.dataId).id,
          c = Me(p, d, u, r, s, i),
          {
      pSelectedIndices: m,
      selectedSize: f,
      pSelectedScores: b,
      pValidOutputs: h
    } = _e(e, c);

    return e.wasm._free(h), [e.makeOutput([f], "int32", m), e.makeOutput([f], "float32", b)];
  }
}, Hn(_tfjsCore.NotEqual, !1, "bool"), {
  kernelName: _tfjsCore.OneHot,
  backendName: "wasm",
  setupFunc: function (n) {
    Ae = n.wasm.cwrap(_tfjsCore.OneHot, null, ["number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: e,
      backend: t,
      attrs: a
    } = n,
          {
      indices: r
    } = e,
          {
      depth: u,
      onValue: s,
      offValue: i
    } = a,
          o = t.makeOutput([...r.shape, u], "int32"),
          l = t.dataIdMap.get(o.dataId).id,
          p = t.dataIdMap.get(r.dataId).id;
    return Ae(p, u, s, i, l), o;
  }
}, {
  kernelName: _tfjsCore.OnesLike,
  backendName: "wasm",
  kernelFunc: function (n) {
    const {
      inputs: {
        x: e
      },
      backend: t
    } = n,
          a = t.makeOutput(e.shape, e.dtype);
    return t.typedArrayFromHeap(a).fill(1), a;
  }
}, {
  kernelName: _tfjsCore.PadV2,
  backendName: "wasm",
  kernelFunc: function (n) {
    const {
      inputs: {
        x: e
      },
      backend: t,
      attrs: {
        paddings: a,
        constantValue: r
      }
    } = n,
          u = a.map((n, t) => n[0] + e.shape[t] + n[1]),
          s = t.dataIdMap.get(e.dataId).id,
          i = t.makeOutput(u, e.dtype),
          o = t.dataIdMap.get(i.dataId).id,
          l = new Uint8Array(new Int32Array(e.shape).buffer),
          p = a.map(n => n[0]),
          d = a.map(n => n[1]),
          c = new Uint8Array(new Int32Array(p).buffer),
          m = new Uint8Array(new Int32Array(d).buffer);
    return Se(s, l, e.shape.length, En[e.dtype], c, m, r, o), i;
  },
  setupFunc: function (n) {
    Se = n.wasm.cwrap(_tfjsCore.PadV2, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
  }
}, Hn(_tfjsCore.Pow, !1), {
  kernelName: _tfjsCore.Prelu,
  backendName: "wasm",
  setupFunc: function (n) {
    Fe = n.wasm.cwrap(_tfjsCore.Prelu, null, ["number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: e,
      backend: t
    } = n,
          {
      x: a,
      alpha: r
    } = e,
          u = t.dataIdMap.get(a.dataId).id,
          s = t.dataIdMap.get(r.dataId).id,
          i = t.makeOutput(a.shape, "float32"),
          o = t.dataIdMap.get(i.dataId).id;
    return Fe(u, s, o), i;
  }
}, Wn(_tfjsCore.Relu), Wn(_tfjsCore.Relu6), {
  kernelName: _tfjsCore.Reshape,
  backendName: "wasm",
  kernelFunc: xe
}, {
  kernelName: _tfjsCore.ResizeBilinear,
  backendName: "wasm",
  setupFunc: function (n) {
    Ne = n.wasm.cwrap(_tfjsCore.ResizeBilinear, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: t,
      inputs: a,
      attrs: r
    } = n,
          {
      images: u
    } = a,
          {
      alignCorners: s,
      size: i
    } = r,
          [o, l] = i,
          [p, d, c, m] = u.shape,
          f = [p, o, l, m];
    let b,
        h = t.dataIdMap.get(u.dataId);
    "float32" !== h.dtype && (b = ne({
      backend: t,
      inputs: {
        x: u
      },
      attrs: {
        dtype: "float32"
      }
    }), h = t.dataIdMap.get(b.dataId));
    const y = h.id,
          g = t.makeOutput(f, "float32");
    if (0 === _tfjsCore.util.sizeFromShape(u.shape)) return g;
    const w = t.dataIdMap.get(g.dataId).id;
    return Ne(y, p, d, c, m, o, l, s ? 1 : 0, w), null != b && t.disposeData(b.dataId), g;
  }
}, {
  kernelName: _tfjsCore.Reverse,
  backendName: "wasm",
  kernelFunc: function (n) {
    const {
      inputs: t,
      backend: a,
      attrs: r
    } = n,
          {
      x: u
    } = t,
          {
      dims: s
    } = r,
          i = _tfjsCore.util.parseAxisParam(s, u.shape);

    if (0 === u.shape.length) return qn({
      inputs: {
        x: u
      },
      backend: a
    });
    const o = a.makeOutput(u.shape, u.dtype),
          l = a.dataIdMap.get(u.dataId).id,
          p = a.dataIdMap.get(o.dataId).id,
          d = new Uint8Array(new Int32Array(i).buffer),
          c = new Uint8Array(new Int32Array(u.shape).buffer);
    return Ce(l, d, i.length, c, u.shape.length, p), xe({
      inputs: {
        x: o
      },
      attrs: {
        shape: u.shape
      },
      backend: a
    });
  },
  setupFunc: function (n) {
    Ce = n.wasm.cwrap(_tfjsCore.Reverse, null, ["number", "array", "number", "array", "number", "number"]);
  }
}, {
  kernelName: _tfjsCore.RotateWithOffset,
  backendName: "wasm",
  kernelFunc: function (n) {
    const {
      inputs: e,
      backend: t,
      attrs: r
    } = n,
          {
      image: u
    } = e,
          {
      radians: s,
      fillValue: i,
      center: o
    } = r,
          l = t.makeOutput(u.shape, u.dtype),
          p = t.dataIdMap.get(u.dataId).id,
          d = t.dataIdMap.get(l.dataId).id,
          [c, m, f, b] = u.shape,
          [h, y] = _tfjsCore.backend_util.getImageCenter(o, m, f),
          g = "number" == typeof i ? [i, i, i, 0 === i ? 0 : 255] : [...i, 255],
          w = new Uint8Array(new Int32Array(g).buffer);

    return Re(p, c, m, f, b, s, h, y, w, g.length, d), l;
  },
  setupFunc: function (n) {
    Re = n.wasm.cwrap(_tfjsCore.RotateWithOffset, null, ["number", "number", "number", "number", "number", "number", "number", "number", "array", "number", "number"]);
  }
}, Wn(_tfjsCore.Rsqrt), {
  kernelName: _tfjsCore.ScatterNd,
  backendName: "wasm",
  setupFunc: function (n) {
    Ee = n.wasm.cwrap(_tfjsCore.ScatterNd, null, ["number", "number", "number", "number", "number", "number", "array", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: t,
      inputs: a,
      attrs: r
    } = n,
          {
      indices: u,
      updates: s
    } = a,
          {
      shape: i
    } = r,
          o = t.makeOutput(i, s.dtype);
    if (0 === _tfjsCore.util.sizeFromShape(i)) return o;

    const {
      sliceRank: l,
      numUpdates: p,
      sliceSize: d,
      strides: c,
      outputSize: m
    } = _tfjsCore.scatter_util.calculateShapes(s, u, i),
          f = t.dataIdMap.get(u.dataId).id,
          b = t.dataIdMap.get(s.dataId).id,
          h = new Uint8Array(new Int32Array(c).buffer),
          y = t.dataIdMap.get(o.dataId).id;

    return Ee(f, b, En[s.dtype], l, p, d, h, m, y), o;
  }
}, {
  kernelName: _tfjsCore.SelectV2,
  backendName: "wasm",
  kernelFunc: function (n) {
    const {
      inputs: t,
      backend: a
    } = n,
          {
      condition: r,
      t: u,
      e: s
    } = t,
          i = a.dataIdMap.get(r.dataId).id,
          o = a.dataIdMap.get(u.dataId).id,
          l = a.dataIdMap.get(s.dataId).id,
          p = a.makeOutput(u.shape, u.dtype),
          d = a.dataIdMap.get(p.dataId).id,
          c = r.shape.length,
          m = u.shape.length,
          f = 0 === c || c > 1 || 1 === m ? 1 : _tfjsCore.util.sizeFromShape(u.shape.slice(1));
    return De(i, o, l, f, d), p;
  },
  setupFunc: function (n) {
    De = n.wasm.cwrap(_tfjsCore.SelectV2, null, ["number", "number", "number", "number", "number"]);
  }
}, {
  kernelName: "Sigmoid",
  backendName: "wasm",
  setupFunc: function (n) {
    Oe = n.wasm.cwrap(_tfjsCore.Sigmoid, null, ["number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: t,
      inputs: {
        x: a
      }
    } = n,
          r = t.dataIdMap.get(a.dataId).id,
          u = t.makeOutput(a.shape, a.dtype),
          s = t.dataIdMap.get(u.dataId).id;
    return 0 === _tfjsCore.util.sizeFromShape(u.shape) ? u : (Oe(r, s), u);
  }
}, Wn(_tfjsCore.Sin), {
  kernelName: _tfjsCore.Slice,
  backendName: "wasm",
  kernelFunc: Pe
}, {
  kernelName: _tfjsCore.Softmax,
  backendName: "wasm",
  setupFunc: function (n) {
    We = n.wasm.cwrap(_tfjsCore.Softmax, null, ["number", "number", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: t,
      inputs: {
        logits: a
      },
      attrs: {
        dim: r
      }
    } = n,
          u = t.dataIdMap.get(a.dataId).id,
          s = t.makeOutput(a.shape, a.dtype),
          i = t.dataIdMap.get(s.dataId).id,
          o = a.shape[r],
          l = _tfjsCore.util.sizeFromShape(a.shape) / o;
    return 0 === _tfjsCore.util.sizeFromShape(s.shape) ? s : (We(u, i, o, l), s);
  }
}, {
  kernelName: _tfjsCore.SplitV,
  backendName: "wasm",
  kernelFunc: function (n) {
    const {
      inputs: t,
      attrs: r,
      backend: u
    } = n,
          {
      x: s
    } = t,
          {
      numOrSizeSplits: i,
      axis: o
    } = r,
          l = _tfjsCore.util.parseAxisParam(o, s.shape)[0],
          p = _tfjsCore.backend_util.prepareSplitSize(s, i, o),
          d = new Array(s.shape.length).fill(0),
          c = s.shape.slice();

    return p.map(n => {
      const e = [...c];
      e[l] = n;
      const t = Pe({
        inputs: {
          x: s
        },
        attrs: {
          begin: d,
          size: e
        },
        backend: u
      });
      return d[l] += n, t;
    });
  }
}, Wn(_tfjsCore.Sqrt), Wn(_tfjsCore.Square), Hn(_tfjsCore.Sub, !0), {
  kernelName: _tfjsCore.Sum,
  backendName: "wasm",
  setupFunc: function (n) {
    ze = n.wasm.cwrap(_tfjsCore.Sum, null, ["number, number, number"]);
  },
  kernelFunc: function (n) {
    const {
      backend: t,
      inputs: r,
      attrs: u
    } = n,
          {
      axis: s,
      keepDims: i
    } = u,
          {
      x: o
    } = r,
          l = t.dataIdMap.get(o.dataId).id;
    let p = l,
        d = o;
    const {
      transposed: c,
      axes: m,
      originalAxes: f,
      inputWasTransposed: b
    } = $n(o, s, t);
    let h = m;

    if (b) {
      const n = t.dataIdMap.get(c.dataId).id;
      n !== l && (d = c, p = n, h = _tfjsCore.backend_util.getInnerMostAxes(h.length, d.shape.length));
    }

    _tfjsCore.backend_util.assertAxesAreInnerMostDims("sum", h, d.shape.length);

    const [y, g] = _tfjsCore.backend_util.computeOutAndReduceShapes(d.shape, h),
          w = _tfjsCore.util.sizeFromShape(g),
          I = t.makeOutput(y, d.dtype);

    if (0 !== _tfjsCore.util.sizeFromShape(d.shape)) {
      const n = t.dataIdMap.get(I.dataId).id;
      ze(p, w, n);
    }

    if (b && t.disposeData(c.dataId), i) {
      const n = _tfjsCore.backend_util.expandShapeToKeepDim(I.shape, f);

      I.shape = n;
    }

    return I;
  }
}, Wn(_tfjsCore.Tanh), {
  kernelName: _tfjsCore.Tile,
  backendName: "wasm",
  setupFunc: function (n) {
    He = n.wasm.cwrap(_tfjsCore.Tile, null, ["number", "array", "number", "array", "number", "number"]);
  },
  kernelFunc: function (n) {
    const {
      inputs: e,
      backend: t,
      attrs: a
    } = n,
          {
      x: r
    } = e,
          u = t.dataIdMap.get(r.dataId).id,
          {
      reps: s
    } = a,
          i = new Array(r.shape.length);

    for (let n = 0; n < i.length; n++) i[n] = r.shape[n] * s[n];

    const o = new Uint8Array(new Int32Array(r.shape).buffer),
          l = new Uint8Array(new Int32Array(i).buffer),
          p = t.makeOutput(i, r.dtype),
          d = t.dataIdMap.get(p.dataId).id;
    return He(u, o, r.shape.length, l, i.length, En[p.dtype], d), p;
  }
}, Gn, {
  kernelName: _tfjsCore.Unpack,
  backendName: "wasm",
  kernelFunc: function (n) {
    const {
      inputs: e,
      backend: t,
      attrs: a
    } = n,
          {
      value: r
    } = e,
          {
      axis: u
    } = a,
          s = r.shape[u],
          i = r.shape.length,
          o = new Array(i - 1);
    let l = 0;

    for (let n = 0; n < i; n++) n !== u && (o[l++] = r.shape[n]);

    const p = new Array(s),
          d = new Array(i).fill(0),
          c = r.shape.slice();
    c[u] = 1;

    for (let n = 0; n < p.length; n++) d[u] = n, p[n] = Pe({
      inputs: {
        x: r
      },
      attrs: {
        begin: d,
        size: c
      },
      backend: t
    });

    return p.map(({
      dataId: n,
      dtype: e
    }) => ({
      dataId: n,
      dtype: e,
      shape: o
    }));
  }
}, {
  kernelName: _tfjsCore.ZerosLike,
  backendName: "wasm",
  kernelFunc: function (n) {
    const {
      inputs: {
        x: e
      },
      backend: t
    } = n,
          a = t.makeOutput(e.shape, e.dtype);
    return t.typedArrayFromHeap(a).fill(0), a;
  }
}];

for (const n of Te) (0, _tfjsCore.registerKernel)(n);

function Ue(n, e) {
  return n(e = {
    exports: {}
  }, e.exports), e.exports;
}

(0, _tfjsCore.env)().registerFlag("WASM_HAS_SIMD_SUPPORT", async () => WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11])));
var Be = Ue(function (n, e) {
  var t,
      a = (t = "undefined" != typeof document && document.currentScript ? document.currentScript.src : void 0, "undefined" != typeof __filename && (t = t || __filename), function (n) {
    var e,
        a = void 0 !== (n = n || {}) ? n : {},
        r = {};

    for (e in a) a.hasOwnProperty(e) && (r[e] = a[e]);

    var u = !1,
        s = !1,
        i = !1,
        o = !1;
    u = "object" == typeof window, s = "function" == typeof importScripts, i = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, o = !u && !i && !s;
    var l,
        p,
        d,
        c,
        m = "";

    function f(n) {
      return a.locateFile ? a.locateFile(n, m) : m + n;
    }

    i ? (m = s ? _path.default.dirname(m) + "/" : __dirname + "/", l = function (n, e) {
      return d || (d = _fs.default), c || (c = _path.default), n = c.normalize(n), d.readFileSync(n, e ? null : "utf8");
    }, p = function (n) {
      var e = l(n, !0);
      return e.buffer || (e = new Uint8Array(e)), _(e.buffer), e;
    }, process.argv.length > 1 && process.argv[1].replace(/\\/g, "/"), process.argv.slice(2), process.on("uncaughtException", function (n) {
      if (!(n instanceof Pn)) throw n;
    }), process.on("unhandledRejection", un), a.inspect = function () {
      return "[Emscripten Module object]";
    }) : o ? ("undefined" != typeof read && (l = function (n) {
      return read(n);
    }), p = function (n) {
      var e;
      return "function" == typeof readbuffer ? new Uint8Array(readbuffer(n)) : (_("object" == typeof (e = read(n, "binary"))), e);
    }, "undefined" != typeof scriptArgs && scriptArgs, "undefined" != typeof print && ("undefined" == typeof console && (console = {}), console.log = print, console.warn = console.error = "undefined" != typeof printErr ? printErr : print)) : (u || s) && (s ? m = self.location.href : document.currentScript && (m = document.currentScript.src), t && (m = t), m = 0 !== m.indexOf("blob:") ? m.substr(0, m.lastIndexOf("/") + 1) : "", l = function (n) {
      var e = new XMLHttpRequest();
      return e.open("GET", n, !1), e.send(null), e.responseText;
    }, s && (p = function (n) {
      var e = new XMLHttpRequest();
      return e.open("GET", n, !1), e.responseType = "arraybuffer", e.send(null), new Uint8Array(e.response);
    }));
    var b,
        h,
        y = a.print || console.log.bind(console),
        g = a.printErr || console.warn.bind(console);

    for (e in r) r.hasOwnProperty(e) && (a[e] = r[e]);

    r = null, a.arguments && a.arguments, a.thisProgram && a.thisProgram, a.quit && a.quit, a.wasmBinary && (b = a.wasmBinary), a.noExitRuntime && a.noExitRuntime, "object" != typeof WebAssembly && g("no native wasm support detected");
    var w = new WebAssembly.Table({
      initial: 151,
      maximum: 151,
      element: "anyfunc"
    }),
        I = !1;

    function _(n, e) {
      n || un("Assertion failed: " + e);
    }

    function k(n) {
      var e = a["_" + n];
      return _(e, "Cannot call unknown function " + n + ", make sure it is exported"), e;
    }

    function v(n, e, t, a, r) {
      var u = {
        string: function (n) {
          var e = 0;

          if (null != n && 0 !== n) {
            var t = 1 + (n.length << 2);
            N(n, e = Dn(t), t);
          }

          return e;
        },
        array: function (n) {
          var e = Dn(n.length);
          return C(n, e), e;
        }
      },
          s = k(n),
          i = [],
          o = 0;
      if (a) for (var l = 0; l < a.length; l++) {
        var p = u[t[l]];
        p ? (0 === o && (o = En()), i[l] = p(a[l])) : i[l] = a[l];
      }
      var d = s.apply(null, i);
      return d = function (n) {
        return "string" === e ? F(n) : "boolean" === e ? Boolean(n) : n;
      }(d), 0 !== o && On(o), d;
    }

    function M(n, e, t, a) {
      var r = (t = t || []).every(function (n) {
        return "number" === n;
      });
      return "string" !== e && r && !a ? k(n) : function () {
        return v(n, e, t, arguments);
      };
    }

    var A = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0;

    function S(n, e, t) {
      for (var a = e + t, r = e; n[r] && !(r >= a);) ++r;

      if (r - e > 16 && n.subarray && A) return A.decode(n.subarray(e, r));

      for (var u = ""; e < r;) {
        var s = n[e++];

        if (128 & s) {
          var i = 63 & n[e++];

          if (192 != (224 & s)) {
            var o = 63 & n[e++];
            if ((s = 224 == (240 & s) ? (15 & s) << 12 | i << 6 | o : (7 & s) << 18 | i << 12 | o << 6 | 63 & n[e++]) < 65536) u += String.fromCharCode(s);else {
              var l = s - 65536;
              u += String.fromCharCode(55296 | l >> 10, 56320 | 1023 & l);
            }
          } else u += String.fromCharCode((31 & s) << 6 | i);
        } else u += String.fromCharCode(s);
      }

      return u;
    }

    function F(n, e) {
      return n ? S(D, n, e) : "";
    }

    function x(n, e, t, a) {
      if (!(a > 0)) return 0;

      for (var r = t, u = t + a - 1, s = 0; s < n.length; ++s) {
        var i = n.charCodeAt(s);

        if (i >= 55296 && i <= 57343 && (i = 65536 + ((1023 & i) << 10) | 1023 & n.charCodeAt(++s)), i <= 127) {
          if (t >= u) break;
          e[t++] = i;
        } else if (i <= 2047) {
          if (t + 1 >= u) break;
          e[t++] = 192 | i >> 6, e[t++] = 128 | 63 & i;
        } else if (i <= 65535) {
          if (t + 2 >= u) break;
          e[t++] = 224 | i >> 12, e[t++] = 128 | i >> 6 & 63, e[t++] = 128 | 63 & i;
        } else {
          if (t + 3 >= u) break;
          e[t++] = 240 | i >> 18, e[t++] = 128 | i >> 12 & 63, e[t++] = 128 | i >> 6 & 63, e[t++] = 128 | 63 & i;
        }
      }

      return e[t] = 0, t - r;
    }

    function N(n, e, t) {
      return x(n, D, e, t);
    }

    function C(n, e) {
      E.set(n, e);
    }

    var R,
        E,
        D,
        O,
        P = 65536;

    function W(n, e) {
      return n % e > 0 && (n += e - n % e), n;
    }

    function z(n) {
      R = n, a.HEAP8 = E = new Int8Array(n), a.HEAP16 = new Int16Array(n), a.HEAP32 = O = new Int32Array(n), a.HEAPU8 = D = new Uint8Array(n), a.HEAPU16 = new Uint16Array(n), a.HEAPU32 = new Uint32Array(n), a.HEAPF32 = new Float32Array(n), a.HEAPF64 = new Float64Array(n);
    }

    var H = 5254528,
        T = 11488,
        U = a.INITIAL_MEMORY || 16777216;

    function B(n) {
      for (; n.length > 0;) {
        var e = n.shift();

        if ("function" != typeof e) {
          var t = e.func;
          "number" == typeof t ? void 0 === e.arg ? a.dynCall_v(t) : a.dynCall_vi(t, e.arg) : t(void 0 === e.arg ? null : e.arg);
        } else e(a);
      }
    }

    (h = a.wasmMemory ? a.wasmMemory : new WebAssembly.Memory({
      initial: U / P,
      maximum: 2147483648 / P
    })) && (R = h.buffer), U = R.byteLength, z(R), O[T >> 2] = H;
    var q = [],
        L = [],
        V = [],
        j = [];

    function G() {
      if (a.preRun) for ("function" == typeof a.preRun && (a.preRun = [a.preRun]); a.preRun.length;) Y(a.preRun.shift());
      B(q);
    }

    function $() {
      B(L);
    }

    function X() {
      B(V);
    }

    function K() {
      if (a.postRun) for ("function" == typeof a.postRun && (a.postRun = [a.postRun]); a.postRun.length;) J(a.postRun.shift());
      B(j);
    }

    function Y(n) {
      q.unshift(n);
    }

    function J(n) {
      j.unshift(n);
    }

    var Q = Math.ceil,
        Z = Math.floor,
        nn = 0,
        en = null,
        tn = null;

    function an(n) {
      nn++, a.monitorRunDependencies && a.monitorRunDependencies(nn);
    }

    function rn(n) {
      if (nn--, a.monitorRunDependencies && a.monitorRunDependencies(nn), 0 == nn && (null !== en && (clearInterval(en), en = null), tn)) {
        var e = tn;
        tn = null, e();
      }
    }

    function un(n) {
      throw a.onAbort && a.onAbort(n), y(n += ""), g(n), I = !0, n = "abort(" + n + "). Build with -s ASSERTIONS=1 for more info.", new WebAssembly.RuntimeError(n);
    }

    function sn(n, e) {
      return String.prototype.startsWith ? n.startsWith(e) : 0 === n.indexOf(e);
    }

    a.preloadedImages = {}, a.preloadedAudios = {};
    var on = "data:application/octet-stream;base64,";

    function ln(n) {
      return sn(n, on);
    }

    var pn = "file://";

    function dn(n) {
      return sn(n, pn);
    }

    var cn = "tfjs-backend-wasm-simd.wasm";

    function mn() {
      try {
        if (b) return new Uint8Array(b);
        if (p) return p(cn);
        throw "both async and sync fetching of the wasm failed";
      } catch (n) {
        un(n);
      }
    }

    function fn() {
      return b || !u && !s || "function" != typeof fetch || dn(cn) ? new Promise(function (n, e) {
        n(mn());
      }) : fetch(cn, {
        credentials: "same-origin"
      }).then(function (n) {
        if (!n.ok) throw "failed to load wasm binary file at '" + cn + "'";
        return n.arrayBuffer();
      }).catch(function () {
        return mn();
      });
    }

    function bn() {
      var n = {
        a: Sn
      };

      function e(n, e) {
        var t = n.exports;
        a.asm = t, rn();
      }

      function t(n) {
        e(n.instance);
      }

      function r(e) {
        return fn().then(function (e) {
          return WebAssembly.instantiate(e, n);
        }).then(e, function (n) {
          g("failed to asynchronously prepare wasm: " + n), un(n);
        });
      }

      if (an(), a.instantiateWasm) try {
        return a.instantiateWasm(n, e);
      } catch (n) {
        return g("Module.instantiateWasm callback failed with error: " + n), !1;
      }
      return function () {
        if (b || "function" != typeof WebAssembly.instantiateStreaming || ln(cn) || dn(cn) || "function" != typeof fetch) return r(t);
        fetch(cn, {
          credentials: "same-origin"
        }).then(function (e) {
          return WebAssembly.instantiateStreaming(e, n).then(t, function (n) {
            g("wasm streaming compile failed: " + n), g("falling back to ArrayBuffer instantiation"), r(t);
          });
        });
      }(), {};
    }

    function hn() {
      un();
    }

    function yn(n, e, t) {
      D.copyWithin(n, e, e + t);
    }

    function gn() {
      return D.length;
    }

    function wn(n) {
      try {
        return h.grow(n - R.byteLength + 65535 >>> 16), z(h.buffer), 1;
      } catch (n) {}
    }

    function In(n) {
      n >>>= 0;
      var e = gn();
      if (n > 2147483648) return !1;

      for (var t = 1; t <= 4; t *= 2) {
        var a = e * (1 + .2 / t);
        if (a = Math.min(a, n + 100663296), wn(Math.min(2147483648, W(Math.max(16777216, n, a), 65536)))) return !0;
      }

      return !1;
    }

    ln(cn) || (cn = f(cn)), L.push({
      func: function () {
        Nn();
      }
    });
    var _n = {
      mappings: {},
      buffers: [null, [], []],
      printChar: function (n, e) {
        var t = _n.buffers[n];
        0 === e || 10 === e ? ((1 === n ? y : g)(S(t, 0)), t.length = 0) : t.push(e);
      },
      varargs: void 0,
      get: function () {
        return _n.varargs += 4, O[_n.varargs - 4 >> 2];
      },
      getStr: function (n) {
        return F(n);
      },
      get64: function (n, e) {
        return n;
      }
    };

    function kn(n) {
      return 0;
    }

    function vn(n, e, t, a, r) {}

    function Mn(n, e, t, a) {
      for (var r = 0, u = 0; u < t; u++) {
        for (var s = O[e + 8 * u >> 2], i = O[e + (8 * u + 4) >> 2], o = 0; o < i; o++) _n.printChar(n, D[s + o]);

        r += i;
      }

      return O[a >> 2] = r, 0;
    }

    function An(n) {
      return (n = +n) >= 0 ? +Z(n + .5) : +Q(n - .5);
    }

    var Sn = {
      a: hn,
      e: yn,
      f: In,
      g: kn,
      d: vn,
      c: Mn,
      memory: h,
      b: An,
      table: w
    },
        Fn = bn();
    a.asm = Fn;

    var xn,
        Nn = a.___wasm_call_ctors = function () {
      return (Nn = a.___wasm_call_ctors = a.asm.h).apply(null, arguments);
    },
        En = (a._init = function () {
      return (a._init = a.asm.i).apply(null, arguments);
    }, a._register_tensor = function () {
      return (a._register_tensor = a.asm.j).apply(null, arguments);
    }, a._dispose_data = function () {
      return (a._dispose_data = a.asm.k).apply(null, arguments);
    }, a._dispose = function () {
      return (a._dispose = a.asm.l).apply(null, arguments);
    }, a._Abs = function () {
      return (a._Abs = a.asm.m).apply(null, arguments);
    }, a._Add = function () {
      return (a._Add = a.asm.n).apply(null, arguments);
    }, a._AddN = function () {
      return (a._AddN = a.asm.o).apply(null, arguments);
    }, a._ArgMax = function () {
      return (a._ArgMax = a.asm.p).apply(null, arguments);
    }, a._AvgPool = function () {
      return (a._AvgPool = a.asm.q).apply(null, arguments);
    }, a._BatchMatMul = function () {
      return (a._BatchMatMul = a.asm.r).apply(null, arguments);
    }, a._ClipByValue = function () {
      return (a._ClipByValue = a.asm.s).apply(null, arguments);
    }, a._Conv2D = function () {
      return (a._Conv2D = a.asm.t).apply(null, arguments);
    }, a._Conv2DBackpropInput = function () {
      return (a._Conv2DBackpropInput = a.asm.u).apply(null, arguments);
    }, a._Cos = function () {
      return (a._Cos = a.asm.v).apply(null, arguments);
    }, a._CropAndResize = function () {
      return (a._CropAndResize = a.asm.w).apply(null, arguments);
    }, a._DepthwiseConv2dNative = function () {
      return (a._DepthwiseConv2dNative = a.asm.x).apply(null, arguments);
    }, a._Div = function () {
      return (a._Div = a.asm.y).apply(null, arguments);
    }, a._Equal = function () {
      return (a._Equal = a.asm.z).apply(null, arguments);
    }, a._Exp = function () {
      return (a._Exp = a.asm.A).apply(null, arguments);
    }, a._FloorDiv = function () {
      return (a._FloorDiv = a.asm.B).apply(null, arguments);
    }, a._FusedBatchNorm = function () {
      return (a._FusedBatchNorm = a.asm.C).apply(null, arguments);
    }, a._FusedConv2D = function () {
      return (a._FusedConv2D = a.asm.D).apply(null, arguments);
    }, a._FusedDepthwiseConv2D = function () {
      return (a._FusedDepthwiseConv2D = a.asm.E).apply(null, arguments);
    }, a._Gather = function () {
      return (a._Gather = a.asm.F).apply(null, arguments);
    }, a._GatherNd = function () {
      return (a._GatherNd = a.asm.G).apply(null, arguments);
    }, a._Greater = function () {
      return (a._Greater = a.asm.H).apply(null, arguments);
    }, a._GreaterEqual = function () {
      return (a._GreaterEqual = a.asm.I).apply(null, arguments);
    }, a._Less = function () {
      return (a._Less = a.asm.J).apply(null, arguments);
    }, a._LessEqual = function () {
      return (a._LessEqual = a.asm.K).apply(null, arguments);
    }, a._Log = function () {
      return (a._Log = a.asm.L).apply(null, arguments);
    }, a._LogicalAnd = function () {
      return (a._LogicalAnd = a.asm.M).apply(null, arguments);
    }, a._Max = function () {
      return (a._Max = a.asm.N).apply(null, arguments);
    }, a._MaxPool = function () {
      return (a._MaxPool = a.asm.O).apply(null, arguments);
    }, a._Maximum = function () {
      return (a._Maximum = a.asm.P).apply(null, arguments);
    }, a._Min = function () {
      return (a._Min = a.asm.Q).apply(null, arguments);
    }, a._Minimum = function () {
      return (a._Minimum = a.asm.R).apply(null, arguments);
    }, a._Multiply = function () {
      return (a._Multiply = a.asm.S).apply(null, arguments);
    }, a._Negate = function () {
      return (a._Negate = a.asm.T).apply(null, arguments);
    }, a._NonMaxSuppressionV3 = function () {
      return (a._NonMaxSuppressionV3 = a.asm.U).apply(null, arguments);
    }, a._NonMaxSuppressionV4 = function () {
      return (a._NonMaxSuppressionV4 = a.asm.V).apply(null, arguments);
    }, a._NonMaxSuppressionV5 = function () {
      return (a._NonMaxSuppressionV5 = a.asm.W).apply(null, arguments);
    }, a._NotEqual = function () {
      return (a._NotEqual = a.asm.X).apply(null, arguments);
    }, a._OneHot = function () {
      return (a._OneHot = a.asm.Y).apply(null, arguments);
    }, a._PadV2 = function () {
      return (a._PadV2 = a.asm.Z).apply(null, arguments);
    }, a._Pow = function () {
      return (a._Pow = a.asm._).apply(null, arguments);
    }, a._Prelu = function () {
      return (a._Prelu = a.asm.$).apply(null, arguments);
    }, a._Relu = function () {
      return (a._Relu = a.asm.aa).apply(null, arguments);
    }, a._Relu6 = function () {
      return (a._Relu6 = a.asm.ba).apply(null, arguments);
    }, a._ResizeBilinear = function () {
      return (a._ResizeBilinear = a.asm.ca).apply(null, arguments);
    }, a._Reverse = function () {
      return (a._Reverse = a.asm.da).apply(null, arguments);
    }, a._RotateWithOffset = function () {
      return (a._RotateWithOffset = a.asm.ea).apply(null, arguments);
    }, a._Rsqrt = function () {
      return (a._Rsqrt = a.asm.fa).apply(null, arguments);
    }, a._ScatterNd = function () {
      return (a._ScatterNd = a.asm.ga).apply(null, arguments);
    }, a._SelectV2 = function () {
      return (a._SelectV2 = a.asm.ha).apply(null, arguments);
    }, a._Sigmoid = function () {
      return (a._Sigmoid = a.asm.ia).apply(null, arguments);
    }, a._Sin = function () {
      return (a._Sin = a.asm.ja).apply(null, arguments);
    }, a._Softmax = function () {
      return (a._Softmax = a.asm.ka).apply(null, arguments);
    }, a._Sqrt = function () {
      return (a._Sqrt = a.asm.la).apply(null, arguments);
    }, a._Square = function () {
      return (a._Square = a.asm.ma).apply(null, arguments);
    }, a._Sub = function () {
      return (a._Sub = a.asm.na).apply(null, arguments);
    }, a._Sum = function () {
      return (a._Sum = a.asm.oa).apply(null, arguments);
    }, a._Tanh = function () {
      return (a._Tanh = a.asm.pa).apply(null, arguments);
    }, a._Tile = function () {
      return (a._Tile = a.asm.qa).apply(null, arguments);
    }, a._Transpose = function () {
      return (a._Transpose = a.asm.ra).apply(null, arguments);
    }, a.__FusedMatMul = function () {
      return (a.__FusedMatMul = a.asm.sa).apply(null, arguments);
    }, a._malloc = function () {
      return (a._malloc = a.asm.ta).apply(null, arguments);
    }, a._free = function () {
      return (a._free = a.asm.ua).apply(null, arguments);
    }, a.stackSave = function () {
      return (En = a.stackSave = a.asm.va).apply(null, arguments);
    }),
        Dn = a.stackAlloc = function () {
      return (Dn = a.stackAlloc = a.asm.wa).apply(null, arguments);
    },
        On = a.stackRestore = function () {
      return (On = a.stackRestore = a.asm.xa).apply(null, arguments);
    };

    function Pn(n) {
      this.name = "ExitStatus", this.message = "Program terminated with exit(" + n + ")", this.status = n;
    }

    function Wn(n) {
      function e() {
        xn || (xn = !0, a.calledRun = !0, I || ($(), X(), a.onRuntimeInitialized && a.onRuntimeInitialized(), K()));
      }

      nn > 0 || (G(), nn > 0 || (a.setStatus ? (a.setStatus("Running..."), setTimeout(function () {
        setTimeout(function () {
          a.setStatus("");
        }, 1), e();
      }, 1)) : e()));
    }

    if (a.dynCall_vi = function () {
      return (a.dynCall_vi = a.asm.ya).apply(null, arguments);
    }, a.dynCall_v = function () {
      return (a.dynCall_v = a.asm.za).apply(null, arguments);
    }, a.asm = Fn, a.cwrap = M, a.then = function (n) {
      if (xn) n(a);else {
        var e = a.onRuntimeInitialized;

        a.onRuntimeInitialized = function () {
          e && e(), n(a);
        };
      }
      return a;
    }, tn = function n() {
      xn || Wn(), xn || (tn = n);
    }, a.run = Wn, a.preInit) for ("function" == typeof a.preInit && (a.preInit = [a.preInit]); a.preInit.length > 0;) a.preInit.pop()();
    return Wn(), n;
  });
  n.exports = a;
}),
    qe = Ue(function (n, e) {
  var t,
      a = (t = "undefined" != typeof document && document.currentScript ? document.currentScript.src : void 0, "undefined" != typeof __filename && (t = t || __filename), function (n) {
    var e,
        a = void 0 !== (n = n || {}) ? n : {},
        r = {};

    for (e in a) a.hasOwnProperty(e) && (r[e] = a[e]);

    var u = !1,
        s = !1,
        i = !1,
        o = !1;
    u = "object" == typeof window, s = "function" == typeof importScripts, i = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, o = !u && !i && !s;
    var l,
        p,
        d,
        c,
        m = "";

    function f(n) {
      return a.locateFile ? a.locateFile(n, m) : m + n;
    }

    i ? (m = s ? _path.default.dirname(m) + "/" : __dirname + "/", l = function (n, e) {
      return d || (d = _fs.default), c || (c = _path.default), n = c.normalize(n), d.readFileSync(n, e ? null : "utf8");
    }, p = function (n) {
      var e = l(n, !0);
      return e.buffer || (e = new Uint8Array(e)), _(e.buffer), e;
    }, process.argv.length > 1 && process.argv[1].replace(/\\/g, "/"), process.argv.slice(2), process.on("uncaughtException", function (n) {
      if (!(n instanceof Pn)) throw n;
    }), process.on("unhandledRejection", un), a.inspect = function () {
      return "[Emscripten Module object]";
    }) : o ? ("undefined" != typeof read && (l = function (n) {
      return read(n);
    }), p = function (n) {
      var e;
      return "function" == typeof readbuffer ? new Uint8Array(readbuffer(n)) : (_("object" == typeof (e = read(n, "binary"))), e);
    }, "undefined" != typeof scriptArgs && scriptArgs, "undefined" != typeof print && ("undefined" == typeof console && (console = {}), console.log = print, console.warn = console.error = "undefined" != typeof printErr ? printErr : print)) : (u || s) && (s ? m = self.location.href : document.currentScript && (m = document.currentScript.src), t && (m = t), m = 0 !== m.indexOf("blob:") ? m.substr(0, m.lastIndexOf("/") + 1) : "", l = function (n) {
      var e = new XMLHttpRequest();
      return e.open("GET", n, !1), e.send(null), e.responseText;
    }, s && (p = function (n) {
      var e = new XMLHttpRequest();
      return e.open("GET", n, !1), e.responseType = "arraybuffer", e.send(null), new Uint8Array(e.response);
    }));
    var b,
        h,
        y = a.print || console.log.bind(console),
        g = a.printErr || console.warn.bind(console);

    for (e in r) r.hasOwnProperty(e) && (a[e] = r[e]);

    r = null, a.arguments && a.arguments, a.thisProgram && a.thisProgram, a.quit && a.quit, a.wasmBinary && (b = a.wasmBinary), a.noExitRuntime && a.noExitRuntime, "object" != typeof WebAssembly && g("no native wasm support detected");
    var w = new WebAssembly.Table({
      initial: 146,
      maximum: 146,
      element: "anyfunc"
    }),
        I = !1;

    function _(n, e) {
      n || un("Assertion failed: " + e);
    }

    function k(n) {
      var e = a["_" + n];
      return _(e, "Cannot call unknown function " + n + ", make sure it is exported"), e;
    }

    function v(n, e, t, a, r) {
      var u = {
        string: function (n) {
          var e = 0;

          if (null != n && 0 !== n) {
            var t = 1 + (n.length << 2);
            N(n, e = Dn(t), t);
          }

          return e;
        },
        array: function (n) {
          var e = Dn(n.length);
          return C(n, e), e;
        }
      },
          s = k(n),
          i = [],
          o = 0;
      if (a) for (var l = 0; l < a.length; l++) {
        var p = u[t[l]];
        p ? (0 === o && (o = En()), i[l] = p(a[l])) : i[l] = a[l];
      }
      var d = s.apply(null, i);
      return d = function (n) {
        return "string" === e ? F(n) : "boolean" === e ? Boolean(n) : n;
      }(d), 0 !== o && On(o), d;
    }

    function M(n, e, t, a) {
      var r = (t = t || []).every(function (n) {
        return "number" === n;
      });
      return "string" !== e && r && !a ? k(n) : function () {
        return v(n, e, t, arguments);
      };
    }

    var A = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0;

    function S(n, e, t) {
      for (var a = e + t, r = e; n[r] && !(r >= a);) ++r;

      if (r - e > 16 && n.subarray && A) return A.decode(n.subarray(e, r));

      for (var u = ""; e < r;) {
        var s = n[e++];

        if (128 & s) {
          var i = 63 & n[e++];

          if (192 != (224 & s)) {
            var o = 63 & n[e++];
            if ((s = 224 == (240 & s) ? (15 & s) << 12 | i << 6 | o : (7 & s) << 18 | i << 12 | o << 6 | 63 & n[e++]) < 65536) u += String.fromCharCode(s);else {
              var l = s - 65536;
              u += String.fromCharCode(55296 | l >> 10, 56320 | 1023 & l);
            }
          } else u += String.fromCharCode((31 & s) << 6 | i);
        } else u += String.fromCharCode(s);
      }

      return u;
    }

    function F(n, e) {
      return n ? S(D, n, e) : "";
    }

    function x(n, e, t, a) {
      if (!(a > 0)) return 0;

      for (var r = t, u = t + a - 1, s = 0; s < n.length; ++s) {
        var i = n.charCodeAt(s);

        if (i >= 55296 && i <= 57343 && (i = 65536 + ((1023 & i) << 10) | 1023 & n.charCodeAt(++s)), i <= 127) {
          if (t >= u) break;
          e[t++] = i;
        } else if (i <= 2047) {
          if (t + 1 >= u) break;
          e[t++] = 192 | i >> 6, e[t++] = 128 | 63 & i;
        } else if (i <= 65535) {
          if (t + 2 >= u) break;
          e[t++] = 224 | i >> 12, e[t++] = 128 | i >> 6 & 63, e[t++] = 128 | 63 & i;
        } else {
          if (t + 3 >= u) break;
          e[t++] = 240 | i >> 18, e[t++] = 128 | i >> 12 & 63, e[t++] = 128 | i >> 6 & 63, e[t++] = 128 | 63 & i;
        }
      }

      return e[t] = 0, t - r;
    }

    function N(n, e, t) {
      return x(n, D, e, t);
    }

    function C(n, e) {
      E.set(n, e);
    }

    var R,
        E,
        D,
        O,
        P = 65536;

    function W(n, e) {
      return n % e > 0 && (n += e - n % e), n;
    }

    function z(n) {
      R = n, a.HEAP8 = E = new Int8Array(n), a.HEAP16 = new Int16Array(n), a.HEAP32 = O = new Int32Array(n), a.HEAPU8 = D = new Uint8Array(n), a.HEAPU16 = new Uint16Array(n), a.HEAPU32 = new Uint32Array(n), a.HEAPF32 = new Float32Array(n), a.HEAPF64 = new Float64Array(n);
    }

    var H = 5254800,
        T = 11760,
        U = a.INITIAL_MEMORY || 16777216;

    function B(n) {
      for (; n.length > 0;) {
        var e = n.shift();

        if ("function" != typeof e) {
          var t = e.func;
          "number" == typeof t ? void 0 === e.arg ? a.dynCall_v(t) : a.dynCall_vi(t, e.arg) : t(void 0 === e.arg ? null : e.arg);
        } else e(a);
      }
    }

    (h = a.wasmMemory ? a.wasmMemory : new WebAssembly.Memory({
      initial: U / P,
      maximum: 2147483648 / P
    })) && (R = h.buffer), U = R.byteLength, z(R), O[T >> 2] = H;
    var q = [],
        L = [],
        V = [],
        j = [];

    function G() {
      if (a.preRun) for ("function" == typeof a.preRun && (a.preRun = [a.preRun]); a.preRun.length;) Y(a.preRun.shift());
      B(q);
    }

    function $() {
      B(L);
    }

    function X() {
      B(V);
    }

    function K() {
      if (a.postRun) for ("function" == typeof a.postRun && (a.postRun = [a.postRun]); a.postRun.length;) J(a.postRun.shift());
      B(j);
    }

    function Y(n) {
      q.unshift(n);
    }

    function J(n) {
      j.unshift(n);
    }

    var Q = Math.ceil,
        Z = Math.floor,
        nn = 0,
        en = null,
        tn = null;

    function an(n) {
      nn++, a.monitorRunDependencies && a.monitorRunDependencies(nn);
    }

    function rn(n) {
      if (nn--, a.monitorRunDependencies && a.monitorRunDependencies(nn), 0 == nn && (null !== en && (clearInterval(en), en = null), tn)) {
        var e = tn;
        tn = null, e();
      }
    }

    function un(n) {
      throw a.onAbort && a.onAbort(n), y(n += ""), g(n), I = !0, n = "abort(" + n + "). Build with -s ASSERTIONS=1 for more info.", new WebAssembly.RuntimeError(n);
    }

    function sn(n, e) {
      return String.prototype.startsWith ? n.startsWith(e) : 0 === n.indexOf(e);
    }

    a.preloadedImages = {}, a.preloadedAudios = {};
    var on = "data:application/octet-stream;base64,";

    function ln(n) {
      return sn(n, on);
    }

    var pn = "file://";

    function dn(n) {
      return sn(n, pn);
    }

    var cn = "tfjs-backend-wasm.wasm";

    function mn() {
      try {
        if (b) return new Uint8Array(b);
        if (p) return p(cn);
        throw "both async and sync fetching of the wasm failed";
      } catch (n) {
        un(n);
      }
    }

    function fn() {
      return b || !u && !s || "function" != typeof fetch || dn(cn) ? new Promise(function (n, e) {
        n(mn());
      }) : fetch(cn, {
        credentials: "same-origin"
      }).then(function (n) {
        if (!n.ok) throw "failed to load wasm binary file at '" + cn + "'";
        return n.arrayBuffer();
      }).catch(function () {
        return mn();
      });
    }

    function bn() {
      var n = {
        a: Sn
      };

      function e(n, e) {
        var t = n.exports;
        a.asm = t, rn();
      }

      function t(n) {
        e(n.instance);
      }

      function r(e) {
        return fn().then(function (e) {
          return WebAssembly.instantiate(e, n);
        }).then(e, function (n) {
          g("failed to asynchronously prepare wasm: " + n), un(n);
        });
      }

      if (an(), a.instantiateWasm) try {
        return a.instantiateWasm(n, e);
      } catch (n) {
        return g("Module.instantiateWasm callback failed with error: " + n), !1;
      }
      return function () {
        if (b || "function" != typeof WebAssembly.instantiateStreaming || ln(cn) || dn(cn) || "function" != typeof fetch) return r(t);
        fetch(cn, {
          credentials: "same-origin"
        }).then(function (e) {
          return WebAssembly.instantiateStreaming(e, n).then(t, function (n) {
            g("wasm streaming compile failed: " + n), g("falling back to ArrayBuffer instantiation"), r(t);
          });
        });
      }(), {};
    }

    function hn() {
      un();
    }

    function yn(n, e, t) {
      D.copyWithin(n, e, e + t);
    }

    function gn() {
      return D.length;
    }

    function wn(n) {
      try {
        return h.grow(n - R.byteLength + 65535 >>> 16), z(h.buffer), 1;
      } catch (n) {}
    }

    function In(n) {
      n >>>= 0;
      var e = gn();
      if (n > 2147483648) return !1;

      for (var t = 1; t <= 4; t *= 2) {
        var a = e * (1 + .2 / t);
        if (a = Math.min(a, n + 100663296), wn(Math.min(2147483648, W(Math.max(16777216, n, a), 65536)))) return !0;
      }

      return !1;
    }

    ln(cn) || (cn = f(cn)), L.push({
      func: function () {
        Nn();
      }
    });
    var _n = {
      mappings: {},
      buffers: [null, [], []],
      printChar: function (n, e) {
        var t = _n.buffers[n];
        0 === e || 10 === e ? ((1 === n ? y : g)(S(t, 0)), t.length = 0) : t.push(e);
      },
      varargs: void 0,
      get: function () {
        return _n.varargs += 4, O[_n.varargs - 4 >> 2];
      },
      getStr: function (n) {
        return F(n);
      },
      get64: function (n, e) {
        return n;
      }
    };

    function kn(n) {
      return 0;
    }

    function vn(n, e, t, a, r) {}

    function Mn(n, e, t, a) {
      for (var r = 0, u = 0; u < t; u++) {
        for (var s = O[e + 8 * u >> 2], i = O[e + (8 * u + 4) >> 2], o = 0; o < i; o++) _n.printChar(n, D[s + o]);

        r += i;
      }

      return O[a >> 2] = r, 0;
    }

    function An(n) {
      return (n = +n) >= 0 ? +Z(n + .5) : +Q(n - .5);
    }

    var Sn = {
      a: hn,
      e: yn,
      f: In,
      g: kn,
      d: vn,
      c: Mn,
      memory: h,
      b: An,
      table: w
    },
        Fn = bn();
    a.asm = Fn;

    var xn,
        Nn = a.___wasm_call_ctors = function () {
      return (Nn = a.___wasm_call_ctors = a.asm.h).apply(null, arguments);
    },
        En = (a._init = function () {
      return (a._init = a.asm.i).apply(null, arguments);
    }, a._register_tensor = function () {
      return (a._register_tensor = a.asm.j).apply(null, arguments);
    }, a._dispose_data = function () {
      return (a._dispose_data = a.asm.k).apply(null, arguments);
    }, a._dispose = function () {
      return (a._dispose = a.asm.l).apply(null, arguments);
    }, a._Abs = function () {
      return (a._Abs = a.asm.m).apply(null, arguments);
    }, a._Add = function () {
      return (a._Add = a.asm.n).apply(null, arguments);
    }, a._AddN = function () {
      return (a._AddN = a.asm.o).apply(null, arguments);
    }, a._ArgMax = function () {
      return (a._ArgMax = a.asm.p).apply(null, arguments);
    }, a._AvgPool = function () {
      return (a._AvgPool = a.asm.q).apply(null, arguments);
    }, a._BatchMatMul = function () {
      return (a._BatchMatMul = a.asm.r).apply(null, arguments);
    }, a._ClipByValue = function () {
      return (a._ClipByValue = a.asm.s).apply(null, arguments);
    }, a._Conv2D = function () {
      return (a._Conv2D = a.asm.t).apply(null, arguments);
    }, a._Conv2DBackpropInput = function () {
      return (a._Conv2DBackpropInput = a.asm.u).apply(null, arguments);
    }, a._Cos = function () {
      return (a._Cos = a.asm.v).apply(null, arguments);
    }, a._CropAndResize = function () {
      return (a._CropAndResize = a.asm.w).apply(null, arguments);
    }, a._DepthwiseConv2dNative = function () {
      return (a._DepthwiseConv2dNative = a.asm.x).apply(null, arguments);
    }, a._Div = function () {
      return (a._Div = a.asm.y).apply(null, arguments);
    }, a._Equal = function () {
      return (a._Equal = a.asm.z).apply(null, arguments);
    }, a._Exp = function () {
      return (a._Exp = a.asm.A).apply(null, arguments);
    }, a._FloorDiv = function () {
      return (a._FloorDiv = a.asm.B).apply(null, arguments);
    }, a._FusedBatchNorm = function () {
      return (a._FusedBatchNorm = a.asm.C).apply(null, arguments);
    }, a._FusedConv2D = function () {
      return (a._FusedConv2D = a.asm.D).apply(null, arguments);
    }, a._FusedDepthwiseConv2D = function () {
      return (a._FusedDepthwiseConv2D = a.asm.E).apply(null, arguments);
    }, a._Gather = function () {
      return (a._Gather = a.asm.F).apply(null, arguments);
    }, a._GatherNd = function () {
      return (a._GatherNd = a.asm.G).apply(null, arguments);
    }, a._Greater = function () {
      return (a._Greater = a.asm.H).apply(null, arguments);
    }, a._GreaterEqual = function () {
      return (a._GreaterEqual = a.asm.I).apply(null, arguments);
    }, a._Less = function () {
      return (a._Less = a.asm.J).apply(null, arguments);
    }, a._LessEqual = function () {
      return (a._LessEqual = a.asm.K).apply(null, arguments);
    }, a._Log = function () {
      return (a._Log = a.asm.L).apply(null, arguments);
    }, a._LogicalAnd = function () {
      return (a._LogicalAnd = a.asm.M).apply(null, arguments);
    }, a._Max = function () {
      return (a._Max = a.asm.N).apply(null, arguments);
    }, a._MaxPool = function () {
      return (a._MaxPool = a.asm.O).apply(null, arguments);
    }, a._Maximum = function () {
      return (a._Maximum = a.asm.P).apply(null, arguments);
    }, a._Min = function () {
      return (a._Min = a.asm.Q).apply(null, arguments);
    }, a._Minimum = function () {
      return (a._Minimum = a.asm.R).apply(null, arguments);
    }, a._Multiply = function () {
      return (a._Multiply = a.asm.S).apply(null, arguments);
    }, a._Negate = function () {
      return (a._Negate = a.asm.T).apply(null, arguments);
    }, a._NonMaxSuppressionV3 = function () {
      return (a._NonMaxSuppressionV3 = a.asm.U).apply(null, arguments);
    }, a._NonMaxSuppressionV4 = function () {
      return (a._NonMaxSuppressionV4 = a.asm.V).apply(null, arguments);
    }, a._NonMaxSuppressionV5 = function () {
      return (a._NonMaxSuppressionV5 = a.asm.W).apply(null, arguments);
    }, a._NotEqual = function () {
      return (a._NotEqual = a.asm.X).apply(null, arguments);
    }, a._OneHot = function () {
      return (a._OneHot = a.asm.Y).apply(null, arguments);
    }, a._PadV2 = function () {
      return (a._PadV2 = a.asm.Z).apply(null, arguments);
    }, a._Pow = function () {
      return (a._Pow = a.asm._).apply(null, arguments);
    }, a._Prelu = function () {
      return (a._Prelu = a.asm.$).apply(null, arguments);
    }, a._Relu = function () {
      return (a._Relu = a.asm.aa).apply(null, arguments);
    }, a._Relu6 = function () {
      return (a._Relu6 = a.asm.ba).apply(null, arguments);
    }, a._ResizeBilinear = function () {
      return (a._ResizeBilinear = a.asm.ca).apply(null, arguments);
    }, a._Reverse = function () {
      return (a._Reverse = a.asm.da).apply(null, arguments);
    }, a._RotateWithOffset = function () {
      return (a._RotateWithOffset = a.asm.ea).apply(null, arguments);
    }, a._Rsqrt = function () {
      return (a._Rsqrt = a.asm.fa).apply(null, arguments);
    }, a._ScatterNd = function () {
      return (a._ScatterNd = a.asm.ga).apply(null, arguments);
    }, a._SelectV2 = function () {
      return (a._SelectV2 = a.asm.ha).apply(null, arguments);
    }, a._Sigmoid = function () {
      return (a._Sigmoid = a.asm.ia).apply(null, arguments);
    }, a._Sin = function () {
      return (a._Sin = a.asm.ja).apply(null, arguments);
    }, a._Softmax = function () {
      return (a._Softmax = a.asm.ka).apply(null, arguments);
    }, a._Sqrt = function () {
      return (a._Sqrt = a.asm.la).apply(null, arguments);
    }, a._Square = function () {
      return (a._Square = a.asm.ma).apply(null, arguments);
    }, a._Sub = function () {
      return (a._Sub = a.asm.na).apply(null, arguments);
    }, a._Sum = function () {
      return (a._Sum = a.asm.oa).apply(null, arguments);
    }, a._Tanh = function () {
      return (a._Tanh = a.asm.pa).apply(null, arguments);
    }, a._Tile = function () {
      return (a._Tile = a.asm.qa).apply(null, arguments);
    }, a._Transpose = function () {
      return (a._Transpose = a.asm.ra).apply(null, arguments);
    }, a.__FusedMatMul = function () {
      return (a.__FusedMatMul = a.asm.sa).apply(null, arguments);
    }, a._malloc = function () {
      return (a._malloc = a.asm.ta).apply(null, arguments);
    }, a._free = function () {
      return (a._free = a.asm.ua).apply(null, arguments);
    }, a.stackSave = function () {
      return (En = a.stackSave = a.asm.va).apply(null, arguments);
    }),
        Dn = a.stackAlloc = function () {
      return (Dn = a.stackAlloc = a.asm.wa).apply(null, arguments);
    },
        On = a.stackRestore = function () {
      return (On = a.stackRestore = a.asm.xa).apply(null, arguments);
    };

    function Pn(n) {
      this.name = "ExitStatus", this.message = "Program terminated with exit(" + n + ")", this.status = n;
    }

    function Wn(n) {
      function e() {
        xn || (xn = !0, a.calledRun = !0, I || ($(), X(), a.onRuntimeInitialized && a.onRuntimeInitialized(), K()));
      }

      nn > 0 || (G(), nn > 0 || (a.setStatus ? (a.setStatus("Running..."), setTimeout(function () {
        setTimeout(function () {
          a.setStatus("");
        }, 1), e();
      }, 1)) : e()));
    }

    if (a.dynCall_vi = function () {
      return (a.dynCall_vi = a.asm.ya).apply(null, arguments);
    }, a.dynCall_v = function () {
      return (a.dynCall_v = a.asm.za).apply(null, arguments);
    }, a.asm = Fn, a.cwrap = M, a.then = function (n) {
      if (xn) n(a);else {
        var e = a.onRuntimeInitialized;

        a.onRuntimeInitialized = function () {
          e && e(), n(a);
        };
      }
      return a;
    }, tn = function n() {
      xn || Wn(), xn || (tn = n);
    }, a.run = Wn, a.preInit) for ("function" == typeof a.preInit && (a.preInit = [a.preInit]); a.preInit.length > 0;) a.preInit.pop()();
    return Wn(), n;
  });
  n.exports = a;
});

class Le extends _tfjsCore.KernelBackend {
  constructor(n) {
    super(), this.wasm = n, this.dataIdNextNumber = 1, this.wasm.tfjs.init(), this.dataIdMap = new _tfjsCore.DataStorage(this, (0, _tfjsCore.engine)());
  }

  write(n, e, t) {
    const a = {};
    return this.move(a, n, e, t), a;
  }

  numDataIds() {
    return this.dataIdMap.numDataIds();
  }

  async time(n) {
    const t = _tfjsCore.util.now();

    return n(), {
      kernelMs: _tfjsCore.util.now() - t
    };
  }

  move(n, t, a, r) {
    const u = this.dataIdNextNumber++;

    if ("string" === r) {
      const e = t;
      return void this.dataIdMap.set(n, {
        id: u,
        stringBytes: e,
        shape: a,
        dtype: r,
        memoryOffset: null
      });
    }

    const s = _tfjsCore.util.sizeFromShape(a),
          i = s * _tfjsCore.util.bytesPerElement(r),
          o = this.wasm._malloc(i);

    this.dataIdMap.set(n, {
      id: u,
      memoryOffset: o,
      shape: a,
      dtype: r
    }), this.wasm.tfjs.registerTensor(u, s, o), null != t && this.wasm.HEAPU8.set(new Uint8Array(t.buffer, t.byteOffset, i), o);
  }

  async read(n) {
    return this.readSync(n);
  }

  readSync(n) {
    const {
      memoryOffset: t,
      dtype: a,
      shape: r,
      stringBytes: u
    } = this.dataIdMap.get(n);
    return "string" === a ? u : function (n, e) {
      switch (e) {
        case "float32":
          return new Float32Array(n);

        case "int32":
          return new Int32Array(n);

        case "bool":
          return new Uint8Array(n);

        default:
          throw new Error(`Unknown dtype ${e}`);
      }
    }(this.wasm.HEAPU8.slice(t, t + _tfjsCore.util.sizeFromShape(r) * _tfjsCore.util.bytesPerElement(a)).buffer, a);
  }

  disposeData(n) {
    const e = this.dataIdMap.get(n);
    this.wasm._free(e.memoryOffset), this.wasm.tfjs.disposeData(e.id), this.dataIdMap.delete(n);
  }

  floatPrecision() {
    return 32;
  }

  getMemoryOffset(n) {
    return this.dataIdMap.get(n).memoryOffset;
  }

  dispose() {
    this.wasm.tfjs.dispose(), this.wasm = null;
  }

  memory() {
    return {
      unreliable: !1
    };
  }

  makeOutput(n, t, a) {
    let r;
    if (null == a) r = this.write(null, n, t);else {
      r = {};
      const u = this.dataIdNextNumber++;
      this.dataIdMap.set(r, {
        id: u,
        memoryOffset: a,
        shape: n,
        dtype: t
      });

      const s = _tfjsCore.util.sizeFromShape(n);

      this.wasm.tfjs.registerTensor(u, s, a);
    }
    return {
      dataId: r,
      shape: n,
      dtype: t
    };
  }

  typedArrayFromHeap({
    shape: n,
    dtype: t,
    dataId: a
  }) {
    const r = this.wasm.HEAPU8.buffer,
          {
      memoryOffset: u
    } = this.dataIdMap.get(a),
          s = _tfjsCore.util.sizeFromShape(n);

    switch (t) {
      case "float32":
        return new Float32Array(r, u, s);

      case "int32":
        return new Int32Array(r, u, s);

      case "bool":
        return new Uint8Array(r, u, s);

      default:
        throw new Error(`Uknown dtype ${t}`);
    }
  }

}

exports.BackendWasm = Le;
(0, _tfjsCore.registerBackend)("wasm", async () => {
  const {
    wasm: n
  } = await async function () {
    const n = await (0, _tfjsCore.env)().getAsync("WASM_HAS_SIMD_SUPPORT");
    return new Promise((t, a) => {
      const r = {};
      null != Ve && (r.locateFile = (n, e) => n.endsWith(".wasm") ? Ve : e + n, Ge && (r.instantiateWasm = function (n) {
        return (t, a) => (_tfjsCore.util.fetch(n, {
          credentials: "same-origin"
        }).then(e => {
          e.ok || t.env.a(`failed to load wasm binary file at '${n}'`), e.arrayBuffer().then(n => {
            WebAssembly.instantiate(n, t).then(n => {
              a(n.instance);
            });
          });
        }), {});
      }(Ve)));
      const u = n ? Be(r) : qe(r);
      u.tfjs = {
        init: u.cwrap("init", null, []),
        registerTensor: u.cwrap("register_tensor", null, ["number", "number", "number"]),
        disposeData: u.cwrap("dispose_data", null, ["number"]),
        dispose: u.cwrap("dispose", null, [])
      };
      let s = !1;
      u.onRuntimeInitialized = () => {
        s = !0, je = !1, t({
          wasm: u
        });
      }, u.onAbort = () => {
        if (s) return;
        if (je) return;
        je = !0;
        a({
          message: "Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers"
        });
      };
    });
  }();
  return new Le(n);
}, 2);
let Ve = null,
    je = !1,
    Ge = !1;

function $e(n, e = !1) {
  if (je) throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`");
  Ve = n, Ge = e;
}

const Xe = "2.1.0";
exports.version_wasm = Xe;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","path":"node_modules/parcel-bundler/src/builtins/_empty.js","fs":"node_modules/parcel-bundler/src/builtins/_empty.js","process":"node_modules/process/browser.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setWebGLContext = setWebGLContext;
exports.getWebGLContext = getWebGLContext;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const contexts = {};
const WEBGL_ATTRIBUTES = {
  alpha: false,
  antialias: false,
  premultipliedAlpha: false,
  preserveDrawingBuffer: false,
  depth: false,
  stencil: false,
  failIfMajorPerformanceCaveat: true
};

function setWebGLContext(webGLVersion, gl) {
  contexts[webGLVersion] = gl;
}

function getWebGLContext(webGLVersion) {
  if (!(webGLVersion in contexts)) {
    contexts[webGLVersion] = getWebGLRenderingContext(webGLVersion);
  }

  const gl = contexts[webGLVersion];

  if (gl.isContextLost()) {
    delete contexts[webGLVersion];
    return getWebGLContext(webGLVersion);
  }

  gl.disable(gl.DEPTH_TEST);
  gl.disable(gl.STENCIL_TEST);
  gl.disable(gl.BLEND);
  gl.disable(gl.DITHER);
  gl.disable(gl.POLYGON_OFFSET_FILL);
  gl.disable(gl.SAMPLE_COVERAGE);
  gl.enable(gl.SCISSOR_TEST);
  gl.enable(gl.CULL_FACE);
  gl.cullFace(gl.BACK);
  return contexts[webGLVersion];
}

function createCanvas(webGLVersion) {
  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {
    return new OffscreenCanvas(300, 150);
  } else if (typeof document !== 'undefined') {
    return document.createElement('canvas');
  } else {
    throw new Error('Cannot create a canvas in this context');
  }
}

function getWebGLRenderingContext(webGLVersion) {
  if (webGLVersion !== 1 && webGLVersion !== 2) {
    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');
  }

  const canvas = createCanvas(webGLVersion);
  canvas.addEventListener('webglcontextlost', ev => {
    ev.preventDefault();
    delete contexts[webGLVersion];
  }, false);

  if (webGLVersion === 1) {
    return canvas.getContext('webgl', WEBGL_ATTRIBUTES) || canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES);
  }

  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);
}
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUnpackedMatrixTextureShapeWidthHeight = getUnpackedMatrixTextureShapeWidthHeight;
exports.getUnpackedArraySizeFromMatrixSize = getUnpackedArraySizeFromMatrixSize;
exports.getColorMatrixTextureShapeWidthHeight = getColorMatrixTextureShapeWidthHeight;
exports.getDenseTexShape = getDenseTexShape;
exports.getMatrixSizeFromUnpackedArraySize = getMatrixSizeFromUnpackedArraySize;
exports.decodeMatrixFromUnpackedColorRGBAArray = decodeMatrixFromUnpackedColorRGBAArray;
exports.getPackedMatrixTextureShapeWidthHeight = getPackedMatrixTextureShapeWidthHeight;
exports.getPackedRGBAArraySizeFromMatrixShape = getPackedRGBAArraySizeFromMatrixShape;
exports.getTextureConfig = getTextureConfig;
exports.PhysicalTextureType = exports.TextureUsage = exports.PackingScheme = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var PackingScheme;
exports.PackingScheme = PackingScheme;

(function (PackingScheme) {
  /**
   * All values in a single texel are densely packed without any constraints.
   *
   * This is how the shader encodes a tensor with shape = [2, 3, 4]
   * (indices are [batch, row, col]).
   *
   * 000|001   010|011   020|021
   * -------   -------   -------
   * 002|003   012|013   022|023
   *
   * 100|101   110|111   120|121
   * -------   -------   -------
   * 102|103   112|113   122|123
   *
   */
  PackingScheme[PackingScheme["DENSE"] = 0] = "DENSE";
  /**
   * Single texels contain only values from the same batch, and from adjacent
   * rows and columns.
   *
   * This is how the shader encodes a tensor with shape = [2, 3, 5]
   * (indices are [batch, row, col]).
   *
   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx
   * -------   -------   -------   -------   -------   -------
   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx
   *
   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx
   * -------   -------   -------   -------   -------   -------
   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx
   *
   */

  PackingScheme[PackingScheme["SHARED_BATCH"] = 1] = "SHARED_BATCH";
})(PackingScheme || (exports.PackingScheme = PackingScheme = {}));

var TextureUsage;
exports.TextureUsage = TextureUsage;

(function (TextureUsage) {
  TextureUsage[TextureUsage["RENDER"] = 0] = "RENDER";
  TextureUsage[TextureUsage["UPLOAD"] = 1] = "UPLOAD";
  TextureUsage[TextureUsage["PIXELS"] = 2] = "PIXELS";
  TextureUsage[TextureUsage["DOWNLOAD"] = 3] = "DOWNLOAD";
})(TextureUsage || (exports.TextureUsage = TextureUsage = {}));

var PhysicalTextureType;
exports.PhysicalTextureType = PhysicalTextureType;

(function (PhysicalTextureType) {
  PhysicalTextureType[PhysicalTextureType["UNPACKED_FLOAT16"] = 0] = "UNPACKED_FLOAT16";
  PhysicalTextureType[PhysicalTextureType["UNPACKED_FLOAT32"] = 1] = "UNPACKED_FLOAT32";
  PhysicalTextureType[PhysicalTextureType["PACKED_4X1_UNSIGNED_BYTE"] = 2] = "PACKED_4X1_UNSIGNED_BYTE";
  PhysicalTextureType[PhysicalTextureType["PACKED_2X2_FLOAT32"] = 3] = "PACKED_2X2_FLOAT32";
  PhysicalTextureType[PhysicalTextureType["PACKED_2X2_FLOAT16"] = 4] = "PACKED_2X2_FLOAT16";
})(PhysicalTextureType || (exports.PhysicalTextureType = PhysicalTextureType = {}));

function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {
  return [columns, rows];
}

function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {
  return matrixSize * channelsPerTexture;
}

function getColorMatrixTextureShapeWidthHeight(rows, columns) {
  return [columns * 4, rows];
}
/**
 * Get shape for densely packed RGBA texture.
 */


function getDenseTexShape(shape) {
  const size = _tfjsCore.util.sizeFromShape(shape);

  const texelsNeeded = Math.ceil(size / 4);
  return _tfjsCore.util.sizeToSquarishShape(texelsNeeded);
}

function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {
  if (unpackedSize % channelsPerTexture !== 0) {
    throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` + `${channelsPerTexture}`);
  }

  return unpackedSize / channelsPerTexture;
}

function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {
  const requiredSize = unpackedArray.length * channels / 4;

  if (matrix.length < requiredSize) {
    throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);
  }

  let dst = 0;

  for (let src = 0; src < unpackedArray.length; src += 4) {
    for (let c = 0; c < channels; c++) {
      matrix[dst++] = unpackedArray[src + c];
    }
  }
}

function getPackedMatrixTextureShapeWidthHeight(rows, columns) {
  return [Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))];
}

function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {
  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);
  return w * h * 4;
}

function getTextureConfig( // tslint:disable-next-line:no-any
gl, textureHalfFloatExtension) {
  // tslint:disable-next-line:no-any
  const glany = gl;
  let internalFormatFloat;
  let internalFormatHalfFloat;
  let internalFormatPackedHalfFloat;
  let internalFormatPackedFloat;
  let textureFormatFloat;
  let downloadTextureFormat;
  let downloadUnpackNumChannels;
  let defaultNumChannels;
  let textureTypeHalfFloat;
  let textureTypeFloat;

  if ((0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 2) {
    internalFormatFloat = glany.R32F;
    internalFormatHalfFloat = glany.R16F;
    internalFormatPackedHalfFloat = glany.RGBA16F;
    internalFormatPackedFloat = glany.RGBA32F;
    textureFormatFloat = glany.RED;
    downloadUnpackNumChannels = 4;
    defaultNumChannels = 1;
    textureTypeHalfFloat = glany.HALF_FLOAT;
    textureTypeFloat = glany.FLOAT;
  } else {
    internalFormatFloat = gl.RGBA;
    internalFormatHalfFloat = gl.RGBA;
    internalFormatPackedHalfFloat = gl.RGBA;
    internalFormatPackedFloat = glany.RGBA;
    textureFormatFloat = gl.RGBA;
    downloadUnpackNumChannels = 4;
    defaultNumChannels = 4;
    textureTypeHalfFloat = textureHalfFloatExtension != null ? textureHalfFloatExtension.HALF_FLOAT_OES : null;
    textureTypeFloat = gl.FLOAT;
  }

  downloadTextureFormat = gl.RGBA;
  return {
    internalFormatFloat,
    internalFormatHalfFloat,
    internalFormatPackedHalfFloat,
    internalFormatPackedFloat,
    textureFormatFloat,
    downloadTextureFormat,
    downloadUnpackNumChannels,
    defaultNumChannels,
    textureTypeHalfFloat,
    textureTypeFloat
  };
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.callAndCheck = callAndCheck;
exports.canBeRepresented = canBeRepresented;
exports.getWebGLErrorMessage = getWebGLErrorMessage;
exports.getExtensionOrThrow = getExtensionOrThrow;
exports.createVertexShader = createVertexShader;
exports.createFragmentShader = createFragmentShader;
exports.createProgram = createProgram;
exports.linkProgram = linkProgram;
exports.validateProgram = validateProgram;
exports.createStaticVertexBuffer = createStaticVertexBuffer;
exports.createStaticIndexBuffer = createStaticIndexBuffer;
exports.getNumChannels = getNumChannels;
exports.createTexture = createTexture;
exports.validateTextureSize = validateTextureSize;
exports.createFramebuffer = createFramebuffer;
exports.bindVertexBufferToProgramAttribute = bindVertexBufferToProgramAttribute;
exports.bindTextureUnit = bindTextureUnit;
exports.unbindTextureUnit = unbindTextureUnit;
exports.getProgramUniformLocationOrThrow = getProgramUniformLocationOrThrow;
exports.getProgramUniformLocation = getProgramUniformLocation;
exports.bindTextureToProgramUniformSampler = bindTextureToProgramUniformSampler;
exports.bindCanvasToFramebuffer = bindCanvasToFramebuffer;
exports.bindColorTextureToFramebuffer = bindColorTextureToFramebuffer;
exports.unbindColorTextureFromFramebuffer = unbindColorTextureFromFramebuffer;
exports.validateFramebuffer = validateFramebuffer;
exports.getFramebufferErrorMessage = getFramebufferErrorMessage;
exports.getBatchDim = getBatchDim;
exports.getRowsCols = getRowsCols;
exports.getShapeAs3D = getShapeAs3D;
exports.getTextureShapeFromLogicalShape = getTextureShapeFromLogicalShape;
exports.isReshapeFree = isReshapeFree;
exports.getWebGLMaxTextureSize = getWebGLMaxTextureSize;
exports.resetMaxTextureSize = resetMaxTextureSize;
exports.resetMaxTexturesInShader = resetMaxTexturesInShader;
exports.getMaxTexturesInShader = getMaxTexturesInShader;
exports.getWebGLDisjointQueryTimerVersion = getWebGLDisjointQueryTimerVersion;
exports.hasExtension = hasExtension;
exports.isWebGLVersionEnabled = isWebGLVersionEnabled;
exports.isCapableOfRenderingToFloatTexture = isCapableOfRenderingToFloatTexture;
exports.isDownloadFloatTextureEnabled = isDownloadFloatTextureEnabled;
exports.isWebGLFenceEnabled = isWebGLFenceEnabled;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _canvas_util = require("./canvas_util");

var _tex_util = require("./tex_util");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function callAndCheck(gl, func) {
  const returnValue = func();

  if ((0, _tfjsCore.env)().getBool('DEBUG')) {
    checkWebGLError(gl);
  }

  return returnValue;
}

function checkWebGLError(gl) {
  const error = gl.getError();

  if (error !== gl.NO_ERROR) {
    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));
  }
} // https://en.wikipedia.org/wiki/Half-precision_floating-point_format


const MIN_FLOAT16 = 5.96e-8;
const MAX_FLOAT16 = 65504;

function canBeRepresented(num) {
  if ((0, _tfjsCore.env)().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 || MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16) {
    return true;
  }

  return false;
}

function getWebGLErrorMessage(gl, status) {
  switch (status) {
    case gl.NO_ERROR:
      return 'NO_ERROR';

    case gl.INVALID_ENUM:
      return 'INVALID_ENUM';

    case gl.INVALID_VALUE:
      return 'INVALID_VALUE';

    case gl.INVALID_OPERATION:
      return 'INVALID_OPERATION';

    case gl.INVALID_FRAMEBUFFER_OPERATION:
      return 'INVALID_FRAMEBUFFER_OPERATION';

    case gl.OUT_OF_MEMORY:
      return 'OUT_OF_MEMORY';

    case gl.CONTEXT_LOST_WEBGL:
      return 'CONTEXT_LOST_WEBGL';

    default:
      return `Unknown error code ${status}`;
  }
}

function getExtensionOrThrow(gl, extensionName) {
  return throwIfNull(gl, () => gl.getExtension(extensionName), 'Extension "' + extensionName + '" not supported on this browser.');
}

function createVertexShader(gl, vertexShaderSource) {
  const vertexShader = throwIfNull(gl, () => gl.createShader(gl.VERTEX_SHADER), 'Unable to create vertex WebGLShader.');
  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));
  callAndCheck(gl, () => gl.compileShader(vertexShader));

  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {
    console.log(gl.getShaderInfoLog(vertexShader));
    throw new Error('Failed to compile vertex shader.');
  }

  return vertexShader;
}

function createFragmentShader(gl, fragmentShaderSource) {
  const fragmentShader = throwIfNull(gl, () => gl.createShader(gl.FRAGMENT_SHADER), 'Unable to create fragment WebGLShader.');
  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));
  callAndCheck(gl, () => gl.compileShader(fragmentShader));

  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {
    logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));
    throw new Error('Failed to compile fragment shader.');
  }

  return fragmentShader;
}

const lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;

function logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {
  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);

  if (lineNumberRegexResult == null) {
    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);
    console.log(shaderSource);
    return;
  }

  const lineNumber = +lineNumberRegexResult[1];
  const shaderLines = shaderSource.split('\n');
  const pad = shaderLines.length.toString().length + 2;
  const linesWithLineNumbers = shaderLines.map((line, lineNumber) => _tfjsCore.util.rightPad((lineNumber + 1).toString(), pad) + line);
  let maxLineLength = 0;

  for (let i = 0; i < linesWithLineNumbers.length; i++) {
    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);
  }

  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);
  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);
  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);
  console.log(beforeErrorLines.join('\n'));
  console.log(shaderInfoLog.split('\n')[0]);
  console.log(`%c ${_tfjsCore.util.rightPad(errorLine[0], maxLineLength)}`, 'border:1px solid red; background-color:#e3d2d2; color:#a61717');
  console.log(afterErrorLines.join('\n'));
}

function createProgram(gl) {
  return throwIfNull(gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');
}

function linkProgram(gl, program) {
  callAndCheck(gl, () => gl.linkProgram(program));

  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
    console.log(gl.getProgramInfoLog(program));
    throw new Error('Failed to link vertex and fragment shaders.');
  }
}

function validateProgram(gl, program) {
  callAndCheck(gl, () => gl.validateProgram(program));

  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {
    console.log(gl.getProgramInfoLog(program));
    throw new Error('Shader program validation failed.');
  }
}

function createStaticVertexBuffer(gl, data) {
  const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');
  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));
  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));
  return buffer;
}

function createStaticIndexBuffer(gl, data) {
  const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');
  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));
  callAndCheck(gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));
  return buffer;
}

function getNumChannels() {
  if ((0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 2) {
    return 1;
  }

  return 4;
}

function createTexture(gl) {
  return throwIfNull(gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');
}

function validateTextureSize(width, height) {
  const maxTextureSize = (0, _tfjsCore.env)().getNumber('WEBGL_MAX_TEXTURE_SIZE');

  if (width <= 0 || height <= 0) {
    const requested = `[${width}x${height}]`;
    throw new Error('Requested texture size ' + requested + ' is invalid.');
  }

  if (width > maxTextureSize || height > maxTextureSize) {
    const requested = `[${width}x${height}]`;
    const max = `[${maxTextureSize}x${maxTextureSize}]`;
    throw new Error('Requested texture size ' + requested + ' greater than WebGL maximum on this browser / GPU ' + max + '.');
  }
}

function createFramebuffer(gl) {
  return throwIfNull(gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');
}

function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {
  const loc = gl.getAttribLocation(program, attribute);

  if (loc === -1) {
    // The GPU compiler decided to strip out this attribute because it's unused,
    // thus no need to bind.
    return false;
  }

  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));
  callAndCheck(gl, () => gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes));
  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));
  return true;
}

function bindTextureUnit(gl, texture, textureUnit) {
  validateTextureUnit(gl, textureUnit);
  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));
  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));
}

function unbindTextureUnit(gl, textureUnit) {
  validateTextureUnit(gl, textureUnit);
  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));
  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
}

function getProgramUniformLocationOrThrow(gl, program, uniformName) {
  return throwIfNull(gl, () => gl.getUniformLocation(program, uniformName), 'uniform "' + uniformName + '" not present in program.');
}

function getProgramUniformLocation(gl, program, uniformName) {
  return gl.getUniformLocation(program, uniformName);
}

function bindTextureToProgramUniformSampler(gl, texture, uniformSamplerLocation, textureUnit) {
  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));
  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));
}

function bindCanvasToFramebuffer(gl) {
  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));
  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));
  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));
}

function bindColorTextureToFramebuffer(gl, texture, framebuffer) {
  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));
  callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));
}

function unbindColorTextureFromFramebuffer(gl, framebuffer) {
  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));
  callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));
}

function validateFramebuffer(gl) {
  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);

  if (status !== gl.FRAMEBUFFER_COMPLETE) {
    throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));
  }
}

function getFramebufferErrorMessage(gl, status) {
  switch (status) {
    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';

    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';

    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';

    case gl.FRAMEBUFFER_UNSUPPORTED:
      return 'FRAMEBUFFER_UNSUPPORTED';

    default:
      return `unknown error ${status}`;
  }
}

function throwIfNull(gl, returnTOrNull, failureMessage) {
  const tOrNull = callAndCheck(gl, () => returnTOrNull());

  if (tOrNull == null) {
    throw new Error(failureMessage);
  }

  return tOrNull;
}

function validateTextureUnit(gl, textureUnit) {
  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;
  const glTextureUnit = textureUnit + gl.TEXTURE0;

  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {
    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;
    throw new Error(`textureUnit must be in ${textureUnitRange}.`);
  }
}

function getBatchDim(shape, dimsToSkip = 2) {
  return _tfjsCore.util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));
}

function getRowsCols(shape) {
  if (shape.length === 0) {
    throw Error('Cannot get rows and columns of an empty shape array.');
  }

  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];
}

function getShapeAs3D(shape) {
  let shapeAs3D = [1, 1, 1];
  const isScalar = shape.length === 0 || shape.length === 1 && shape[0] === 1;

  if (!isScalar) {
    shapeAs3D = [getBatchDim(shape), ...getRowsCols(shape)];
  }

  return shapeAs3D;
}

function getTextureShapeFromLogicalShape(logShape, isPacked = false) {
  let maxTexSize = (0, _tfjsCore.env)().getNumber('WEBGL_MAX_TEXTURE_SIZE');

  if (isPacked) {
    maxTexSize = maxTexSize * 2; // This logic ensures we accurately count the number of packed texels needed
    // to accommodate the tensor. We can only pack values in the same texel if
    // they are from adjacent pairs of rows/cols within the same batch. So if a
    // tensor has 3 rows, we pretend it has 4 rows in order to account for the
    // fact that the texels containing the third row are half empty.

    logShape = logShape.map((d, i) => i >= logShape.length - 2 ? _tfjsCore.util.nearestLargerEven(logShape[i]) : logShape[i]); // Packed texture height is at least 2 (the channel height of a single
    // texel).

    if (logShape.length === 1) {
      logShape = [2, logShape[0]];
    }
  } // If logical shape is 2, we don't squeeze, since we want to match physical.


  if (logShape.length !== 2) {
    const squeezeResult = _tfjsCore.util.squeezeShape(logShape);

    logShape = squeezeResult.newShape;
  }

  let size = _tfjsCore.util.sizeFromShape(logShape);

  if (logShape.length <= 1 && size <= maxTexSize) {
    return [1, size];
  } else if (logShape.length === 2 && logShape[0] <= maxTexSize && logShape[1] <= maxTexSize) {
    return logShape;
  } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize && logShape[2] <= maxTexSize) {
    return [logShape[0] * logShape[1], logShape[2]];
  } else if (logShape.length === 3 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] <= maxTexSize) {
    return [logShape[0], logShape[1] * logShape[2]];
  } else if (logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTexSize && logShape[3] <= maxTexSize) {
    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];
  } else if (logShape.length === 4 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {
    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];
  } else {
    if (isPacked) {
      // For packed textures size equals the number of channels required to
      // accommodate the texture data. However in order to squarify such that
      // inner dimensions stay even, we rewrite size to equal the number of
      // texels. Then in the return statement we rehydrate the squarified
      // dimensions to channel units.
      const batchDim = getBatchDim(logShape);
      let rows = 2,
          cols = 2;

      if (logShape.length) {
        [rows, cols] = getRowsCols(logShape);
      }

      size = batchDim * (rows / 2) * (cols / 2);
      return _tfjsCore.util.sizeToSquarishShape(size).map(d => d * 2);
    }

    return _tfjsCore.util.sizeToSquarishShape(size);
  }
}

function isEven(n) {
  return n % 2 === 0;
}
/**
 * This determines whether reshaping a packed texture requires rearranging
 * the data within the texture, assuming 2x2 packing.
 */


function isReshapeFree(shape1, shape2) {
  shape1 = shape1.slice(-2);
  shape2 = shape2.slice(-2);

  if (_tfjsCore.util.arraysEqual(shape1, shape2)) {
    return true;
  }

  if (!shape1.length || !shape2.length) {
    // One of the shapes is a scalar.
    return true;
  }

  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 || shape2[1] === 0) {
    return true;
  }

  if (shape1.length !== shape2.length) {
    // One of the shapes is a vector.
    const shape1Cols = shape1.slice(-1)[0];
    const shape2Cols = shape2.slice(-1)[0];

    if (shape1Cols === shape2Cols) {
      return true;
    }

    if (isEven(shape1Cols) && isEven(shape2Cols) && (shape1[0] === 1 || shape2[0] === 1)) {
      return true;
    }
  }

  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);
} // We cache webgl params because the environment gets reset between
// unit tests and we don't want to constantly query the WebGLContext for
// MAX_TEXTURE_SIZE.


let MAX_TEXTURE_SIZE;
let MAX_TEXTURES_IN_SHADER;

function getWebGLMaxTextureSize(webGLVersion) {
  if (MAX_TEXTURE_SIZE == null) {
    const gl = (0, _canvas_util.getWebGLContext)(webGLVersion);
    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);
  }

  return MAX_TEXTURE_SIZE;
}

function resetMaxTextureSize() {
  MAX_TEXTURE_SIZE = null;
}

function resetMaxTexturesInShader() {
  MAX_TEXTURES_IN_SHADER = null;
}

function getMaxTexturesInShader(webGLVersion) {
  if (MAX_TEXTURES_IN_SHADER == null) {
    const gl = (0, _canvas_util.getWebGLContext)(webGLVersion);
    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
  } // We cap at 16 to avoid spurious runtime "memory exhausted" error.


  return Math.min(16, MAX_TEXTURES_IN_SHADER);
}

function getWebGLDisjointQueryTimerVersion(webGLVersion) {
  if (webGLVersion === 0) {
    return 0;
  }

  let queryTimerVersion;
  const gl = (0, _canvas_util.getWebGLContext)(webGLVersion);

  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') && webGLVersion === 2) {
    queryTimerVersion = 2;
  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {
    queryTimerVersion = 1;
  } else {
    queryTimerVersion = 0;
  }

  return queryTimerVersion;
}

function hasExtension(gl, extensionName) {
  const ext = gl.getExtension(extensionName);
  return ext != null;
}

function isWebGLVersionEnabled(webGLVersion) {
  try {
    const gl = (0, _canvas_util.getWebGLContext)(webGLVersion);

    if (gl != null) {
      return true;
    }
  } catch (e) {
    return false;
  }

  return false;
}

function isCapableOfRenderingToFloatTexture(webGLVersion) {
  if (webGLVersion === 0) {
    return false;
  }

  const gl = (0, _canvas_util.getWebGLContext)(webGLVersion);

  if (webGLVersion === 1) {
    if (!hasExtension(gl, 'OES_texture_float')) {
      return false;
    }
  } else {
    if (!hasExtension(gl, 'EXT_color_buffer_float')) {
      return false;
    }
  }

  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);
  return isFrameBufferComplete;
}
/**
 * Check if we can download values from a float/half-float texture.
 *
 * Note that for performance reasons we use binding a texture to a framebuffer
 * as a proxy for ability to download float values later using readPixels. The
 * texture params of this texture will not match those in readPixels exactly
 * but if we are unable to bind some kind of float texture to the frameBuffer
 * then we definitely will not be able to read float values from it.
 */


function isDownloadFloatTextureEnabled(webGLVersion) {
  if (webGLVersion === 0) {
    return false;
  }

  const gl = (0, _canvas_util.getWebGLContext)(webGLVersion);

  if (webGLVersion === 1) {
    if (!hasExtension(gl, 'OES_texture_float')) {
      return false;
    }

    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {
      return false;
    }
  } else {
    if (hasExtension(gl, 'EXT_color_buffer_float')) {
      return createFloatTextureAndBindToFramebuffer(gl);
    }

    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';

    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {
      const textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);
      return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);
    }

    return false;
  }

  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);
  return isFrameBufferComplete;
}

function createFloatTextureAndBindToFramebuffer(gl) {
  const texConfig = (0, _tex_util.getTextureConfig)(gl);
  const texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  const width = 1;
  const height = 1;
  gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);
  const frameBuffer = gl.createFramebuffer();
  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
  const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
  gl.bindTexture(gl.TEXTURE_2D, null);
  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  gl.deleteTexture(texture);
  gl.deleteFramebuffer(frameBuffer);
  return isFrameBufferComplete;
}

function createHalfFloatTextureAndBindToFramebuffer( // tslint:disable-next-line:no-any
gl, textureHalfFloatExtension) {
  const texConfig = (0, _tex_util.getTextureConfig)(gl, textureHalfFloatExtension);
  const texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  const width = 1;
  const height = 1;
  gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);
  const frameBuffer = gl.createFramebuffer();
  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
  const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
  gl.bindTexture(gl.TEXTURE_2D, null);
  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  gl.deleteTexture(texture);
  gl.deleteFramebuffer(frameBuffer);
  return isFrameBufferComplete;
}

function isWebGLFenceEnabled(webGLVersion) {
  if (webGLVersion !== 2) {
    return false;
  }

  const gl = (0, _canvas_util.getWebGLContext)(webGLVersion); // tslint:disable-next-line:no-any

  const isEnabled = gl.fenceSync != null;
  return isEnabled;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./canvas_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js","./tex_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js":[function(require,module,exports) {
"use strict";

var _tfjsCore = require("@tensorflow/tfjs-core");

var _webgl_util = require("./webgl_util");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ENV = (0, _tfjsCore.env)();
/**
 * This file contains WebGL-specific flag registrations.
 */

/**
 * True if WebGL is supported.
 */

ENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);
/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */

ENV.registerFlag('WEBGL_VERSION', () => {
  if ((0, _webgl_util.isWebGLVersionEnabled)(2)) {
    return 2;
  } else if ((0, _webgl_util.isWebGLVersionEnabled)(1)) {
    return 1;
  }

  return 0;
});
/** Whether to check for numerical representation problems. */

ENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);
ENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);
/** Whether the WebGL backend will sometimes forward ops to the CPU. */

ENV.registerFlag('WEBGL_CPU_FORWARD', () => true);
/** Whether the WebGL backend will always use f16 textures for rendering. */

ENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);
/** Whether to turn all packing related flags on. */

ENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));
/** Whether we will pack the batchnormalization op. */

ENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack the clip op. */

ENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack the depthwise conv op. */
// TODO: https://github.com/tensorflow/tfjs/issues/1679

ENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => false);
/** Whether we will pack binary ops. */

ENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack unary ops. */

ENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack array ops. */

ENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack image ops. */

ENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack reduce ops. */

ENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));
/** Whether packed WebGL kernels lazily unpack their outputs. */

ENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will use the im2col algorithm to speed up convolutions. */

ENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));
/** The maximum texture dimension. */

ENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => (0, _webgl_util.getWebGLMaxTextureSize)(ENV.getNumber('WEBGL_VERSION')));
/** The maximum texture dimension. */

ENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => (0, _webgl_util.getMaxTexturesInShader)(ENV.getNumber('WEBGL_VERSION')));
/**
 * The disjoint_query_timer extension version.
 * 0: disabled, 1: EXT_disjoint_timer_query, 2:
 * EXT_disjoint_timer_query_webgl2.
 * In Firefox with WebGL 2.0,
 * EXT_disjoint_timer_query_webgl2 is not available, so we must use the
 * WebGL 1.0 extension.
 */

ENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {
  const webGLVersion = ENV.getNumber('WEBGL_VERSION');

  if (webGLVersion === 0) {
    return 0;
  }

  return (0, _webgl_util.getWebGLDisjointQueryTimerVersion)(webGLVersion);
});
/**
 * Whether the timer object from the disjoint_query_timer extension gives
 * timing information that is reliable.
 */

ENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 && !_tfjsCore.device_util.isMobile());
/**
 * Whether the device is physically capable of rendering to float32 textures.
 */

ENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => (0, _webgl_util.isCapableOfRenderingToFloatTexture)(ENV.getNumber('WEBGL_VERSION')));
/**
 * Whether rendering to float32 textures is enabled. If disabled, renders to
 * float16 textures.
 */

ENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {
  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ? false : ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');
});
/**
 * Whether downloading float textures is enabled (16 or 32 bit). If disabled,
 * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.
 */

ENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => (0, _webgl_util.isDownloadFloatTextureEnabled)(ENV.getNumber('WEBGL_VERSION')));
/** Whether the fence API is available. */

ENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => (0, _webgl_util.isWebGLFenceEnabled)(ENV.getNumber('WEBGL_VERSION')));
/**
 * Tensors with size <= than this will be uploaded as uniforms, not textures.
 */

ENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {
  // Use uniform uploads only when 32bit floats are supported. In
  // 16bit
  // environments there are problems with comparing a 16bit texture value
  // with a 32bit uniform value.
  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');
  return useUniforms ? 4 : 0;
});
/**
 * If the total number of bytes allocated on the GPU is greater than this
 * number, we will aggressively delete textures upon disposal with
 * gl.deleteMatrixTexture, rather than making them available for reuse.
 *
 * Default value -1 indicates that we will never aggressively delete textures.
 */

ENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {
  return -1;
}, threshold => {
  if (threshold < 0 && threshold !== -1) {
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` + `delete) or at least 0, but got ${threshold}.`);
  }
});
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./webgl_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddNProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AddNProgram {
  constructor(outputShape, shapes) {
    this.outputShape = [];
    this.outputShape = outputShape;
    this.variableNames = shapes.map((_, i) => `T${i}`);
    const snippets = []; // Get target elements from every input tensor.

    this.variableNames.forEach(variable => {
      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);
    }); // Calculate the sum of all elements.

    const operation = this.variableNames.map(variable => {
      return `v${variable}`;
    }).join(' + ');
    this.userCode = `
      void main() {
        ${snippets.join('\n        ')}

        float result = ${operation};
        setOutput(result);
      }
    `;
  }

}

exports.AddNProgram = AddNProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddNPackedProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AddNPackedProgram {
  constructor(outputShape, shapes) {
    this.outputShape = [];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = outputShape;
    this.variableNames = shapes.map((_, i) => `T${i}`);
    const snippets = []; // Get target elements from every input tensor.

    this.variableNames.forEach(variable => {
      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);
    }); // Calculate the sum of all elements.

    const operation = this.variableNames.map(variable => {
      return `v${variable}`;
    }).join(' + ');
    this.userCode = `
      void main() {
        ${snippets.join('\n        ')}

        vec4 result = ${operation};
        setOutput(result);
      }
    `;
  }

}

exports.AddNPackedProgram = AddNPackedProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArgMinMaxProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ArgMinMaxProgram {
  constructor(reduceInfo, op, firstPass) {
    this.variableNames = ['A'];
    const {
      windowSize,
      batchSize,
      outSize
    } = reduceInfo;

    if (!firstPass) {
      this.variableNames.push('bestIndicesA');
    }

    this.outputShape = [batchSize, outSize];
    const compOp = op === 'max' ? '>' : '<';
    const indexSnippet = firstPass ? 'inOffset + i;' : 'round(getBestIndicesA(batch, inOffset + i));';
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${windowSize}; i++) {
          int inIdx = ${indexSnippet};
          float candidate = getA(batch, inIdx);
          if (candidate ${compOp} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }

}

exports.ArgMinMaxProgram = ArgMinMaxProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVecChannels = getVecChannels;
exports.getChannels = getChannels;
exports.getSourceCoords = getSourceCoords;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getVecChannels(name, rank) {
  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);
}

function getChannels(name, rank) {
  if (rank === 1) {
    return [name];
  }

  return getVecChannels(name, rank);
}

function getSourceCoords(rank, dims) {
  if (rank === 1) {
    return 'rc';
  }

  let coords = '';

  for (let i = 0; i < rank; i++) {
    coords += dims[i];

    if (i < rank - 1) {
      coords += ',';
    }
  }

  return coords;
}
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGlslDifferences = getGlslDifferences;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getGlslDifferences() {
  let version;
  let attribute;
  let varyingVs;
  let varyingFs;
  let texture2D;
  let output;
  let defineOutput;
  let defineSpecialNaN;
  let defineSpecialInf;
  let defineRound;

  if ((0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 2) {
    version = '#version 300 es';
    attribute = 'in';
    varyingVs = 'out';
    varyingFs = 'in';
    texture2D = 'texture';
    output = 'outputColor';
    defineOutput = 'out vec4 outputColor;'; // Use custom isnan definition to work across differences between
    // implementations on various platforms. While this should happen in ANGLE
    // we still see differences between android and windows (on chrome) when
    // using isnan directly.

    defineSpecialNaN = `
      bool isnan_custom(float val) {
        return (val > 0.0 || val < 0.0) ? false : val != 0.0;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `; // In webgl 2 we do not need to specify a custom isinf so there is no
    // need for a special INFINITY constant.

    defineSpecialInf = ``;
    defineRound = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `;
  } else {
    version = '';
    attribute = 'attribute';
    varyingVs = 'varying';
    varyingFs = 'varying';
    texture2D = 'texture2D';
    output = 'gl_FragColor';
    defineOutput = ''; // WebGL1 has no built in isnan so we define one here.

    defineSpecialNaN = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `;
    defineSpecialInf = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `;
    defineRound = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `;
  }

  return {
    version,
    attribute,
    varyingVs,
    varyingFs,
    texture2D,
    output,
    defineOutput,
    defineSpecialNaN,
    defineSpecialInf,
    defineRound
  };
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLogicalCoordinatesFromFlatIndex = getLogicalCoordinatesFromFlatIndex;
exports.dotify = dotify;
exports.getFlatIndexFrom3D = getFlatIndexFrom3D;
exports.ENCODE_FLOAT_SNIPPET = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Produces GLSL code that derives logical coordinates from a flat
 * index. The code performs integer division with each stride and decrements
 * the index until the index equals the final dimension coordinate.
 */
function getLogicalCoordinatesFromFlatIndex(coords, shape, index = 'index') {
  const strides = _tfjsCore.util.computeStrides(shape);

  return strides.map((stride, i) => {
    const line1 = `int ${coords[i]} = ${index} / ${stride}`;
    const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` : `index -= ${coords[i]} * ${stride}`;
    return `${line1}; ${line2};`;
  }).join('');
}

function buildVec(x) {
  if (x.length === 1) {
    return `${x[0]}`;
  }

  return `vec${x.length}(${x.join(',')})`;
}
/**
 * Produces GLSL code that computes the dot product of the input x and y
 * vectors. Handles splitting inputs into increments of vec4s when necessary.
 */


function dotify(x, y) {
  if (x.length !== y.length) {
    throw new Error(`Vectors to be dotted must be of the same length -` + `got ${x.length} and ${y.length}`);
  }

  const slices = [];
  const nearestVec4 = Math.floor(x.length / 4);
  const nearestVec4Remainder = x.length % 4;

  for (let i = 0; i < nearestVec4; i++) {
    const xSlice = x.slice(i * 4, i * 4 + 4);
    const ySlice = y.slice(i * 4, i * 4 + 4);
    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);
  }

  if (nearestVec4Remainder !== 0) {
    let xSlice = x.slice(nearestVec4 * 4);
    let ySlice = y.slice(nearestVec4 * 4);

    if (xSlice.length === 1) {
      xSlice = xSlice.map(d => `float(${d})`);
      ySlice = ySlice.map(d => `float(${d})`);
    }

    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);
  }

  return slices.map((d, i) => `dot(${d})`).join('+');
}
/**
 * Produces GLSL that computes the flat index from 3D coordinates.
 */


function getFlatIndexFrom3D(shape) {
  const strides = _tfjsCore.util.computeStrides(shape).map(d => d.toString());

  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;
  }
`;
}

const ENCODE_FLOAT_SNIPPET = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
exports.ENCODE_FLOAT_SNIPPET = ENCODE_FLOAT_SNIPPET;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeShader = makeShader;
exports.getCoordsDataType = getCoordsDataType;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _glsl_version = require("./glsl_version");

var shader_util = _interopRequireWildcard(require("./shader_compiler_util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const {
  getBroadcastDims
} = _tfjsCore.backend_util;

function makeShader(inputsInfo, outputShape, userCode, usesPackedTextures) {
  const prefixSnippets = [];
  inputsInfo.forEach(x => {
    const size = _tfjsCore.util.sizeFromShape(x.shapeInfo.logicalShape); // Snippet when we decided to upload the values as uniform.


    if (x.shapeInfo.isUniform) {
      prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);
    } else {
      prefixSnippets.push(`uniform sampler2D ${x.name};`);
      prefixSnippets.push(`uniform int offset${x.name};`);
    }
  });
  const inputPrefixSnippet = prefixSnippets.join('\n');
  const inputSamplingSnippet = inputsInfo.map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures)).join('\n');
  const outTexShape = outputShape.texShape;
  const glsl = (0, _glsl_version.getGlslDifferences)();
  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);
  let outputSamplingSnippet;
  let floatTextureSetOutputSnippet;
  let shaderPrefix = getShaderPrefix(glsl);

  if (outputShape.isPacked) {
    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);
    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);
  } else {
    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);
    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);
  }

  if (usesPackedTextures) {
    shaderPrefix += SHADER_PACKED_PREFIX;
  }

  const source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode].join('\n');
  return source;
}

function getSamplerFromInInfo(inInfo) {
  const shape = inInfo.shapeInfo.logicalShape;

  switch (shape.length) {
    case 0:
      return getSamplerScalar(inInfo);

    case 1:
      return getSampler1D(inInfo);

    case 2:
      return getSampler2D(inInfo);

    case 3:
      return getSampler3D(inInfo);

    case 4:
      return getSampler4D(inInfo);

    case 5:
      return getSampler5D(inInfo);

    case 6:
      return getSampler6D(inInfo);

    default:
      throw new Error(`${shape.length}-D input sampling` + ` is not yet supported`);
  }
}

function getPackedSamplerFromInInfo(inInfo) {
  const shape = inInfo.shapeInfo.logicalShape;

  switch (shape.length) {
    case 0:
      return getPackedSamplerScalar(inInfo);

    case 1:
      return getPackedSampler1D(inInfo);

    case 2:
      return getPackedSampler2D(inInfo);

    case 3:
      return getPackedSampler3D(inInfo);

    default:
      return getPackedSamplerND(inInfo);
  }
}

function getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false) {
  let res = '';

  if (usesPackedTextures) {
    res += getPackedSamplerFromInInfo(inInfo);
  } else {
    res += getSamplerFromInInfo(inInfo);
  }

  const inShape = inInfo.shapeInfo.logicalShape;
  const outShape = outShapeInfo.logicalShape;

  if (inShape.length <= outShape.length) {
    if (usesPackedTextures) {
      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);
    } else {
      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);
    }
  }

  return res;
}

function getPackedOutputSamplingSnippet(outShape, outTexShape) {
  switch (outShape.length) {
    case 0:
      return getOutputScalarCoords();

    case 1:
      return getOutputPacked1DCoords(outShape, outTexShape);

    case 2:
      return getOutputPacked2DCoords(outShape, outTexShape);

    case 3:
      return getOutputPacked3DCoords(outShape, outTexShape);

    default:
      return getOutputPackedNDCoords(outShape, outTexShape);
  }
}

function getOutputSamplingSnippet(outShape, outTexShape) {
  switch (outShape.length) {
    case 0:
      return getOutputScalarCoords();

    case 1:
      return getOutput1DCoords(outShape, outTexShape);

    case 2:
      return getOutput2DCoords(outShape, outTexShape);

    case 3:
      return getOutput3DCoords(outShape, outTexShape);

    case 4:
      return getOutput4DCoords(outShape, outTexShape);

    case 5:
      return getOutput5DCoords(outShape, outTexShape);

    case 6:
      return getOutput6DCoords(outShape, outTexShape);

    default:
      throw new Error(`${outShape.length}-D output sampling is not yet supported`);
  }
}

function getFloatTextureSampleSnippet(glsl) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${glsl.texture2D}(textureSampler, uv).r;
    }
  `;
}

function getFloatTextureSetRSnippet(glsl) {
  return `
    void setOutput(float val) {
      ${glsl.output} = vec4(val, 0, 0, 0);
    }
  `;
}

function getFloatTextureSetRGBASnippet(glsl) {
  return `
    void setOutput(vec4 val) {
      ${glsl.output} = val;
    }
  `;
}

function getShaderPrefix(glsl) {
  const SHADER_PREFIX = `${glsl.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${glsl.varyingFs} vec2 resultUV;
    ${glsl.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${glsl.defineSpecialNaN}
    ${glsl.defineSpecialInf}
    ${glsl.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${SAMPLE_1D_SNIPPET}
    ${SAMPLE_2D_SNIPPET}
    ${SAMPLE_3D_SNIPPET}
  `;
  return SHADER_PREFIX;
}

const SAMPLE_1D_SNIPPET = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
const SAMPLE_2D_SNIPPET = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
const SAMPLE_3D_SNIPPET = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
const SHADER_PACKED_PREFIX = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;

function getOutputScalarCoords() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}

function getOutputPacked1DCoords(shape, texShape) {
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];

  if (packedTexShape[0] === 1) {
    return `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);
      }
    `;
  }

  if (packedTexShape[1] === 1) {
    return `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);
      }
    `;
  }

  return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);
    }
  `;
}

function getOutput1DCoords(shape, texShape) {
  if (texShape[0] === 1) {
    return `
      int getOutputCoords() {
        return int(resultUV.x * ${texShape[1]}.0);
      }
    `;
  }

  if (texShape[1] === 1) {
    return `
      int getOutputCoords() {
        return int(resultUV.y * ${texShape[0]}.0);
      }
    `;
  }

  return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      return resTexRC.x * ${texShape[1]} + resTexRC.y;
    }
  `;
}

function getOutputPacked3DCoords(shape, texShape) {
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const texelsInLogicalRow = Math.ceil(shape[2] / 2);
  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;

      int b = index / ${texelsInBatch};
      index -= b * ${texelsInBatch};

      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec3(b, r, c);
    }
  `;
}

function getOutput3DCoords(shape, texShape) {
  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec3(r, c, d);
    }
  `;
}

function getOutputPackedNDCoords(shape, texShape) {
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);
  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);
  let texelsInBatchN = texelsInBatch;
  let batches = ``;
  let coords = 'b, r, c';

  for (let b = 2; b < shape.length - 1; b++) {
    texelsInBatchN *= shape[shape.length - b - 1];
    batches = `
      int b${b} = index / ${texelsInBatchN};
      index -= b${b} * ${texelsInBatchN};
    ` + batches;
    coords = `b${b}, ` + coords;
  }

  return `
    ivec${shape.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;

      ${batches}

      int b = index / ${texelsInBatch};
      index -= b * ${texelsInBatch};

      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec${shape.length}(${coords});
    }
  `;
}

function getOutput4DCoords(shape, texShape) {
  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec4(r, c, d, d2);
    }
  `;
}

function getOutput5DCoords(shape, texShape) {
  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},
                             ${texShape[1]}));

      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;

      ${coordsFromIndexSnippet}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}

function getOutput6DCoords(shape, texShape) {
  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;

      ${coordsFromIndexSnippet}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}

function getOutputPacked2DCoords(shape, texShape) {
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];

  if (_tfjsCore.util.arraysEqual(shape, texShape)) {
    return `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      }
    `;
  } // texels needed to accommodate a logical row


  const texelsInLogicalRow = Math.ceil(shape[1] / 2);
  /**
   * getOutputCoords
   *
   * resTexRC: The rows and columns of the texels. If you move over one
   * texel to the right in the packed texture, you are moving over one column
   * (not two).
   *
   * index: The texel index
   */

  return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));

      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;
      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec2(r, c);
    }
  `;
}

function getOutput2DCoords(shape, texShape) {
  if (_tfjsCore.util.arraysEqual(shape, texShape)) {
    return `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));
      }
    `;
  }

  if (shape[1] === 1) {
    return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${texShape[0]}, ${texShape[1]}));
        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `;
  }

  if (shape[0] === 1) {
    return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${texShape[0]}, ${texShape[1]}));
        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `;
  }

  return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      int r = index / ${shape[1]};
      int c = index - r * ${shape[1]};
      return ivec2(r, c);
    }
  `;
}

function getFlatOffsetUniformName(texName) {
  return `offset${texName}`;
}

function getPackedSamplerScalar(inputInfo) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const glsl = (0, _glsl_version.getGlslDifferences)();
  return `
    vec4 ${funcName}() {
      return ${glsl.texture2D}(${texName}, halfCR);
    }
  `;
}

function getSamplerScalar(inputInfo) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);

  if (inputInfo.shapeInfo.isUniform) {
    return `float ${funcName}() {return ${texName};}`;
  }

  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;

  if (texNumR === 1 && texNumC === 1) {
    return `
      float ${funcName}() {
        return sampleTexture(${texName}, halfCR);
      }
    `;
  }

  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;
  const offset = getFlatOffsetUniformName(texName);
  return `
    float ${funcName}() {
      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
}

function getPackedSampler1D(inputInfo) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const glsl = (0, _glsl_version.getGlslDifferences)();
  return `
    vec4 ${funcName}(int index) {
      vec2 uv = packedUVfrom1D(
        ${packedTexShape[0]}, ${packedTexShape[1]}, index);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}

function getSampler1D(inputInfo) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);

  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int index) {
        ${getUniformSampler(inputInfo)}
      }
    `;
  }

  const texShape = inputInfo.shapeInfo.texShape;
  const tNumR = texShape[0];
  const tNumC = texShape[1];

  if (tNumC === 1 && tNumR === 1) {
    return `
      float ${funcName}(int index) {
        return sampleTexture(${texName}, halfCR);
      }
    `;
  }

  const offset = getFlatOffsetUniformName(texName);

  if (tNumC === 1) {
    return `
      float ${funcName}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  if (tNumR === 1) {
    return `
      float ${funcName}(int index) {
        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  return `
    float ${funcName}(int index) {
      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
}

function getPackedSampler2D(inputInfo) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];
  const glsl = (0, _glsl_version.getGlslDifferences)();

  if (texShape != null && _tfjsCore.util.arraysEqual(shape, texShape)) {
    return `
      vec4 ${funcName}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);

        return ${glsl.texture2D}(${texName}, uv);
      }
    `;
  }

  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const valuesPerRow = Math.ceil(shape[1] / 2);
  return `
    vec4 ${funcName}(int row, int col) {
      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}

function getSampler2D(inputInfo) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;

  if (texShape != null && _tfjsCore.util.arraysEqual(shape, texShape)) {
    const texNumR = texShape[0];
    const texNumC = texShape[1];
    return `
    float ${funcName}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
  }

  const {
    newShape,
    keptDims
  } = _tfjsCore.util.squeezeShape(shape);

  const squeezedShape = newShape;

  if (squeezedShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
    const params = ['row', 'col'];
    return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
  }

  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
  }

  const texNumR = texShape[0];
  const texNumC = texShape[1];
  const offset = getFlatOffsetUniformName(texName);

  if (texNumC === 1) {
    // index is used directly as physical (no risk of float16 overflow).
    return `
    float ${funcName}(int row, int col) {
      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
  }

  if (texNumR === 1) {
    // index is used directly as physical (no risk of float16 overflow).
    return `
    float ${funcName}(int row, int col) {
      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);
      return sampleTexture(${texName}, uv);
    }
  `;
  }

  return `
  float ${funcName}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${shape[1]} + col + ${offset};
    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
    return sampleTexture(${texName}, uv);
  }
`;
}

function getPackedSampler3D(inputInfo) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];

  if (shape[0] === 1) {
    const squeezedShape = shape.slice(1);
    const keptDims = [1, 2];
    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
    const params = ['b', 'row', 'col'];
    return `
        ${getPackedSamplerFromInInfo(newInputInfo)}
        vec4 ${funcName}(int b, int row, int col) {
          return ${funcName}(${getSqueezedParams(params, keptDims)});
        }
      `;
  }

  const texNumR = packedTexShape[0];
  const texNumC = packedTexShape[1];
  const valuesPerRow = Math.ceil(shape[2] / 2);
  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);
  const glsl = (0, _glsl_version.getGlslDifferences)();
  return `
    vec4 ${funcName}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}

function getSampler3D(inputInfo) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const stride0 = shape[1] * shape[2];
  const stride1 = shape[2];

  const {
    newShape,
    keptDims
  } = _tfjsCore.util.squeezeShape(shape);

  const squeezedShape = newShape;

  if (squeezedShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
    const params = ['row', 'col', 'depth'];
    return `
        ${getSamplerFromInInfo(newInputInfo)}
        float ${funcName}(int row, int col, int depth) {
          return ${funcName}(${getSqueezedParams(params, keptDims)});
        }
      `;
  }

  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${stride0}, ${stride1}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
  }

  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];
  const flatOffset = inputInfo.shapeInfo.flatOffset;

  if (texNumC === stride0 && flatOffset == null) {
    // texC is used directly as physical (no risk of float16 overflow).
    return `
        float ${funcName}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${texNumC}.0, ${texNumR}.0);
          return sampleTexture(${texName}, uv);
        }
      `;
  }

  if (texNumC === stride1 && flatOffset == null) {
    // texR is used directly as physical (no risk of float16 overflow).
    return `
    float ${funcName}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
  }

  const offset = getFlatOffsetUniformName(texName);
  return `
      float ${funcName}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};
        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
        return sampleTexture(${texName}, uv);
      }
  `;
}

function getPackedSamplerND(inputInfo) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const rank = shape.length;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const texNumR = packedTexShape[0];
  const texNumC = packedTexShape[1];
  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);
  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);
  let params = `int b, int row, int col`;
  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;

  for (let b = 2; b < rank - 1; b++) {
    params = `int b${b}, ` + params;
    texelsInBatch *= shape[rank - b - 1];
    index = `b${b} * ${texelsInBatch} + ` + index;
  }

  const glsl = (0, _glsl_version.getGlslDifferences)();
  return `
    vec4 ${funcName}(${params}) {
      int index = ${index};
      int texR = index / ${texNumC};
      int texC = index - texR * ${texNumC};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}

function getSampler4D(inputInfo) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const stride2 = shape[3];
  const stride1 = shape[2] * stride2;
  const stride0 = shape[1] * stride1;

  const {
    newShape,
    keptDims
  } = _tfjsCore.util.squeezeShape(shape);

  if (newShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, newShape);
    const params = ['row', 'col', 'depth', 'depth2'];
    return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col, int depth, int depth2) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
  }

  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
  }

  const flatOffset = inputInfo.shapeInfo.flatOffset;
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];

  if (texNumC === stride0 && flatOffset == null) {
    // texC is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${stride1}, ${stride2}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  if (texNumC === stride2 && flatOffset == null) {
    // texR is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  const offset = getFlatOffsetUniformName(texName);
  return `
    float ${funcName}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} +
          depth * ${stride2} + depth2;
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
}

function getSampler5D(inputInfo) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const stride3 = shape[4];
  const stride2 = shape[3] * stride3;
  const stride1 = shape[2] * stride2;
  const stride0 = shape[1] * stride1;

  const {
    newShape,
    keptDims
  } = _tfjsCore.util.squeezeShape(shape);

  if (newShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, newShape);
    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];
    return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
  }

  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +
          depth3;
        ${getUniformSampler(inputInfo)}
      }
    `;
  }

  const flatOffset = inputInfo.shapeInfo.flatOffset;
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];

  if (texNumC === stride0 && flatOffset == null) {
    // texC is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${stride1}, ${stride2}, ${stride3}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  if (texNumC === stride3 && flatOffset == null) {
    // texR is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${shape[1] * shape[2] * shape[3]},
               ${shape[2] * shape[3]}, ${shape[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  const offset = getFlatOffsetUniformName(texName);
  return `
    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +
          depth2 * ${stride3} + depth3 + ${offset};
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
      return sampleTexture(${texName}, uv);
    }
  `;
}

function getSampler6D(inputInfo) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);

  const {
    newShape,
    keptDims
  } = _tfjsCore.util.squeezeShape(shape);

  if (newShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, newShape);
    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];
    return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
  }

  const stride4 = shape[5];
  const stride3 = shape[4] * stride4;
  const stride2 = shape[3] * stride3;
  const stride1 = shape[2] * stride2;
  const stride0 = shape[1] * stride1;

  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +
          dot(
            vec2(depth3, depth4),
            vec2(${stride4}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
  }

  const flatOffset = inputInfo.shapeInfo.flatOffset;
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];

  if (texNumC === stride0 && flatOffset == null) {
    // texC is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  if (texNumC === stride4 && flatOffset == null) {
    // texR is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},
               ${shape[2] * shape[3] * shape[4]},
               ${shape[3] * shape[4]},
               ${shape[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  const offset = getFlatOffsetUniformName(texName);
  return `
    float ${funcName}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +
          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
      return sampleTexture(${texName}, uv);
    }
  `;
}

function getUniformSampler(inputInfo) {
  const texName = inputInfo.name;

  const inSize = _tfjsCore.util.sizeFromShape(inputInfo.shapeInfo.logicalShape);

  if (inSize < 2) {
    return `return ${texName};`;
  }

  return `
    for (int i = 0; i < ${inSize}; i++) {
      if (i == index) {
        return ${texName}[i];
      }
    }
  `;
}

function getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {
  const texName = inputInfo.name;
  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';
  const inRank = inputInfo.shapeInfo.logicalShape.length;
  const outRank = outShapeInfo.logicalShape.length;
  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
  const type = getCoordsDataType(outRank);
  const rankDiff = outRank - inRank;
  let coordsSnippet;
  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];

  if (inRank === 0) {
    coordsSnippet = '';
  } else if (outRank < 2 && broadcastDims.length >= 1) {
    coordsSnippet = 'coords = 0;';
  } else {
    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\n');
  }

  let unpackedCoordsSnippet = '';

  if (outRank < 2 && inRank > 0) {
    unpackedCoordsSnippet = 'coords';
  } else {
    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');
  }

  let output = `return outputValue;`;

  const inSize = _tfjsCore.util.sizeFromShape(inputInfo.shapeInfo.logicalShape);

  const isInputScalar = inSize === 1;

  const outSize = _tfjsCore.util.sizeFromShape(outShapeInfo.logicalShape);

  const isOutputScalar = outSize === 1;

  if (inRank === 1 && !isInputScalar && !isOutputScalar) {
    output = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  } else if (isInputScalar && !isOutputScalar) {
    if (outRank === 1) {
      output = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `;
    } else {
      output = `
        return vec4(outputValue.x);
      `;
    }
  } else if (broadcastDims.length) {
    const rows = inRank - 2;
    const cols = inRank - 1;

    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {
      output = `return vec4(outputValue.x);`;
    } else if (broadcastDims.indexOf(rows) > -1) {
      output = `return vec4(outputValue.x, outputValue.y, ` + `outputValue.x, outputValue.y);`;
    } else if (broadcastDims.indexOf(cols) > -1) {
      output = `return vec4(outputValue.xx, outputValue.zz);`;
    }
  }

  return `
    vec4 ${funcName}() {
      ${type} coords = getOutputCoords();
      ${coordsSnippet}
      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});
      ${output}
    }
  `;
}

function getSamplerAtOutputCoords(inputInfo, outShapeInfo) {
  const texName = inputInfo.name;
  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';
  const outTexShape = outShapeInfo.texShape;
  const inTexShape = inputInfo.shapeInfo.texShape;
  const inRank = inputInfo.shapeInfo.logicalShape.length;
  const outRank = outShapeInfo.logicalShape.length;

  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && _tfjsCore.util.arraysEqual(inTexShape, outTexShape)) {
    return `
      float ${funcName}() {
        return sampleTexture(${texName}, resultUV);
      }
    `;
  }

  const type = getCoordsDataType(outRank);
  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
  const rankDiff = outRank - inRank;
  let coordsSnippet;
  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];

  if (inRank === 0) {
    coordsSnippet = '';
  } else if (outRank < 2 && broadcastDims.length >= 1) {
    coordsSnippet = 'coords = 0;';
  } else {
    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\n');
  }

  let unpackedCoordsSnippet = '';

  if (outRank < 2 && inRank > 0) {
    unpackedCoordsSnippet = 'coords';
  } else {
    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');
  }

  return `
    float ${funcName}() {
      ${type} coords = getOutputCoords();
      ${coordsSnippet}
      return get${texFuncSnippet}(${unpackedCoordsSnippet});
    }
  `;
}

function getCoordsDataType(rank) {
  if (rank <= 1) {
    return 'int';
  } else if (rank === 2) {
    return 'ivec2';
  } else if (rank === 3) {
    return 'ivec3';
  } else if (rank === 4) {
    return 'ivec4';
  } else if (rank === 5) {
    return 'ivec5';
  } else if (rank === 6) {
    return 'ivec6';
  } else {
    throw Error(`GPU for rank ${rank} is not yet supported`);
  }
}
/** Returns a new input info (a copy) that has a squeezed logical shape. */


function squeezeInputInfo(inInfo, squeezedShape) {
  // Deep copy.
  const newInputInfo = JSON.parse(JSON.stringify(inInfo));
  newInputInfo.shapeInfo.logicalShape = squeezedShape;
  return newInputInfo;
}

function getSqueezedParams(params, keptDims) {
  return keptDims.map(d => params[d]).join(', ');
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./glsl_version":"node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js","./shader_compiler_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArgMinMaxPackedProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ArgMinMaxPackedProgram {
  constructor(shape, windowSize, op, firstPass) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;

    _tfjsCore.util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() + op.slice(1)} supports only inputs with rank above 2.`);

    const inSize = shape[shape.length - 1];
    const outSize = Math.ceil(inSize / windowSize);
    this.outputShape = shape.slice(0, -1);

    if (outSize > 1) {
      this.outputShape.push(outSize);
    }

    if (!firstPass) {
      this.variableNames.push('bestIndicesA');
    }

    const outShape = this.outputShape;
    const rank = outShape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
    const coords = (0, _packing_util.getChannels)('coords', rank);
    let sourceLocSetup;
    let sourceRank;

    if (outSize === 1) {
      sourceRank = rank + 1;
      const sourceLocDType = (0, _shader_compiler.getCoordsDataType)(sourceRank);
      sourceLocSetup = `
        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);
        ++${coords[rank - 1]};
        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);
        ++${coords[rank - 2]};
        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);
        --${coords[rank - 1]};
        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);
        --${coords[rank - 2]};`;
    } else {
      sourceRank = rank;
      sourceLocSetup = `
        ${dtype} sourceLocR = coords;
        ++${coords[rank - 1]};
        ${dtype} sourceLocG = coords;
        ++${coords[rank - 2]};
        ${dtype} sourceLocA = coords;
        --${coords[rank - 1]};
        ${dtype} sourceLocB = coords;
        --${coords[rank - 2]};`;
    }

    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);
    const inChannel = '.' + channels[sourceRank - 1]; // e.g. ".b" for rank 3.

    const intChannels = channels.map(x => 'int ' + x);
    const srcRCoords = (0, _packing_util.getChannels)('sourceLocR', sourceRank - 1).concat('inIdx.r');
    const srcGCoords = (0, _packing_util.getChannels)('sourceLocG', sourceRank - 1).concat('inIdx.g');
    const srcBCoords = (0, _packing_util.getChannels)('sourceLocB', sourceRank - 1).concat('inIdx.b');
    const srcACoords = (0, _packing_util.getChannels)('sourceLocA', sourceRank - 1).concat('inIdx.a');
    const compOp = op === 'max' ? 'greaterThan' : 'lessThan';
    const fetchCandidateIdx = firstPass ? '' : `
          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),
                             getBestIndicesAChannel(${srcGCoords.join()}),
                             getBestIndicesAChannel(${srcBCoords.join()}),
                             getBestIndicesAChannel(${srcACoords.join()})));`;
    const fetchValue = `vec4(
            getAChannel(${srcRCoords.join()}),
            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,
            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;
    const getBestIndicesAChannelSnippet = firstPass ? '' : `
      float getBestIndicesAChannel(${intChannels.join()}) {
        return getChannel(getBestIndicesA(${channels.join()}),
                                          vec2(${channels.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${intChannels.join()}) {
        return getChannel(getA(${channels.join()}),
                               vec2(${channels.slice(-2).join()}));
      }
      ${getBestIndicesAChannelSnippet}
      void main() {
        ${dtype} coords = getOutputCoords();
        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};
        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};
        ${sourceLocSetup}
        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},
          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${fetchValue};

        for (int i = 0; i < ${windowSize}; i++) {
          inIdx = srcIdx;
          ${fetchCandidateIdx}
          vec4 candidate = ${fetchValue};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }

}

exports.ArgMinMaxPackedProgram = ArgMinMaxPackedProgram;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./packing_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js","./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvgPool3DBackpropProgram = exports.AvgPool2DBackpropProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AvgPool2DBackpropProgram {
  constructor(convInfo) {
    this.variableNames = ['dy'];
    this.outputShape = convInfo.inShape;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const avgMultiplier = 1 / (filterHeight * filterWidth);
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float avgMultiplier = float(${avgMultiplier});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${effectiveFilterWidth};
            wC+= ${dilationWidth}) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.AvgPool2DBackpropProgram = AvgPool2DBackpropProgram;

class AvgPool3DBackpropProgram {
  constructor(convInfo) {
    this.variableNames = ['dy'];
    this.outputShape = convInfo.inShape;
    const filterDepth = convInfo.filterDepth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);
    this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});
      const float avgMultiplier = float(${avgMultiplier});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
            wD += ${dilationDepth}) {
          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;

          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.AvgPool3DBackpropProgram = AvgPool3DBackpropProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BatchNormProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class BatchNormProgram {
  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {
    this.outputShape = [];
    this.variableNames = ['x', 'mean', 'variance'];

    _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, meanShape);

    _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, varianceShape);

    let offsetSnippet = '0.0';

    if (offsetShape != null) {
      _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, offsetShape);

      this.variableNames.push('offset');
      offsetSnippet = 'getOffsetAtOutCoords()';
    }

    let scaleSnippet = '1.0';

    if (scaleShape != null) {
      _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, scaleShape);

      this.variableNames.push('scale');
      scaleSnippet = 'getScaleAtOutCoords()';
    }

    this.outputShape = xShape;
    this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${offsetSnippet};
        float scale = ${scaleSnippet};
        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }

}

exports.BatchNormProgram = BatchNormProgram;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BatchNormPackedProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class BatchNormPackedProgram {
  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {
    this.packedInputs = true;
    this.packedOutput = true;
    this.variableNames = ['x', 'mean', 'variance'];

    _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, meanShape);

    _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, varianceShape);

    let offsetSnippet = 'vec4(0.0)';

    if (offsetShape != null) {
      _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, offsetShape);

      this.variableNames.push('offset');
      offsetSnippet = 'getOffsetAtOutCoords()';
    }

    let scaleSnippet = 'vec4(1.0)';

    if (scaleShape != null) {
      _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, scaleShape);

      this.variableNames.push('scale');
      scaleSnippet = 'getScaleAtOutCoords()';
    }

    this.outputShape = xShape;
    this.userCode = `
      void main() {
        vec4 offset = ${offsetSnippet};
        vec4 scale = ${scaleSnippet};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }

}

exports.BatchNormPackedProgram = BatchNormPackedProgram;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BinaryOpComplexProgram = exports.COMPLEX_MULTIPLY = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// (Ar + Ai)(Br + Bi) =
// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr
// Yr = ArBr - AB
// Yi = ArBi + AiBr
const COMPLEX_MULTIPLY = {
  REAL: 'return areal * breal - aimag * bimag;',
  IMAG: 'return areal * bimag + aimag * breal;'
};
exports.COMPLEX_MULTIPLY = COMPLEX_MULTIPLY;

class BinaryOpComplexProgram {
  constructor(op, aShape, bShape) {
    this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];
    this.outputShape = _tfjsCore.backend_util.assertAndGetBroadcastShape(aShape, bShape);
    this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${op}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }

}

exports.BinaryOpComplexProgram = BinaryOpComplexProgram;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BinaryOpProgram = exports.PRELU = exports.ELU_DER = exports.ATAN2 = exports.MOD = exports.MIN = exports.MAX = exports.LOGICAL_OR = exports.LOGICAL_AND = exports.GREATER_EQUAL = exports.GREATER = exports.LESS_EQUAL = exports.LESS = exports.NOT_EQUAL = exports.EQUAL = exports.SQUARED_DIFFERENCE = exports.POW = exports.INT_DIV = exports.DIV = exports.MUL = exports.SUB = exports.ADD = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CHECK_NAN_SNIPPET = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
const ADD = 'return a + b;';
exports.ADD = ADD;
const SUB = 'return a - b;';
exports.SUB = SUB;
const MUL = 'return a * b;'; // Without the equality check div produces 0.9999 for a = b, which when
// floored can cause errors.

exports.MUL = MUL;
const DIV = `
if (a == b) {
  return 1.0;
};
return a / b;`; // We use native integer division to deal with floating point imprecision. Since
// we implement floor division and glsl implements truncated division, we
// correct for this by subtracting 1 from result when the result is negative and
// there is a remainder.

exports.DIV = DIV;
const INT_DIV = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`;
exports.INT_DIV = INT_DIV;
const POW = `
if(a < 0.0 && floor(b) < b){
  return NAN;
}
if (b == 0.0) {
  return 1.0;
}
return (round(mod(b, 2.0)) != 1) ?
    pow(abs(a), b) : sign(a) * pow(abs(a), b);
`;
exports.POW = POW;
const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';
exports.SQUARED_DIFFERENCE = SQUARED_DIFFERENCE;
const EQUAL = `return float(a == b);`;
exports.EQUAL = EQUAL;
const NOT_EQUAL = `return float(a != b);`;
exports.NOT_EQUAL = NOT_EQUAL;
const LESS = `return float(a < b);`;
exports.LESS = LESS;
const LESS_EQUAL = `return float(a <= b);`;
exports.LESS_EQUAL = LESS_EQUAL;
const GREATER = `return float(a > b);`;
exports.GREATER = GREATER;
const GREATER_EQUAL = `return float(a >= b);`;
exports.GREATER_EQUAL = GREATER_EQUAL;
const LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;
exports.LOGICAL_AND = LOGICAL_AND;
const LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;
exports.LOGICAL_OR = LOGICAL_OR;
const MAX = CHECK_NAN_SNIPPET + `
  return max(a, b);
`;
exports.MAX = MAX;
const MIN = CHECK_NAN_SNIPPET + `
  return min(a, b);
`;
exports.MIN = MIN;
const MOD = `if (b == 0.0) return NAN;
  return mod(a, b);`;
exports.MOD = MOD;
const ATAN2 = CHECK_NAN_SNIPPET + `
  return atan(a, b);
`;
exports.ATAN2 = ATAN2;
const ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;
exports.ELU_DER = ELU_DER;
const PRELU = `return (a < 0.) ? b * a : a;`;
exports.PRELU = PRELU;

class BinaryOpProgram {
  constructor(op, aShape, bShape) {
    this.variableNames = ['A', 'B'];
    this.outputShape = _tfjsCore.backend_util.assertAndGetBroadcastShape(aShape, bShape);
    this.userCode = `
      float binaryOperation(float a, float b) {
        ${op}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }

}

exports.BinaryOpProgram = BinaryOpProgram;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BinaryOpPackedProgram = exports.MOD = exports.MIN = exports.MAX = exports.LOGICAL_OR = exports.LOGICAL_AND = exports.GREATER_EQUAL = exports.GREATER = exports.LESS_EQUAL = exports.LESS = exports.NOT_EQUAL = exports.EQUAL = exports.ATAN2 = exports.ELU_DER = exports.PRELU = exports.POW = exports.INT_DIV = exports.DIV = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CHECK_NAN_SNIPPET = `
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`; // We do the same as in ./binaryop_gpu, with vec4 and ivec4.
// On Linux, the vectorized implementation produces NaNs when a and b are 0.

const DIV = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`;
exports.DIV = DIV;
const INT_DIV = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`;
exports.INT_DIV = INT_DIV;
const POW = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  ` + CHECK_NAN_SNIPPET + `
  return result;
`;
exports.POW = POW;
const PRELU = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
exports.PRELU = PRELU;
const ELU_DER = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`;
exports.ELU_DER = ELU_DER;
const ATAN2 = `
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + CHECK_NAN_SNIPPET + `
  return result;
`;
exports.ATAN2 = ATAN2;
const EQUAL = `
  return vec4(equal(a, b));
`;
exports.EQUAL = EQUAL;
const NOT_EQUAL = `
  return vec4(notEqual(a, b));
`;
exports.NOT_EQUAL = NOT_EQUAL;
const LESS = `
  return vec4(lessThan(a, b));
`;
exports.LESS = LESS;
const LESS_EQUAL = `
  return vec4(lessThanEqual(a, b));
`;
exports.LESS_EQUAL = LESS_EQUAL;
const GREATER = `
  return vec4(greaterThan(a, b));
`;
exports.GREATER = GREATER;
const GREATER_EQUAL = `
  return vec4(greaterThanEqual(a, b));
`;
exports.GREATER_EQUAL = GREATER_EQUAL;
const LOGICAL_AND = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`;
exports.LOGICAL_AND = LOGICAL_AND;
const LOGICAL_OR = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`;
exports.LOGICAL_OR = LOGICAL_OR;
const MAX = `
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + CHECK_NAN_SNIPPET + `
  return result;
`;
exports.MAX = MAX;
const MIN = `
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + CHECK_NAN_SNIPPET + `
  return result;
`;
exports.MIN = MIN;
const MOD = `
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  ` + CHECK_NAN_SNIPPET + `
  return result;
`;
exports.MOD = MOD;

class BinaryOpPackedProgram {
  constructor(op, aShape, bShape, checkOutOfBounds = false) {
    this.variableNames = ['A', 'B'];
    this.supportsBroadcasting = true;
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = _tfjsCore.backend_util.assertAndGetBroadcastShape(aShape, bShape);
    const rank = this.outputShape.length;
    let checkOutOfBoundsString = '';

    if (checkOutOfBounds) {
      if (rank === 0 || _tfjsCore.util.sizeFromShape(this.outputShape) === 1) {
        checkOutOfBoundsString = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      } else {
        const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
        checkOutOfBoundsString = `
          ${dtype} coords = getOutputCoords();
        `;

        if (rank === 1) {
          checkOutOfBoundsString += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
        } else {
          const channels = (0, _packing_util.getChannels)('coords', rank);
          checkOutOfBoundsString += `
            bool nextRowOutOfBounds =
              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};
            bool nextColOutOfBounds =
              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
        }
      }
    }

    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${op}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${checkOutOfBoundsString}

        setOutput(result);
      }
    `;
  }

}

exports.BinaryOpPackedProgram = BinaryOpPackedProgram;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./packing_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js","./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClipProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ClipProgram {
  constructor(aShape) {
    this.variableNames = ['A'];
    this.outputShape = aShape;
    this.userCode = `
      uniform float minVal;
      uniform float maxVal;

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }

  getCustomSetupFunc(min, max) {
    return (gpgpu, webGLProgram) => {
      if (this.minLoc == null) {
        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');
        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');
      }

      gpgpu.gl.uniform1f(this.minLoc, min);
      gpgpu.gl.uniform1f(this.maxLoc, max);
    };
  }

}

exports.ClipProgram = ClipProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClipPackedProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ClipPackedProgram {
  constructor(aShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = aShape;
    this.userCode = `
      uniform float minVal;
      uniform float maxVal;

      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }

  getCustomSetupFunc(min, max) {
    return (gpgpu, webGLProgram) => {
      if (this.minLoc == null) {
        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');
        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');
      }

      gpgpu.gl.uniform1f(this.minLoc, min);
      gpgpu.gl.uniform1f(this.maxLoc, max);
    };
  }

}

exports.ClipPackedProgram = ClipPackedProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComplexAbsProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ComplexAbsProgram {
  constructor(shape) {
    this.variableNames = ['real', 'imag'];
    this.outputShape = shape;
    this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }

}

exports.ComplexAbsProgram = ComplexAbsProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConcatProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ConcatProgram {
  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().
  constructor(shapes) {
    this.outputShape = [];
    this.outputShape = _tfjsCore.backend_util.computeOutShape(shapes, 1
    /* axis */
    );
    this.variableNames = shapes.map((_, i) => `T${i}`);
    const offsets = new Array(shapes.length - 1);
    offsets[0] = shapes[0][1];

    for (let i = 1; i < offsets.length; i++) {
      offsets[i] = offsets[i - 1] + shapes[i][1];
    }

    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];

    for (let i = 1; i < offsets.length; i++) {
      const shift = offsets[i - 1];
      snippets.push(`else if (yC < ${offsets[i]}) ` + `setOutput(getT${i}(yR, yC-${shift}));`);
    }

    const lastIndex = offsets.length;
    const lastShift = offsets[offsets.length - 1];
    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${snippets.join('\n        ')}
      }
    `;
  }

}

exports.ConcatProgram = ConcatProgram;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConcatPackedProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ConcatPackedProgram {
  constructor(shapes, axis) {
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = [];
    this.outputShape = _tfjsCore.backend_util.computeOutShape(shapes, axis);
    const shape = this.outputShape;
    const rank = shape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
    const coords = (0, _packing_util.getChannels)('coords', rank);
    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);
    this.variableNames = shapes.map((_, i) => `T${i}`);
    const offsets = new Array(shapes.length - 1);
    offsets[0] = shapes[0][axis];

    for (let i = 1; i < offsets.length; i++) {
      offsets[i] = offsets[i - 1] + shapes[i][axis];
    }

    const channel = channels[axis];
    const lastChannels = channels.slice(-2);
    const allChannels = channels.join();
    let getValueSnippet = `if (${channel} < ${offsets[0]}) {
        return getChannel(
            getT0(${allChannels}), vec2(${lastChannels.join()}));
        }`;

    for (let i = 1; i < offsets.length; i++) {
      const shift = offsets[i - 1]; // Note: the >= comparison below may seem unnecessary given the check
      // above but is needed to workaround branch execution issues on some
      // devices. It makes all the conditions exclusive without relying on
      // execution order.

      getValueSnippet += `
        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {
          return getChannel(
            getT${i}(${shiftedChannels(channels, channel, shift)}),
            vec2(${shiftedChannels(lastChannels, channel, shift)}));
        }`;
    }

    const lastIndex = offsets.length;
    const shift = offsets[offsets.length - 1];
    getValueSnippet += `
        return getChannel(
          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),
          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;
    this.userCode = `
      float getValue(${channels.map(x => 'int ' + x)}) {
        ${getValueSnippet}
      }

      void main() {
        ${dtype} coords = getOutputCoords();
        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);

        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;
        if (${coords[rank - 1]} < ${shape[rank - 1]}) {
          result.g = getValue(${coords});
        }

        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;
        if (${coords[rank - 2]} < ${shape[rank - 2]}) {
          result.a = getValue(${coords});
        }

        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;
        if (${coords[rank - 2]} < ${shape[rank - 2]} &&
            ${coords[rank - 1]} < ${shape[rank - 1]}) {
          result.b = getValue(${coords});
        }
        setOutput(result);
      }
    `;
  }

}
/**
 * Return an expression for coordinates into a vector where a given channel
 * will be offset by [shift].
 *
 * @param channels the channels to consider
 * @param channel the channel we want shifted
 * @param shift  the amount to subtract from the channel.
 *
 * @returns a string of the form 'x, y-[shift], z' where any one channel can
 * have the shift applied.
 */


exports.ConcatPackedProgram = ConcatPackedProgram;

function shiftedChannels(channels, channel, shift) {
  const channelIdx = channels.indexOf(channel);
  const res = channels.map((c, idx) => {
    if (idx === channelIdx) {
      return `${c} - ${shift}`;
    } else {
      return c;
    }
  });
  return res.join();
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./packing_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js","./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Conv3DDerInputProgram = exports.Conv3DDerFilterProgram = exports.Conv2DDerInputProgram = exports.Conv2DDerFilterProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Conv2DDerFilterProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'dy'];
    this.outputShape = convInfo.filterShape;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const isChannelsLast = convInfo.dataFormat === 'channelsLast';
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
            int xR = wR + yR * ${strideHeight} - ${padTop};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
              int xC = wC + yC * ${strideWidth} - ${padLeft};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              if (${isChannelsLast}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.Conv2DDerFilterProgram = Conv2DDerFilterProgram;

class Conv2DDerInputProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'W'];
    this.outputShape = convInfo.inShape;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const isChannelsLast = convInfo.dataFormat === 'channelsLast';
    const padTop = filterHeight - 1 - convInfo.padInfo.top;
    const padLeft = filterWidth - 1 - convInfo.padInfo.left;
    const rowDim = isChannelsLast ? 1 : 2;
    const colDim = isChannelsLast ? 2 : 3;
    const channelDim = isChannelsLast ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${channelDim}];

        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${filterHeight} - 1 - wR;

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${filterWidth} - 1 - wC;

            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {

              if (${isChannelsLast}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.Conv2DDerInputProgram = Conv2DDerInputProgram;

class Conv3DDerFilterProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'dy'];
    this.outputShape = convInfo.filterShape;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padFront = convInfo.padInfo.front;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {
            int xF = wF + yF * ${strideDepth} - ${padFront};

            if (xF < 0 || xF >= ${convInfo.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
              int xR = wR + yR * ${strideHeight} - ${padTop};

              if (xR < 0 || xR >= ${convInfo.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
                int xC = wC + yC * ${strideWidth} - ${padLeft};

                if (xC < 0 || xC >= ${convInfo.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.Conv3DDerFilterProgram = Conv3DDerFilterProgram;

class Conv3DDerInputProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'W'];
    this.outputShape = convInfo.inShape;
    const filterDepth = convInfo.filterDepth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padFront = filterDepth - 1 - convInfo.padInfo.front;
    const padTop = filterHeight - 1 - convInfo.padInfo.top;
    const padLeft = filterWidth - 1 - convInfo.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${filterDepth}; wF++) {
          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;

          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${filterDepth} - 1 - wF;

          for (int wR = 0; wR < ${filterHeight}; wR++) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${filterHeight} - 1 - wR;

            for (int wC = 0; wC < ${filterWidth}; wC++) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${filterWidth} - 1 - wC;

              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.Conv3DDerInputProgram = Conv3DDerInputProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DepthwiseConv2DDerInputProgram = exports.DepthwiseConv2DDerFilterProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthwiseConv2DDerFilterProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'dy'];
    this.outputShape = convInfo.filterShape;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const channelMul = convInfo.outChannels / convInfo.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${channelMul} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
            int xR = wR + yR * ${strideHeight} - ${padTop};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
              int xC = wC + yC * ${strideWidth} - ${padLeft};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.DepthwiseConv2DDerFilterProgram = DepthwiseConv2DDerFilterProgram;

class DepthwiseConv2DDerInputProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'W'];
    this.outputShape = convInfo.inShape;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padTop = filterHeight - 1 - convInfo.padInfo.top;
    const padLeft = filterWidth - 1 - convInfo.padInfo.left;
    const channelMul = convInfo.outChannels / convInfo.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${filterHeight}; wR++) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${filterHeight} - 1 - wR;

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${filterWidth} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${channelMul}; dm++) {
              int d2 = d1 * ${channelMul} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.DepthwiseConv2DDerInputProgram = DepthwiseConv2DDerInputProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Conv3DProgram = exports.Conv2DProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Conv2DProgram {
  constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false) {
    this.variableNames = ['x', 'W'];
    this.outputShape = convInfo.outShape;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
    const inputDepthVec4Remainder = convInfo.inChannels % 4;
    const isChannelsLast = convInfo.dataFormat === 'channelsLast';
    const rowDim = isChannelsLast ? 1 : 2;
    const colDim = isChannelsLast ? 2 : 3;
    const channelDim = isChannelsLast ? 3 : 1;
    let activationSnippet = '',
        applyActivationSnippet = '';

    if (activation) {
      if (hasPreluActivationWeights) {
        activationSnippet = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
      } else {
        activationSnippet = `
          float activation(float x) {
            ${activation}
          }
        `;
      }

      applyActivationSnippet = `result = activation(result);`;
    }

    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';

    if (addBias) {
      this.variableNames.push('bias');
    }

    if (hasPreluActivationWeights) {
      this.variableNames.push('preluActivationWeights');
    }

    this.userCode = `
      ${activationSnippet}

      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${channelDim}];

        ivec2 xRCCorner =
            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          int xR = xRCorner + wR * ${dilationHeight};

          if (xR < 0 || xR >= ${convInfo.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            int xC = xCCorner + wC * ${dilationWidth};

            if (xC < 0 || xC >= ${convInfo.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${isChannelsLast}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${inputDepthVec4Remainder === 1}) {

              if (${isChannelsLast}) {
                dotProd +=
                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *
                    getW(wR, wC, ${inputDepthNearestVec4}, d2);
              } else {
                dotProd +=
                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *
                    getW(wR, wC, ${inputDepthNearestVec4}, d2);
              }

            } else if (${inputDepthVec4Remainder === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${inputDepthNearestVec4}, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)
              );

              if (${isChannelsLast}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${inputDepthNearestVec4}, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${inputDepthVec4Remainder === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${inputDepthNearestVec4}, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)
              );

              if (${isChannelsLast}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${inputDepthNearestVec4}, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
  }

}

exports.Conv2DProgram = Conv2DProgram;

class Conv3DProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'W'];
    this.outputShape = convInfo.outShape;
    const padFront = convInfo.padInfo.front;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const filterDepth = convInfo.filterDepth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
    const inputDepthVec4Remainder = convInfo.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${filterDepth}; wF++) {
          int xF = xFCorner + wF * ${dilationDepth};

          if (xF < 0 || xF >= ${convInfo.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${filterHeight}; wR++) {
            int xR = xRCorner + wR * ${dilationHeight};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${filterWidth}; wC++) {
              int xC = xCCorner + wC * ${dilationWidth};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${inputDepthVec4Remainder === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);
              } else if (${inputDepthVec4Remainder === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${inputDepthVec4Remainder === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.Conv3DProgram = Conv3DProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DepthwiseConv2DProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthwiseConv2DProgram {
  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false) {
    this.variableNames = ['x', 'W'];
    this.outputShape = convInfo.outShape;
    const xNumRows = convInfo.inHeight;
    const xNumCols = convInfo.inWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const channelMul = convInfo.outChannels / convInfo.inChannels;
    let activationSnippet = '',
        applyActivationSnippet = '';

    if (activation) {
      if (hasPreluActivation) {
        activationSnippet = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
      } else {
        activationSnippet = `
          float activation(float x) {
            ${activation}
          }
        `;
      }

      applyActivationSnippet = `result = activation(result);`;
    }

    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';

    if (addBias) {
      this.variableNames.push('bias');
    }

    if (hasPreluActivation) {
      this.variableNames.push('preluActivationWeights');
    }

    this.userCode = `
      ${activationSnippet}

      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${channelMul};
        int q = d2 - d1 * ${channelMul};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          int xR = xRCorner + wR * ${dilationHeight};

          if (xR < 0 || xR >= ${xNumRows}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            int xC = xCCorner + wC * ${dilationWidth};

            if (xC < 0 || xC >= ${xNumCols}) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
  }

}

exports.DepthwiseConv2DProgram = DepthwiseConv2DProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DepthwiseConvPacked2DProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthwiseConvPacked2DProgram {
  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false) {
    this.variableNames = ['x', 'W'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = convInfo.outShape;
    const xNumRows = convInfo.inHeight;
    const xNumCols = convInfo.inWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const texelsAcross = filterWidth;
    let mainLoop = `int xR; int xC; int xCOffset;`;

    for (let r = 0; r < filterHeight; r++) {
      for (let c = 0; c < filterWidth; c++) {
        mainLoop += `
          vec4 xTexelR${r}C${c * 2} = vec4(0.);
          vec4 wR${r}C${c} = vec4(0.);
          vec4 xR${r}C${c} = vec4(0.);`;
      }
    }
    /**
     * This vectorized implementation works by gathering the values needed for
     * each output channel's dot product into vec4's and then multiplying them
     * all together (this happens in the final double for-loop below). Most of
     * the main loop consists of constructing these vec4's with the minimum
     * number of texture2D calls, which means making use of all four returned
     * values from a texture2D call at once.
     */


    for (let r = 0; r < filterHeight; r++) {
      for (let texelC = 0; texelC < texelsAcross; texelC++) {
        const c = texelC * 2;
        mainLoop += `
          xR = xRCorner + ${r * dilationHeight};
          xC = xCCorner + ${c * dilationWidth};
        `;

        if (strideWidth === 1) {
          if (c < filterWidth) {
            // If padding is odd, the outer texels have to be composed.
            if (padLeft % 2 === 1) {
              // TODO: Ensure vec4 previous does not result in redundant sample,
              // and avoid setting xTexelRC's that exceed the boundary in the
              // first place rather than resetting them to vec4(0)).
              // To compute xCOffset:
              // - If padding is odd, we must add 1 to ensure we ask for an
              // even-numbered row.
              // - We subtract 2 to access the previous texel.
              mainLoop += `
                xCOffset = xC + 1;
                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${xNumCols}) {
                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if(xCOffset + 1 >= ${xNumCols}) {
                    xTexelR${r}C${c}.zw = vec2(0.);
                  }
                } else {
                  xTexelR${r}C${c} = vec4(0.);
                }

                xCOffset = xC + 1 - 2;
                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${xNumCols}) {
                  vec4 previous = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if(xCOffset + 1 >= ${xNumCols}) {
                    previous.zw = vec2(0.);
                  }

                  xR${r}C${c} = vec4(previous.zw, xTexelR${r}C${c}.xy);
                } else {
                  xR${r}C${c} = vec4(0, 0, xTexelR${r}C${c}.xy);
                }
              `;
            } else {
              // Padding is even, so xRC corresponds to a single texel.
              mainLoop += `
                if(xR >= 0 && xR < ${xNumRows} && xC >= 0 && xC < ${xNumCols}) {
                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);
                } else {
                  xTexelR${r}C${c} = vec4(0.);
                }

                xR${r}C${c} = xTexelR${r}C${c};
              `;
            }

            if (c + 1 < filterWidth) {
              // If dilation is even, the second entry should match the first
              // (either both are composed or both are single samples). But if
              // dilation is odd, then the second entry should be the opposite
              // of the first (if the first is composed, the second is a single
              // sample, and vice versa.)
              const nextTexelOffset = padLeft % 2 === 0 ? _tfjsCore.util.nearestLargerEven(dilationWidth) : dilationWidth;

              if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {
                mainLoop += `
                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};

                  if(xR >= 0 && xR < ${xNumRows} &&
                    xCOffset >= 0 && xCOffset < ${xNumCols}) {
                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);
                  }
                `; // If dilation > 1 then the xRC's will not be able to share any
                // values, so each xRC will require two unique calls to getX.

                if (dilationWidth > 1) {
                  mainLoop += `
                    xCOffset -= 2;
                    if(xR >= 0 && xR < ${xNumRows} &&
                      xCOffset >= 0 && xCOffset < ${xNumCols}) {
                      xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);
                    } else {
                      xTexelR${r}C${c} = vec4(0.);
                    }
                  `;
                }

                mainLoop += `
                  xR${r}C${c + 1} = vec4(
                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.xy);
                `;
              } else {
                mainLoop += `
                  xCOffset = xC + ${nextTexelOffset};

                  if(xR >= 0 && xR < ${xNumRows} &&
                    xCOffset >= 0 && xCOffset < ${xNumCols}) {
                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);
                  }

                  xR${r}C${c + 1} = xTexelR${r}C${c + 2};
                `;
              }
            }
          }
        } else {
          // stride > 1
          if (c < filterWidth) {
            mainLoop += `
              if(xR >= 0 && xR < ${xNumRows}) {
            `; // Depending on whether padLeft is even or odd, we want either the
            // xy or zw channels from X texels for xR${r}C${c}. If padLeft is
            // even, xR${r}C${c + 1} is simply the zw channels of texels we've
            // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will
            // need to come from the xy channels of a new texel, hence the `vec4
            // final` initialized below.

            if (padLeft % 2 === 1) {
              mainLoop += `
                xCOffset = xC + 1 - ${strideWidth};
                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {
                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);
                } else {
                  xTexelR${r}C${c} = vec4(0.);
                }

                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {
                  xTexelR${r}C${c + 2} = getX(batch, xR, xC + 1, d1);
                } else {
                  xTexelR${r}C${c + 2} = vec4(0.);
                }

                xR${r}C${c} = vec4(
                  xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);
              `;

              if (c + 1 < filterWidth) {
                mainLoop += `
                  vec4 final = vec4(0.);
                  xCOffset = xC + 1 + ${strideWidth};
                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xR${r}C${c + 1} = vec4(xTexelR${r}C${c + 2}.xy, final.xy);
                `;
              }
            } else {
              mainLoop += `
                if(xC >= 0 && xC < ${xNumCols}) {
                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);
                } else {
                  xTexelR${r}C${c} = vec4(0.);
                }

                xCOffset = xC + ${strideWidth};
                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {
                  xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);
                } else {
                  xTexelR${r}C${c + 2} = vec4(0.);
                }

                xR${r}C${c} = vec4(
                  xTexelR${r}C${c}.xy, xTexelR${r}C${c + 2}.xy);
              `;

              if (c + 1 < filterWidth) {
                mainLoop += `
                  xR${r}C${c + 1} = vec4(
                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);
                `;
              }
            }

            mainLoop += `}`;
          }
        }

        if (c < filterWidth) {
          mainLoop += `
            vec4 wTexelR${r}C${c} = getW(${r}, ${c}, d1, q);
            wR${r}C${c} = vec4(wTexelR${r}C${c}.xz, wTexelR${r}C${c}.xz);
          `;

          if (c + 1 < filterWidth) {
            mainLoop += `
              vec4 wTexelR${r}C${c + 1} = getW(${r}, ${c + 1}, d1, q);
              wR${r}C${c + 1} =
                vec4(wTexelR${r}C${c + 1}.xz, wTexelR${r}C${c + 1}.xz);`;
          }
        }
      }
    }

    for (let r = 0; r < filterHeight; r++) {
      for (let c = 0; c < filterWidth; c++) {
        mainLoop += `dotProd += xR${r}C${c} * wR${r}C${c};`;
      }
    }

    let activationSnippet = '',
        applyActivationSnippet = '';

    if (activation) {
      if (hasPreluActivation) {
        activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
      } else {
        activationSnippet = `vec4 activation(vec4 x) {
          ${activation}
        }`;
      }

      applyActivationSnippet = `result = activation(result);`;
    }

    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';

    if (addBias) {
      this.variableNames.push('bias');
    }

    if (hasPreluActivation) {
      this.variableNames.push('preluActivationWeights');
    }

    this.userCode = `
      ${activationSnippet}

      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {

        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2;
        int q = 0;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        vec4 dotProd = vec4(0.);

        ${mainLoop}

        vec4 result = dotProd;
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
  }

}

exports.DepthwiseConvPacked2DProgram = DepthwiseConvPacked2DProgram;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CropAndResizeProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class CropAndResizeProgram {
  constructor(imageShape, boxShape, cropSize, method, extrapolationValue) {
    this.variableNames = ['Image', 'Boxes', 'BoxInd'];
    this.outputShape = [];
    const [batch, imageHeight, imageWidth, depth] = imageShape;
    const [numBoxes] = boxShape;
    const [cropHeight, cropWidth] = cropSize;
    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];
    const methodId = method === 'bilinear' ? 1 : 0;
    const [inputHeightFloat, inputWidthFloat] = [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];
    const [heightRatio, heightScale, inY] = cropHeight > 1 ? [`${(imageHeight - 1) / (cropHeight - 1)}`, '(y2-y1) * height_ratio', `y1*${inputHeightFloat} + float(y)*(height_scale)`] : ['0.0', '0.0', `0.5 * (y1+y2) * ${inputHeightFloat}`];
    const [widthRatio, widthScale, inX] = cropWidth > 1 ? [`${(imageWidth - 1) / (cropWidth - 1)}`, '(x2-x1) * width_ratio', `x1*${inputWidthFloat} + float(x)*(width_scale)`] : ['0.0', '0.0', `0.5 * (x1+x2) * ${inputWidthFloat}`]; // Reference implementation
    // tslint:disable-next-line:max-line-length
    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc

    this.userCode = `
      const float height_ratio = float(${heightRatio});
      const float width_ratio = float(${widthRatio});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${batch}) {
          return;
        }

        float height_scale = ${heightScale};
        float width_scale = ${widthScale};

        float in_y = ${inY};
        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {
          setOutput(float(${extrapolationValue}));
          return;
        }
        float in_x = ${inX};
        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {
          setOutput(float(${extrapolationValue}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${methodId} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }

}

exports.CropAndResizeProgram = CropAndResizeProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/cumsum_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CumSumProgram = void 0;

var _shader_compiler = require("./shader_compiler");

class CumSumProgram {
  constructor(shape, exclusive, reverse) {
    this.variableNames = ['x'];
    this.outputShape = shape;
    const rank = shape.length;
    const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;
    const length = shape[shape.length - 1];
    let condition = '';
    let idxString = ''; // When exclusive is set, the cumsum op becomes roll op that copies the
    // value from the previous index based on the direction specified by the
    // reverse flag.

    if (exclusive) {
      condition = reverse ? `end != ${length - 1}` : 'end != 0';
      idxString = reverse ? 'end + 1' : 'end - 1';
    } else {
      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';
      idxString = reverse ? 'end + pow2' : 'end - pow2';
    }

    this.userCode = `
      uniform float index;
      void main() {
        ${(0, _shader_compiler.getCoordsDataType)(rank)} coords = getOutputCoords();
        int end = ${getFinalCoord(rank, 'coords')};
        float val = ${val};
        int pow2 = int(pow(2.0, index));
        if (${condition}) {
          int idx = ${idxString};
          ${getFinalCoord(rank, 'coords')} = idx;
          val += getX(${getCoords(rank, 'coords')});
        }
        setOutput(val);
      }
    `;
  }

  getCustomSetupFunc(index) {
    return (gpgpu, webGLProgram) => {
      if (this.index == null) {
        this.index = gpgpu.getUniformLocation(webGLProgram, 'index');
      }

      gpgpu.gl.uniform1f(this.index, index);
    };
  }

}

exports.CumSumProgram = CumSumProgram;

function getCoords(rank, name) {
  if (rank === 1) {
    return `${name}`;
  } else if (rank === 2) {
    return `${name}.x, ${name}.y`;
  } else if (rank === 3) {
    return `${name}.x, ${name}.y, ${name}.z`;
  } else if (rank === 4) {
    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;
  } else {
    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);
  }
}

function getFinalCoord(rank, name) {
  if (rank === 1) {
    return `${name}`;
  } else if (rank === 2) {
    return `${name}.y`;
  } else if (rank === 3) {
    return `${name}.z`;
  } else if (rank === 4) {
    return `${name}.w`;
  } else {
    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);
  }
}
},{"./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DecodeMatrixProgram = void 0;

var _glsl_version = require("./glsl_version");

var shader_util = _interopRequireWildcard(require("./shader_compiler_util"));

var _tex_util = require("./tex_util");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DecodeMatrixProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = false;
    this.packedOutput = true;
    this.outPackingScheme = _tex_util.PackingScheme.DENSE;
    const texShape = (0, _tex_util.getDenseTexShape)(outputShape);
    const glsl = (0, _glsl_version.getGlslDifferences)();
    this.outputShape = outputShape;
    this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx *
          vec2(${texShape[0]}, ${texShape[1]}));
        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${glsl.output} = result;
      }
    `;
  }

}

exports.DecodeMatrixProgram = DecodeMatrixProgram;
},{"./glsl_version":"node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js","./shader_compiler_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js","./tex_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DecodeMatrixPackedProgram = void 0;

var _glsl_version = require("./glsl_version");

var shader_util = _interopRequireWildcard(require("./shader_compiler_util"));

var _tex_util = require("./tex_util");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DecodeMatrixPackedProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outPackingScheme = _tex_util.PackingScheme.DENSE;
    const texShape = (0, _tex_util.getDenseTexShape)(outputShape);
    const glsl = (0, _glsl_version.getGlslDifferences)();
    this.outputShape = outputShape;
    this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx *
          vec2(${texShape[0]}, ${texShape[1]}));
        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${glsl.output} = result;
      }
    `;
  }

}

exports.DecodeMatrixPackedProgram = DecodeMatrixPackedProgram;
},{"./glsl_version":"node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js","./shader_compiler_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js","./tex_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DepthToSpaceProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthToSpaceProgram {
  constructor(outputShape, blockSize, dataFormat) {
    this.variableNames = ['x'];
    this.outputShape = [];
    this.outputShape = outputShape;
    this.blockSize = blockSize;
    this.dataFormat = dataFormat;
    this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${blockSize};
      int offset_h = imod(h, ${blockSize});
      int in_w = w / ${blockSize};
      int offset_w = imod(w, ${blockSize});
      int offset_d = (offset_h * ${blockSize} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }

  getHeightCoordString() {
    if (this.dataFormat === 'NHWC') {
      return `coords[1]`;
    } else {
      return `coords[2]`;
    }
  }

  getWidthCoordString() {
    if (this.dataFormat === 'NHWC') {
      return `coords[2]`;
    } else {
      return `coords[3]`;
    }
  }

  getDepthCoordString() {
    if (this.dataFormat === 'NHWC') {
      return `coords[3]`;
    } else {
      return `coords[1]`;
    }
  }

  getOutputDepthSize() {
    if (this.dataFormat === 'NHWC') {
      return this.outputShape[3];
    } else {
      return this.outputShape[1];
    }
  }

  getInputSamplingString() {
    if (this.dataFormat === 'NHWC') {
      return `getX(b, in_h, in_w, in_d)`;
    } else {
      return `getX(b, in_d, in_h, in_w)`;
    }
  }

}

exports.DepthToSpaceProgram = DepthToSpaceProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiagProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DiagProgram {
  constructor(size) {
    this.variableNames = ['X'];
    this.outputShape = [size, size];
    this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }

}

exports.DiagProgram = DiagProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EncodeFloatProgram = void 0;

var _glsl_version = require("./glsl_version");

var _shader_compiler_util = require("./shader_compiler_util");

var _tex_util = require("./tex_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EncodeFloatProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.outTexUsage = _tex_util.TextureUsage.DOWNLOAD;
    const glsl = (0, _glsl_version.getGlslDifferences)();
    this.outputShape = outputShape;
    this.userCode = `
      ${_shader_compiler_util.ENCODE_FLOAT_SNIPPET}

      void main() {
        float x = getAAtOutCoords();
        ${glsl.output} = encode_float(x);
      }
    `;
  }

}

exports.EncodeFloatProgram = EncodeFloatProgram;
},{"./glsl_version":"node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js","./shader_compiler_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js","./tex_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EncodeFloatPackedProgram = void 0;

var _glsl_version = require("./glsl_version");

var _shader_compiler_util = require("./shader_compiler_util");

var _tex_util = require("./tex_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EncodeFloatPackedProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = false;
    this.outTexUsage = _tex_util.TextureUsage.DOWNLOAD;
    const glsl = (0, _glsl_version.getGlslDifferences)();
    this.outputShape = outputShape;
    this.userCode = `
      ${_shader_compiler_util.ENCODE_FLOAT_SNIPPET}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${glsl.output} = encode_float(x);
      }
    `;
  }

}

exports.EncodeFloatPackedProgram = EncodeFloatPackedProgram;
},{"./glsl_version":"node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js","./shader_compiler_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js","./tex_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EncodeMatrixProgram = void 0;

var _glsl_version = require("./glsl_version");

var shader_util = _interopRequireWildcard(require("./shader_compiler_util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EncodeMatrixProgram {
  constructor(outputShape, texShape, inputIsUnsignedByte = false) {
    this.variableNames = ['A'];
    const glsl = (0, _glsl_version.getGlslDifferences)();
    const [height, width] = texShape;
    this.outputShape = outputShape;
    let output = `result`;

    if (inputIsUnsignedByte) {
      output = `floor(result * 255. + 0.5)`;
    }

    this.userCode = `
      ${shader_util.getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / ${width};
        int c = imod(flatIndex, ${width});
        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);
        vec4 values = ${glsl.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${glsl.output} = vec4(${output}, 0., 0., 0.);
      }
    `;
  }

}

exports.EncodeMatrixProgram = EncodeMatrixProgram;
},{"./glsl_version":"node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js","./shader_compiler_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EncodeMatrixPackedProgram = void 0;

var _glsl_version = require("./glsl_version");

var shader_util = _interopRequireWildcard(require("./shader_compiler_util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/*
This is how the shader encodes a tensor with shape = [2, 3, 5]
(indices are [batch, row, col]).

000|001   002|003   004|xxx   020|021   022|023   024|xxx
-------   -------   -------   -------   -------   -------
010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx

100|101   102|103   104|xxx   120|121   122|123   124|xxx
-------   -------   -------   -------   -------   -------
110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx

Single texels contain only values from the same batch, and from adjacent rows
and columns.
 */
class EncodeMatrixPackedProgram {
  constructor(outputShape, texShape, inputIsUnsignedByte = false) {
    this.variableNames = ['A'];
    this.packedInputs = false;
    this.packedOutput = true;
    const glsl = (0, _glsl_version.getGlslDifferences)();
    const [height, width] = texShape;
    this.outputShape = outputShape;
    let mainLoop = '';
    let output = 'result';

    if (inputIsUnsignedByte) {
      output = 'floor(result * 255. + 0.5)';
    }

    for (let row = 0; row <= 1; row++) {
      for (let col = 0; col <= 1; col++) {
        const channel = row * 2 + col;
        mainLoop += `
          localCoords = coords;
          if(localCoords[2] + ${col} < ${outputShape[2]}) {
            localCoords[2] += ${col};
            if(localCoords[1] + ${row} < ${outputShape[1]}) {
              localCoords[1] += ${row};

              flatIndex = getFlatIndex(localCoords);
              offset = imod(flatIndex, 4);

              flatIndex = idiv(flatIndex, 4, 1.);

              r = flatIndex / ${width};
              c = imod(flatIndex, ${width});
              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);
              values = ${glsl.texture2D}(A, uv);

              if(offset == 0) {
                result[${channel}] = values[0];
              } else if(offset == 1) {
                result[${channel}] = values[1];
              } else if(offset == 2) {
                result[${channel}] = values[2];
              } else {
                result[${channel}] = values[3];
              }
            }
          }
        `;
      }
    }

    this.userCode = `
      ${shader_util.getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 coords = getOutputCoords();

        vec4 result = vec4(0.);
        int flatIndex, r, c, offset;
        ivec3 localCoords;
        vec2 uv;
        vec4 values;

        ${mainLoop}

        ${glsl.output} = ${output};
      }
    `;
  }

}

exports.EncodeMatrixPackedProgram = EncodeMatrixPackedProgram;
},{"./glsl_version":"node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js","./shader_compiler_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FFTProgram = exports.COMPLEX_FFT = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const COMPLEX_FFT = {
  REAL: 'return real * expR - imag * expI;',
  IMAG: 'return real * expI + imag * expR;'
};
exports.COMPLEX_FFT = COMPLEX_FFT;

class FFTProgram {
  constructor(op, inputShape, inverse) {
    this.variableNames = ['real', 'imag'];
    const innerDim = inputShape[1];
    this.outputShape = inputShape;
    const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;
    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';
    this.userCode = `
      const float exponentMultiplier = ${exponentMultiplierSnippet};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${op}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${innerDim});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${innerDim}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }

}

exports.FFTProgram = FFTProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FillProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FillProgram {
  constructor(shape, value) {
    this.outputShape = [];
    this.variableNames = ['x'];
    this.outputShape = shape;
    this.userCode = `
      uniform float value;
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }

  getCustomSetupFunc(value) {
    return (gpgpu, webGLProgram) => {
      if (this.valueLoc == null) {
        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');
      }

      gpgpu.gl.uniform1f(this.valueLoc, value);
    };
  }

}

exports.FillProgram = FillProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GatherProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class GatherProgram {
  constructor(aShape, indicesLength, axis) {
    this.variableNames = ['A', 'indices'];
    const outputShape = aShape.slice();
    outputShape[axis] = indicesLength;
    this.outputShape = outputShape;
    this.rank = outputShape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
    const sourceCoords = getSourceCoords(aShape, axis);
    this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        setOutput(getA(${sourceCoords}));
      }
    `;
  }

}

exports.GatherProgram = GatherProgram;

function getSourceCoords(aShape, axis) {
  const rank = aShape.length;

  if (rank > 4) {
    throw Error(`Gather for rank ${rank} is not yet supported`);
  }

  if (rank === 1) {
    return `int(getIndices(resRC))`;
  }

  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
  const sourceCoords = [];

  for (let i = 0; i < aShape.length; i++) {
    if (i === axis) {
      sourceCoords.push(`int(getIndices(${currentCoords[i]}))`);
    } else {
      sourceCoords.push(`${currentCoords[i]}`);
    }
  }

  return sourceCoords.join();
}
},{"./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GatherNDProgram = void 0;

var _shader_compiler = require("./shader_compiler");

class GatherNDProgram {
  constructor(sliceDim, strides, shape) {
    this.sliceDim = sliceDim;
    this.strides = strides;
    this.variableNames = ['x', 'indices'];
    this.outputShape = shape;
    const stridesType = (0, _shader_compiler.getCoordsDataType)(strides.length);
    const dtype = (0, _shader_compiler.getCoordsDataType)(shape.length);
    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';
    this.userCode = `
        ${stridesType} strides = ${stridesType}(${this.strides});
         void main() {
          ${dtype} coords = getOutputCoords();
          int flattenIndex = 0;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            flattenIndex += index * ${strideString};
          }
          setOutput(getX(flattenIndex, coords[1]));
        }
      `;
  }

}

exports.GatherNDProgram = GatherNDProgram;
},{"./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createVertexShader = createVertexShader;
exports.createVertexBuffer = createVertexBuffer;
exports.createIndexBuffer = createIndexBuffer;
exports.getInternalFormatForFloat32MatrixTexture = getInternalFormatForFloat32MatrixTexture;
exports.createFloat32MatrixTexture = createFloat32MatrixTexture;
exports.getInternalFormatForFloat16MatrixTexture = getInternalFormatForFloat16MatrixTexture;
exports.createFloat16MatrixTexture = createFloat16MatrixTexture;
exports.getInternalFormatForUnsignedBytesMatrixTexture = getInternalFormatForUnsignedBytesMatrixTexture;
exports.createUnsignedBytesMatrixTexture = createUnsignedBytesMatrixTexture;
exports.getInternalFormatForPackedMatrixTexture = getInternalFormatForPackedMatrixTexture;
exports.createPackedMatrixTexture = createPackedMatrixTexture;
exports.getInternalFormatForFloat16PackedMatrixTexture = getInternalFormatForFloat16PackedMatrixTexture;
exports.createFloat16PackedMatrixTexture = createFloat16PackedMatrixTexture;
exports.bindVertexProgramAttributeStreams = bindVertexProgramAttributeStreams;
exports.uploadDenseMatrixToTexture = uploadDenseMatrixToTexture;
exports.uploadPixelDataToTexture = uploadPixelDataToTexture;
exports.createBufferFromOutputTexture = createBufferFromOutputTexture;
exports.downloadFloat32MatrixFromBuffer = downloadFloat32MatrixFromBuffer;
exports.downloadByteEncodedFloatMatrixFromOutputTexture = downloadByteEncodedFloatMatrixFromOutputTexture;
exports.downloadPackedMatrixFromBuffer = downloadPackedMatrixFromBuffer;
exports.downloadMatrixFromPackedOutputTexture = downloadMatrixFromPackedOutputTexture;

var _glsl_version = require("./glsl_version");

var tex_util = _interopRequireWildcard(require("./tex_util"));

var webgl_util = _interopRequireWildcard(require("./webgl_util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function createVertexShader(gl) {
  const glsl = (0, _glsl_version.getGlslDifferences)();
  const vertexShaderSource = `${glsl.version}
    precision highp float;
    ${glsl.attribute} vec3 clipSpacePos;
    ${glsl.attribute} vec2 uv;
    ${glsl.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return webgl_util.createVertexShader(gl, vertexShaderSource);
}

function createVertexBuffer(gl) {
  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]
  const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return webgl_util.createStaticVertexBuffer(gl, vertexArray);
}

function createIndexBuffer(gl) {
  // OpenGL (and WebGL) have "CCW == front" winding
  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);
}

function createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {
  webgl_util.validateTextureSize(width, height);
  const texture = webgl_util.createTexture(gl);
  const tex2d = gl.TEXTURE_2D;
  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));
  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));
  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));
  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));
  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));
  webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));
  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
  return texture;
}

function getInternalFormatForFloat32MatrixTexture(textureConfig) {
  return textureConfig.internalFormatFloat;
}

function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);
}

function getInternalFormatForFloat16MatrixTexture(textureConfig) {
  return textureConfig.internalFormatHalfFloat;
}

function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);
}

function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {
  return textureConfig.downloadTextureFormat;
}

function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);
}

function getInternalFormatForPackedMatrixTexture(textureConfig) {
  return textureConfig.internalFormatPackedFloat;
}

function createPackedMatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);
}

function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {
  return textureConfig.internalFormatPackedHalfFloat;
}

function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);
}

function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {
  const posOffset = 0; // x is the first buffer element

  const uvOffset = 3 * 4; // uv comes after [x y z]

  const stride = 3 * 4 + 2 * 4; // xyz + uv, each entry is 4-byte float.

  webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));
  const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);
  return success && webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);
}

function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {
  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));
  let dataForUpload, texelDataType, internalFormat;

  if (data instanceof Uint8Array) {
    dataForUpload = new Uint8Array(width * height * 4);
    texelDataType = gl.UNSIGNED_BYTE;
    internalFormat = gl.RGBA;
  } else {
    dataForUpload = new Float32Array(width * height * 4);
    texelDataType = gl.FLOAT;
    internalFormat = textureConfig.internalFormatPackedFloat;
  }

  dataForUpload.set(data);
  webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));
  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
}

function uploadPixelDataToTexture(gl, texture, pixels) {
  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));

  if (pixels.data instanceof Uint8Array) {
    webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));
  } else {
    webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));
  }

  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
}

function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {
  // Create and bind the buffer.
  const buffer = gl2.createBuffer();
  webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer)); // Initialize the buffer to the size of the texture in bytes.

  const bytesPerFloat = 4;
  const valuesPerTexel = 4;
  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;
  webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ)); // Enqueue a command on the GPU command queue to copy of texture into the
  // buffer.

  webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));
  webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));
  return buffer;
}

function downloadFloat32MatrixFromBuffer(gl, buffer, size) {
  const gl2 = gl;
  const downloadTarget = new Float32Array(size);
  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);
  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);
  return downloadTarget;
}

function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {
  const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
  const numChannels = 4;
  const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));
  webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget)); // By wrapping the buffer in a Float32Array, we use native browser IEEE 754
  // decoding of the 4 bytes that back each 32 bit float.

  return new Float32Array(downloadTarget.buffer);
}

function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {
  const gl2 = gl;
  const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));
  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);
  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);
  return downloadTarget;
}

function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {
  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);
  webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));
  return packedRGBA;
}
},{"./glsl_version":"node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js","./tex_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js","./webgl_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linearSearchLastTrue = linearSearchLastTrue;
exports.GPGPUContext = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _canvas_util = require("./canvas_util");

var gpgpu_util = _interopRequireWildcard(require("./gpgpu_util"));

var tex_util = _interopRequireWildcard(require("./tex_util"));

var webgl_util = _interopRequireWildcard(require("./webgl_util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class GPGPUContext {
  constructor(gl) {
    this.outputTexture = null;
    this.program = null;
    this.disposed = false;
    this.vertexAttrsAreBound = false;
    this.itemsToPoll = [];
    const glVersion = (0, _tfjsCore.env)().getNumber('WEBGL_VERSION');

    if (gl != null) {
      this.gl = gl;
      (0, _canvas_util.setWebGLContext)(glVersion, gl);
    } else {
      this.gl = (0, _canvas_util.getWebGLContext)(glVersion);
    } // WebGL 2.0 enables texture floats without an extension.


    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';
    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';

    if ((0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 1) {
      const TEXTURE_FLOAT = 'OES_texture_float';
      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';
      this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);

      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {
        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);
      } else if ((0, _tfjsCore.env)().get('WEBGL_FORCE_F16_TEXTURES')) {
        throw new Error('GL context does not support half float textures, yet the ' + 'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');
      }

      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);

      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {
        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);
      } else if ((0, _tfjsCore.env)().get('WEBGL_FORCE_F16_TEXTURES')) {
        throw new Error('GL context does not support color renderable half floats, yet ' + 'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');
      }
    } else {
      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';

      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {
        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);
      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {
        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);
      } else {
        throw new Error('GL context does not support color renderable floats');
      }
    }

    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);
    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);
    this.framebuffer = webgl_util.createFramebuffer(this.gl);
    this.textureConfig = tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);
  }

  get debug() {
    return (0, _tfjsCore.env)().getBool('DEBUG');
  }

  dispose() {
    if (this.disposed) {
      return;
    }

    if (this.program != null) {
      console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');
    }

    if (this.outputTexture != null) {
      console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');
    }

    const gl = this.gl;
    webgl_util.callAndCheck(gl, () => gl.finish());
    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));
    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));
    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));
    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));
    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));
    this.disposed = true;
  }

  createFloat32MatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);
  }

  createFloat16MatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);
  }

  createUnsignedBytesMatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);
  }

  uploadPixelDataToTexture(texture, pixels) {
    this.throwIfDisposed();
    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);
  }

  uploadDenseMatrixToTexture(texture, width, height, data) {
    this.throwIfDisposed();
    gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);
  }

  createFloat16PackedMatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);
  }

  createPackedMatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);
  }

  deleteMatrixTexture(texture) {
    this.throwIfDisposed();

    if (this.outputTexture === texture) {
      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
      this.outputTexture = null;
    }

    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));
  }

  downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {
    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));
  }

  downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {
    return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);
  }

  downloadFloat32MatrixFromBuffer(buffer, size) {
    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);
  }

  createBufferFromTexture(texture, rows, columns) {
    this.bindTextureToFrameBuffer(texture);
    const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);
    this.unbindTextureToFrameBuffer();
    return result;
  }

  createAndWaitForFence() {
    const fenceContext = this.createFence(this.gl);
    return this.pollFence(fenceContext);
  }

  createFence(gl) {
    let query;
    let isFencePassed;

    if ((0, _tfjsCore.env)().getBool('WEBGL_FENCE_API_ENABLED')) {
      const gl2 = gl;
      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);
      gl.flush();

      isFencePassed = () => {
        const status = gl2.clientWaitSync(sync, 0, 0);
        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;
      };

      query = sync;
    } else if ((0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {
      query = this.beginQuery();
      this.endQuery();

      isFencePassed = () => this.isQueryAvailable(query, (0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));
    } else {
      // If we have no way to fence, return true immediately. This will fire in
      // WebGL 1.0 when there is no disjoint query timer. In this case, because
      // the fence passes immediately, we'll immediately ask for a download of
      // the texture, which will cause the UI thread to hang.
      isFencePassed = () => true;
    }

    return {
      query,
      isFencePassed
    };
  }

  downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {
    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));
  }

  createProgram(fragmentShaderSource) {
    this.throwIfDisposed();
    const gl = this.gl;
    const fragmentShader = webgl_util.createFragmentShader(gl, fragmentShaderSource);
    const vertexShader = gpgpu_util.createVertexShader(gl);
    const program = webgl_util.createProgram(gl);
    webgl_util.callAndCheck(gl, () => gl.attachShader(program, vertexShader));
    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));
    webgl_util.linkProgram(gl, program);

    if (this.debug) {
      webgl_util.validateProgram(gl, program);
    }

    if (!this.vertexAttrsAreBound) {
      this.setProgram(program);
      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);
    }

    return program;
  }

  deleteProgram(program) {
    this.throwIfDisposed();

    if (program === this.program) {
      this.program = null;
    }

    if (program != null) {
      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));
    }
  }

  setProgram(program) {
    this.throwIfDisposed();
    this.program = program;

    if (this.program != null && this.debug) {
      webgl_util.validateProgram(this.gl, this.program);
    }

    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));
  }

  getUniformLocation(program, uniformName, shouldThrow = true) {
    this.throwIfDisposed();

    if (shouldThrow) {
      return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);
    } else {
      return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);
    }
  }

  getAttributeLocation(program, attribute) {
    this.throwIfDisposed();
    return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));
  }

  getUniformLocationNoThrow(program, uniformName) {
    this.throwIfDisposed();
    return this.gl.getUniformLocation(program, uniformName);
  }

  setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {
    this.throwIfDisposed();
    this.throwIfNoProgram();
    webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);
  }

  setOutputMatrixTexture(outputMatrixTexture, rows, columns) {
    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);
  }

  setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {
    this.throwIfDisposed();
    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);
    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);
  }

  setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {
    this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);
  }

  setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {
    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');
  }

  debugValidate() {
    if (this.program != null) {
      webgl_util.validateProgram(this.gl, this.program);
    }

    webgl_util.validateFramebuffer(this.gl);
  }

  executeProgram() {
    this.throwIfDisposed();
    this.throwIfNoProgram();
    const gl = this.gl;

    if (this.debug) {
      this.debugValidate();
    }

    webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));
  }

  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed();
    webgl_util.callAndCheck(this.gl, () => this.gl.finish());
  }

  getQueryTimerExtension() {
    if (this.disjointQueryTimerExtension == null) {
      this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, (0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');
    }

    return this.disjointQueryTimerExtension;
  }

  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }

  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }

  beginQuery() {
    if ((0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
      const gl2 = this.gl;
      const ext = this.getQueryTimerExtensionWebGL2();
      const query = gl2.createQuery();
      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);
      return query;
    }

    const ext = this.getQueryTimerExtensionWebGL1();
    const query = ext.createQueryEXT();
    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);
    return query;
  }

  endQuery() {
    if ((0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
      const gl2 = this.gl;
      const ext = this.getQueryTimerExtensionWebGL2();
      gl2.endQuery(ext.TIME_ELAPSED_EXT);
      return;
    }

    const ext = this.getQueryTimerExtensionWebGL1();
    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);
  }

  async waitForQueryAndGetTime(query) {
    await _tfjsCore.util.repeatedTry(() => this.disposed || // while testing contexts are created / disposed
    // in rapid succession, so without this check we
    // may poll for the query timer indefinitely
    this.isQueryAvailable(query, (0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));
    return this.getQueryTime(query, (0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));
  }

  getQueryTime(query, queryTimerVersion) {
    if (queryTimerVersion === 0) {
      return null;
    }

    if (queryTimerVersion === 2) {
      const gl2 = this.gl;
      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT); // Return milliseconds.

      return timeElapsedNanos / 1000000;
    } else {
      const ext = this.getQueryTimerExtensionWebGL1();
      const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT); // Return milliseconds.

      return timeElapsedNanos / 1000000;
    }
  }

  isQueryAvailable(query, queryTimerVersion) {
    if (queryTimerVersion === 0) {
      return true;
    }

    if (queryTimerVersion === 2) {
      const gl2 = this.gl;
      const ext = this.getQueryTimerExtensionWebGL2();
      const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);

      if (this.disjoint == null) {
        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
      }

      return available && !this.disjoint;
    } else {
      const ext = this.getQueryTimerExtensionWebGL1();
      const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);

      if (this.disjoint == null) {
        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
      }

      return available && !this.disjoint;
    }
  }

  pollFence(fenceContext) {
    return new Promise(resolve => {
      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());
    });
  }

  pollItems() {
    // Find the last query that has finished.
    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));

    for (let i = 0; i <= index; ++i) {
      const {
        resolveFn
      } = this.itemsToPoll[i];
      resolveFn();
    }

    this.itemsToPoll = this.itemsToPoll.slice(index + 1);
  }

  addItemToPoll(isDoneFn, resolveFn) {
    this.itemsToPoll.push({
      isDoneFn,
      resolveFn
    });

    if (this.itemsToPoll.length > 1) {
      // We already have a running loop that polls.
      return;
    } // Start a new loop that polls.


    _tfjsCore.util.repeatedTry(() => {
      this.pollItems(); // End the loop if no more items to poll.

      return this.itemsToPoll.length === 0;
    });
  }

  bindTextureToFrameBuffer(texture) {
    this.throwIfDisposed();
    webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);

    if (this.debug) {
      webgl_util.validateFramebuffer(this.gl);
    }
  }

  unbindTextureToFrameBuffer() {
    if (this.outputTexture != null) {
      webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);

      if (this.debug) {
        webgl_util.validateFramebuffer(this.gl);
      }
    } else {
      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
    }
  }

  downloadMatrixDriver(texture, downloadAndDecode) {
    this.bindTextureToFrameBuffer(texture);
    const result = downloadAndDecode();
    this.unbindTextureToFrameBuffer();
    return result;
  }

  setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {
    this.throwIfDisposed();
    const gl = this.gl;
    webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);

    if (this.debug) {
      webgl_util.validateFramebuffer(gl);
    }

    this.outputTexture = outputMatrixTextureMaybePacked;
    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));
    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));
  }

  setOutputMatrixWriteRegionDriver(x, y, width, height) {
    this.throwIfDisposed();
    webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));
  }

  throwIfDisposed() {
    if (this.disposed) {
      throw new Error('Attempted to use disposed GPGPUContext.');
    }
  }

  throwIfNoProgram() {
    if (this.program == null) {
      throw new Error('No GPU program is currently set.');
    }
  }

}
/**
 * Finds the index of the last true element using linear search.
 * Note: We can't do binary search because Chrome expects us to explicitly
 * test all fences before download:
 * https://github.com/tensorflow/tfjs/issues/1145
 */


exports.GPGPUContext = GPGPUContext;

function linearSearchLastTrue(arr) {
  let i = 0;

  for (; i < arr.length; ++i) {
    const isDone = arr[i]();

    if (!isDone) {
      break;
    }
  }

  return i - 1;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./canvas_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js","./gpgpu_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js","./tex_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js","./webgl_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compileProgram = compileProgram;
exports.runProgram = runProgram;
exports.makeShaderKey = makeShaderKey;

var _tfjsCore = require("@tensorflow/tfjs-core");

var shader_compiler = _interopRequireWildcard(require("./shader_compiler"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function compileProgram(gpgpu, program, inputs, output) {
  const userCode = program.userCode;
  const inputInfos = inputs.map((input, i) => {
    const shapeInfo = {
      logicalShape: input.shape,
      texShape: input.isUniform ? null : input.texData.texShape,
      isUniform: input.isUniform,
      isPacked: input.isUniform ? false : input.texData.isPacked,
      flatOffset: null
    };

    if (input.texData != null && input.texData.slice != null && input.texData.slice.flatOffset > 0) {
      shapeInfo.flatOffset = input.texData.slice.flatOffset;
    }

    return {
      name: program.variableNames[i],
      shapeInfo
    };
  });
  const inShapeInfos = inputInfos.map(x => x.shapeInfo);
  const outShapeInfo = {
    logicalShape: output.shape,
    texShape: output.texData.texShape,
    isUniform: false,
    isPacked: output.texData.isPacked,
    flatOffset: null
  };
  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, userCode, program.packedInputs);
  const webGLProgram = gpgpu.createProgram(source); // Add special uniforms (NAN, INFINITY)

  let infLoc = null;
  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);

  if ((0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 1) {
    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);
  } // Add user-defined uniforms


  const uniformLocations = {};

  for (let i = 0; i < program.variableNames.length; i++) {
    const varName = program.variableNames[i];
    const shouldThrow = false;
    uniformLocations[varName] = gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);
    uniformLocations[`offset${varName}`] = gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);
  }

  return {
    program,
    source,
    webGLProgram,
    uniformLocations,
    inShapeInfos,
    outShapeInfo,
    infLoc,
    nanLoc
  };
}

function validateBinaryAndProgram(shapeInfos, inputs) {
  if (shapeInfos.length !== inputs.length) {
    throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` + `was executed with ${inputs.length} inputs`);
  }

  shapeInfos.forEach((s, i) => {
    const shapeA = s.logicalShape;
    const input = inputs[i];
    const shapeB = input.shape;

    if (!_tfjsCore.util.arraysEqual(shapeA, shapeB)) {
      throw Error(`Binary was compiled with different shapes than ` + `the current args. Shapes ${shapeA} and ${shapeB} must match`);
    } // The input is uploaded as uniform.


    if (s.isUniform && input.isUniform) {
      return;
    }

    const texShapeA = s.texShape;
    const texShapeB = input.isUniform ? null : input.texData.texShape;

    if (!_tfjsCore.util.arraysEqual(texShapeA, texShapeB)) {
      throw Error(`Binary was compiled with different texture shapes than the` + ` current args. Shape ${texShapeA} and ${texShapeB} must match`);
    }
  });
}

function runProgram(gpgpu, binary, inputs, output, customSetup) {
  validateBinaryAndProgram(binary.inShapeInfos, inputs);
  validateBinaryAndProgram([binary.outShapeInfo], [output]);
  const outTex = output.texData.texture;
  const outTexShape = output.texData.texShape;

  if (output.texData.isPacked) {
    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);
  } else {
    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);
  }

  gpgpu.setProgram(binary.webGLProgram); // Set special uniforms (NAN, INFINITY)

  if ((0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 1) {
    if (binary.infLoc !== null) {
      gpgpu.gl.uniform1f(binary.infLoc, Infinity);
    }
  }

  if (binary.nanLoc !== null) {
    gpgpu.gl.uniform1f(binary.nanLoc, NaN);
  } // Set user-defined inputs


  inputs.forEach((input, i) => {
    const varName = binary.program.variableNames[i];
    const varLoc = binary.uniformLocations[varName];
    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];

    if (varLoc == null) {
      // The compiler inferred that this variable is not used in this shader.
      return;
    }

    if (input.isUniform) {
      // Upload the values of the tensor as uniform.
      if (_tfjsCore.util.sizeFromShape(input.shape) < 2) {
        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);
      } else {
        let vals = input.uniformValues;

        if (!(vals instanceof Float32Array)) {
          vals = new Float32Array(vals);
        }

        gpgpu.gl.uniform1fv(varLoc, vals);
      }

      return;
    } // If the input was sliced, upload the flat offset index.


    if (input.texData.slice != null && varOffsetLoc != null) {
      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);
    }

    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);
  });

  if (customSetup != null) {
    customSetup(gpgpu, binary.webGLProgram);
  }

  gpgpu.executeProgram();
}

function makeShaderKey(program, inputs, output) {
  let keyInputs = '';
  inputs.concat(output).forEach(x => {
    const hasOffset = x.texData != null && x.texData.slice != null && x.texData.slice.flatOffset > 0;
    const texShape = x.isUniform ? 'uniform' : x.texData.texShape;
    keyInputs += `${x.shape}_${texShape}_${hasOffset}`;
  });
  const keyUserCode = program.userCode;
  let key = program.constructor.name; // Fast string concat. See https://jsperf.com/string-concatenation/14.

  key += '_' + keyInputs + '_' + keyUserCode;
  return key;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Im2ColPackedProgram = void 0;

var _glsl_version = require("./glsl_version");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Im2ColPackedProgram {
  constructor(outputShape, inputShape, convInfo) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = outputShape;
    const {
      filterWidth,
      inChannels,
      strideWidth,
      strideHeight,
      padInfo,
      outWidth,
      dilationWidth,
      dilationHeight,
      dataFormat
    } = convInfo;
    const {
      left,
      top
    } = padInfo;
    const itemsPerBlockRow = inChannels * filterWidth;
    const glsl = (0, _glsl_version.getGlslDifferences)();
    const isChannelsLast = dataFormat === 'channelsLast';
    const rowDim = isChannelsLast ? 0 : 1;
    const colDim = isChannelsLast ? 1 : 2;
    let unrolled = ``;

    for (let row = 0; row <= 1; row++) {
      for (let col = 0; col <= 1; col++) {
        unrolled += `
          blockIndex = rc.y + ${col};
          pos = rc.x + ${row};

          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {
            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${top};
            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});

            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {

              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${strideWidth}. - ${left}.);
              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${itemsPerBlockRow}.) / ${inChannels}.));

              if(d1 < ${inputShape[colDim]} && d1 >= 0) {

                ch = int(mod(float(pos), ${inChannels}.));

                if (${isChannelsLast}) {
                  innerDims = vec2(d1, ch);
                  result[${row * 2 + col}] = getChannel(
                    getA(d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${row * 2 + col}] = getChannel(
                    getA(ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
      }
    }

    this.userCode = `
      void main() {
        ivec2 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${unrolled}

        ${glsl.output} = result;
      }
    `;
  }

}

exports.Im2ColPackedProgram = Im2ColPackedProgram;
},{"./glsl_version":"node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LRNProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LRNProgram {
  constructor(xShape, radius, bias, alpha, beta) {
    this.variableNames = ['x'];
    this.outputShape = [];
    const rad = radius;
    const maxD = xShape[3] - 1;
    this.outputShape = xShape; // optimize pow(bias + alpha * sum, -beta)
    // src: https://github.com/tensorflow/tensorflow/..
    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..
    // tensorflow/core/kernels/mkl_lrn_op.cc#L320

    let powOperator;
    const basis = `float(${bias}) + float(${alpha}) * sum`;

    if (beta === 0.5) {
      powOperator = `inversesqrt(${basis})`;
    } else if (beta === 1.0) {
      powOperator = `1.0/(${basis})`;
    } else {
      powOperator = `exp(log(${basis}) * float(-${beta}));`;
    }

    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${rad}; j <= ${rad}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${maxD}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${powOperator};
        setOutput(val);
      }
    `;
  }

}

exports.LRNProgram = LRNProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LRNGradProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LRNGradProgram {
  constructor(inputShape, depthRadius, bias, alpha, beta) {
    this.variableNames = ['inputImage', 'outputImage', 'dy'];
    this.outputShape = [];
    this.outputShape = inputShape;
    this.depth = inputShape[3];
    this.depthRadius = depthRadius;
    this.bias = bias;
    this.alpha = alpha;
    this.beta = beta;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${depthRadius})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${depthRadius} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${alpha}) * norm + float(${bias});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${alpha})
                * float(${beta})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${beta});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }

}

exports.LRNGradProgram = LRNGradProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LRNPackedProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LRNPackedProgram {
  constructor(xShape, radius, bias, alpha, beta) {
    this.variableNames = ['x'];
    this.outputShape = [];
    this.packedInputs = true;
    this.packedOutput = true;
    const rad = radius;
    const maxD = xShape[3] - 1;
    this.outputShape = xShape; // optimize pow(bias + alpha * sum, -beta)
    // src: https://github.com/tensorflow/tensorflow/..
    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..
    // tensorflow/core/kernels/mkl_lrn_op.cc#L320

    let powOperator;
    const basis = `float(${bias}) + float(${alpha}) * sum`;

    if (beta === 0.5) {
      powOperator = `inversesqrt(${basis})`;
    } else if (beta === 1.0) {
      powOperator = `1.0/(${basis})`;
    } else {
      powOperator = `exp(log(${basis}) * float(-${beta}));`;
    }

    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${rad};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${rad}; j <= ${rad}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${powOperator};
        setOutput(result);
      }
    `;
  }

}

exports.LRNPackedProgram = LRNPackedProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaxPool3DBackpropProgram = exports.MaxPool2DBackpropProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MaxPool2DBackpropProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'maxPos'];
    this.outputShape = convInfo.inShape;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${effectiveFilterHeight};
          wR += ${dilationHeight}) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${effectiveFilterWidth} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.MaxPool2DBackpropProgram = MaxPool2DBackpropProgram;

class MaxPool3DBackpropProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'maxPos'];
    this.outputShape = convInfo.inShape;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
           wD += ${dilationDepth}) {
          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;

          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${lastIndex} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +
                  wR * ${effectiveFilterWidth} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.MaxPool3DBackpropProgram = MaxPool3DBackpropProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatMulPackedProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MatMulPackedProgram {
  constructor(aShape, outputShape, transposeA = false, transposeB = false, addBias = false, activation = null, hasPreluActivation = false) {
    this.variableNames = ['matrixA', 'matrixB'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = outputShape;
    const sharedDim = transposeA ? aShape[1] : aShape[2];
    const sharedDimensionPacked = Math.ceil(sharedDim / 2);
    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';
    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';
    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];
    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];
    let activationSnippet = '',
        applyActivationSnippet = '';

    if (activation) {
      if (hasPreluActivation) {
        activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
      } else {
        activationSnippet = `vec4 activation(vec4 x) {
          ${activation}
        }`;
      }

      applyActivationSnippet = `result = activation(result);`;
    }

    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';

    if (addBias) {
      this.variableNames.push('bias');
    }

    if (hasPreluActivation) {
      this.variableNames.push('preluActivationWeights');
    }

    this.userCode = `
      ${activationSnippet}

      const float sharedDimension = ${sharedDimensionPacked}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${sharedDimensionPacked}; i++) {
          vec4 a = getMatrixA(rc.x, ${aSample});
          vec4 b = getMatrixB(rc.x, ${bSample});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${aSwizzle[0]} * ${bSwizzle[0]});
          result += (${aSwizzle[1]} * ${bSwizzle[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${addBiasSnippet}

        ${applyActivationSnippet}

        setOutput(result);
      }
    `;
  }

}

exports.MatMulPackedProgram = MatMulPackedProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultinomialProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MultinomialProgram {
  constructor(batchSize, numOutcomes, numSamples) {
    this.variableNames = ['probs'];
    this.outputShape = [batchSize, numSamples];
    this.userCode = `
      uniform float seed;

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${numOutcomes - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${numOutcomes - 1}));
      }
    `;
  }

  getCustomSetupFunc(seed) {
    return (gpgpu, webGLProgram) => {
      if (this.seedLoc == null) {
        this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');
      }

      gpgpu.gl.uniform1f(this.seedLoc, seed);
    };
  }

}

exports.MultinomialProgram = MultinomialProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OneHotProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OneHotProgram {
  constructor(numIndices, depth, onValue, offValue) {
    this.variableNames = ['indices'];
    this.outputShape = [numIndices, depth];
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${offValue}), float(${onValue}),
                      float(index == coords.y)));
      }
    `;
  }

}

exports.OneHotProgram = OneHotProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PackProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PackProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = false;
    this.packedOutput = true; // Only input / output 3D tensors.

    this.outputShape = outputShape;
    const rank = outputShape.length;

    if (rank === 0) {
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    } else {
      const channels = (0, _packing_util.getChannels)('rc', rank);
      const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
      const outOfBoundsCondition = getOutOfBoundsCondition(rank, outputShape, channels);
      const setup = getSetup(rank, outputShape[outputShape.length - 1], outputShape[outputShape.length - 2], channels);
      const output = getOutput(outputShape, channels);
      this.userCode = `
        void main() {
          ${dtype} rc = getOutputCoords();

          if(${outOfBoundsCondition}) {
            setOutput(vec4(0));
          } else {
            ${setup}

            setOutput(vec4(${output}));
          }
        }
      `;
    }
  }

}

exports.PackProgram = PackProgram;

function getSourceCoordsArr(rank, dims) {
  const coords = [];

  for (let row = 0; row <= 1; row++) {
    for (let col = 0; col <= 1; col++) {
      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;

      for (let d = 2; d < rank; d++) {
        coord = `${dims[dims.length - 1 - d]},` + coord;
      }

      coords.push(coord);
    }
  }

  return coords;
}

function getOutOfBoundsCondition(rank, shape, dims) {
  if (rank === 1) {
    return `rc > ${shape[0]}`;
  }

  let cond = '';

  for (let i = rank - 2; i < rank; i++) {
    cond += `${dims[i]} >= ${shape[i]}`;

    if (i < rank - 1) {
      cond += '||';
    }
  }

  return cond;
}

function getSetup(rank, cols, rows, dims) {
  if (rank === 1) {
    return '';
  }

  const innerDims = dims.slice(-2);
  return `
    int r = ${innerDims[0]};
    int c = ${innerDims[1]};
    int rp1 = r + 1;
    int cp1 = c + 1;

    bool cEdge = cp1 >= ${cols};
    bool rEdge = rp1 >= ${rows};
  `;
}

function getOutput(shape, dims) {
  const rank = shape.length;
  const sourceCoords = getSourceCoordsArr(rank, dims);

  if (rank === 1) {
    return `getA(rc),
            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),
            0, 0`;
  }

  return `getA(${sourceCoords[0]}),
          cEdge ? 0. : getA(${sourceCoords[1]}),
          rEdge ? 0. : getA(${sourceCoords[2]}),
          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;
}
},{"./packing_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js","./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PadProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PadProgram {
  constructor(xShape, paddings, constantValue) {
    this.variableNames = ['x'];
    this.outputShape = paddings.map((p, i) => p[0]
    /* beforePad */
    + xShape[i] + p[1]
    /* afterPad */
    );
    const rank = xShape.length;
    const type = (0, _shader_compiler.getCoordsDataType)(rank);
    const start = paddings.map(p => p[0]).join(',');
    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
    const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);

    if (rank === 1) {
      this.userCode = `
        int start = ${start};
        int end = ${end};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(float(${constantValue}));
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }

    this.userCode = `
      ${type} start = ${type}(${start});
      ${type} end = ${type}(${end});

      void main() {
        ${type} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(float(${constantValue}));
        } else {
          ${type} coords = outC - start;
          setOutput(getX(${unpackedCoords}));
        }
      }
    `;
  }

}

exports.PadProgram = PadProgram;
},{"./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PadPackedProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PadPackedProgram {
  constructor(xShape, paddings, constantValue) {
    this.variableNames = ['x'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = paddings.map((p, i) => p[0]
    /* beforePad */
    + xShape[i] + p[1]
    /* afterPad */
    );
    const rank = xShape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
    const start = paddings.map(p => p[0]).join(',');
    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
    const coords = (0, _packing_util.getChannels)('rc', rank);
    const source = (0, _packing_util.getChannels)('source', rank);
    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;
    const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;
    const componentSetup = [`${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;
       if(${cLimit}) {
      `, rank === 1 ? '' : `}
       rc = outputLoc;
       ${coords[rank - 2]} += 1;
       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`, rank === 1 ? '' : `  ${coords[rank - 1]} += 1;
         if(${cLimit}) {`];
    const paddingArea = rank === 1 ? 'rc < start || rc >= end' : 'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';
    let mainLoop = '';

    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {
      mainLoop += `
        ${componentSetup[i]}
        if (${paddingArea}) {
          result[${i}] = float(${constantValue});
        } else {
          ${dtype} source = rc - start;
          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});
        }
      `;
    }

    mainLoop += rank === 1 ? `} ` : `}}`;
    this.userCode = `
      const ${dtype} start = ${dtype}(${start});
      const ${dtype} end = ${dtype}(${end});

      void main() {
        ${dtype} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${mainLoop}
        setOutput(result);
      }
    `;
  }

}

exports.PadPackedProgram = PadPackedProgram;
},{"./packing_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js","./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pool3DProgram = exports.Pool2DProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Pool2DProgram {
  constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {
    this.variableNames = ['x'];

    if (poolType === 'avg' && computePositions) {
      throw new Error('Cannot compute positions for average pool.');
    }

    const filterWidth = convInfo.filterWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    this.outputShape = convInfo.outShape;
    const isAvgPool = poolType === 'avg';
    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;
    const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;
    let initializationValue = '0.0';

    if (!isAvgPool) {
      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
      initializationValue = '-1.0 / 1e-20';
    }

    if (computePositions) {
      const compareOp = '>=';
      this.userCode = `
        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
        const ivec2 pads = ivec2(${padTop}, ${padLeft});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${compareOp} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${flattenPositions ? includeBatchInIndex ? batchFlattenPositionStr : flattenPositionStr : `wR * ${effectiveFilterWidth} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }

    const compareOp = 'max';
    let returnValue = `${poolType}(${poolType}(${poolType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';

    if (poolType === 'avg') {
      returnValue = `avgValue / count`;
    }

    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
    const filterWidthVec4Remainder = filterWidth % 4;
    const updateSnippet = `
      if (${isAvgPool}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${convInfo.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${initializationValue});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${convInfo.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {
            int xC = xCCorner + wC * ${dilationWidth};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),
              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)
            );

            ${updateSnippet}
          }

          int xC = xCCorner + ${filterWidthNearestVec4};
          if (${filterWidthVec4Remainder === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${updateSnippet}
          } else if (${filterWidthVec4Remainder === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              initializationValue,
              initializationValue
            );

            ${updateSnippet}
          } else if (${filterWidthVec4Remainder === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),
              initializationValue
            );

            ${updateSnippet}
          }
        }
        setOutput(${returnValue});
      }
    `;
  }

}

exports.Pool2DProgram = Pool2DProgram;

class Pool3DProgram {
  constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {
    this.variableNames = ['x'];

    if (poolType === 'avg' && computePositions) {
      throw new Error('Cannot compute positions for average pool.');
    }

    const filterWidth = convInfo.filterWidth;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = convInfo.padInfo.front;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    this.outputShape = convInfo.outShape;
    const isAvgPool = poolType === 'avg';
    let initializationValue = '0.0';

    if (!isAvgPool) {
      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
      initializationValue = '-1.0 / 1e-20';
    }

    if (computePositions) {
      const compareOp = '>=';
      this.userCode = `
        const ivec3 strides =
            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${effectiveFilterDepth};
              wD += ${dilationDepth}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${convInfo.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${effectiveFilterHeight};
                wR += ${dilationHeight}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${convInfo.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${effectiveFilterWidth};
                  wC += ${dilationWidth}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${convInfo.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${compareOp} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${flattenPositions ? includeBatchInIndex ? `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` : `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` : `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +
                      wR * ${effectiveFilterWidth} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }

    const compareOp = 'max';
    let returnValue = `${poolType}(${poolType}(${poolType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';

    if (poolType === 'avg') {
      returnValue = `avgValue / count`;
    }

    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
    const filterWidthVec4Remainder = filterWidth % 4;
    const updateSnippet = `
      if (${isAvgPool}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${convInfo.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${initializationValue});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
            wD += ${dilationDepth}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${convInfo.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {
              int xC = xCCorner + wC * ${dilationWidth};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)
              );

              ${updateSnippet}
            }

            int xC = xCCorner + ${filterWidthNearestVec4};
            if (${filterWidthVec4Remainder === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${updateSnippet}
            } else if (${filterWidthVec4Remainder === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                initializationValue,
                initializationValue
              );

              ${updateSnippet}
            } else if (${filterWidthVec4Remainder === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),
                initializationValue
              );

              ${updateSnippet}
            }
          }
          setOutput(${returnValue});
        }
      }
    `;
  }

}

exports.Pool3DProgram = Pool3DProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReduceProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReduceProgram {
  constructor(reduceInfo, reduceType) {
    this.variableNames = ['x'];
    const {
      windowSize,
      batchSize,
      inSize,
      outSize
    } = reduceInfo;
    this.outputShape = [batchSize, outSize];
    let initializationValue = '0.0';
    let compareOp = ``;

    if (reduceType === 'prod') {
      initializationValue = '1.0';
    } else if (reduceType === 'min') {
      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
      initializationValue = '1.0 / 1e-20';
      compareOp = `min`;
    } else if (reduceType === 'max') {
      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
      initializationValue = '-1.0 / 1e-20';
      compareOp = `max`;
    }

    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';

    if (reduceType === 'sum') {
      returnValue = `sumValue`;
    } else if (reduceType === 'prod') {
      returnValue = `prodValue`;
    } else if (reduceType === 'all') {
      returnValue = `allValue`;
    } else if (reduceType === 'any') {
      returnValue = `anyValue`;
    }

    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
    const windowSizeVec4Remainder = windowSize % 4;
    let updateSnippet = `
      if (${reduceType === 'sum'}) {
        sumValue += dot(values, ones);
      } else if (${reduceType === 'prod'}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
      }
    `;
    let vecType = `vec4`;

    if (reduceType === 'all') {
      initializationValue = '1.0';
      updateSnippet = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `;
      vecType = `bvec4`;
    } else if (reduceType === 'any') {
      initializationValue = '0.0';
      updateSnippet = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `;
      vecType = `bvec4`;
    }

    let checkOutOfBounds = '';

    if (inSize % windowSize > 0) {
      checkOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return initializationValue;
        }
      `;
    }

    this.userCode = `
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${checkOutOfBounds}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        vec4 minMaxValue = vec4(${initializationValue});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${updateSnippet}
        }
        setOutput(${returnValue});
      }
    `;
  }

}

exports.ReduceProgram = ReduceProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReshapePackedProgram = void 0;

var shader_util = _interopRequireWildcard(require("./shader_compiler_util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReshapePackedProgram {
  constructor(outputShape, inputShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = outputShape;
    let mainLoop = ``;

    for (let i = 0; i < 4; i++) {
      let thisRC = `thisRC = rc;`;

      if (i % 2 === 1) {
        thisRC += `thisRC.z += 1;`;
      }

      if (i > 1) {
        thisRC += `thisRC.y += 1;`;
      }

      mainLoop += `
        ${thisRC}
        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${i}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${i > 0 ? '}' : ''}
      `;
    }

    this.userCode = `
      ${getReshapedInputCoords(inputShape)}
      ${shader_util.getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${outputShape[1]};
        int cols = ${outputShape[2]};

        ${mainLoop}

        setOutput(result);
      }
    `;
  }

}

exports.ReshapePackedProgram = ReshapePackedProgram;

function getReshapedInputCoords(shape) {
  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${coordsFromIndexSnippet}
      return ivec3(r, c, d);
    }
  `;
}
},{"./shader_compiler_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeBilinearBackpropProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeBilinearBackpropProgram {
  constructor(dy, x, alignCorners) {
    this.variableNames = ['dy'];
    this.outputShape = [];
    this.outputShape = x.shape;
    const [, xHeight, xWidth] = x.shape;
    const [, yHeight, yWidth] = dy.shape; // In the backwards pass, we want to find the pixels that were generated for
    // each pixel in the input image the forward pass and add the corresponding
    // coefficient from dy to the gradient (with some interpolation).

    const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];
    const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];
    const heightScale = effectiveXSize[0] / effectiveYSize[0];
    const widthScale = effectiveXSize[1] / effectiveYSize[1];
    const invHeightScale = 1 / heightScale;
    const invWidthScale = 1 / widthScale; // This defines the size of the window of values around a particular
    // index in dy that we want to search for contributions to dx.

    const winHeight = Math.ceil(invHeightScale) * 2 + 2;
    const winWidth = Math.ceil(invWidthScale) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${heightScale});
        const float widthScale = float(${widthScale});

        const float invHeightScale = float(${invHeightScale});
        const float invWidthScale = float(${invWidthScale});

        const int winHeight = int(${winHeight});
        const int winWidth = int(${winWidth});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${yHeight}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${yWidth}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }

}

exports.ResizeBilinearBackpropProgram = ResizeBilinearBackpropProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeBilinearProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeBilinearProgram {
  constructor(inputShape, newHeight, newWidth, alignCorners) {
    this.variableNames = ['A'];
    this.outputShape = [];
    const [batch, oldHeight, oldWidth, depth] = inputShape;
    this.outputShape = [batch, newHeight, newWidth, depth];
    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];
    this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }

}

exports.ResizeBilinearProgram = ResizeBilinearProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeBilinearPackedProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeBilinearPackedProgram {
  constructor(inputShape, newHeight, newWidth, alignCorners) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = [];
    const [batch, oldHeight, oldWidth, depth] = inputShape;
    this.outputShape = [batch, newHeight, newWidth, depth];
    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];
    this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,
                                     ${oldWidth}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${depth - 1};
        bool hasNextRow = coords.z < ${newWidth - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }

}

exports.ResizeBilinearPackedProgram = ResizeBilinearPackedProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeNearestNeigborBackpropProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeNearestNeigborBackpropProgram {
  constructor(dy, x, alignCorners) {
    this.variableNames = ['dy'];
    this.outputShape = [];
    this.outputShape = x.shape;
    const [, xHeight, xWidth] = x.shape;
    const [, yHeight, yWidth] = dy.shape; // In the backwards pass, we want to find the pixels that were generated for
    // each pixel in the input image the forward pass and add the corresponding
    // coefficient from dy to the gradient (with some interpolation).

    const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];
    const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];
    const heightScale = effectiveXSize[0] / effectiveYSize[0];
    const widthScale = effectiveXSize[1] / effectiveYSize[1];
    const invHeightScale = 1 / heightScale;
    const invWidthScale = 1 / widthScale; // This defines the size of the window of values around a particular
    // index in dy that we want to search for contributions to dx.

    const winHeight = Math.ceil(invHeightScale) * 2 + 2;
    const winWidth = Math.ceil(invWidthScale) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${heightScale});
        const float widthScale = float(${widthScale});

        const float invHeightScale = float(${invHeightScale});
        const float invWidthScale = float(${invWidthScale});

        const int winHeight = int(${winHeight});
        const int winWidth = int(${winWidth});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${yHeight}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${yWidth}) {
              continue;
            }

            float sourceFracRow =
              float(${effectiveXSize[0]}) *
                (float(dyR) / float(${effectiveYSize[0]}));

            float sourceFracCol =
                float(${effectiveXSize[1]}) *
                  (float(dyC) / float(${effectiveYSize[1]}));

            int sourceNearestRow = int(min(
                float(int(${xHeight}) - 1),
                ${alignCorners} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${xWidth}) - 1),
                ${alignCorners} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }

}

exports.ResizeNearestNeigborBackpropProgram = ResizeNearestNeigborBackpropProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeNearestNeighborProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeNearestNeighborProgram {
  constructor(inputShape, newHeight, newWidth, alignCorners) {
    this.variableNames = ['A'];
    this.outputShape = [];
    const [batch, oldHeight, oldWidth, depth] = inputShape;
    this.outputShape = [batch, newHeight, newWidth, depth];
    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth]; // When align corners is false, we rounds the value with floor.

    const roundBase = alignCorners ? '0.5' : '0.0';
    this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));

        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }

}

exports.ResizeNearestNeighborProgram = ResizeNearestNeighborProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReverseProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReverseProgram {
  constructor(xShape, axis) {
    this.variableNames = ['x'];
    const rank = xShape.length;

    if (rank > 4) {
      throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);
    }

    this.outputShape = xShape;

    if (rank === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${xShape[0]} - coord - 1));
        }
      `;
      return;
    }

    const getInCoord = i => {
      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {
        return `${xShape[i]} - coords[${i}] - 1`;
      }

      return `coords[${i}]`;
    };

    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');
    const type = (0, _shader_compiler.getCoordsDataType)(rank);
    this.userCode = `
      void main() {
        ${type} coords = getOutputCoords();
        setOutput(getX(${inCoords}));
      }
    `;
  }

}

exports.ReverseProgram = ReverseProgram;
},{"./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReversePackedProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReversePackedProgram {
  constructor(xShape, axis) {
    this.variableNames = ['x'];
    this.packedInputs = true;
    this.packedOutput = true;
    const rank = xShape.length;

    if (rank > 4) {
      throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);
    }

    this.outputShape = xShape;
    const channels = (0, _packing_util.getChannels)('rc', rank);
    const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;
    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;
    const type = (0, _shader_compiler.getCoordsDataType)(rank);

    if (rank === 1) {
      this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${xShape[0]} - rc - 1),
            ${xShape[0]} - rc - 1);
          if(${nextColumn}){
              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),
                ${xShape[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `;
    } else {
      this.userCode = `
        void main() {
          ${type} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${getR(channels.slice())};
          if(${nextColumn}){
            result.g = ${getG(channels.slice())};
          }
          if(${nextRow}) {
            result.b = ${getB(channels.slice())};
            if(${nextColumn}) {
              result.a = ${getA(channels.slice())};
            }
          }
          setOutput(result);
        }
    `;
    }

    function getR(channels) {
      return getChannel(channels);
    }

    function getG(channels) {
      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;
      return getChannel(channels);
    }

    function getB(channels) {
      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;
      return getChannel(channels);
    }

    function getA(channels) {
      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;
      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;
      return getChannel(channels);
    }

    function getChannel(channels) {
      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));
      const inCoords = inCoordsArray.join(',');
      const innerDims = inCoordsArray.slice(-2).join(',');
      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;
    }

    function getInCoord(i, channels1) {
      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {
        return `${xShape[i]} - ${channels1[i]} - 1`;
      } else {
        return `${channels1[i]}`;
      }
    }
  }

}

exports.ReversePackedProgram = ReversePackedProgram;
},{"./packing_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js","./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScatterProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ScatterProgram {
  constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {
    this.variableNames = ['updates', 'indices', 'defaultValue'];
    this.outputShape = shape;
    const stridesType = (0, _shader_compiler.getCoordsDataType)(strides.length);
    const dtype = (0, _shader_compiler.getCoordsDataType)(shape.length);
    let indicesString = '';

    if (indicesRank === 1) {
      indicesString = 'i';
    } else if (indicesRank === 2) {
      indicesString = 'i, j';
    }

    const indicesSnippet = `getIndices(${indicesString})`;
    let updatesString = '';

    if (updatesRank === 1) {
      updatesString = 'i';
    } else if (updatesRank === 2) {
      updatesString = 'i, coords[1]';
    }

    const updatesSnippet = `getUpdates(${updatesString})`;
    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';
    this.userCode = `
        ${stridesType} strides = ${stridesType}(${strides});

        void main() {
          ${dtype} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${updateSize}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${sliceDim}; j++) {
              int index = round(${indicesSnippet});
              flattenedIndex += index * ${strideString};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${updatesSnippet};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `;
  }

}

exports.ScatterProgram = ScatterProgram;
},{"./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SegmentOpProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SegmentOpProgram {
  constructor(segOpInfo, segOpType) {
    this.variableNames = ['x', 'segmentIds'];
    const windowSize = segOpInfo.windowSize;
    const batchSize = segOpInfo.batchSize;
    const inSize = segOpInfo.inSize;
    const numSegments = segOpInfo.numSegments;
    const outSize = numSegments * Math.ceil(inSize / windowSize);
    this.outputShape = [batchSize, outSize];
    const initializationValue = '0.0';
    const returnValue = `sumValue`;
    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
    const windowSizeVec4Remainder = windowSize % 4;
    const updateSnippet = `
        sumValue += dot(values, segFilter);
    `;
    let checkValueOutOfBounds = '';

    if (inSize % windowSize > 0) {
      checkValueOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return initializationValue;
        }
      `;
    }

    let checkSegmentIdOutOfBounds = '';

    if (inSize % windowSize > 0) {
      checkSegmentIdOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return -1.0;
        }
      `;
    }

    this.userCode = `
      const float initializationValue = ${initializationValue};

      float getValue(int batch, int inIdx) {
        ${checkValueOutOfBounds}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${checkSegmentIdOutOfBounds}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${numSegments})) * float(${windowSize}));
        int currentSeg = int(mod(float(outIdx), float(${numSegments})));

        float sumValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${updateSnippet}
        }
        setOutput(${returnValue});
      }
    `;
  }

}

exports.SegmentOpProgram = SegmentOpProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SelectProgram {
  constructor(cRank, shape, rank) {
    this.variableNames = ['c', 'a', 'b'];
    this.outputShape = shape;
    let cCoords;
    let abCoords;

    if (rank > 4) {
      throw Error(`Where for rank ${rank} is not yet supported`);
    }

    if (rank === 1) {
      abCoords = `resRC`;
      cCoords = `resRC`;
    } else {
      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
      const cCoordVars = [];
      const abCoordVars = [];

      for (let i = 0; i < shape.length; i++) {
        abCoordVars.push(`${currentCoords[i]}`);

        if (i < cRank) {
          cCoordVars.push(`${currentCoords[i]}`);
        }
      }

      cCoords = cCoordVars.join();
      abCoords = abCoordVars.join();
    }

    const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
    this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        float cVal = getC(${cCoords});
        if (cVal >= 1.0) {
          setOutput(getA(${abCoords}));
        } else {
          setOutput(getB(${abCoords}));
        }
      }
    `;
  }

}

exports.SelectProgram = SelectProgram;
},{"./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SliceProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SliceProgram {
  constructor(destSize) {
    this.variableNames = ['source'];
    this.outputShape = destSize;
    this.rank = destSize.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
    const uniformPart = `uniform int start[${this.rank}];`;
    const sourceCoords = getCoords(this.rank);
    let body;
    const coordSum = destSize.map((_, i) => {
      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;
    });
    body = `
        ${dtype} sourceLoc;
        ${dtype} coords = getOutputCoords();
        ${coordSum.join('\n')}
      `;
    this.userCode = `
      ${uniformPart}
      void main() {
        ${body}
        setOutput(getSource(${sourceCoords}));
      }
    `;
  }

  getCustomSetupFunc(start) {
    if (start.length !== this.rank) {
      throw Error(`The rank (${this.rank}) of the program must match the ` + `length of start (${start.length})`);
    }

    return (gpgpu, webGLProgram) => {
      if (this.startLoc == null) {
        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');

        if (this.startLoc == null) {
          // This means the compiler has optimized and realized it doesn't need
          // the uniform.
          return;
        }
      }

      gpgpu.gl.uniform1iv(this.startLoc, start);
    };
  }

}

exports.SliceProgram = SliceProgram;
const coords = ['x', 'y', 'z', 'w', 'u', 'v'];

function getCoords(rank) {
  if (rank === 1) {
    return 'sourceLoc';
  } else if (rank <= 6) {
    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');
  } else {
    throw Error(`Slicing for rank ${rank} is not yet supported`);
  }
}
},{"./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SlicePackedProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SlicePackedProgram {
  constructor(destSize) {
    this.variableNames = ['source'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = destSize;
    this.rank = destSize.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
    const coords = (0, _packing_util.getChannels)('coords', this.rank);
    const sourceLoc = (0, _packing_util.getChannels)('sourceLoc', this.rank);
    const innerDims = this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;
    const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;
    const upperRow = `
      result.x = ${getChannel};
      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {
        ++${sourceLoc[this.rank - 1]};
        result.y = ${getChannel};
        --${sourceLoc[this.rank - 1]};
      }
    `;
    const lowerRow = this.rank === 1 ? '' : `
      --${coords[this.rank - 1]};
      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {
        ++${sourceLoc[this.rank - 2]};
        result.z = ${getChannel};
        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {
          ++${sourceLoc[this.rank - 1]};
          result.w = ${getChannel};
        }
      }
    `;
    const sourceLocSetup = this.rank <= 4 ? `sourceLoc = coords +
            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` : destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`).join('\n');
    this.userCode = `
      uniform int start[${this.rank}];
      void main() {
        ${dtype} coords = getOutputCoords();
        ${dtype} sourceLoc;
        ${sourceLocSetup}
        vec4 result = vec4(0.);
        ${upperRow}
        ${lowerRow}
        setOutput(result);
      }
    `;
  }

  getCustomSetupFunc(start) {
    if (start.length !== this.rank) {
      throw Error(`The rank (${this.rank}) of the program must match the ` + `length of start (${start.length})`);
    }

    return (gpgpu, webGLProgram) => {
      if (this.startLoc == null) {
        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');

        if (this.startLoc == null) {
          // This means the compiler has optimized and realized it doesn't need
          // the uniform.
          return;
        }
      }

      gpgpu.gl.uniform1iv(this.startLoc, start);
    };
  }

}

exports.SlicePackedProgram = SlicePackedProgram;
},{"./packing_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js","./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StridedSliceProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class StridedSliceProgram {
  constructor(begin, strides, size) {
    this.variableNames = ['x'];
    this.outputShape = size;
    const rank = size.length;
    const inputDtype = (0, _shader_compiler.getCoordsDataType)(size.length);
    const dtype = (0, _shader_compiler.getCoordsDataType)(size.length);
    let newCoords = '';

    if (rank === 1) {
      newCoords = 'coords * strides + begin';
    } else {
      let outputAxis = 0;
      newCoords = size.map((_, i) => {
        outputAxis++;
        return size.length === 1 ? `coords * strides[${i}] + begin[${i}]` : `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;
      }).join(',');
    }

    this.userCode = `
      ${inputDtype} begin = ${inputDtype}(${begin});
      ${inputDtype} strides = ${inputDtype}(${strides});

      void main() {
        ${dtype} coords = getOutputCoords();
        setOutput(getX(${newCoords}));
      }
    `;
  }

}

exports.StridedSliceProgram = StridedSliceProgram;
},{"./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeBytes = computeBytes;
exports.TextureManager = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _gpgpu_util = require("./gpgpu_util");

var _tex_util = require("./tex_util");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TextureManager {
  constructor(gpgpu) {
    this.gpgpu = gpgpu;
    this.numUsedTextures = 0;
    this.numFreeTextures = 0;
    this._numBytesAllocated = 0;
    this._numBytesFree = 0; // How many bytes that have been allocated
    // are available for reuse.

    this.freeTextures = {};
    this.logEnabled = false;
    this.usedTextures = {};
  }

  acquireTexture(shapeRC, usage, isPacked) {
    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);
    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);

    if (!(shapeKey in this.freeTextures)) {
      this.freeTextures[shapeKey] = [];
    }

    if (!(shapeKey in this.usedTextures)) {
      this.usedTextures[shapeKey] = [];
    }

    const texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);

    if (this.freeTextures[shapeKey].length > 0) {
      this.numFreeTextures--;
      this.numUsedTextures++;
      this._numBytesFree -= texBytes;
      this.log();
      const newTexture = this.freeTextures[shapeKey].shift();
      this.usedTextures[shapeKey].push(newTexture);
      return newTexture;
    }

    let newTexture;

    if (physicalTexType === _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT32) {
      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);
    } else if (physicalTexType === _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT16) {
      newTexture = this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);
    } else if (physicalTexType === _tex_util.PhysicalTextureType.UNPACKED_FLOAT32) {
      newTexture = this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);
    } else if (physicalTexType === _tex_util.PhysicalTextureType.UNPACKED_FLOAT16) {
      newTexture = this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);
    } else if (physicalTexType === _tex_util.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {
      newTexture = this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);
    }

    this.usedTextures[shapeKey].push(newTexture);
    this.numUsedTextures++;
    this._numBytesAllocated += texBytes;
    this.log();
    return newTexture;
  }

  releaseTexture(texture, shape, logicalTexType, isPacked) {
    if (this.freeTextures == null) {
      // Already disposed.
      return;
    }

    const physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);
    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);

    if (!(shapeKey in this.freeTextures)) {
      this.freeTextures[shapeKey] = [];
    }

    const texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);
    const deleteTexThreshold = (0, _tfjsCore.env)().get('WEBGL_DELETE_TEXTURE_THRESHOLD');

    if (deleteTexThreshold !== -1 && this._numBytesAllocated > deleteTexThreshold) {
      this.gpgpu.deleteMatrixTexture(texture);
      this._numBytesAllocated -= texBytes;
    } else {
      this.freeTextures[shapeKey].push(texture);
      this.numFreeTextures++;
      this._numBytesFree += texBytes;
    }

    this.numUsedTextures--;
    const texList = this.usedTextures[shapeKey];
    const texIndex = texList.indexOf(texture);

    if (texIndex < 0) {
      throw new Error('Cannot release a texture that was never provided by this ' + 'texture manager');
    }

    texList.splice(texIndex, 1);
    this.log();
  }

  log() {
    if (!this.logEnabled) {
      return;
    }

    const total = this.numFreeTextures + this.numUsedTextures;
    console.log('Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${total})`);
    const freeRatio = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`);
    console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * freeRatio)}%)`);
  }

  get numBytesAllocated() {
    return this._numBytesAllocated;
  }

  get numBytesFree() {
    return this._numBytesFree;
  }

  getNumUsedTextures() {
    return this.numUsedTextures;
  }

  getNumFreeTextures() {
    return this.numFreeTextures;
  }

  dispose() {
    if (this.freeTextures == null) {
      // Already disposed.
      return;
    }

    for (const texShape in this.freeTextures) {
      this.freeTextures[texShape].forEach(tex => {
        this.gpgpu.deleteMatrixTexture(tex);
      });
    }

    for (const texShape in this.usedTextures) {
      this.usedTextures[texShape].forEach(tex => {
        this.gpgpu.deleteMatrixTexture(tex);
      });
    }

    this.freeTextures = null;
    this.usedTextures = null;
    this.numUsedTextures = 0;
    this.numFreeTextures = 0;
    this._numBytesAllocated = 0;
    this._numBytesFree = 0;
  }

}

exports.TextureManager = TextureManager;

function numBytesForInternalFormat(gl, internalFormat) {
  // tslint:disable-next-line:no-any
  const glany = gl;

  if (internalFormat === glany.R32F) {
    return 4;
  } else if (internalFormat === glany.R16F) {
    return 2;
  } else if (internalFormat === glany.RGBA32F) {
    return 16;
  } else if (internalFormat === gl.RGBA) {
    return 16;
  } else if (internalFormat === glany.RGBA16F) {
    return 8;
  }

  throw new Error(`Unknown internal format ${internalFormat}`);
}

function computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {
  // It is not possible to infer packed status from the texture type because
  // depending on the textureConfig, different  texture types may resolve to the
  // same internal format (e.g. in WebGL1, the internal format for
  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`
  // explicitly.
  const internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);
  let numElements;

  if (isPacked) {
    const [packedWidth, packedHeight] = (0, _tex_util.getPackedMatrixTextureShapeWidthHeight)(shape[0], shape[1]);
    numElements = packedWidth * packedHeight;
  } else {
    const [width, height] = (0, _tex_util.getUnpackedMatrixTextureShapeWidthHeight)(shape[0], shape[1]);
    numElements = width * height;
  }

  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);
  return numElements * bytesPerElement;
}

function internalFormatForPhysicalTexType(physicalTexType, textureConfig) {
  switch (physicalTexType) {
    case _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT32:
      return (0, _gpgpu_util.getInternalFormatForPackedMatrixTexture)(textureConfig);

    case _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT16:
      return (0, _gpgpu_util.getInternalFormatForFloat16PackedMatrixTexture)(textureConfig);

    case _tex_util.PhysicalTextureType.UNPACKED_FLOAT32:
      return (0, _gpgpu_util.getInternalFormatForFloat32MatrixTexture)(textureConfig);

    case _tex_util.PhysicalTextureType.UNPACKED_FLOAT16:
      return (0, _gpgpu_util.getInternalFormatForFloat16MatrixTexture)(textureConfig);

    case _tex_util.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:
      return (0, _gpgpu_util.getInternalFormatForUnsignedBytesMatrixTexture)(textureConfig);

    default:
      throw new Error(`Unknown physical texture type ${physicalTexType}`);
  }
}

function getPhysicalTextureForRendering(isPacked) {
  if ((0, _tfjsCore.env)().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {
    if (isPacked) {
      return _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT32;
    }

    return _tex_util.PhysicalTextureType.UNPACKED_FLOAT32;
  }

  if (isPacked) {
    return _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT16;
  }

  return _tex_util.PhysicalTextureType.UNPACKED_FLOAT16;
}

function getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {
  if (logicalTexType === _tex_util.TextureUsage.UPLOAD) {
    return _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT32;
  } else if (logicalTexType === _tex_util.TextureUsage.RENDER || logicalTexType == null) {
    return getPhysicalTextureForRendering(isPacked);
  } else if (logicalTexType === _tex_util.TextureUsage.DOWNLOAD || logicalTexType === _tex_util.TextureUsage.PIXELS) {
    return _tex_util.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;
  }

  throw new Error(`Unknown logical texture type ${logicalTexType}`);
}

function getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {
  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./gpgpu_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js","./tex_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TileProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TileProgram {
  constructor(aShape, reps) {
    this.variableNames = ['A'];
    const outputShape = new Array(aShape.length);

    for (let i = 0; i < outputShape.length; i++) {
      outputShape[i] = aShape[i] * reps[i];
    }

    this.outputShape = outputShape;
    this.rank = outputShape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
    const sourceCoords = getSourceCoords(aShape);
    this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        setOutput(getA(${sourceCoords}));
      }
    `;
  }

}

exports.TileProgram = TileProgram;

function getSourceCoords(aShape) {
  const rank = aShape.length;

  if (rank > 5) {
    throw Error(`Tile for rank ${rank} is not yet supported`);
  }

  if (rank === 1) {
    return `imod(resRC, ${aShape[0]})`;
  }

  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];
  const sourceCoords = [];

  for (let i = 0; i < aShape.length; i++) {
    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);
  }

  return sourceCoords.join();
}
},{"./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STEP = STEP;
exports.CLONE = exports.TO_INT = exports.LOGICAL_NOT = exports.RECIPROCAL = exports.SQUARE = exports.ERF = exports.ATANH = exports.ACOSH = exports.ASINH = exports.TANH = exports.COSH = exports.SINH = exports.ATAN = exports.ACOS = exports.ASIN = exports.TAN = exports.COS = exports.SIN = exports.SOFTPLUS = exports.SIGMOID = exports.RSQRT = exports.SQRT = exports.LOG1P = exports.LOG = exports.EXPM1 = exports.EXP = exports.ROUND = exports.IS_FINITE = exports.IS_INF = exports.IS_NAN = exports.SIGN = exports.FLOOR = exports.CEIL = exports.NEG = exports.SELU = exports.ELU = exports.RELU6 = exports.RELU = exports.ABS = exports.LINEAR = exports.UnaryOpProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class UnaryOpProgram {
  constructor(aShape, opSnippet) {
    this.variableNames = ['A'];
    this.outputShape = aShape;
    this.userCode = `
      float unaryOperation(float x) {
        ${opSnippet}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }

}

exports.UnaryOpProgram = UnaryOpProgram;
const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;
const LINEAR = `return x;`;
exports.LINEAR = LINEAR;
const ABS = `return abs(x);`;
exports.ABS = ABS;
const RELU = CHECK_NAN_SNIPPET + `
  return (x < 0.0) ? 0.0 : x;
`;
exports.RELU = RELU;
const RELU6 = CHECK_NAN_SNIPPET + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
exports.RELU6 = RELU6;
const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;
exports.ELU = ELU;
const SELU = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${_tfjsCore.backend_util.SELU_SCALEALPHA};
  float scale = ${_tfjsCore.backend_util.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`;
exports.SELU = SELU;

function STEP(alpha = 0.0) {
  return CHECK_NAN_SNIPPET + `
    return x > 0.0 ? 1.0 : float(${alpha});
  `;
}

const NEG = `return -x;`;
exports.NEG = NEG;
const CEIL = `return ceil(x);`;
exports.CEIL = CEIL;
const FLOOR = `return floor(x);`;
exports.FLOOR = FLOOR;
const SIGN = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`;
exports.SIGN = SIGN;
const IS_NAN = `return float(isnan(x));`;
exports.IS_NAN = IS_NAN;
const IS_INF = `return float(isinf(x));`;
exports.IS_INF = IS_INF;
const IS_FINITE = `return float(!isnan(x) && !isinf(x));`;
exports.IS_FINITE = IS_FINITE;
const ROUND = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`;
exports.ROUND = ROUND;
const EXP = `return exp(x);`;
exports.EXP = EXP;
const EXPM1 = `return exp(x) - 1.0;`;
exports.EXPM1 = EXPM1;
const LOG = `if (x < 0.0) return NAN;
  return log(x);`;
exports.LOG = LOG;
const LOG1P = `return log(1.0 + x);`;
exports.LOG1P = LOG1P;
const SQRT = `return sqrt(x);`;
exports.SQRT = SQRT;
const RSQRT = `return inversesqrt(x);`;
exports.RSQRT = RSQRT;
const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;
/**
 * mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX
 *
 * epsilon is the difference between 1.0 and the next representable
 * float. For a single precision 32 bit float this should be 2^-23, see:
 * https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm
 *
 * too_large = (x > -threshold) is value above which exp(x) may overflow
 * but softplus(x) == x is within machine epsilon
 *
 * too_small = (x < threshold) is value below which exp(x) may underflow,
 * but softplus(x) == exp(x) is within machine epsilon.
 */

exports.SIGMOID = SIGMOID;
const SOFTPLUS = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`;
exports.SOFTPLUS = SOFTPLUS;
const SIN = CHECK_NAN_SNIPPET + `
  return sin(x);
`;
exports.SIN = SIN;
const COS = CHECK_NAN_SNIPPET + `
  return cos(x);
`;
exports.COS = COS;
const TAN = `return tan(x);`;
exports.TAN = TAN;
const ASIN = CHECK_NAN_SNIPPET + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`;
exports.ASIN = ASIN;
const ACOS = CHECK_NAN_SNIPPET + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`;
exports.ACOS = ACOS;
const ATAN = CHECK_NAN_SNIPPET + `
  return atan(x);
`;
exports.ATAN = ATAN;
const SINH = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`;
exports.SINH = SINH;
const COSH = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`;
exports.COSH = COSH;
const TANH = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`;
exports.TANH = TANH;
const ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;
exports.ASINH = ASINH;
const ACOSH = CHECK_NAN_SNIPPET + `
  if (x < 1.0) return NAN;
  return log(x + sqrt(x * x - 1.0));`;
exports.ACOSH = ACOSH;
const ATANH = CHECK_NAN_SNIPPET + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
  return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;
exports.ATANH = ATANH;
const ERF = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${_tfjsCore.backend_util.ERF_P};
  float a1 = ${_tfjsCore.backend_util.ERF_A1};
  float a2 = ${_tfjsCore.backend_util.ERF_A2};
  float a3 = ${_tfjsCore.backend_util.ERF_A3};
  float a4 = ${_tfjsCore.backend_util.ERF_A4};
  float a5 = ${_tfjsCore.backend_util.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`;
exports.ERF = ERF;
const SQUARE = `return x * x;`;
exports.SQUARE = SQUARE;
const RECIPROCAL = `return 1.0 / x;`;
exports.RECIPROCAL = RECIPROCAL;
const LOGICAL_NOT = `return float(!(x >= 1.0));`;
exports.LOGICAL_NOT = LOGICAL_NOT;
const TO_INT = `return float(int(x));`;
exports.TO_INT = TO_INT;
const CLONE = 'return x;';
exports.CLONE = CLONE;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnaryOpPackedProgram = exports.ELU = exports.RELU6 = exports.RELU = exports.LOG = exports.LINEAR = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LINEAR = `return x;`;
exports.LINEAR = LINEAR;
const LOG = `
  vec4 result = log(x);
  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));
  result.r = isNaN.r == 1.0 ? NAN : result.r;
  result.g = isNaN.g == 1.0 ? NAN : result.g;
  result.b = isNaN.b == 1.0 ? NAN : result.b;
  result.a = isNaN.a == 1.0 ? NAN : result.a;

  return result;
`;
exports.LOG = LOG;
const RELU = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
exports.RELU = RELU;
const RELU6 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
exports.RELU6 = RELU6;
const ELU = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
exports.ELU = ELU;

class UnaryOpPackedProgram {
  constructor(aShape, opSnippet) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = aShape;
    this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${opSnippet}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }

}

exports.UnaryOpPackedProgram = UnaryOpPackedProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnpackProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class UnpackProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = false;
    this.outputShape = outputShape;
    const rank = outputShape.length;
    const channels = (0, _packing_util.getChannels)('rc', rank);
    const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
    const sourceCoords = (0, _packing_util.getSourceCoords)(rank, channels);
    const innerDims = channels.slice(-2);
    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;
    this.userCode = `
      void main() {
        ${dtype} rc = getOutputCoords();
        vec4 packedInput = getA(${sourceCoords});

        setOutput(getChannel(packedInput, ${coords}));
      }
    `;
  }

}

exports.UnpackProgram = UnpackProgram;
},{"./packing_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js","./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBinaryCache = getBinaryCache;
exports.MathBackendWebGL = exports.MATMUL_SHARED_DIM_THRESHOLD = exports.EPSILON_FLOAT16 = exports.EPSILON_FLOAT32 = void 0;

require("./flags_webgl");

var tf = _interopRequireWildcard(require("@tensorflow/tfjs-core"));

var _addn_gpu = require("./addn_gpu");

var _addn_packed_gpu = require("./addn_packed_gpu");

var _argminmax_gpu = require("./argminmax_gpu");

var _argminmax_packed_gpu = require("./argminmax_packed_gpu");

var _avg_pool_backprop_gpu = require("./avg_pool_backprop_gpu");

var _batchnorm_gpu = require("./batchnorm_gpu");

var _batchnorm_packed_gpu = require("./batchnorm_packed_gpu");

var binaryop_complex_gpu = _interopRequireWildcard(require("./binaryop_complex_gpu"));

var binaryop_gpu = _interopRequireWildcard(require("./binaryop_gpu"));

var binaryop_packed_gpu = _interopRequireWildcard(require("./binaryop_packed_gpu"));

var _canvas_util = require("./canvas_util");

var _clip_gpu = require("./clip_gpu");

var _clip_packed_gpu = require("./clip_packed_gpu");

var _complex_abs_gpu = require("./complex_abs_gpu");

var _concat_gpu = require("./concat_gpu");

var _concat_packed_gpu = require("./concat_packed_gpu");

var _conv_backprop_gpu = require("./conv_backprop_gpu");

var _conv_backprop_gpu_depthwise = require("./conv_backprop_gpu_depthwise");

var _conv_gpu = require("./conv_gpu");

var _conv_gpu_depthwise = require("./conv_gpu_depthwise");

var _conv_packed_gpu_depthwise = require("./conv_packed_gpu_depthwise");

var _crop_and_resize_gpu = require("./crop_and_resize_gpu");

var _cumsum_gpu = require("./cumsum_gpu");

var _decode_matrix_gpu = require("./decode_matrix_gpu");

var _decode_matrix_packed_gpu = require("./decode_matrix_packed_gpu");

var _depth_to_space_gpu = require("./depth_to_space_gpu");

var _diag_gpu = require("./diag_gpu");

var _encode_float_gpu = require("./encode_float_gpu");

var _encode_float_packed_gpu = require("./encode_float_packed_gpu");

var _encode_matrix_gpu = require("./encode_matrix_gpu");

var _encode_matrix_packed_gpu = require("./encode_matrix_packed_gpu");

var fft_gpu = _interopRequireWildcard(require("./fft_gpu"));

var _fill_gpu = require("./fill_gpu");

var _gather_gpu = require("./gather_gpu");

var _gather_nd_gpu = require("./gather_nd_gpu");

var _gpgpu_context = require("./gpgpu_context");

var gpgpu_math = _interopRequireWildcard(require("./gpgpu_math"));

var _im2col_packed_gpu = require("./im2col_packed_gpu");

var _lrn_gpu = require("./lrn_gpu");

var _lrn_grad_gpu = require("./lrn_grad_gpu");

var _lrn_packed_gpu = require("./lrn_packed_gpu");

var _max_pool_backprop_gpu = require("./max_pool_backprop_gpu");

var _mulmat_packed_gpu = require("./mulmat_packed_gpu");

var _multinomial_gpu = require("./multinomial_gpu");

var _onehot_gpu = require("./onehot_gpu");

var _pack_gpu = require("./pack_gpu");

var _pad_gpu = require("./pad_gpu");

var _pad_packed_gpu = require("./pad_packed_gpu");

var _pool_gpu = require("./pool_gpu");

var _reduce_gpu = require("./reduce_gpu");

var _reshape_packed_gpu = require("./reshape_packed_gpu");

var _resize_bilinear_backprop_gpu = require("./resize_bilinear_backprop_gpu");

var _resize_bilinear_gpu = require("./resize_bilinear_gpu");

var _resize_bilinear_packed_gpu = require("./resize_bilinear_packed_gpu");

var _resize_nearest_neighbor_backprop_gpu = require("./resize_nearest_neighbor_backprop_gpu");

var _resize_nearest_neighbor_gpu = require("./resize_nearest_neighbor_gpu");

var _reverse_gpu = require("./reverse_gpu");

var _reverse_packed_gpu = require("./reverse_packed_gpu");

var _scatter_gpu = require("./scatter_gpu");

var _segment_gpu = require("./segment_gpu");

var _select_gpu = require("./select_gpu");

var _slice_gpu = require("./slice_gpu");

var _slice_packed_gpu = require("./slice_packed_gpu");

var _strided_slice_gpu = require("./strided_slice_gpu");

var tex_util = _interopRequireWildcard(require("./tex_util"));

var _texture_manager = require("./texture_manager");

var _tile_gpu = require("./tile_gpu");

var unary_op = _interopRequireWildcard(require("./unaryop_gpu"));

var unary_packed_op = _interopRequireWildcard(require("./unaryop_packed_gpu"));

var _unpack_gpu = require("./unpack_gpu");

var webgl_util = _interopRequireWildcard(require("./webgl_util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Import webgl flags.
const {
  segment_util
} = tf.backend_util;
const split = tf.kernel_impls.split;
const tile = tf.kernel_impls.tile;
const topkImpl = tf.kernel_impls.topkImpl;
const whereImpl = tf.kernel_impls.whereImpl;
const EPSILON_FLOAT32 = 1e-7;
exports.EPSILON_FLOAT32 = EPSILON_FLOAT32;
const EPSILON_FLOAT16 = 1e-4;
exports.EPSILON_FLOAT16 = EPSILON_FLOAT16;
const binaryCaches = {};

function getBinaryCache(webGLVersion) {
  if (webGLVersion in binaryCaches) {
    return binaryCaches[webGLVersion];
  }

  binaryCaches[webGLVersion] = {};
  return binaryCaches[webGLVersion];
}

function mapActivationToShaderProgram(activation, packed = false) {
  if (activation === 'linear') {
    if (packed) {
      return unary_packed_op.LINEAR;
    }

    return unary_op.LINEAR;
  } else if (activation === 'relu') {
    if (packed) {
      return unary_packed_op.RELU;
    }

    return unary_op.RELU;
  } else if (activation === 'elu') {
    if (packed) {
      return unary_packed_op.ELU;
    }

    return unary_op.ELU;
  } else if (activation === 'relu6') {
    if (packed) {
      return unary_packed_op.RELU6;
    }

    return unary_op.RELU6;
  } else if (activation === 'prelu') {
    if (packed) {
      return binaryop_packed_gpu.PRELU;
    }

    return binaryop_gpu.PRELU;
  }

  throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);
} // Empirically determined constant used to determine size threshold for handing
// off execution to the CPU.


const CPU_HANDOFF_SIZE_THRESHOLD = 128; // Empirically determined constant used to decide the number of MB on GPU
// before we warn about high memory use. The MB are this constant * screen area
// * dpi / 1024 / 1024.

const BEFORE_PAGING_CONSTANT = 600;

function numMBBeforeWarning() {
  if ((0, tf.env)().global.screen == null) {
    return 1024; // 1 GB.
  }

  return (0, tf.env)().global.screen.height * (0, tf.env)().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;
} // Empirically determined minimal shared dimension in matmul before we forward
// to a.mul(b).sum() in order to take advantage of GPU parallelism. See
// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.


const MATMUL_SHARED_DIM_THRESHOLD = 1000;
exports.MATMUL_SHARED_DIM_THRESHOLD = MATMUL_SHARED_DIM_THRESHOLD;

class MathBackendWebGL extends tf.KernelBackend {
  constructor(gpgpu) {
    super(); // Maps data ids that have a pending read operation, to list of subscribers.

    this.pendingRead = new WeakMap(); // List of data ids that are scheduled for disposal, but are waiting on a
    // pending read operation.

    this.pendingDisposal = new WeakSet(); // Used to count the number of 'shallow' sliced tensors that point to the
    // same data id.

    this.dataRefCount = new WeakMap();
    this.numBytesInGPU = 0; // Accumulated time spent (including blocking) in uploading data to webgl.

    this.uploadWaitMs = 0; // Accumulated time spent (including blocking in downloading data from webgl.

    this.downloadWaitMs = 0;
    this.warnedAboutMemory = false;
    this.warnedAboutCPUBackend = false;
    this.pendingDeletes = 0;
    this.disposed = false;

    if (!(0, tf.env)().getBool('HAS_WEBGL')) {
      throw new Error('WebGL is not supported on this device');
    }

    if (gpgpu == null) {
      const gl = (0, _canvas_util.getWebGLContext)((0, tf.env)().getNumber('WEBGL_VERSION'));
      this.binaryCache = getBinaryCache((0, tf.env)().getNumber('WEBGL_VERSION'));
      this.gpgpu = new _gpgpu_context.GPGPUContext(gl);
      this.canvas = gl.canvas;
      this.gpgpuCreatedLocally = true;
    } else {
      this.gpgpu = gpgpu;
      this.binaryCache = {};
      this.gpgpuCreatedLocally = false;
      this.canvas = gpgpu.gl.canvas;
    }

    this.textureManager = new _texture_manager.TextureManager(this.gpgpu);
    this.numMBBeforeWarning = numMBBeforeWarning();
    this.texData = new tf.DataStorage(this, (0, tf.engine)());
  }

  numDataIds() {
    return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;
  }

  write(values, shape, dtype) {
    if ((0, tf.env)().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || (0, tf.env)().getBool('DEBUG')) {
      this.checkNumericalProblems(values);
    }

    if (dtype === 'complex64' && values != null) {
      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);
    }

    const dataId = {};
    this.texData.set(dataId, {
      shape,
      dtype,
      values,
      usage: tex_util.TextureUsage.UPLOAD
    });
    return dataId;
  }

  move(dataId, values, shape, dtype) {
    if ((0, tf.env)().getBool('DEBUG')) {
      this.checkNumericalProblems(values);
    }

    if (dtype === 'complex64') {
      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);
    }

    this.texData.set(dataId, {
      shape,
      dtype,
      values,
      usage: tex_util.TextureUsage.UPLOAD
    });
  }

  readSync(dataId) {
    const texData = this.texData.get(dataId);
    const {
      values,
      dtype,
      complexTensors,
      slice,
      shape,
      isPacked
    } = texData;

    if (slice != null) {
      let program;

      if (isPacked) {
        program = new unary_packed_op.UnaryOpPackedProgram(shape, unary_op.CLONE);
      } else {
        program = new unary_op.UnaryOpProgram(shape, unary_op.CLONE);
      }

      const res = this.runWebGLProgram(program, [{
        dataId,
        shape,
        dtype
      }], dtype);
      const data = this.readSync(res.dataId);
      this.disposeData(res.dataId);
      return data;
    }

    if (values != null) {
      return this.convertAndCacheOnCPU(dataId);
    }

    if (dtype === 'string') {
      return values;
    }

    const shouldTimeProgram = this.activeTimers != null;
    let start;

    if (shouldTimeProgram) {
      start = tf.util.now();
    }

    let result;

    if (dtype === 'complex64') {
      const realValues = complexTensors.real.dataSync();
      const imagValues = complexTensors.imag.dataSync();
      result = tf.backend_util.mergeRealAndImagArrays(realValues, imagValues);
    } else {
      result = this.getValuesFromTexture(dataId);
    }

    if (shouldTimeProgram) {
      this.downloadWaitMs += tf.util.now() - start;
    }

    return this.convertAndCacheOnCPU(dataId, result);
  }

  async read(dataId) {
    if (this.pendingRead.has(dataId)) {
      const subscribers = this.pendingRead.get(dataId);
      return new Promise(resolve => subscribers.push(resolve));
    }

    const texData = this.texData.get(dataId);
    const {
      values,
      shape,
      slice,
      dtype,
      complexTensors,
      isPacked
    } = texData;

    if (slice != null) {
      let program;

      if (isPacked) {
        program = new unary_packed_op.UnaryOpPackedProgram(shape, unary_op.CLONE);
      } else {
        program = new unary_op.UnaryOpProgram(shape, unary_op.CLONE);
      }

      const res = this.runWebGLProgram(program, [{
        dataId,
        shape,
        dtype
      }], dtype);
      const data = this.read(res.dataId);
      this.disposeData(res.dataId);
      return data;
    }

    if (values != null) {
      return this.convertAndCacheOnCPU(dataId);
    }

    if (!(0, tf.env)().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && (0, tf.env)().getNumber('WEBGL_VERSION') === 2) {
      throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);
    }

    let buffer = null;
    let tmpDownloadTarget;

    if (dtype !== 'complex64' && (0, tf.env)().get('WEBGL_BUFFER_SUPPORTED')) {
      // Possibly copy the texture into a buffer before inserting a fence.
      tmpDownloadTarget = this.decode(dataId);
      const tmpData = this.texData.get(tmpDownloadTarget.dataId);
      buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));
    }

    this.pendingRead.set(dataId, []);

    if (dtype !== 'complex64') {
      // Create a fence and wait for it to resolve.
      await this.gpgpu.createAndWaitForFence();
    } // Download the values from the GPU.


    let vals;

    if (dtype === 'complex64') {
      const ps = await Promise.all([complexTensors.real.data(), complexTensors.imag.data()]);
      const realValues = ps[0];
      const imagValues = ps[1];
      vals = tf.backend_util.mergeRealAndImagArrays(realValues, imagValues);
    } else if (buffer == null) {
      vals = this.getValuesFromTexture(dataId);
    } else {
      const size = tf.util.sizeFromShape(shape);
      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);
    }

    if (tmpDownloadTarget != null) {
      this.disposeData(tmpDownloadTarget.dataId);
    }

    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);
    const subscribers = this.pendingRead.get(dataId);
    this.pendingRead.delete(dataId); // Notify all pending reads.

    subscribers.forEach(resolve => resolve(dTypeVals));

    if (this.pendingDisposal.has(dataId)) {
      this.pendingDisposal.delete(dataId);
      this.disposeData(dataId);
      this.pendingDeletes--;
    }

    return dTypeVals;
  }

  checkNumericalProblems(values) {
    if (values == null) {
      return;
    }

    for (let i = 0; i < values.length; i++) {
      const num = values[i];

      if (!webgl_util.canBeRepresented(num)) {
        if ((0, tf.env)().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {
          throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);
        }

        throw Error(`The value ${num} cannot be represented on this device.`);
      }
    }
  }

  getValuesFromTexture(dataId) {
    const {
      shape,
      dtype,
      isPacked
    } = this.texData.get(dataId);
    const size = tf.util.sizeFromShape(shape);

    if ((0, tf.env)().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {
      const tmpTarget = this.decode(dataId);
      const tmpData = this.texData.get(tmpTarget.dataId);
      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);
      this.disposeData(tmpTarget.dataId);
      return vals;
    }

    const shouldUsePackedProgram = (0, tf.env)().getBool('WEBGL_PACK') && isPacked === true;
    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;
    const program = shouldUsePackedProgram ? new _encode_float_packed_gpu.EncodeFloatPackedProgram(outputShape) : new _encode_float_gpu.EncodeFloatProgram(outputShape);
    const output = this.runWebGLProgram(program, [{
      shape: outputShape,
      dtype,
      dataId
    }], 'float32');
    const tmpData = this.texData.get(output.dataId);
    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);
    this.disposeData(output.dataId);
    return vals;
  }

  async time(f) {
    const oldActiveTimers = this.activeTimers;
    const newActiveTimers = [];
    let outerMostTime = false;

    if (this.programTimersStack == null) {
      this.programTimersStack = newActiveTimers;
      outerMostTime = true;
    } else {
      this.activeTimers.push(newActiveTimers);
    }

    this.activeTimers = newActiveTimers;
    f(); // needing to split these up because util.flatten only accepts certain types

    const flattenedActiveTimerQueries = tf.util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);
    const flattenedActiveTimerNames = tf.util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);
    this.activeTimers = oldActiveTimers;

    if (outerMostTime) {
      this.programTimersStack = null;
    }

    const res = {
      uploadWaitMs: this.uploadWaitMs,
      downloadWaitMs: this.downloadWaitMs,
      kernelMs: null,
      wallMs: null // will be filled by the engine

    };

    if ((0, tf.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
      const kernelMs = await Promise.all(flattenedActiveTimerQueries);
      res['kernelMs'] = tf.util.sum(kernelMs);

      res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({
        name: flattenedActiveTimerNames[i],
        ms: d
      })).map(d => `${d.name}: ${d.ms}`).join(', ');
    } else {
      res['kernelMs'] = {
        error: 'WebGL query timers are not supported in this environment.'
      };
    }

    this.uploadWaitMs = 0;
    this.downloadWaitMs = 0;
    return res;
  }

  memory() {
    return {
      unreliable: false,
      numBytesInGPU: this.numBytesInGPU,
      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
      numBytesInGPUFree: this.textureManager.numBytesFree
    };
  }

  startTimer() {
    if ((0, tf.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
      return this.gpgpu.beginQuery();
    }

    return {
      startMs: tf.util.now(),
      endMs: null
    };
  }

  endTimer(query) {
    if ((0, tf.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
      this.gpgpu.endQuery();
      return query;
    }

    query.endMs = tf.util.now();
    return query;
  }

  async getQueryTime(query) {
    if ((0, tf.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
      return this.gpgpu.waitForQueryAndGetTime(query);
    }

    const timerQuery = query;
    return timerQuery.endMs - timerQuery.startMs;
  }

  disposeData(dataId) {
    if (this.pendingDisposal.has(dataId)) {
      return;
    }

    if (this.pendingRead.has(dataId)) {
      this.pendingDisposal.add(dataId);
      this.pendingDeletes++;
      return;
    } // No-op if already disposed.


    if (!this.texData.has(dataId)) {
      return;
    }

    this.releaseGPUData(dataId);
    const {
      complexTensors
    } = this.texData.get(dataId);

    if (complexTensors != null) {
      complexTensors.real.dispose();
      complexTensors.imag.dispose();
    }

    this.texData.delete(dataId);
  }

  releaseGPUData(dataId) {
    const {
      texture,
      dtype,
      texShape,
      usage,
      isPacked,
      slice
    } = this.texData.get(dataId);
    const key = slice && slice.origDataId || dataId;
    const refCount = this.dataRefCount.get(key);

    if (refCount > 1) {
      this.dataRefCount.set(key, refCount - 1);
    } else {
      this.dataRefCount.delete(key);

      if (texture != null) {
        this.numBytesInGPU -= this.computeBytes(texShape, dtype);
        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);
      }
    }

    const texData = this.texData.get(dataId);
    texData.texture = null;
    texData.texShape = null;
    texData.isPacked = false;
    texData.slice = null;
  }

  getTexture(dataId) {
    this.uploadToGPU(dataId);
    return this.texData.get(dataId).texture;
  }
  /**
   * Returns internal information for the specific data bucket. Used in unit
   * tests.
   */


  getDataInfo(dataId) {
    return this.texData.get(dataId);
  }

  getCPUBackend() {
    if (!(0, tf.env)().getBool('WEBGL_CPU_FORWARD')) {
      return null;
    }

    if (this.cpuBackend == null) {
      this.cpuBackend = (0, tf.engine)().findBackend('cpu');
    }

    return this.cpuBackend;
  }
  /*
  Tests whether all the inputs to an op are small and on the CPU. This heuristic
  determines when it would be faster to execute a kernel on the CPU. WebGL
  kernels opt into running this check and forwarding when appropriate.
  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more
  sustainable strategy for optimizing backend execution of ops.
   */


  shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {
    const cpuBackend = this.getCPUBackend();

    if (!this.warnedAboutCPUBackend && cpuBackend == null && !(0, tf.env)().getBool('IS_TEST')) {
      console.warn('Your application contains ops that are small enough to be ' + 'executed on the CPU backend, however the CPU backend cannot ' + 'be found. Consider importing the CPU backend ' + '(@tensorflow/tfjs-backend-cpu) for better performance.');
      this.warnedAboutCPUBackend = true;
    }

    return cpuBackend != null && inputs.every(input => this.texData.get(input.dataId).texture == null && tf.util.sizeFromShape(input.shape) < sizeThreshold);
  }

  getGPGPUContext() {
    return this.gpgpu;
  }

  complex(real, imag) {
    const result = this.makeOutput(real.shape, 'complex64');
    const resultData = this.texData.get(result.dataId); // The backend owns the reference to the underlying real and imaginary
    // clones. These will explicitly get disposed when the complex tensor is
    // disposed.

    resultData.complexTensors = {
      real: (0, tf.engine)().keep(real.clone()),
      imag: (0, tf.engine)().keep(imag.clone())
    };
    return result;
  }

  real(input) {
    const resultData = this.texData.get(input.dataId);
    return resultData.complexTensors.real.clone();
  }

  imag(input) {
    const resultData = this.texData.get(input.dataId);
    return resultData.complexTensors.imag.clone();
  }

  slice(x, begin, size) {
    if (this.shouldExecuteOnCPU([x])) {
      return this.cpuBackend.slice(x, begin, size);
    } // Short-circuit computation if the slice is zero-sized.


    if (tf.util.sizeFromShape(size) === 0) {
      return (0, tf.tensor)([], size, x.dtype);
    }

    const {
      isPacked
    } = this.texData.get(x.dataId);
    const isContinous = tf.slice_util.isSliceContinous(x.shape, begin, size);

    if (isPacked || !isContinous) {
      const program = (0, tf.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _slice_packed_gpu.SlicePackedProgram(size) : new _slice_gpu.SliceProgram(size);
      const customSetup = program.getCustomSetupFunc(begin);
      return this.compileAndRun(program, [x], null, customSetup);
    }

    this.uploadToGPU(x.dataId);
    return this.shallowSlice(x, begin, size);
  }

  shallowSlice(x, begin, size) {
    const xTexData = this.texData.get(x.dataId);
    const t = this.makeOutput(size, x.dtype);
    const newTexData = this.texData.get(t.dataId); // Copy texture data from the original tensor.

    Object.assign(newTexData, xTexData);
    newTexData.shape = size;
    newTexData.dtype = x.dtype;
    let flatOffset = tf.slice_util.computeFlatOffset(begin, x.strides);

    if (xTexData.slice) {
      // We are slicing an already sliced tensor, so we have to accumulate
      // the offset.
      flatOffset += xTexData.slice.flatOffset;
    }

    newTexData.slice = {
      flatOffset,
      // Point to the original dataId, which is used to do ref counting.
      origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId
    }; // Increase the ref count for that data bucket.

    const refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;
    this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);
    return t;
  }

  stridedSlice(x, begin, end, strides) {
    if (this.shouldExecuteOnCPU([x])) {
      return this.cpuBackend.stridedSlice(x, begin, end, strides);
    }

    const outShape = tf.slice_util.computeOutShape(begin, end, strides);

    if (outShape.some(axis => axis === 0)) {
      return (0, tf.tensor)([], outShape);
    }

    const program = new _strided_slice_gpu.StridedSliceProgram(begin, strides, outShape);
    return this.compileAndRun(program, [x]);
  }

  reverse(x, axis) {
    const program = (0, tf.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _reverse_packed_gpu.ReversePackedProgram(x.shape, axis) : new _reverse_gpu.ReverseProgram(x.shape, axis);
    return this.compileAndRun(program, [x]);
  }

  concat(tensors, axis) {
    if (tensors[0].dtype === 'complex64') {
      const reals = tensors.map(t => (0, tf.real)(t));
      const imags = tensors.map(t => (0, tf.imag)(t));
      return (0, tf.complex)(this.concat(reals, axis), this.concat(imags, axis));
    }

    if (this.shouldExecuteOnCPU(tensors)) {
      return this.cpuBackend.concat(tensors, axis);
    }

    if (tensors.length === 1) {
      return tensors[0];
    }

    if (tensors.length > (0, tf.env)().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {
      const midIndex = Math.floor(tensors.length / 2);
      const leftSide = this.concat(tensors.slice(0, midIndex), axis);
      const rightSide = this.concat(tensors.slice(midIndex), axis);
      return this.concat([leftSide, rightSide], axis);
    }

    if ((0, tf.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && tensors[0].rank > 1) {
      const program = new _concat_packed_gpu.ConcatPackedProgram(tensors.map(t => t.shape), axis);
      return this.compileAndRun(program, tensors);
    } // Any concat of n-dimensional tensors across any axis can be reduced to
    // a concatenation of two-dimensional tensors across the axis 1 by first
    // partitioning the axes of the original tensors into those less than the
    // axis to be concatenated and the rest. Then reshape the tensors
    // into a two-dimensional tensor by collapsing these two sets of axes and
    // concatenate the resulting matrices across the axis 1, finally reshaping
    // the result to have the proper shape.


    const outShape = tf.backend_util.computeOutShape(tensors.map(t => t.shape), axis);
    const tensors2D = tensors.map(t => t.as2D(-1, tf.util.sizeFromShape(t.shape.slice(axis))));
    const program = new _concat_gpu.ConcatProgram(tensors2D.map(t => t.shape));
    const res = this.compileAndRun(program, tensors2D);
    return res.reshape(outShape);
  }

  neg(x) {
    if (this.shouldExecuteOnCPU([x])) {
      return this.cpuBackend.neg(x);
    }

    if ((0, tf.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
      return this.packedUnaryOp(x, unary_op.NEG, x.dtype);
    }

    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.NEG);
    return this.compileAndRun(program, [x]);
  }

  batchMatMul(a, b, transposeA, transposeB) {
    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];
    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];
    const sharedDim = transposeA ? a.shape[1] : a.shape[2];
    const [batch,,] = a.shape; // Since the matrices are vectors, it is faster to call mul().sum()
    // because sum() is O(sqrt(N)) due to divide-and-conquer.

    if ((outerShapeA === 1 || outerShapeB === 1) && sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {
      if (transposeA) {
        a = (0, tf.transpose)(a, [0, 2, 1]);
      }

      if (transposeB) {
        b = (0, tf.transpose)(b, [0, 2, 1]);
      }

      const a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);
      const axis = outerShapeB === 1 ? 2 : 1;
      const b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;
      return this.multiply(a3D, b3D).sum(axis, true
      /* keepDims */
      );
    }

    const dtype = (0, tf.upcastType)(a.dtype, b.dtype);
    const program = new _mulmat_packed_gpu.MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB);
    return this.compileAndRun(program, [a, b], dtype);
  }

  fusedBatchMatMul({
    a,
    b,
    transposeA,
    transposeB,
    bias,
    activation,
    preluActivationWeights
  }) {
    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];
    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];
    const [batch,,] = a.shape;
    const dtype = (0, tf.upcastType)(a.dtype, b.dtype);
    const hasBias = bias != null;
    const hasPreluActivationWeights = preluActivationWeights != null;
    const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;
    const program = new _mulmat_packed_gpu.MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);
    const inputs = [a, b];

    if (bias) {
      inputs.push(bias);
    }

    if (preluActivationWeights) {
      inputs.push(preluActivationWeights);
    }

    return this.compileAndRun(program, inputs, dtype);
  }

  multiply(a, b) {
    if (a.dtype === 'complex64') {
      const aData = this.texData.get(a.dataId);
      const bData = this.texData.get(b.dataId);
      const realProgram = new binaryop_complex_gpu.BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);
      const imagProgram = new binaryop_complex_gpu.BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);
      const inputs = [this.makeComplexComponentTensorInfo(a, aData.complexTensors.real), this.makeComplexComponentTensorInfo(a, aData.complexTensors.imag), this.makeComplexComponentTensorInfo(b, bData.complexTensors.real), this.makeComplexComponentTensorInfo(b, bData.complexTensors.imag)];
      const real = this.compileAndRun(realProgram, inputs);
      const imag = this.compileAndRun(imagProgram, inputs);
      const complex = this.complex(real, imag);
      real.dispose();
      imag.dispose();
      return complex;
    }

    if (this.shouldExecuteOnCPU([a, b])) {
      return this.cpuBackend.multiply(a, b);
    }

    if ((0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
      return this.packedBinaryOp(a, b, binaryop_gpu.MUL, a.dtype);
    }

    const program = new binaryop_gpu.BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);
    return this.compileAndRun(program, [a, b], a.dtype);
  }

  batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {
    const inputs = [x, mean, variance];
    let offsetShape = null;

    if (offset != null) {
      offsetShape = offset.shape;
      inputs.push(offset);
    }

    let scaleShape = null;

    if (scale != null) {
      scaleShape = scale.shape;
      inputs.push(scale);
    }

    if ((0, tf.env)().getBool('WEBGL_PACK_NORMALIZATION')) {
      const batchNormPackedProgram = new _batchnorm_packed_gpu.BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);
      return this.compileAndRun(batchNormPackedProgram, inputs);
    }

    const batchNormProgram = new _batchnorm_gpu.BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);
    return this.compileAndRun(batchNormProgram, inputs);
  }

  localResponseNormalization4D(x, radius, bias, alpha, beta) {
    const program = (0, tf.env)().getBool('WEBGL_PACK_NORMALIZATION') ? new _lrn_packed_gpu.LRNPackedProgram(x.shape, radius, bias, alpha, beta) : new _lrn_gpu.LRNProgram(x.shape, radius, bias, alpha, beta);
    return this.compileAndRun(program, [x]);
  }

  LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {
    const program = new _lrn_grad_gpu.LRNGradProgram(inputImage.shape, depthRadius, bias, alpha, beta);
    return this.compileAndRun(program, [inputImage, outputImage, dy]);
  }

  tile(x, reps) {
    if (x.dtype === 'string') {
      const data = this.readSync(x.dataId);
      const decodedData = data.map(d => tf.util.decodeString(d));
      const buf = (0, tf.buffer)(x.shape, x.dtype, decodedData);
      return tile(buf, reps);
    }

    const program = new _tile_gpu.TileProgram(x.shape, reps);
    return this.compileAndRun(program, [x]);
  }

  pad(x, paddings, constantValue) {
    const program = (0, tf.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _pad_packed_gpu.PadPackedProgram(x.shape, paddings, constantValue) : new _pad_gpu.PadProgram(x.shape, paddings, constantValue);
    return this.compileAndRun(program, [x]);
  }

  gather(x, indices, axis) {
    if (this.shouldExecuteOnCPU([x, indices])) {
      return this.cpuBackend.gather(x, indices, axis);
    }

    const program = new _gather_gpu.GatherProgram(x.shape, indices.size, axis);
    return this.compileAndRun(program, [x, indices]);
  }

  batchToSpaceND(x, blockShape, crops) {
    tf.util.assert(x.rank <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' + 'implemented yet');
    const prod = blockShape.reduce((a, b) => a * b);
    const reshaped = tf.backend_util.getReshaped(x.shape, blockShape, prod);
    const permuted = tf.backend_util.getPermuted(reshaped.length, blockShape.length);
    const reshapedPermuted = tf.backend_util.getReshapedPermuted(x.shape, blockShape, prod);
    const sliceBeginCoords = tf.backend_util.getSliceBeginCoords(crops, blockShape.length);
    const sliceSize = tf.backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);
    return (0, tf.transpose)(x.reshape(reshaped), permuted).reshape(reshapedPermuted).slice(sliceBeginCoords, sliceSize);
  }

  spaceToBatchND(x, blockShape, paddings) {
    tf.util.assert(x.rank <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' + 'implemented yet');
    const prod = blockShape.reduce((a, b) => a * b);
    const completePaddings = [[0, 0]];
    completePaddings.push(...paddings);

    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {
      completePaddings.push([0, 0]);
    }

    const paddedX = x.pad(completePaddings);
    const reshapedPaddedShape = tf.backend_util.getReshaped(paddedX.shape, blockShape, prod, false);
    const permutedReshapedPaddedPermutation = tf.backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);
    const flattenShape = tf.backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);
    const paddedXT = (0, tf.transpose)(paddedX.reshape(reshapedPaddedShape), permutedReshapedPaddedPermutation);
    return (0, tf.reshape)(paddedXT, flattenShape);
  }

  reduce(x, reduceType, dtype) {
    const batchSize = x.shape[0];
    const inSize = x.shape[1];
    const windowSize = tf.backend_util.computeOptimalWindowSize(inSize);
    const outSize = Math.ceil(inSize / windowSize);
    const reduceInfo = {
      windowSize,
      inSize,
      batchSize,
      outSize
    };
    const program = new _reduce_gpu.ReduceProgram(reduceInfo, reduceType);
    const output = this.compileAndRun(program, [x], dtype); // No need to run another GPGPU program.

    if (output.shape[1] === 1) {
      return output;
    }

    return this.reduce(output, reduceType, dtype);
  }

  argReduce(x, reduceType, bestIndicesA = null) {
    let batchSize = x.shape[0];
    let inSize = x.shape[1];

    if (bestIndicesA != null) {
      batchSize = bestIndicesA.shape[0];
      inSize = bestIndicesA.shape[1];
    }

    const windowSize = tf.backend_util.computeOptimalWindowSize(inSize);
    const reduceInfo = {
      windowSize,
      inSize,
      batchSize,
      outSize: Math.ceil(inSize / windowSize)
    };
    const program = new _argminmax_gpu.ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);
    const inputs = [x];

    if (bestIndicesA != null) {
      inputs.push(bestIndicesA);
    }

    const output = this.compileAndRun(program, inputs, 'int32'); // No need to run another GPGPU program.

    if (output.shape[1] === 1) {
      return output;
    }

    return this.argReduce(x, reduceType, output);
  }

  argReducePacked(x, reduceType, bestIndicesA = null) {
    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;
    const inSize = inShape[inShape.length - 1];
    const windowSize = tf.backend_util.computeOptimalWindowSize(inSize);
    const program = new _argminmax_packed_gpu.ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);
    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];
    const output = this.compileAndRun(program, inputs, 'int32');

    if (output.rank === x.rank) {
      return this.argReducePacked(x, reduceType, output);
    }

    return output;
  }

  sum(x, axes) {
    tf.backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);
    const [outShape, reduceShape] = tf.backend_util.computeOutAndReduceShapes(x.shape, axes);
    const inSize = tf.util.sizeFromShape(reduceShape);
    const a2D = x.as2D(-1, inSize);
    const outputDType = tf.sumOutType(x.dtype);
    return this.reduce(a2D, 'sum', outputDType).reshape(outShape);
  }

  prod(x, axes) {
    if (this.shouldExecuteOnCPU([x])) {
      return this.cpuBackend.prod(x, axes);
    }

    const [outShape, reduceShape] = tf.backend_util.computeOutAndReduceShapes(x.shape, axes);
    const inSize = tf.util.sizeFromShape(reduceShape);
    const a2D = x.as2D(-1, inSize);
    const outputDType = tf.sumOutType(x.dtype);
    return this.reduce(a2D, 'prod', outputDType).reshape(outShape);
  }

  unsortedSegmentSum(x, segmentIds, numSegments) {
    let axis = 0;
    const permutation = tf.backend_util.getAxesPermutation([axis], x.rank);
    let permutedX = x;

    if (permutation != null) {
      permutedX = (0, tf.transpose)(x, permutation);
      axis = tf.backend_util.getInnerMostAxes(1, x.rank)[0];
    }

    const outShape = segment_util.computeOutShape(permutedX.shape, axis, numSegments);
    const inSize = tf.util.sizeFromShape([permutedX.shape[axis]]);
    const a2D = permutedX.as2D(-1, inSize);
    const outputDType = tf.sumOutType(x.dtype);
    let result = this.segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments).reshape(outShape);

    if (permutation != null) {
      result = (0, tf.transpose)(result, tf.backend_util.getUndoAxesPermutation(permutation));
    }

    return result;
  }

  segOpCompute(x, segOpType, segmentIds, dtype, numSegments) {
    const batchSize = x.shape[0];
    const inSize = x.shape[1];
    const windowSize = segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);
    const segOpInfo = {
      windowSize,
      inSize,
      batchSize,
      numSegments
    };
    const program = new _segment_gpu.SegmentOpProgram(segOpInfo, segOpType);
    const output = this.compileAndRun(program, [x, segmentIds], dtype); // No need to run another GPGPU program.

    if (output.shape[1] === numSegments) {
      return output;
    }

    segmentIds = (0, tf.range)(0, numSegments).tile([inSize / windowSize]);
    return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);
  }

  argMinMaxReduce(x, axis, reduceType) {
    const axes = [axis];
    tf.backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.rank);

    if (!(0, tf.env)().getBool('WEBGL_PACK_REDUCE') || x.rank <= 2) {
      const [outShape, reduceShape] = tf.backend_util.computeOutAndReduceShapes(x.shape, axes);
      const inSize = tf.util.sizeFromShape(reduceShape);
      const a2D = x.as2D(-1, inSize);
      return this.argReduce(a2D, reduceType).reshape(outShape);
    }

    return this.argReducePacked(x, reduceType);
  }

  argMin(x, axis) {
    return this.argMinMaxReduce(x, axis, 'min');
  }

  argMax(x, axis) {
    return this.argMinMaxReduce(x, axis, 'max');
  }

  cumsum(x, axis, exclusive, reverse) {
    if (axis !== x.rank - 1) {
      throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.rank - 1} ` + `but got axis=${axis}`);
    }

    const size = x.shape[axis];
    let result = x; // Use cumsum parallel algorithm, ref:
    // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda

    for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {
      const program = new _cumsum_gpu.CumSumProgram(x.shape, false, reverse);
      const customSetup = program.getCustomSetupFunc(i);
      const prevResult = result;
      result = this.compileAndRun(program, [result], result.dtype, customSetup);
      prevResult.dispose();
    } // For exclusive cumsum, shift the end result in the direction of sum and
    // add 0 to the front index.


    if (exclusive) {
      const program = new _cumsum_gpu.CumSumProgram(x.shape, exclusive, reverse);
      const prevResult = result;
      result = this.compileAndRun(program, [result]);
      prevResult.dispose();
    }

    return result;
  }

  equal(a, b) {
    if ((0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
      return this.packedBinaryOp(a, b, binaryop_packed_gpu.EQUAL, 'bool');
    }

    const program = new binaryop_gpu.BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);
    return this.compileAndRun(program, [a, b], 'bool');
  }

  notEqual(a, b) {
    if ((0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
      return this.packedBinaryOp(a, b, binaryop_packed_gpu.NOT_EQUAL, 'bool');
    }

    const program = new binaryop_gpu.BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);
    return this.compileAndRun(program, [a, b], 'bool');
  }

  less(a, b) {
    if (this.shouldExecuteOnCPU([a, b])) {
      return this.cpuBackend.less(a, b);
    }

    if ((0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS, 'bool');
    }

    const program = new binaryop_gpu.BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);
    return this.compileAndRun(program, [a, b], 'bool');
  }

  lessEqual(a, b) {
    if ((0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS_EQUAL, 'bool');
    }

    const program = new binaryop_gpu.BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);
    return this.compileAndRun(program, [a, b], 'bool');
  }

  greater(a, b) {
    if (this.shouldExecuteOnCPU([a, b])) {
      return this.cpuBackend.greater(a, b);
    }

    if ((0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
      return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER, 'bool');
    }

    const program = new binaryop_gpu.BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);
    return this.compileAndRun(program, [a, b], 'bool');
  }

  greaterEqual(a, b) {
    if ((0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
      return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER_EQUAL, 'bool');
    }

    const program = new binaryop_gpu.BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);
    return this.compileAndRun(program, [a, b], 'bool');
  }

  logicalNot(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);
    return this.compileAndRun(program, [x]);
  }

  logicalAnd(a, b) {
    if ((0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_AND, 'bool');
    }

    const program = new binaryop_gpu.BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);
    return this.compileAndRun(program, [a, b], 'bool');
  }

  logicalOr(a, b) {
    if ((0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_OR, 'bool');
    }

    const program = new binaryop_gpu.BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);
    return this.compileAndRun(program, [a, b], 'bool');
  }

  select(condition, a, b) {
    const program = new _select_gpu.SelectProgram(condition.rank, a.shape, a.rank);
    return this.compileAndRun(program, [condition, a, b], (0, tf.upcastType)(a.dtype, b.dtype));
  }

  where(condition) {
    tf.backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');
    const condVals = condition.dataSync();
    return whereImpl(condition.shape, condVals);
  }

  topk(x, k, sorted) {
    const xVals = x.dataSync();
    return topkImpl(xVals, x.shape, x.dtype, k, sorted);
  }

  min(x, axes) {
    tf.backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);
    const [outShape, reduceShape] = tf.backend_util.computeOutAndReduceShapes(x.shape, axes);
    const inSize = tf.util.sizeFromShape(reduceShape);
    const a2D = x.as2D(-1, inSize);
    return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);
  }

  minimum(a, b) {
    if (this.shouldExecuteOnCPU([a, b])) {
      return this.cpuBackend.minimum(a, b);
    }

    const program = (0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new binaryop_packed_gpu.BinaryOpPackedProgram(binaryop_packed_gpu.MIN, a.shape, b.shape) : new binaryop_gpu.BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);
    return this.compileAndRun(program, [a, b]);
  }

  mod(a, b) {
    const program = (0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new binaryop_packed_gpu.BinaryOpPackedProgram(binaryop_packed_gpu.MOD, a.shape, b.shape) : new binaryop_gpu.BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);
    return this.compileAndRun(program, [a, b]);
  }

  maximum(a, b) {
    if (this.shouldExecuteOnCPU([a, b])) {
      return this.cpuBackend.maximum(a, b);
    }

    const program = (0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new binaryop_packed_gpu.BinaryOpPackedProgram(binaryop_packed_gpu.MAX, a.shape, b.shape) : new binaryop_gpu.BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);
    return this.compileAndRun(program, [a, b]);
  }

  all(x, axes) {
    tf.backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);
    const [outShape, reduceShape] = tf.backend_util.computeOutAndReduceShapes(x.shape, axes);
    const inSize = tf.util.sizeFromShape(reduceShape);
    const a2D = x.as2D(-1, inSize);
    return this.reduce(a2D, 'all', a2D.dtype).reshape(outShape);
  }

  any(x, axes) {
    tf.backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);
    const [outShape, reduceShape] = tf.backend_util.computeOutAndReduceShapes(x.shape, axes);
    const inSize = tf.util.sizeFromShape(reduceShape);
    const a2D = x.as2D(-1, inSize);
    return this.reduce(a2D, 'any', a2D.dtype).reshape(outShape);
  }

  floorDiv(a, b) {
    const op = binaryop_gpu.INT_DIV;
    const outputDtype = 'int32';

    if ((0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
      return this.packedBinaryOp(a, b, binaryop_packed_gpu.INT_DIV, outputDtype);
    }

    const program = new binaryop_gpu.BinaryOpProgram(op, a.shape, b.shape);
    return this.compileAndRun(program, [a, b], outputDtype);
  }

  add(a, b) {
    if (a.dtype === 'complex64' && b.dtype === 'complex64') {
      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.ADD);
    }

    if (this.shouldExecuteOnCPU([a, b])) {
      return this.cpuBackend.add(a, b);
    }

    const dtype = (0, tf.upcastType)(a.dtype, b.dtype);

    if ((0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
      return this.packedBinaryOp(a, b, binaryop_gpu.ADD, dtype);
    }

    const program = new binaryop_gpu.BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);
    return this.compileAndRun(program, [a, b], dtype);
  }

  packedUnaryOp(x, op, dtype) {
    const program = new unary_packed_op.UnaryOpPackedProgram(x.shape, op);
    return this.compileAndRun(program, [x], dtype);
  }

  packedBinaryOp(a, b, op, dtype, checkOutOfBounds = false) {
    const program = new binaryop_packed_gpu.BinaryOpPackedProgram(op, a.shape, b.shape, checkOutOfBounds);
    return this.compileAndRun(program, [a, b], dtype);
  }
  /**
   * Computes a complex binary operation that can be decomposed into a simple
   * binary operation on both the real and imagary parts.
   */


  complexSeparableBinaryOp(a, b, op) {
    const aData = this.texData.get(a.dataId);
    const bData = this.texData.get(b.dataId);
    const [real, imag] = [[aData.complexTensors.real, bData.complexTensors.real], [aData.complexTensors.imag, bData.complexTensors.imag]].map(complexParts => {
      const [aPart, bPart] = complexParts;
      const aHandle = this.makeComplexComponentTensorInfo(a, aPart);
      const bHandle = this.makeComplexComponentTensorInfo(b, bPart);
      const program = new binaryop_gpu.BinaryOpProgram(op, a.shape, b.shape);
      return this.compileAndRun(program, [aHandle, bHandle], (0, tf.upcastType)(aPart.dtype, bPart.dtype));
    });
    const complex = this.complex(real, imag);
    real.dispose();
    imag.dispose();
    return complex;
  } // Returns a TensorInfo with the complex shape and the dataId of the
  // underlying part. We need to do this because a reshaped complex tensor is
  // not reflected in its parts.


  makeComplexComponentTensorInfo(complexTensor, complexPart) {
    return {
      dataId: complexPart.dataId,
      dtype: complexPart.dtype,
      shape: complexTensor.shape
    };
  }

  addN(tensors) {
    if (tensors.length === 1) {
      return tensors[0];
    } // Limit the number of uploaded textures for optimization.


    if (tensors.length > (0, tf.env)().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {
      const midIndex = Math.floor(tensors.length / 2);
      const leftSide = this.addN(tensors.slice(0, midIndex));
      const rightSide = this.addN(tensors.slice(midIndex));
      return this.addN([leftSide, rightSide]);
    }

    const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => (0, tf.upcastType)(d1, d2));
    const shapes = tensors.map(t => t.shape); // We can make sure shapes are identical in op level.

    const usePackedOp = (0, tf.env)().getBool('WEBGL_PACK');
    const program = usePackedOp ? new _addn_packed_gpu.AddNPackedProgram(tensors[0].shape, shapes) : new _addn_gpu.AddNProgram(tensors[0].shape, shapes);
    return this.compileAndRun(program, tensors, dtype);
  }

  subtract(a, b) {
    if (a.dtype === 'complex64' && b.dtype === 'complex64') {
      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.SUB);
    }

    if (this.shouldExecuteOnCPU([a, b])) {
      return this.cpuBackend.subtract(a, b);
    }

    const dtype = (0, tf.upcastType)(a.dtype, b.dtype);

    if ((0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
      return this.packedBinaryOp(a, b, binaryop_gpu.SUB, a.dtype);
    }

    const program = new binaryop_gpu.BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);
    return this.compileAndRun(program, [a, b], dtype);
  }

  pow(a, b) {
    const usePackedOp = (0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS');
    const program = usePackedOp ? new binaryop_packed_gpu.BinaryOpPackedProgram(binaryop_packed_gpu.POW, a.shape, b.shape) : new binaryop_gpu.BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);
    const dtype = (0, tf.upcastType)(a.dtype, b.dtype);
    return this.compileAndRun(program, [a, b], dtype);
  }

  ceil(x) {
    if (this.shouldExecuteOnCPU([x])) {
      return this.cpuBackend.ceil(x);
    }

    if ((0, tf.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
      return this.packedUnaryOp(x, unary_op.CEIL, x.dtype);
    }

    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.CEIL);
    return this.compileAndRun(program, [x]);
  }

  floor(x) {
    if (this.shouldExecuteOnCPU([x])) {
      return this.cpuBackend.floor(x);
    }

    if ((0, tf.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
      return this.packedUnaryOp(x, unary_op.FLOOR, x.dtype);
    }

    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.FLOOR);
    return this.compileAndRun(program, [x]);
  }

  sign(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.SIGN);
    return this.compileAndRun(program, [x]);
  }

  isNaN(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.IS_NAN);
    return this.compileAndRun(program, [x], 'bool');
  }

  isInf(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.IS_INF);
    return this.compileAndRun(program, [x], 'bool');
  }

  isFinite(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.IS_FINITE);
    return this.compileAndRun(program, [x], 'bool');
  }

  round(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.ROUND);
    return this.compileAndRun(program, [x]);
  }

  exp(x) {
    if (this.shouldExecuteOnCPU([x])) {
      return this.cpuBackend.exp(x);
    }

    if ((0, tf.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
      return this.packedUnaryOp(x, unary_op.EXP, x.dtype);
    }

    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.EXP);
    return this.compileAndRun(program, [x]);
  }

  expm1(x) {
    if (this.shouldExecuteOnCPU([x])) {
      return this.cpuBackend.expm1(x);
    }

    if ((0, tf.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
      return this.packedUnaryOp(x, unary_op.EXPM1, x.dtype);
    }

    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.EXPM1);
    return this.compileAndRun(program, [x]);
  }

  softmax(logits, dim) {
    const axes = tf.util.parseAxisParam([dim], logits.shape); // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel
    // modularization.

    const maxLogit = (0, tf.max)(logits, axes);
    const expandedShape = tf.backend_util.expandShapeToKeepDim(maxLogit.shape, axes);
    const a = this.subtract(logits, maxLogit.reshape(expandedShape));
    const b = this.exp(a);
    const sumExp = this.sum(b, axes).reshape(expandedShape); // TODO(annxingyuan): Call divImpl rather than op as part of softmax kernel
    // modularization.

    return (0, tf.div)(b, sumExp);
  }

  log(x) {
    if (this.shouldExecuteOnCPU([x])) {
      return this.cpuBackend.log(x);
    }

    if ((0, tf.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
      return this.packedUnaryOp(x, unary_packed_op.LOG, x.dtype);
    }

    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.LOG);
    return this.compileAndRun(program, [x]);
  }

  log1p(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.LOG1P);
    return this.compileAndRun(program, [x]);
  }

  sqrt(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.SQRT);
    return this.compileAndRun(program, [x]);
  }

  rsqrt(x) {
    if (this.shouldExecuteOnCPU([x])) {
      return this.cpuBackend.rsqrt(x);
    }

    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.RSQRT);
    return this.compileAndRun(program, [x]);
  }

  reciprocal(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.RECIPROCAL);
    return this.compileAndRun(program, [x]);
  }

  relu(x) {
    let program;

    if ((0, tf.env)().getBool('WEBGL_PACK')) {
      program = new unary_packed_op.UnaryOpPackedProgram(x.shape, unary_packed_op.RELU);
    } else {
      program = new unary_op.UnaryOpProgram(x.shape, unary_op.RELU);
    }

    return this.compileAndRun(program, [x]);
  }

  relu6(x) {
    let program;

    if ((0, tf.env)().getBool('WEBGL_PACK')) {
      program = new unary_packed_op.UnaryOpPackedProgram(x.shape, unary_packed_op.RELU6);
    } else {
      program = new unary_op.UnaryOpProgram(x.shape, unary_op.RELU6);
    }

    return this.compileAndRun(program, [x]);
  }

  prelu(x, alpha) {
    const program = (0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new binaryop_packed_gpu.BinaryOpPackedProgram(binaryop_packed_gpu.PRELU, x.shape, alpha.shape) : new binaryop_gpu.BinaryOpProgram(binaryop_gpu.PRELU, x.shape, alpha.shape);
    return this.compileAndRun(program, [x, alpha]);
  }

  elu(x) {
    if ((0, tf.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
      return this.packedUnaryOp(x, unary_packed_op.ELU, x.dtype);
    }

    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.ELU);
    return this.compileAndRun(program, [x]);
  }

  eluDer(dy, y) {
    const program = (0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new binaryop_packed_gpu.BinaryOpPackedProgram(binaryop_packed_gpu.ELU_DER, dy.shape, y.shape) : new binaryop_gpu.BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);
    return this.compileAndRun(program, [dy, y]);
  }

  selu(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.SELU);
    return this.compileAndRun(program, [x]);
  }

  int(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.TO_INT);
    return this.compileAndRun(program, [x], 'int32');
  }

  clip(x, min, max) {
    let program;

    if ((0, tf.env)().getBool('WEBGL_PACK_CLIP')) {
      program = new _clip_packed_gpu.ClipPackedProgram(x.shape);
    } else {
      program = new _clip_gpu.ClipProgram(x.shape);
    }

    const customSetup = program.getCustomSetupFunc(min, max);
    return this.compileAndRun(program, [x], null, customSetup);
  }

  abs(x) {
    if (this.shouldExecuteOnCPU([x])) {
      return this.cpuBackend.abs(x);
    }

    if ((0, tf.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);
    }

    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.ABS);
    return this.compileAndRun(program, [x]);
  }

  complexAbs(x) {
    const xData = this.texData.get(x.dataId);
    const program = new _complex_abs_gpu.ComplexAbsProgram(x.shape);
    const inputs = [this.makeComplexComponentTensorInfo(x, xData.complexTensors.real), this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag)];
    return this.compileAndRun(program, inputs);
  }

  sigmoid(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.SIGMOID);
    return this.compileAndRun(program, [x]);
  }

  softplus(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.SOFTPLUS);
    return this.compileAndRun(program, [x]);
  }

  sin(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.SIN);
    return this.compileAndRun(program, [x]);
  }

  cos(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.COS);
    return this.compileAndRun(program, [x]);
  }

  tan(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.TAN);
    return this.compileAndRun(program, [x]);
  }

  asin(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.ASIN);
    return this.compileAndRun(program, [x]);
  }

  acos(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.ACOS);
    return this.compileAndRun(program, [x]);
  }

  atan(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.ATAN);
    return this.compileAndRun(program, [x]);
  }

  atan2(a, b) {
    const program = (0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new binaryop_packed_gpu.BinaryOpPackedProgram(binaryop_packed_gpu.ATAN2, a.shape, b.shape) : new binaryop_gpu.BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);
    return this.compileAndRun(program, [a, b]);
  }

  sinh(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.SINH);
    return this.compileAndRun(program, [x]);
  }

  cosh(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.COSH);
    return this.compileAndRun(program, [x]);
  }

  tanh(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.TANH);
    return this.compileAndRun(program, [x]);
  }

  asinh(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.ASINH);
    return this.compileAndRun(program, [x]);
  }

  acosh(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.ACOSH);
    return this.compileAndRun(program, [x]);
  }

  atanh(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.ATANH);
    return this.compileAndRun(program, [x]);
  }

  erf(x) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.ERF);
    return this.compileAndRun(program, [x]);
  }

  step(x, alpha) {
    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.STEP(alpha));
    return this.compileAndRun(program, [x]);
  }

  conv2dByMatMul(x, filter, convInfo, bias, activation, preluActivationWeights) {
    // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the
    // result from 2D to 4D.
    const xShape = x.shape;
    const xTexData = this.texData.get(x.dataId);
    const sharedMatMulDim = convInfo.inChannels;
    const outerShapeX = xShape[0] * xShape[1] * xShape[2];
    const outerShapeFilter = convInfo.outChannels;
    const isChannelsLast = convInfo.dataFormat === 'channelsLast';
    const transposeA = false;
    const transposeB = false; // TODO: Once reduction ops are packed, batchMatMul will always be packed
    // and we can remove this condition.

    const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) && sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;
    const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;

    if (batchMatMulWillBeUnpacked || !(0, tf.env)().getBool('WEBGL_LAZILY_UNPACK') || !(0, tf.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') || !reshapeWillBeExpensive) {
      const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] : xShape[0] * xShape[2] * xShape[3];
      const xReshaped = this.reshape(x, [1, targetShape, convInfo.inChannels]);
      const filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);
      return this.reshape(this.fusedBatchMatMul({
        a: xReshaped,
        b: filterReshaped,
        transposeA,
        transposeB,
        bias,
        activation,
        preluActivationWeights
      }), convInfo.outShape);
    } // Following optimization is specific to packed |x| with odd row count
    // (For example, in channelLast mode, 'row count' refers to x.shape[2]):
    // we avoid expensive packed 2x2 reshape by padding row count to next,
    // even number. When x.shape[2] is odd, the result of packed batchMatMul is
    // the same (has the same texture layout and and values in the texture) as
    // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like
    // even-rows tensor before the operation and, after the batchMatMul,
    // fix the even-rows result to have odd number of rows.


    const targetShape = isChannelsLast ? xShape[0] * xShape[1] * (xShape[2] + 1) : xShape[0] * xShape[2] * (xShape[3] + 1);
    const xReshaped = {
      dataId: x.dataId,
      shape: [1, targetShape, convInfo.inChannels],
      dtype: x.dtype
    }; // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.
    // Decrementing row count, after batchMatMul->...->compileProgram leads to
    // invalid row count within the reference in GPGPUBinary.inShapeInfos.
    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos
    // in compileProgram method, but that would affect compilation of all
    // programs - instead, provide a copy here, with even row count, before
    // calling batchMatMul->...->compileProgram and after that, the original
    // xTexData.shape is restored.

    const originalXTexDataShape = xTexData.shape;
    xTexData.shape = xTexData.shape.slice();
    xTexData.shape[xTexData.shape.length - 2]++;
    tf.util.assert(webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);
    const filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);
    const pointwiseConv = this.fusedBatchMatMul({
      a: xReshaped,
      b: filterReshaped,
      transposeA,
      transposeB,
      bias,
      activation,
      preluActivationWeights
    });
    const pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);
    tf.util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed'); // Restore the input shape to original.

    xTexData.shape = originalXTexDataShape; // Set the output shape - there is no need for expensive reshape as data
    // layout is already correct.

    pointwiseConvTexData.shape = convInfo.outShape;
    return (0, tf.engine)().makeTensorFromDataId(pointwiseConv.dataId, convInfo.outShape, pointwiseConv.dtype);
  }

  conv2dWithIm2Row(x, filter, convInfo, bias, activation, preluActivationWeights) {
    // Rearranges conv2d input so each block to be convolved over forms the
    // column of a new matrix with shape [filterWidth * filterHeight *
    // inChannels, outHeight * outWidth]. The filter is also rearranged so each
    // output channel forms a row of a new matrix with shape [outChannels,
    // filterWidth * filterHeight * inChannels]. The convolution is then
    // computed by multiplying these matrices and reshaping the result.
    const {
      filterWidth,
      filterHeight,
      inChannels,
      outWidth,
      outHeight,
      dataFormat
    } = convInfo;
    const isChannelsLast = dataFormat === 'channelsLast';
    const sharedDim = filterWidth * filterHeight * inChannels;
    const numCols = outHeight * outWidth;
    const x2ColShape = [sharedDim, numCols];
    const transposeA = true;
    const transposeB = false;
    const xSqueezed = x.squeeze([0]);
    const w2Row = filter.reshape([1, sharedDim, -1]);
    const im2ColProgram = new _im2col_packed_gpu.Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);
    const im2Col = this.compileAndRun(im2ColProgram, [xSqueezed]).reshape([1, x2ColShape[0], x2ColShape[1]]);
    const hasBias = bias != null;
    const hasPreluActivationWeights = preluActivationWeights != null;
    const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;
    const matmulProgram = new _mulmat_packed_gpu.MatMulPackedProgram(im2Col.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);
    const inputs = [im2Col, w2Row];

    if (bias) {
      inputs.push(bias);
    }

    if (hasPreluActivationWeights) {
      inputs.push(preluActivationWeights);
    }

    const product = this.compileAndRun(matmulProgram, inputs);

    if (isChannelsLast) {
      return product.reshape([1, outHeight, outWidth, convInfo.outChannels]);
    } else {
      return product.reshape([1, convInfo.outChannels, outHeight, outWidth]);
    }
  }

  fusedConv2d({
    input,
    filter,
    convInfo,
    bias,
    activation,
    preluActivationWeights
  }) {
    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {
      return this.conv2dByMatMul(input, filter, convInfo, bias, activation, preluActivationWeights);
    }

    if ((0, tf.env)().getBool('WEBGL_CONV_IM2COL') && input.shape[0] === 1) {
      return this.conv2dWithIm2Row(input, filter, convInfo, bias, activation, preluActivationWeights);
    }

    const hasBias = bias != null;
    const hasPreluActivationWeights = preluActivationWeights != null;
    const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;
    const program = new _conv_gpu.Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);
    const inputs = [input, filter];

    if (bias) {
      inputs.push(bias);
    }

    if (preluActivationWeights) {
      inputs.push(preluActivationWeights);
    }

    return this.compileAndRun(program, inputs);
  }

  conv2d(x, filter, convInfo) {
    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {
      return this.conv2dByMatMul(x, filter, convInfo);
    }

    if ((0, tf.env)().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {
      return this.conv2dWithIm2Row(x, filter, convInfo);
    }

    const program = new _conv_gpu.Conv2DProgram(convInfo);
    return this.compileAndRun(program, [x, filter]);
  }

  conv2dDerInput(dy, filter, convInfo) {
    const program = new _conv_backprop_gpu.Conv2DDerInputProgram(convInfo);
    return this.compileAndRun(program, [dy, filter]);
  }

  conv2dDerFilter(x, dy, convInfo) {
    const program = new _conv_backprop_gpu.Conv2DDerFilterProgram(convInfo);
    return this.compileAndRun(program, [x, dy]);
  }

  fusedDepthwiseConv2D({
    input,
    filter,
    convInfo,
    bias,
    activation,
    preluActivationWeights
  }) {
    const shouldPackDepthwiseConv = (0, tf.env)().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;
    const fusedActivation = activation ? mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) : null;
    const inputs = [input, filter];
    const hasBias = bias != null;
    const hasPreluActivationWeights = preluActivationWeights != null;

    if (hasBias) {
      inputs.push(bias);
    }

    if (hasPreluActivationWeights) {
      inputs.push(preluActivationWeights);
    }

    let program;

    if (shouldPackDepthwiseConv) {
      program = new _conv_packed_gpu_depthwise.DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);
      return this.compileAndRun(program, inputs);
    }

    program = new _conv_gpu_depthwise.DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);
    return this.compileAndRun(program, inputs);
  }

  depthwiseConv2D(x, filter, convInfo) {
    let program;

    if ((0, tf.env)().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {
      program = new _conv_packed_gpu_depthwise.DepthwiseConvPacked2DProgram(convInfo);
      return this.compileAndRun(program, [x, filter]);
    }

    program = new _conv_gpu_depthwise.DepthwiseConv2DProgram(convInfo);
    return this.compileAndRun(program, [x, filter]);
  }

  depthwiseConv2DDerInput(dy, filter, convInfo) {
    const program = new _conv_backprop_gpu_depthwise.DepthwiseConv2DDerInputProgram(convInfo);
    return this.compileAndRun(program, [dy, filter]);
  }

  depthwiseConv2DDerFilter(x, dy, convInfo) {
    const program = new _conv_backprop_gpu_depthwise.DepthwiseConv2DDerFilterProgram(convInfo);
    return this.compileAndRun(program, [x, dy]);
  }

  conv3d(x, filter, convInfo) {
    const program = new _conv_gpu.Conv3DProgram(convInfo);
    return this.compileAndRun(program, [x, filter]);
  }

  conv3dDerInput(dy, filter, convInfo) {
    const program = new _conv_backprop_gpu.Conv3DDerInputProgram(convInfo);
    return this.compileAndRun(program, [dy, filter]);
  }

  conv3dDerFilter(x, dy, convInfo) {
    const program = new _conv_backprop_gpu.Conv3DDerFilterProgram(convInfo);
    return this.compileAndRun(program, [x, dy]);
  }

  maxPool(x, convInfo) {
    const program = new _pool_gpu.Pool2DProgram(convInfo, 'max', false);
    return this.compileAndRun(program, [x]);
  }

  avgPool(x, convInfo) {
    const program = new _pool_gpu.Pool2DProgram(convInfo, 'avg', false);
    return this.compileAndRun(program, [x], 'float32');
  }

  maxPoolBackprop(dy, x, y, convInfo) {
    const getPositions = true;
    const maxPoolPositionsProgram = new _pool_gpu.Pool2DProgram(convInfo, 'max', getPositions);
    const maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [x]);
    const maxPoolBackPropProgram = new _max_pool_backprop_gpu.MaxPool2DBackpropProgram(convInfo);
    const result = this.compileAndRun(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);
    maxPoolPositions.dispose();
    return result;
  }

  avgPoolBackprop(dy, x, convInfo) {
    const avgPoolBackpropProgram = new _avg_pool_backprop_gpu.AvgPool2DBackpropProgram(convInfo);
    return this.compileAndRun(avgPoolBackpropProgram, [dy], x.dtype);
  }

  cast(x, dtype) {
    return tf.backend_util.castTensor(x, dtype, this);
  }

  unstack(x, axis) {
    const num = x.shape[axis];
    const outShape = new Array(x.rank - 1);
    let outIndex = 0;

    for (let i = 0; i < x.rank; i++) {
      if (i !== axis) {
        outShape[outIndex++] = x.shape[i];
      }
    }

    const begin = new Array(x.rank).fill(0);
    const size = x.shape.slice();
    size[axis] = 1;
    const res = new Array(num);

    for (let i = 0; i < res.length; i++) {
      begin[axis] = i;
      res[i] = this.slice(x, begin, size).reshape(outShape);
    }

    return res;
  }

  avgPool3d(x, convInfo) {
    const program = new _pool_gpu.Pool3DProgram(convInfo, 'avg', false);
    return this.compileAndRun(program, [x], 'float32');
  }

  avgPool3dBackprop(dy, x, convInfo) {
    const avgPool3dBackpropProgram = new _avg_pool_backprop_gpu.AvgPool3DBackpropProgram(convInfo);
    return this.compileAndRun(avgPool3dBackpropProgram, [dy], x.dtype);
  }

  maxPool3d(x, convInfo) {
    const program = new _pool_gpu.Pool3DProgram(convInfo, 'max', false);
    return this.compileAndRun(program, [x], 'float32');
  }

  maxPool3dBackprop(dy, x, y, convInfo) {
    const getPositions = true;
    const maxPool3dPositionsProgram = new _pool_gpu.Pool3DProgram(convInfo, 'max', getPositions);
    const maxPool3dPositions = this.compileAndRun(maxPool3dPositionsProgram, [x]);
    const maxPool3dBackPropProgram = new _max_pool_backprop_gpu.MaxPool3DBackpropProgram(convInfo);
    const result = this.compileAndRun(maxPool3dBackPropProgram, [dy, maxPool3dPositions], x.dtype);
    maxPool3dPositions.dispose();
    return result;
  }

  reshape(x, shape) {
    const texData = this.texData.get(x.dataId);

    if (texData.isPacked && !webgl_util.isReshapeFree(x.shape, shape) && !(texData.texture !== null && webgl_util.isReshapeFree(texData.shape, shape))) {
      const info = this.packedReshape(x, shape);
      return (0, tf.engine)().makeTensorFromDataId(info.dataId, info.shape, info.dtype);
    }

    return tf.backend_util.reshapeTensor(x, shape);
  }

  resizeBilinear(x, newHeight, newWidth, alignCorners) {
    const program = (0, tf.env)().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ? new _resize_bilinear_packed_gpu.ResizeBilinearPackedProgram(x.shape, newHeight, newWidth, alignCorners) : new _resize_bilinear_gpu.ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);
    return this.compileAndRun(program, [x], 'float32');
  }

  resizeBilinearBackprop(dy, x, alignCorners) {
    const program = new _resize_bilinear_backprop_gpu.ResizeBilinearBackpropProgram(dy, x, alignCorners);
    return this.compileAndRun(program, [dy]);
  }

  resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {
    const program = new _resize_nearest_neighbor_gpu.ResizeNearestNeighborProgram(x.shape, newHeight, newWidth, alignCorners);
    return this.compileAndRun(program, [x]);
  }

  resizeNearestNeighborBackprop(dy, x, alignCorners) {
    const program = new _resize_nearest_neighbor_backprop_gpu.ResizeNearestNeigborBackpropProgram(dy, x, alignCorners);
    return this.compileAndRun(program, [dy]);
  }

  multinomial(logits, normalized, numSamples, seed) {
    const probs = normalized ? logits : (0, tf.softmax)(logits);
    const batchSize = probs.shape[0];
    const numOutcomes = probs.shape[1];
    const program = new _multinomial_gpu.MultinomialProgram(batchSize, numOutcomes, numSamples);
    const customSetup = program.getCustomSetupFunc(seed);
    return this.compileAndRun(program, [probs], 'int32', customSetup);
  }

  oneHot(indices, depth, onValue, offValue) {
    const program = new _onehot_gpu.OneHotProgram(indices.size, depth, onValue, offValue);
    return this.compileAndRun(program, [indices]);
  }

  diag(x) {
    const program = new _diag_gpu.DiagProgram(x.size);
    return this.compileAndRun(program, [x]);
  }

  cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {
    const program = new _crop_and_resize_gpu.CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);
    return this.compileAndRun(program, [image, boxes, boxIndex], 'float32');
  }

  depthToSpace(x, blockSize, dataFormat) {
    tf.util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);
    const batchSize = x.shape[0];
    const inputHeight = dataFormat === 'NHWC' ? x.shape[1] : x.shape[2];
    const inputWidth = dataFormat === 'NHWC' ? x.shape[2] : x.shape[3];
    const inputDepth = dataFormat === 'NHWC' ? x.shape[3] : x.shape[1];
    const outputHeight = inputHeight * blockSize;
    const outputWidth = inputWidth * blockSize;
    const outputDepth = inputDepth / (blockSize * blockSize);
    const outputShape = dataFormat === 'NHWC' ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];
    const program = new _depth_to_space_gpu.DepthToSpaceProgram(outputShape, blockSize, dataFormat);
    return this.compileAndRun(program, [x]);
  }

  split(x, sizeSplits, axis) {
    return split(x, sizeSplits, axis);
  }

  scatterND(indices, updates, shape) {
    const {
      sliceRank,
      numUpdates,
      sliceSize,
      strides,
      outputSize
    } = tf.backend_util.calculateShapes(updates, indices, shape);
    const flattenShape = [outputSize / sliceSize, sliceSize];
    const flattenIndices = indices.reshape([numUpdates, sliceRank]);
    const flattenX = updates.reshape([numUpdates, sliceSize]);

    if (outputSize === 0) {
      return tf.backend_util.reshapeTensor((0, tf.tensor)([]), shape);
    }

    const defaultValue = (0, tf.scalar)(0);
    const program = new _scatter_gpu.ScatterProgram(numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides, flattenShape);
    const res = this.compileAndRun(program, [flattenX, flattenIndices, defaultValue]);
    return res.reshape(shape);
  }

  sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {
    const {
      sliceRank,
      numUpdates,
      strides,
      outputSize
    } = tf.backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);
    const sumDupeIndices = false;
    const program = new _scatter_gpu.ScatterProgram(numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides, [outputSize, 1], sumDupeIndices);
    const res = this.compileAndRun(program, [sparseValues, sparseIndices, defaultValue]);
    return res.reshape(outputShape);
  }

  fft(x) {
    const inverse = false;
    return this.fftImpl(x, inverse);
  }

  ifft(x) {
    const inverse = true;
    return this.fftImpl(x, inverse);
  }

  fftImpl(x, inverse) {
    const xData = this.texData.get(x.dataId);
    const realProgram = new fft_gpu.FFTProgram(fft_gpu.COMPLEX_FFT.REAL, x.shape, inverse);
    const imagProgram = new fft_gpu.FFTProgram(fft_gpu.COMPLEX_FFT.IMAG, x.shape, inverse);
    const inputs = [this.makeComplexComponentTensorInfo(x, xData.complexTensors.real), this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag)];
    const real = this.compileAndRun(realProgram, inputs);
    const imag = this.compileAndRun(imagProgram, inputs);
    const complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);
    real.dispose();
    imag.dispose();
    return complex;
  }

  gatherND(x, indices) {
    const indicesShape = indices.shape;
    const sliceRank = indicesShape[indicesShape.length - 1];
    const [resultShape, numSlices, sliceSize, strides] = tf.backend_util.prepareAndValidate(x, indices);
    const flattenIndices = indices.reshape([numSlices, sliceRank]);
    const flattenX = x.reshape([x.size / sliceSize, sliceSize]);
    const program = new _gather_nd_gpu.GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);
    const res = this.compileAndRun(program, [flattenX, flattenIndices]);
    return res.reshape(resultShape);
  }

  fill(shape, value, dtype) {
    dtype = dtype || tf.util.inferDtype(value);

    if (dtype === 'string') {
      // String type should be handled in CPU memory.
      const values = tf.util.getArrayFromDType(dtype, tf.util.sizeFromShape(shape));
      values.fill(value);
      return (0, tf.engine)().makeTensor(values, shape, dtype, this);
    } else {
      const program = new _fill_gpu.FillProgram(shape, value);
      const customSetup = program.getCustomSetupFunc(value);
      return this.compileAndRun(program, [], dtype, customSetup);
    }
  }

  onesLike(x) {
    if (x.dtype === 'string') {
      throw new Error('onesLike is not supported under string dtype');
    } else {
      // TODO(cais, smilkov): Add WebGL shader for onesLike:
      //   https://github.com/tensorflow/tfjs/issues/1293
      return this.fill(x.shape, 1, x.dtype);
    }
  }

  zerosLike(x) {
    return this.fill(x.shape, x.dtype === 'string' ? '' : 0, x.dtype);
  }

  linspace(start, stop, num) {
    // TODO: Use CPU implementation due to the precision problem in Safari.
    return tf.backend_util.linspaceImpl(start, stop, num);
  }

  makeTensorInfo(shape, dtype) {
    const dataId = this.write(null
    /* values */
    , shape, dtype);
    this.texData.get(dataId).usage = null;
    return {
      dataId,
      shape,
      dtype
    };
  }

  makeOutput(shape, dtype) {
    const {
      dataId
    } = this.makeTensorInfo(shape, dtype);
    return (0, tf.engine)().makeTensorFromDataId(dataId, shape, dtype, this);
  }

  unpackTensor(input) {
    const program = new _unpack_gpu.UnpackProgram(input.shape);
    return this.runWebGLProgram(program, [input], input.dtype);
  }

  packTensor(input) {
    const program = new _pack_gpu.PackProgram(input.shape);
    const preventEagerUnpackingOutput = true;
    return this.runWebGLProgram(program, [input], input.dtype, null
    /* customSetup */
    , preventEagerUnpackingOutput);
  }

  packedReshape(input, afterShape) {
    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];
    const input3D = {
      dtype: input.dtype,
      shape: input3DShape,
      dataId: input.dataId
    };
    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];
    const program = new _reshape_packed_gpu.ReshapePackedProgram(afterShapeAs3D, input3DShape);
    const preventEagerUnpackingOfOutput = true;
    const output = this.runWebGLProgram(program, [input3D], input.dtype, null
    /* customSetup */
    , preventEagerUnpackingOfOutput);
    return {
      dataId: output.dataId,
      shape: afterShape,
      dtype: output.dtype
    };
  }

  decode(dataId) {
    const texData = this.texData.get(dataId);
    const {
      isPacked,
      shape,
      dtype
    } = texData;
    const shapeAs3D = webgl_util.getShapeAs3D(shape);
    let program;

    if (isPacked) {
      program = new _decode_matrix_packed_gpu.DecodeMatrixPackedProgram(shapeAs3D);
    } else {
      program = new _decode_matrix_gpu.DecodeMatrixProgram(shapeAs3D);
    }

    const preventEagerUnpackingOfOutput = true;
    const out = this.runWebGLProgram(program, [{
      shape: shapeAs3D,
      dtype,
      dataId
    }], dtype, null
    /* customSetup */
    , preventEagerUnpackingOfOutput);
    return {
      dtype,
      shape,
      dataId: out.dataId
    };
  }

  runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {
    const output = this.makeTensorInfo(program.outputShape, outputDtype);
    const outData = this.texData.get(output.dataId);

    if (program.packedOutput) {
      outData.isPacked = true;
    }

    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {
      const texelShape = tex_util.getDenseTexShape(program.outputShape); // For a densely packed output, we explicitly set texShape
      // so it doesn't get assigned later according to our typical packing
      // scheme wherein a single texel can only contain values from adjacent
      // rows/cols.

      outData.texShape = texelShape.map(d => d * 2);
    }

    if (program.outTexUsage != null) {
      outData.usage = program.outTexUsage;
    }

    if (tf.util.sizeFromShape(output.shape) === 0) {
      // Short-circuit the computation since the result is empty (has 0 in its
      // shape).
      outData.values = tf.util.getTypedArrayFromDType(output.dtype, 0);
      return output;
    }

    const dataToDispose = [];
    const inputsData = inputs.map(input => {
      if (input.dtype === 'complex64') {
        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);
      }

      let texData = this.texData.get(input.dataId);

      if (texData.texture == null) {
        if (!program.packedInputs && tf.util.sizeFromShape(input.shape) <= (0, tf.env)().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {
          // Upload small tensors that live on the CPU as uniforms, not as
          // textures. Do this only when the environment supports 32bit floats
          // due to problems when comparing 16bit floats with 32bit floats.
          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it
          // possible for packed shaders to sample from uniforms.
          return {
            shape: input.shape,
            texData: null,
            isUniform: true,
            uniformValues: texData.values
          };
        } // This ensures that if a packed program's inputs have not yet been
        // uploaded to the GPU, they get uploaded as packed right off the bat.


        if (program.packedInputs) {
          texData.isPacked = true;
          texData.shape = input.shape;
        }
      } else if (!!texData.isPacked !== !!program.packedInputs) {
        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);
        dataToDispose.push(input);
        texData = this.texData.get(input.dataId);
      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {
        // This is a special case where a texture exists for a tensor
        // but the shapes are incompatible (due to packing constraints) because
        // the tensor did not have a chance to go through the packed reshape
        // shader. This only happens when we reshape the *same* tensor to form
        // *distinct* inputs to an op, e.g. dotting a vector with itself. This
        // case will disappear once packed uploading is the default.
        const savedInput = input;
        const targetShape = input.shape;
        input.shape = texData.shape;
        input = this.packedReshape(input, targetShape);
        dataToDispose.push(input);
        texData = this.texData.get(input.dataId);
        savedInput.shape = targetShape;
      }

      this.uploadToGPU(input.dataId);
      return {
        shape: input.shape,
        texData,
        isUniform: false
      };
    });
    this.uploadToGPU(output.dataId);
    const outputData = {
      shape: output.shape,
      texData: outData,
      isUniform: false
    };
    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);
    const binary = this.getAndSaveBinary(key, () => {
      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);
    });
    const shouldTimeProgram = this.activeTimers != null;
    let query;

    if (shouldTimeProgram) {
      query = this.startTimer();
    }

    gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);
    dataToDispose.forEach(info => this.disposeData(info.dataId));

    if (shouldTimeProgram) {
      query = this.endTimer(query);
      this.activeTimers.push({
        name: program.constructor.name,
        query: this.getQueryTime(query)
      });
    }

    if (!(0, tf.env)().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {
      const unpacked = this.unpackTensor(output);
      this.disposeData(output.dataId);
      return unpacked;
    }

    return output;
  }

  compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {
    outputDtype = outputDtype || inputs[0].dtype;
    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);
    return (0, tf.engine)().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);
  }

  getAndSaveBinary(key, getBinary) {
    if (!(key in this.binaryCache)) {
      this.binaryCache[key] = getBinary();
    }

    return this.binaryCache[key];
  }

  getTextureManager() {
    return this.textureManager;
  }

  dispose() {
    if (this.disposed) {
      return;
    } // Avoid disposing the compiled webgl programs during unit testing because
    // it slows down test execution.


    if (!(0, tf.env)().getBool('IS_TEST')) {
      const allKeys = Object.keys(this.binaryCache);
      allKeys.forEach(key => {
        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);
        delete this.binaryCache[key];
      });
    }

    this.textureManager.dispose();

    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {
      this.canvas.remove();
    } else {
      this.canvas = null;
    }

    if (this.gpgpuCreatedLocally) {
      this.gpgpu.program = null;
      this.gpgpu.dispose();
    }

    this.disposed = true;
  }

  floatPrecision() {
    if (this.floatPrecisionValue == null) {
      this.floatPrecisionValue = (0, tf.tidy)(() => {
        if (!(0, tf.env)().get('WEBGL_RENDER_FLOAT32_ENABLED')) {
          // Momentarily switching DEBUG flag to false so we don't throw an
          // error trying to upload a small value.
          const debugFlag = (0, tf.env)().getBool('DEBUG');
          (0, tf.env)().set('DEBUG', false);
          const underflowCheckValue = this.abs((0, tf.scalar)(1e-8)).dataSync()[0];
          (0, tf.env)().set('DEBUG', debugFlag);

          if (underflowCheckValue > 0) {
            return 32;
          }
        }

        return 16;
      });
    }

    return this.floatPrecisionValue;
  }
  /** Returns the smallest representable number.  */


  epsilon() {
    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
  }

  uploadToGPU(dataId) {
    const texData = this.texData.get(dataId);
    const {
      shape,
      dtype,
      values,
      texture,
      usage,
      isPacked
    } = texData;

    if (texture != null) {
      // Array is already on GPU. No-op.
      return;
    }

    const shouldTimeProgram = this.activeTimers != null;
    let start;

    if (shouldTimeProgram) {
      start = tf.util.now();
    }

    let texShape = texData.texShape;

    if (texShape == null) {
      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);
      texData.texShape = texShape;
    }

    if (values != null) {
      const shapeAs3D = webgl_util.getShapeAs3D(shape);
      let program;
      let width = texShape[1],
          height = texShape[0];
      const isByteArray = values instanceof Uint8Array;

      if (isPacked) {
        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);
        program = new _encode_matrix_packed_gpu.EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);
      } else {
        program = new _encode_matrix_gpu.EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);
      }

      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);

      if (isByteArray) {
        this.texData.get(tempDenseInputHandle.dataId).usage = tex_util.TextureUsage.PIXELS;
      } else {
        this.texData.get(tempDenseInputHandle.dataId).usage = tex_util.TextureUsage.UPLOAD;
      }

      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values); // We want the output to remain packed regardless of the value of
      // WEBGL_PACK.

      const preventEagerUnpacking = true;
      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking); // Have the original texture assume the identity of the encoded output.

      const outputTexData = this.texData.get(encodedOutputTarget.dataId);
      texData.texture = outputTexData.texture;
      texData.texShape = outputTexData.texShape;
      texData.isPacked = outputTexData.isPacked;
      texData.usage = outputTexData.usage;
      this.disposeData(tempDenseInputHandle.dataId);
      this.texData.delete(encodedOutputTarget.dataId); // Once uploaded, don't store the values on cpu.

      texData.values = null;

      if (shouldTimeProgram) {
        this.uploadWaitMs += tf.util.now() - start;
      }
    } else {
      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);
      texData.texture = newTexture;
    }
  }

  convertAndCacheOnCPU(dataId, float32Values) {
    const texData = this.texData.get(dataId);
    const {
      dtype
    } = texData;
    this.releaseGPUData(dataId);

    if (float32Values != null) {
      texData.values = float32ToTypedArray(float32Values, dtype);
    }

    return texData.values;
  }

  acquireTexture(texShape, texType, dtype, isPacked) {
    this.numBytesInGPU += this.computeBytes(texShape, dtype);

    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = true;
      console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);
    }

    return this.textureManager.acquireTexture(texShape, texType, isPacked);
  }

  computeBytes(shape, dtype) {
    return shape[0] * shape[1] * tf.util.bytesPerElement(dtype);
  }

}

exports.MathBackendWebGL = MathBackendWebGL;

function float32ToTypedArray(a, dtype) {
  if (dtype === 'float32' || dtype === 'complex64') {
    return a;
  } else if (dtype === 'int32' || dtype === 'bool') {
    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);

    for (let i = 0; i < result.length; ++i) {
      result[i] = Math.round(a[i]);
    }

    return result;
  } else {
    throw new Error(`Unknown dtype ${dtype}`);
  }
}
},{"./flags_webgl":"node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js","@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./addn_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js","./addn_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js","./argminmax_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js","./argminmax_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js","./avg_pool_backprop_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js","./batchnorm_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js","./batchnorm_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js","./binaryop_complex_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js","./binaryop_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js","./binaryop_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js","./canvas_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js","./clip_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js","./clip_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js","./complex_abs_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js","./concat_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js","./concat_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js","./conv_backprop_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js","./conv_backprop_gpu_depthwise":"node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js","./conv_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js","./conv_gpu_depthwise":"node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js","./conv_packed_gpu_depthwise":"node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js","./crop_and_resize_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js","./cumsum_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/cumsum_gpu.js","./decode_matrix_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js","./decode_matrix_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js","./depth_to_space_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js","./diag_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js","./encode_float_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js","./encode_float_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js","./encode_matrix_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js","./encode_matrix_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js","./fft_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js","./fill_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js","./gather_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js","./gather_nd_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js","./gpgpu_context":"node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js","./gpgpu_math":"node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js","./im2col_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js","./lrn_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js","./lrn_grad_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js","./lrn_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js","./max_pool_backprop_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js","./mulmat_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js","./multinomial_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js","./onehot_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js","./pack_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js","./pad_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js","./pad_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js","./pool_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js","./reduce_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js","./reshape_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js","./resize_bilinear_backprop_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js","./resize_bilinear_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js","./resize_bilinear_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js","./resize_nearest_neighbor_backprop_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js","./resize_nearest_neighbor_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js","./reverse_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js","./reverse_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js","./scatter_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js","./segment_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js","./select_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js","./slice_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js","./slice_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js","./strided_slice_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js","./tex_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js","./texture_manager":"node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js","./tile_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js","./unaryop_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js","./unaryop_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js","./unpack_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js","./webgl_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forceHalfFloat = forceHalfFloat;
Object.defineProperty(exports, "MathBackendWebGL", {
  enumerable: true,
  get: function () {
    return _backend_webgl.MathBackendWebGL;
  }
});
Object.defineProperty(exports, "setWebGLContext", {
  enumerable: true,
  get: function () {
    return _canvas_util.setWebGLContext;
  }
});
Object.defineProperty(exports, "GPGPUContext", {
  enumerable: true,
  get: function () {
    return _gpgpu_context.GPGPUContext;
  }
});
exports.webgl_util = exports.gpgpu_util = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var gpgpu_util = _interopRequireWildcard(require("./gpgpu_util"));

exports.gpgpu_util = gpgpu_util;

var webgl_util = _interopRequireWildcard(require("./webgl_util"));

exports.webgl_util = webgl_util;

var _backend_webgl = require("./backend_webgl");

var _canvas_util = require("./canvas_util");

var _gpgpu_context = require("./gpgpu_context");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// WebGL specific utils.

/**
 * Enforce use of half precision textures if available on the platform.
 *
 * @doc {heading: 'Environment', namespace: 'webgl'}
 */
function forceHalfFloat() {
  (0, _tfjsCore.env)().set('WEBGL_FORCE_F16_TEXTURES', true);
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./gpgpu_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js","./webgl_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js","./backend_webgl":"node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js","./canvas_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js","./gpgpu_context":"node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/base.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  webgl: true,
  version_webgl: true
};
Object.defineProperty(exports, "version_webgl", {
  enumerable: true,
  get: function () {
    return _version.version;
  }
});
exports.webgl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _backend_webgl = require("./backend_webgl");

var _version = require("./version");

var _webgl = require("./webgl");

Object.keys(_webgl).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _webgl[key];
    }
  });
});

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// base.ts is the webgl backend without auto kernel registration.
if (_tfjsCore.device_util.isBrowser()) {
  (0, _tfjsCore.registerBackend)('webgl', () => new _backend_webgl.MathBackendWebGL(), 2
  /* priority */
  );
} // Export webgl utilities


const webgl = {
  forceHalfFloat: _webgl.forceHalfFloat
};
exports.webgl = webgl;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./backend_webgl":"node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js","./version":"node_modules/@tensorflow/tfjs-core/dist/version.js","./webgl":"node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Div_impl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divImpl = divImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

var binaryop_gpu = _interopRequireWildcard(require("../binaryop_gpu"));

var binaryop_packed_gpu = _interopRequireWildcard(require("../binaryop_packed_gpu"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function divImpl(a, b, backend) {
  let program = new binaryop_gpu.BinaryOpProgram(binaryop_gpu.DIV, a.shape, b.shape);

  if ((0, _tfjsCore.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
    program = new binaryop_packed_gpu.BinaryOpPackedProgram(binaryop_packed_gpu.DIV, a.shape, b.shape, true);
  }

  const output = backend.runWebGLProgram(program, [a, b], 'float32');
  return output;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../binaryop_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js","../binaryop_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Div.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Div_impl = require("./Div_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const divConfig = {
  kernelName: _tfjsCore.Div,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    backend
  }) => {
    const {
      a,
      b
    } = inputs;
    const webglBackend = backend;
    return (0, _Div_impl.divImpl)(a, b, webglBackend);
  }
};
exports.divConfig = divConfig;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./Div_impl":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Div_impl.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/flip_left_right_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FlipLeftRightProgram = void 0;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FlipLeftRightProgram {
  constructor(imageShape) {
    this.variableNames = ['Image'];
    this.outputShape = [];
    const imageWidth = imageShape[2];
    this.outputShape = imageShape;
    this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${imageWidth} - x;
          float outputValue;
          if(coordX >= 0 && coordX < ${imageWidth}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }

}

exports.FlipLeftRightProgram = FlipLeftRightProgram;
},{}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FlipLeftRight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flipLeftRightConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _flip_left_right_gpu = require("../flip_left_right_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const flipLeftRightConfig = {
  kernelName: _tfjsCore.FlipLeftRight,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    backend
  }) => {
    const {
      image
    } = inputs;
    const webglBackend = backend;
    const program = new _flip_left_right_gpu.FlipLeftRightProgram(image.shape);
    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);
    return output;
  }
};
exports.flipLeftRightConfig = flipLeftRightConfig;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../flip_left_right_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/flip_left_right_gpu.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FromPixelsProgram = void 0;

var _glsl_version = require("../../glsl_version");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FromPixelsProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    const glsl = (0, _glsl_version.getGlslDifferences)();
    const [height, width] = outputShape;
    this.outputShape = outputShape;
    this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);

        vec4 values = ${glsl.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }

}

exports.FromPixelsProgram = FromPixelsProgram;
},{"../../glsl_version":"node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FromPixelsPackedProgram = void 0;

var _glsl_version = require("../../glsl_version");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FromPixelsPackedProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = false;
    this.packedOutput = true;
    const glsl = (0, _glsl_version.getGlslDifferences)();
    const [height, width] = outputShape;
    this.outputShape = outputShape;
    this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${width}.0, ${height}.0);
            vec4 values = ${glsl.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${glsl.output} = result;
      }
    `;
  }

}

exports.FromPixelsPackedProgram = FromPixelsPackedProgram;
},{"../../glsl_version":"node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromPixelsConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tex_util = require("../tex_util");

var _from_pixels_gpu = require("./FromPixels_utils/from_pixels_gpu");

var _from_pixels_packed_gpu = require("./FromPixels_utils/from_pixels_packed_gpu");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fromPixelsConfig = {
  kernelName: _tfjsCore.FromPixels,
  backendName: 'webgl',
  kernelFunc: fromPixels
};
exports.fromPixelsConfig = fromPixelsConfig;
let fromPixels2DContext;

function fromPixels(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  let {
    pixels
  } = inputs;
  const {
    numChannels
  } = attrs;
  const isVideo = typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement;
  const isImage = typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement;
  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];
  const texShape = [height, width];
  const outShape = [height, width, numChannels];

  if (isImage || isVideo) {
    if (fromPixels2DContext == null) {
      fromPixels2DContext = document.createElement('canvas').getContext('2d');
    }

    fromPixels2DContext.canvas.width = width;
    fromPixels2DContext.canvas.height = height;
    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
    pixels = fromPixels2DContext.canvas;
  }

  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32'); // This is a byte texture with pixels.

  backend.texData.get(tempPixelHandle.dataId).usage = _tex_util.TextureUsage.PIXELS;
  backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);
  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK') ? new _from_pixels_packed_gpu.FromPixelsPackedProgram(outShape) : new _from_pixels_gpu.FromPixelsProgram(outShape);
  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');
  backend.disposeData(tempPixelHandle.dataId);
  return res;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../tex_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js","./FromPixels_utils/from_pixels_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js","./FromPixels_utils/from_pixels_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js"}],"node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxImpl = maxImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxImpl(aVals, reduceSize, outShape, dtype) {
  const vals = _tfjsCore.util.getTypedArrayFromDType(dtype, _tfjsCore.util.sizeFromShape(outShape));

  for (let i = 0; i < vals.length; ++i) {
    const offset = i * reduceSize;
    let max = aVals[offset];

    for (let j = 0; j < reduceSize; ++j) {
      const value = aVals[offset + j];

      if (value > max) {
        max = value;
      }
    }

    vals[i] = max;
  }

  return vals;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transposeImpl = transposeImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transposeImpl(xVals, xShape, dtype, perm, newShape) {
  const xRank = xShape.length;

  const xSize = _tfjsCore.util.sizeFromShape(xShape);

  const xStrides = _tfjsCore.util.computeStrides(xShape);

  const newStrides = _tfjsCore.util.computeStrides(newShape);

  const result = _tfjsCore.util.getTypedArrayFromDType(dtype, _tfjsCore.util.sizeFromShape(newShape));

  for (let i = 0; i < xSize; ++i) {
    const loc = _tfjsCore.util.indexToLoc(i, xRank, xStrides); // Permute location.


    const newLoc = new Array(loc.length);

    for (let i = 0; i < newLoc.length; i++) {
      newLoc[i] = loc[perm[i]];
    }

    const newIndex = _tfjsCore.util.locToIndex(newLoc, xRank, newStrides);

    result[newIndex] = xVals[i];
  }

  return result;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "maxImpl", {
  enumerable: true,
  get: function () {
    return _Max_impl.maxImpl;
  }
});
Object.defineProperty(exports, "transposeImpl", {
  enumerable: true,
  get: function () {
    return _Transpose_impl.transposeImpl;
  }
});

var _Max_impl = require("./kernels/Max_impl");

var _Transpose_impl = require("./kernels/Transpose_impl");
},{"./kernels/Max_impl":"node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js","./kernels/Transpose_impl":"node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transposeImplCPU = exports.maxImplCPU = void 0;

var shared = _interopRequireWildcard(require("@tensorflow/tfjs-backend-cpu/dist/shared"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Import shared functionality from tfjs-backend-cpu without triggering
// side effects.
// tslint:disable-next-line: no-imports-from-dist
const {
  maxImpl: maxImplCPU,
  transposeImpl: transposeImplCPU
} = shared;
exports.transposeImplCPU = transposeImplCPU;
exports.maxImplCPU = maxImplCPU;
},{"@tensorflow/tfjs-backend-cpu/dist/shared":"node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reduce = reduce;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _reduce_gpu = require("../reduce_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Returns an array of configuration objects that describe each stage of the
// reduction.
function getReductionStages(inShape) {
  const stages = [];

  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {
    const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];

    const windowSize = _tfjsCore.backend_util.computeOptimalWindowSize(outSize);

    stages.push({
      inSize: outSize,
      windowSize,
      outSize: Math.ceil(outSize / windowSize)
    });
  }

  return stages;
}

function reduce(x, dtype, reductionType, backend) {
  const reductionStages = getReductionStages(x.shape);
  let result = x;

  for (let i = 0; i < reductionStages.length; i++) {
    const {
      inSize,
      windowSize,
      outSize
    } = reductionStages[i];
    const program = new _reduce_gpu.ReduceProgram({
      windowSize,
      inSize,
      batchSize: x.shape[0],
      outSize
    }, reductionType);
    const previousResult = result;
    result = backend.runWebGLProgram(program, [result], dtype);

    if (previousResult.dataId !== x.dataId) {
      backend.disposeData(previousResult.dataId);
    }
  }

  return result;
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../reduce_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reshape = reshape;

var _reshape_packed_gpu = require("../reshape_packed_gpu");

var _webgl_util = require("../webgl_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function packedReshape(input, afterShape, backend) {
  const input3DShape = [(0, _webgl_util.getBatchDim)(input.shape), ...(0, _webgl_util.getRowsCols)(input.shape)];
  const input3D = {
    dtype: input.dtype,
    shape: input3DShape,
    dataId: input.dataId
  };
  const afterShapeAs3D = [(0, _webgl_util.getBatchDim)(afterShape), ...(0, _webgl_util.getRowsCols)(afterShape)];
  const program = new _reshape_packed_gpu.ReshapePackedProgram(afterShapeAs3D, input3DShape);
  const preventEagerUnpackingOfOutput = true;
  const output = backend.runWebGLProgram(program, [input3D], input.dtype, null
  /* customSetup */
  , preventEagerUnpackingOfOutput);
  return {
    dataId: output.dataId,
    shape: afterShape,
    dtype: output.dtype
  };
}

function reshape(x, afterShape, backend) {
  const xTexData = backend.texData.get(x.dataId);

  if (xTexData.isPacked && !(0, _webgl_util.isReshapeFree)(x.shape, afterShape) && !(xTexData.texture !== null && (0, _webgl_util.isReshapeFree)(xTexData.shape, afterShape))) {
    return packedReshape(x, afterShape, backend);
  }

  return {
    dataId: x.dataId,
    shape: afterShape,
    dtype: x.dtype
  };
}
},{"../reshape_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js","../webgl_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxImpl = maxImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _reduce = require("../kernel_utils/reduce");

var _reshape = require("../kernel_utils/reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxImpl(x, reduceShape, outShape, backend) {
  const inSize = _tfjsCore.util.sizeFromShape(reduceShape);

  const xSize = _tfjsCore.util.sizeFromShape(x.shape);

  const batchSize = xSize / inSize;
  const reshapedInput = (0, _reshape.reshape)(x, [batchSize, inSize], backend);
  const reduced = (0, _reduce.reduce)(reshapedInput, x.dtype, 'max', backend);

  if (reshapedInput.dataId !== x.dataId) {
    // dispose the output of the packed reshape.
    backend.disposeData(reshapedInput.dataId);
  }

  return (0, _reshape.reshape)(reduced, outShape, backend);
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../kernel_utils/reduce":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js","../kernel_utils/reshape":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransposeProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TransposeProgram {
  constructor(aShape, newDim) {
    this.variableNames = ['A'];
    const outputShape = new Array(aShape.length);

    for (let i = 0; i < outputShape.length; i++) {
      outputShape[i] = aShape[newDim[i]];
    }

    this.outputShape = outputShape;
    this.rank = outputShape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
    const switched = getSwitchedCoords(newDim);
    this.userCode = `
    void main() {
      ${dtype} resRC = getOutputCoords();
      setOutput(getA(${switched}));
    }
    `;
  }

}

exports.TransposeProgram = TransposeProgram;

function getSwitchedCoords(newDim) {
  const rank = newDim.length;

  if (rank > 6) {
    throw Error(`Transpose for rank ${rank} is not yet supported`);
  }

  const originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];
  const switchedCoords = new Array(rank);

  for (let i = 0; i < newDim.length; i++) {
    switchedCoords[newDim[i]] = originalOrder[i];
  }

  return switchedCoords.join();
}
},{"./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransposePackedProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TransposePackedProgram {
  constructor(aShape, newDim) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    const outputShape = new Array(aShape.length);

    for (let i = 0; i < outputShape.length; i++) {
      outputShape[i] = aShape[newDim[i]];
    }

    this.outputShape = outputShape;
    this.rank = outputShape.length;

    if (this.rank > 6) {
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    }

    const dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
    const outputOrder = (0, _packing_util.getVecChannels)('rc', this.rank);
    const switchedOrder = new Array(this.rank);

    for (let i = 0; i < newDim.length; i++) {
      switchedOrder[newDim[i]] = outputOrder[i];
    }

    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;
    const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;
    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;
    this.userCode = `
    void main() {
      ${dtype} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${getc};
      if(${nextColumn}) {
        result[1] = ${getc};
      }
      --${outputOrder[this.rank - 1]};
      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {
        result[2] = ${getc};
        if(${nextColumn}) {
          result[3] = ${getc};
        }
      }
      setOutput(result);
    }
    `;
  }

}

exports.TransposePackedProgram = TransposePackedProgram;
},{"./packing_util":"node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js","./shader_compiler":"node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transposeImpl = transposeImpl;
Object.defineProperty(exports, "transposeImplCPU", {
  enumerable: true,
  get: function () {
    return _shared.transposeImplCPU;
  }
});

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

var _transpose_gpu = require("../transpose_gpu");

var _transpose_packed_gpu = require("../transpose_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transposeImpl(x, perm, backend) {
  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _transpose_packed_gpu.TransposePackedProgram(x.shape, perm) : new _transpose_gpu.TransposeProgram(x.shape, perm);
  return backend.runWebGLProgram(program, [x], x.dtype);
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../kernel_utils/shared":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js","../transpose_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js","../transpose_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

var _Max_impl = require("./Max_impl");

var _Transpose_impl = require("./Transpose_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maxConfig = {
  kernelName: _tfjsCore.Max,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      x
    } = inputs;
    const {
      reductionIndices,
      keepDims
    } = attrs;
    const webglBackend = backend;
    const xRank = x.shape.length;

    const origAxes = _tfjsCore.util.parseAxisParam(reductionIndices, x.shape);

    let axes = origAxes;

    const permutedAxes = _tfjsCore.backend_util.getAxesPermutation(axes, xRank);

    const maxInputIsTransposed = permutedAxes != null;
    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);
    let maxInput = x;

    if (maxInputIsTransposed) {
      if (shouldExecuteOnCPU) {
        const xTexData = webglBackend.texData.get(maxInput.dataId);
        const values = xTexData.values;
        const newShape = new Array(xRank);

        for (let i = 0; i < newShape.length; i++) {
          newShape[i] = x.shape[permutedAxes[i]];
        }

        const maxInputValues = (0, _Transpose_impl.transposeImplCPU)(values, x.shape, x.dtype, permutedAxes, newShape);
        maxInput = webglBackend.makeTensorInfo(newShape, x.dtype);
        const maxInputData = webglBackend.texData.get(maxInput.dataId);
        maxInputData.values = maxInputValues;
      } else {
        maxInput = (0, _Transpose_impl.transposeImpl)(x, permutedAxes, webglBackend);
      }

      axes = _tfjsCore.backend_util.getInnerMostAxes(axes.length, xRank);
    }

    _tfjsCore.backend_util.assertAxesAreInnerMostDims('max', axes, xRank);

    const [maxOutShape, reduceShape] = _tfjsCore.backend_util.computeOutAndReduceShapes(maxInput.shape, axes);

    let outShape = maxOutShape;

    if (keepDims) {
      // rather than reshape at the end, set the target shape here.
      outShape = _tfjsCore.backend_util.expandShapeToKeepDim(maxOutShape, origAxes);
    }

    let out;

    if (shouldExecuteOnCPU) {
      const xTexData = webglBackend.texData.get(maxInput.dataId);
      const values = xTexData.values;
      const outValues = (0, _shared.maxImplCPU)(values, _tfjsCore.util.sizeFromShape(reduceShape), outShape, x.dtype);
      out = webglBackend.makeTensorInfo(outShape, x.dtype);
      const outData = webglBackend.texData.get(out.dataId);
      outData.values = outValues;
    } else {
      out = (0, _Max_impl.maxImpl)(maxInput, reduceShape, outShape, webglBackend);
    }

    if (maxInputIsTransposed) {
      webglBackend.disposeData(maxInput.dataId);
    }

    return out;
  }
};
exports.maxConfig = maxConfig;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../kernel_utils/shared":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js","./Max_impl":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js","./Transpose_impl":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPoolWithArgmaxImpl = maxPoolWithArgmaxImpl;

var _pool_gpu = require("../pool_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, backend) {
  let program = new _pool_gpu.Pool2DProgram(convInfo, 'max', false);
  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');
  program = new _pool_gpu.Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);
  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');
  return [poolOutput, indexOutput];
}
},{"../pool_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPoolWithArgmaxConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _MaxPoolWithArgmax_impl = require("./MaxPoolWithArgmax_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maxPoolWithArgmaxConfig = {
  kernelName: _tfjsCore.MaxPoolWithArgmax,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      x
    } = inputs;
    const {
      filterSize,
      strides,
      pad,
      includeBatchInIndex
    } = attrs;
    const webglBackend = backend;

    _tfjsCore.util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);

    const dilations = [1, 1];

    _tfjsCore.util.assert(_tfjsCore.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);

    const convInfo = _tfjsCore.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);

    const [result, indexes] = (0, _MaxPoolWithArgmax_impl.maxPoolWithArgmaxImpl)(x, includeBatchInIndex, convInfo, webglBackend);
    return [result, indexes];
  }
};
exports.maxPoolWithArgmaxConfig = maxPoolWithArgmaxConfig;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./MaxPoolWithArgmax_impl":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionV3Config = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nonMaxSuppressionV3Config = {
  kernelName: _tfjsCore.NonMaxSuppressionV3,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    backend,
    attrs
  }) => {
    _tfjsCore.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');

    const {
      boxes,
      scores
    } = inputs;
    const {
      maxOutputSize,
      iouThreshold,
      scoreThreshold
    } = attrs;
    const gpuBackend = backend;
    const boxesVals = gpuBackend.readSync(boxes.dataId);
    const scoresVals = gpuBackend.readSync(scores.dataId);
    const maxOutputSizeVal = maxOutputSize;
    const iouThresholdVal = iouThreshold;
    const scoreThresholdVal = scoreThreshold;
    return _tfjsCore.kernel_impls.nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal);
  }
};
exports.nonMaxSuppressionV3Config = nonMaxSuppressionV3Config;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV4.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionV4Config = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nonMaxSuppressionV4Impl = _tfjsCore.kernel_impls.nonMaxSuppressionV4Impl;
const nonMaxSuppressionV4Config = {
  kernelName: _tfjsCore.NonMaxSuppressionV4,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    backend,
    attrs
  }) => {
    _tfjsCore.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');

    const {
      boxes,
      scores
    } = inputs;
    const {
      maxOutputSize,
      iouThreshold,
      scoreThreshold,
      padToMaxOutputSize
    } = attrs;
    const gpuBackend = backend;
    const boxesVals = gpuBackend.readSync(boxes.dataId);
    const scoresVals = gpuBackend.readSync(scores.dataId);
    const {
      selectedIndices,
      validOutputs
    } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
    return [selectedIndices, validOutputs];
  }
};
exports.nonMaxSuppressionV4Config = nonMaxSuppressionV4Config;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionV5Config = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nonMaxSuppressionV5Impl = _tfjsCore.kernel_impls.nonMaxSuppressionV5Impl;
const nonMaxSuppressionV5Config = {
  kernelName: _tfjsCore.NonMaxSuppressionV5,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    backend,
    attrs
  }) => {
    _tfjsCore.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');

    const {
      boxes,
      scores
    } = inputs;
    const {
      maxOutputSize,
      iouThreshold,
      scoreThreshold,
      softNmsSigma
    } = attrs;
    const gpuBackend = backend;
    const boxesVals = gpuBackend.readSync(boxes.dataId);
    const scoresVals = gpuBackend.readSync(scores.dataId);
    const maxOutputSizeVal = maxOutputSize;
    const iouThresholdVal = iouThreshold;
    const scoreThresholdVal = scoreThreshold;
    const softNmsSigmaVal = softNmsSigma;
    const {
      selectedIndices,
      selectedScores
    } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);
    return [selectedIndices, selectedScores];
  }
};
exports.nonMaxSuppressionV5Config = nonMaxSuppressionV5Config;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RotateProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class RotateProgram {
  constructor(imageShape, radians, fillValue, center) {
    this.variableNames = ['Image'];
    this.outputShape = [];
    const imageHeight = imageShape[1];
    const imageWidth = imageShape[2];
    const sinFactor = Math.sin(radians).toFixed(3);
    const cosFactor = Math.cos(radians).toFixed(3);
    this.outputShape = imageShape;

    const [centerX, centerY] = _tfjsCore.backend_util.getImageCenter(center, imageHeight, imageWidth);

    const centerXString = centerX.toFixed(3);
    const centerYString = centerY.toFixed(3);
    let fillSnippet = '';

    if (typeof fillValue === 'number') {
      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;
    } else {
      fillSnippet = `
        vec3 fill = vec3(${fillValue.join(',')});
        float outputValue = fill[coords[3]];`;
    }

    this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - ${centerXString}) * ${cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};
          float coordYFloat = (float(x) - ${centerXString}) * ${sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};
          int coordX = int(round(coordXFloat + ${centerXString}));
          int coordY = int(round(coordYFloat + ${centerYString}));
          ${fillSnippet}
          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }

}

exports.RotateProgram = RotateProgram;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RotateWithOffset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rotateWithOffsetConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _rotate_gpu = require("../rotate_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rotateWithOffsetConfig = {
  kernelName: _tfjsCore.RotateWithOffset,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      image
    } = inputs;
    const {
      radians,
      fillValue,
      center
    } = attrs;
    const webglBackend = backend;
    const program = new _rotate_gpu.RotateProgram(image.shape, radians, fillValue, center);
    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);
    return output;
  }
};
exports.rotateWithOffsetConfig = rotateWithOffsetConfig;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../rotate_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squareConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _unaryop_gpu = require("../unaryop_gpu");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const squareConfig = {
  kernelName: _tfjsCore.Square,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    backend
  }) => {
    const {
      x
    } = inputs;
    const webglBackend = backend;
    const program = new _unaryop_gpu.UnaryOpProgram(x.shape, _unaryop_gpu.SQUARE);
    return webglBackend.runWebGLProgram(program, [x], x.dtype);
  }
};
exports.squareConfig = squareConfig;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../unaryop_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squaredDifferenceConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binaryop_gpu = require("../binaryop_gpu");

var _binaryop_packed_gpu = require("../binaryop_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const squaredDifferenceConfig = {
  kernelName: _tfjsCore.SquaredDifference,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    backend
  }) => {
    const {
      a,
      b
    } = inputs;
    const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';
    const webGLBackend = backend;
    const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new _binaryop_packed_gpu.BinaryOpPackedProgram(SQUARED_DIFFERENCE, a.shape, b.shape) : new _binaryop_gpu.BinaryOpProgram(SQUARED_DIFFERENCE, a.shape, b.shape);
    return webGLBackend.compileAndRun(program, [a, b]);
  }
};
exports.squaredDifferenceConfig = squaredDifferenceConfig;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","../binaryop_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js","../binaryop_packed_gpu":"node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transposeConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Transpose_impl = require("./Transpose_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const transposeConfig = {
  kernelName: _tfjsCore.Transpose,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      x
    } = inputs;
    const {
      perm
    } = attrs;
    const webglBackend = backend;
    const xRank = x.shape.length;
    const newShape = new Array(xRank);

    for (let i = 0; i < newShape.length; i++) {
      newShape[i] = x.shape[perm[i]];
    }

    let out;

    if (webglBackend.shouldExecuteOnCPU([x])) {
      const xTexData = webglBackend.texData.get(x.dataId);
      const values = xTexData.values;
      const outValues = (0, _Transpose_impl.transposeImplCPU)(values, x.shape, x.dtype, perm, newShape);
      out = webglBackend.makeTensorInfo(newShape, x.dtype);
      const outData = webglBackend.texData.get(out.dataId);
      outData.values = outValues;
    } else {
      out = (0, _Transpose_impl.transposeImpl)(x, perm, webglBackend);
    }

    return out;
  }
};
exports.transposeConfig = transposeConfig;
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./Transpose_impl":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js":[function(require,module,exports) {
"use strict";

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Div = require("./kernels/Div");

var _FlipLeftRight = require("./kernels/FlipLeftRight");

var _FromPixels = require("./kernels/FromPixels");

var _Max = require("./kernels/Max");

var _MaxPoolWithArgmax = require("./kernels/MaxPoolWithArgmax");

var _NonMaxSuppressionV = require("./kernels/NonMaxSuppressionV3");

var _NonMaxSuppressionV2 = require("./kernels/NonMaxSuppressionV4");

var _NonMaxSuppressionV3 = require("./kernels/NonMaxSuppressionV5");

var _RotateWithOffset = require("./kernels/RotateWithOffset");

var _Square = require("./kernels/Square");

var _SquaredDifference = require("./kernels/SquaredDifference");

var _Transpose = require("./kernels/Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// List all kernel configs here
const kernelConfigs = [_Max.maxConfig, _FlipLeftRight.flipLeftRightConfig, _FromPixels.fromPixelsConfig, _Div.divConfig, _MaxPoolWithArgmax.maxPoolWithArgmaxConfig, _NonMaxSuppressionV.nonMaxSuppressionV3Config, _NonMaxSuppressionV2.nonMaxSuppressionV4Config, _NonMaxSuppressionV3.nonMaxSuppressionV5Config, _RotateWithOffset.rotateWithOffsetConfig, _Square.squareConfig, _SquaredDifference.squaredDifferenceConfig, _Transpose.transposeConfig];

for (const kernelConfig of kernelConfigs) {
  (0, _tfjsCore.registerKernel)(kernelConfig);
}
},{"@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","./kernels/Div":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Div.js","./kernels/FlipLeftRight":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FlipLeftRight.js","./kernels/FromPixels":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js","./kernels/Max":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js","./kernels/MaxPoolWithArgmax":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js","./kernels/NonMaxSuppressionV3":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js","./kernels/NonMaxSuppressionV4":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV4.js","./kernels/NonMaxSuppressionV5":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js","./kernels/RotateWithOffset":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RotateWithOffset.js","./kernels/Square":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js","./kernels/SquaredDifference":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js","./kernels/Transpose":"node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js"}],"node_modules/@tensorflow/tfjs-backend-webgl/dist/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _base = require("./base");

Object.keys(_base).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _base[key];
    }
  });
});

require("./register_all_kernels");
},{"./base":"node_modules/@tensorflow/tfjs-backend-webgl/dist/base.js","./register_all_kernels":"node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js"}],"index.js":[function(require,module,exports) {
"use strict";

var handpose = _interopRequireWildcard(require("@tensorflow-models/handpose"));

var tf = _interopRequireWildcard(require("@tensorflow/tfjs-core"));

var tfjsWasm = _interopRequireWildcard(require("@tensorflow/tfjs-backend-wasm"));

require("@tensorflow/tfjs-backend-webgl");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
tfjsWasm.setWasmPath(`https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@${tfjsWasm.version_wasm}/dist/tfjs-backend-wasm.wasm`);

function isMobile() {
  const isAndroid = /Android/i.test(navigator.userAgent);
  const isiOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);
  return isAndroid || isiOS;
}

let videoWidth,
    videoHeight,
    rafID,
    ctx,
    canvas,
    ANCHOR_POINTS,
    scatterGLHasInitialized = false,
    scatterGL,
    fingerLookupIndices = {
  thumb: [0, 1, 2, 3, 4],
  // indexFinger: [0, 5, 6, 7, 8],
  // middleFinger: [0, 9, 10, 11, 12],
  ringFinger: [0, 13, 14, 15, 16] // pinky: [0, 17, 18, 19, 20]

}; // for rendering each finger as a polyline

const VIDEO_WIDTH = 640;
const VIDEO_HEIGHT = 500;
const mobile = isMobile(); // Don't render the point cloud on mobile in order to maximize performance and
// to avoid crowding limited screen space.
// set to true if need to render keypoint cloud

const renderPointcloud = false;
const state = {
  backend: 'webgl'
};
const stats = new Stats();
stats.showPanel(0);
document.body.appendChild(stats.dom);

if (renderPointcloud) {
  state.renderPointcloud = true;
}

function setupDatGui() {
  const gui = new dat.GUI();
  gui.add(state, 'backend', ['webgl', 'wasm']).onChange(async backend => {
    window.cancelAnimationFrame(rafID);
    await tf.setBackend(backend);
    landmarksRealTime(video);
  });

  if (renderPointcloud) {
    gui.add(state, 'renderPointcloud').onChange(render => {
      document.querySelector('#scatter-gl-container').style.display = render ? 'inline-block' : 'none';
    });
  }
}

function drawPoint(y, x, r) {
  ctx.beginPath();
  ctx.arc(x, y, r, 0, 2 * Math.PI);
  ctx.fill();
}

function drawKeypoints(keypoints) {
  let keypointsArray = keypoints;
  keypointsArray = keypointsArray.slice(13, 16);
  let loggingZ = keypointsArray.map(item => item[2]);
  console.log("RESULT:", loggingZ); // let ringKeypoint = [0,0,0];
  //
  // for (let keypoint of keypointsArray) {
  //   for (let index in keypoint) {
  //     ringKeypoint[index] += keypoint[index];
  //   }
  // }
  // for (let index in ringKeypoint) {
  //   ringKeypoint[index] /= keypointsArray.length;
  // }
  //
  // console.log("RING KEYPOINT:",ringKeypoint);
  //
  //

  console.log("KEYPOINTS:", keypointsArray);

  for (let i = 0; i < keypointsArray.length; i++) {
    const y = keypointsArray[i][0];
    const x = keypointsArray[i][1];
    drawPoint(x, y, 3);
  } // const fingers = Object.keys(fingerLookupIndices);
  // for (let i = 0; i < fingers.length; i++) {
  //   const finger = fingers[i];
  //   const points = fingerLookupIndices[finger].map(idx => keypoints[idx]);
  //   drawPath(points, false);
  // }

}

function drawPath(points, closePath) {
  const region = new Path2D();
  region.moveTo(points[0][0], points[0][1]);

  for (let i = 1; i < points.length; i++) {
    const point = points[i];
    region.lineTo(point[0], point[1]);
  }

  if (closePath) {
    region.closePath();
  }

  ctx.stroke(region);
}

let model;

async function setupCamera() {
  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
    throw new Error('Browser API navigator.mediaDevices.getUserMedia not available');
  }

  const video = document.getElementById('video');
  const stream = await navigator.mediaDevices.getUserMedia({
    'audio': false,
    'video': {
      facingMode: 'user',
      // Only setting the video to a specified size in order to accommodate a
      // point cloud, so on mobile devices accept the default size.
      width: mobile ? undefined : VIDEO_WIDTH,
      height: mobile ? undefined : VIDEO_HEIGHT
    }
  });
  video.srcObject = stream;
  return new Promise(resolve => {
    video.onloadedmetadata = () => {
      resolve(video);
    };
  });
}

async function loadVideo() {
  const video = await setupCamera();
  video.play();
  return video;
}

async function main() {
  await tf.setBackend(state.backend);
  model = await handpose.load();
  let video;

  try {
    video = await loadVideo();
  } catch (e) {
    let info = document.getElementById('info');
    info.textContent = e.message;
    info.style.display = 'block';
    throw e;
  }

  setupDatGui();
  videoWidth = video.videoWidth;
  videoHeight = video.videoHeight;
  canvas = document.getElementById('output');
  canvas.width = videoWidth;
  canvas.height = videoHeight;
  video.width = videoWidth;
  video.height = videoHeight;
  ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, videoWidth, videoHeight);
  ctx.strokeStyle = 'red';
  ctx.fillStyle = 'red';
  ctx.translate(canvas.width, 0);
  ctx.scale(-1, 1); // These anchor points allow the hand pointcloud to resize according to its
  // position in the input.

  ANCHOR_POINTS = [[0, 0, 0], [0, -VIDEO_HEIGHT, 0], [-VIDEO_WIDTH, 0, 0], [-VIDEO_WIDTH, -VIDEO_HEIGHT, 0]];

  if (renderPointcloud) {
    document.querySelector('#scatter-gl-container').style = `width: ${VIDEO_WIDTH}px; height: ${VIDEO_HEIGHT}px;`;
    scatterGL = new ScatterGL(document.querySelector('#scatter-gl-container'), {
      'rotateOnStart': false,
      'selectEnabled': false
    });
  }

  landmarksRealTime(video);
}

const landmarksRealTime = async video => {
  async function frameLandmarks() {
    stats.begin();
    ctx.drawImage(video, 0, 0, videoWidth, videoHeight, 0, 0, canvas.width, canvas.height);
    const predictions = await model.estimateHands(video);

    if (predictions.length > 0) {
      const result = predictions[0].landmarks;
      drawKeypoints(result, predictions[0].annotations);

      if (renderPointcloud === true && scatterGL != null) {
        const pointsData = result.map(point => {
          return [-point[0], -point[1], -point[2]];
        });
        const dataset = new ScatterGL.Dataset([...pointsData, ...ANCHOR_POINTS]);

        if (!scatterGLHasInitialized) {
          scatterGL.render(dataset);
          const fingers = Object.keys(fingerLookupIndices);
          scatterGL.setSequences(fingers.map(finger => ({
            indices: fingerLookupIndices[finger]
          })));
          scatterGL.setPointColorer(index => {
            if (index < pointsData.length) {
              return 'steelblue';
            }

            return 'white'; // Hide.
          });
        } else {
          scatterGL.updateDataset(dataset);
        }

        scatterGLHasInitialized = true;
      }
    }

    stats.end();
    rafID = requestAnimationFrame(frameLandmarks);
  }

  ;
  frameLandmarks();
};

navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
main();
},{"@tensorflow-models/handpose":"node_modules/@tensorflow-models/handpose/dist/handpose.esm.js","@tensorflow/tfjs-core":"node_modules/@tensorflow/tfjs-core/dist/index.js","@tensorflow/tfjs-backend-wasm":"node_modules/@tensorflow/tfjs-backend-wasm/dist/tf-backend-wasm.esm.js","@tensorflow/tfjs-backend-webgl":"node_modules/@tensorflow/tfjs-backend-webgl/dist/index.js"}]},{},["index.js"], null)
//# sourceMappingURL=/demo.e31bb0bc.js.map