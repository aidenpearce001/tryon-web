/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';
declare const simpleAbsImplCPU: typeof shared.simpleAbsImpl, addImplCPU: import("@tensorflow/tfjs-backend-cpu/dist/utils/binary_types").SimpleBinaryKernelImpl, ceilImplCPU: import("@tensorflow/tfjs-backend-cpu/dist/utils/unary_types").SimpleUnaryImpl, expImplCPU: import("@tensorflow/tfjs-backend-cpu/dist/utils/unary_types").SimpleUnaryImpl, expm1ImplCPU: import("@tensorflow/tfjs-backend-cpu/dist/utils/unary_types").SimpleUnaryImpl, floorImplCPU: import("@tensorflow/tfjs-backend-cpu/dist/utils/unary_types").SimpleUnaryImpl, logImplCPU: import("@tensorflow/tfjs-backend-cpu/dist/utils/unary_types").SimpleUnaryImpl, maxImplCPU: typeof shared.maxImpl, multiplyImplCPU: import("@tensorflow/tfjs-backend-cpu/dist/utils/binary_types").SimpleBinaryKernelImpl, rsqrtImplCPU: import("@tensorflow/tfjs-backend-cpu/dist/utils/unary_types").SimpleUnaryImpl, sliceImplCPU: typeof shared.sliceImpl, subImplCPU: import("@tensorflow/tfjs-backend-cpu/dist/utils/binary_types").SimpleBinaryKernelImpl, transposeImplCPU: typeof shared.transposeImpl, uniqueImplCPU: typeof shared.uniqueImpl;
export { simpleAbsImplCPU, addImplCPU, ceilImplCPU, expImplCPU, expm1ImplCPU, logImplCPU, multiplyImplCPU, sliceImplCPU, subImplCPU, floorImplCPU, maxImplCPU, rsqrtImplCPU, transposeImplCPU, uniqueImplCPU, };
