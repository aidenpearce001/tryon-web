{"id":"node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","dependencies":[{"name":"/mnt/1T/work/tryon-web/node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js.map","includedInParent":true,"mtime":1603293791948},{"name":"/mnt/1T/work/tryon-web/node_modules/@tensorflow/tfjs-core/src/ops/buffer.ts","includedInParent":true,"mtime":1603293791948},{"name":"/mnt/1T/work/tryon-web/package.json","includedInParent":true,"mtime":1603296381928},{"name":"/mnt/1T/work/tryon-web/.babelrc","includedInParent":true,"mtime":1603293537878},{"name":"/mnt/1T/work/tryon-web/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1603293791948},{"name":"../tensor","loc":{"line":17,"column":29},"parent":"/mnt/1T/work/tryon-web/node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","resolved":"/mnt/1T/work/tryon-web/node_modules/@tensorflow/tfjs-core/dist/tensor.js"},{"name":"../util","loc":{"line":18,"column":22},"parent":"/mnt/1T/work/tryon-web/node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","resolved":"/mnt/1T/work/tryon-web/node_modules/@tensorflow/tfjs-core/dist/util.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buffer = buffer;\n\nvar _tensor = require(\"../tensor\");\n\nvar util = _interopRequireWildcard(require(\"../util\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.\n *\n * The values are stored in CPU as `TypedArray`. Fill the buffer using\n * `buffer.set()`, or by modifying directly `buffer.values`.\n *\n * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with\n * those values.\n *\n * ```js\n * // Create a buffer and set values at particular indices.\n * const buffer = tf.buffer([2, 2]);\n * buffer.set(3, 0, 0);\n * buffer.set(5, 1, 0);\n *\n * // Convert the buffer back to a tensor.\n * buffer.toTensor().print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The dtype of the buffer. Defaults to 'float32'.\n * @param values The values of the buffer as `TypedArray`. Defaults to\n * zeros.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction buffer(shape, dtype = 'float32', values) {\n  dtype = dtype || 'float32';\n  util.assertNonNegativeIntegerDimensions(shape);\n  return new _tensor.TensorBuffer(shape, dtype, values);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":16,"column":0}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":33,"column":0}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":48,"column":6},"generated":{"line":59,"column":0}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":48,"column":16},"generated":{"line":59,"column":9}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":48,"column":6},"generated":{"line":59,"column":15}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":49,"column":4},"generated":{"line":59,"column":16}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":48,"column":6},"generated":{"line":59,"column":21}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":49,"column":24},"generated":{"line":59,"column":23}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":49,"column":24},"generated":{"line":59,"column":28}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":49,"column":35},"generated":{"line":59,"column":31}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":48,"column":6},"generated":{"line":59,"column":40}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":50,"column":4},"generated":{"line":59,"column":42}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":48,"column":6},"generated":{"line":59,"column":48}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":50,"column":27},"generated":{"line":59,"column":50}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":51,"column":2},"generated":{"line":60,"column":0}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":51,"column":2},"generated":{"line":60,"column":2}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":51,"column":7},"generated":{"line":60,"column":7}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":51,"column":10},"generated":{"line":60,"column":10}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":51,"column":15},"generated":{"line":60,"column":15}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":51,"column":19},"generated":{"line":60,"column":19}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":51,"column":2},"generated":{"line":60,"column":28}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":52,"column":2},"generated":{"line":61,"column":0}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":52,"column":2},"generated":{"line":61,"column":2}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":52,"column":6},"generated":{"line":61,"column":6}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":52,"column":7},"generated":{"line":61,"column":7}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":52,"column":2},"generated":{"line":61,"column":41}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":52,"column":42},"generated":{"line":61,"column":42}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":52,"column":2},"generated":{"line":61,"column":47}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":53,"column":2},"generated":{"line":62,"column":0}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":53,"column":9},"generated":{"line":62,"column":9}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":53,"column":13},"generated":{"line":62,"column":13}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":53,"column":9},"generated":{"line":62,"column":33}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":53,"column":32},"generated":{"line":62,"column":34}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":53,"column":9},"generated":{"line":62,"column":39}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":53,"column":39},"generated":{"line":62,"column":41}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":53,"column":9},"generated":{"line":62,"column":46}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":53,"column":46},"generated":{"line":62,"column":48}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":53,"column":9},"generated":{"line":62,"column":54}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":53,"column":2},"generated":{"line":62,"column":55}},{"source":"../../src/ops/buffer.ts","name":null,"original":{"line":54,"column":1},"generated":{"line":63,"column":0}}],"sources":{"../../src/ops/buffer.ts":"/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorBuffer} from '../tensor';\nimport {DataType, DataTypeMap, Rank, ShapeMap} from '../types';\nimport * as util from '../util';\n\n/**\n * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.\n *\n * The values are stored in CPU as `TypedArray`. Fill the buffer using\n * `buffer.set()`, or by modifying directly `buffer.values`.\n *\n * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with\n * those values.\n *\n * ```js\n * // Create a buffer and set values at particular indices.\n * const buffer = tf.buffer([2, 2]);\n * buffer.set(3, 0, 0);\n * buffer.set(5, 1, 0);\n *\n * // Convert the buffer back to a tensor.\n * buffer.toTensor().print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The dtype of the buffer. Defaults to 'float32'.\n * @param values The values of the buffer as `TypedArray`. Defaults to\n * zeros.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function buffer<R extends Rank, D extends DataType = 'float32'>(\n    shape: ShapeMap[R], dtype: D = 'float32' as D,\n    values?: DataTypeMap[D]): TensorBuffer<R, D> {\n  dtype = dtype || 'float32' as D;\n  util.assertNonNegativeIntegerDimensions(shape);\n  return new TensorBuffer<R, D>(shape, dtype, values);\n}\n"},"lineCount":null}},"error":null,"hash":"84bc5d5a99fc85937b3b42fb6f4e4b54","cacheData":{"env":{}}}